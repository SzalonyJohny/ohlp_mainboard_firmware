
MAINBOARD_MARK8.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e300  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800e490  0800e490  0001e490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea6c  0800ea6c  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea6c  0800ea6c  0001ea6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea74  0800ea74  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea74  0800ea74  0001ea74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea78  0800ea78  0001ea78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800ea7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac8  20000364  0800ede0  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e2c  0800ede0  00024e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008e169  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b2c0  00000000  00000000  000ae4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002640  00000000  00000000  000b97c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ac0  00000000  00000000  000bbe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa8a  00000000  00000000  000be8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045bbf  00000000  00000000  000e934a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9fb2  00000000  00000000  0012ef09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00218ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea4  00000000  00000000  00218f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000218cb  00000000  00000000  00220db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e478 	.word	0x0800e478

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	0800e478 	.word	0x0800e478

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <_ZN3cBQ16set_inputcurrentEh>:
#include <BQ25895.hpp>


void cBQ::set_inputcurrent(uint8_t icn_mA){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	REG[0x00] = static_cast<uint8_t>(icn_mA | (EN_HIZ<<7) | (EN_ILIM<<6));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7c1b      	ldrb	r3, [r3, #16]
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	b25a      	sxtb	r2, r3
 8000eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b25a      	sxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7c5b      	ldrb	r3, [r3, #17]
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	701a      	strb	r2, [r3, #0]
	updateREG(0x00);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f97f 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_ZN3cBQ26set_inputvoltagelimitofsetEh>:

void cBQ::set_inputvoltagelimitofset(uint8_t ivlo_mV){
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70fb      	strb	r3, [r7, #3]
	REG[0x01] = static_cast<uint8_t>( ivlo_mV | (BCOLD<<5) | (BHOT[0]<<6) | (BHOT[1]<<7) );
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7c9b      	ldrb	r3, [r3, #18]
 8000eee:	015b      	lsls	r3, r3, #5
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7cdb      	ldrb	r3, [r3, #19]
 8000efe:	019b      	lsls	r3, r3, #6
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b25a      	sxtb	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7d1b      	ldrb	r3, [r3, #20]
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	705a      	strb	r2, [r3, #1]
	updateREG(0x01);
 8000f18:	2101      	movs	r1, #1
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f95a 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN3cBQ16set_startADCconvEv>:

void cBQ::set_startADCconv(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	REG[0x02] = 0b10011101;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	229d      	movs	r2, #157	; 0x9d
 8000f34:	709a      	strb	r2, [r3, #2]
	updateREG(0x02);
 8000f36:	2102      	movs	r1, #2
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f94b 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_ZN3cBQ14set_boost_modeEb>:
	battload = on;
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | battsysmin);
	updateREG(0x03);
}

void cBQ::set_boost_mode(bool on){
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
	boostmode = on;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	78fa      	ldrb	r2, [r7, #3]
 8000f56:	75da      	strb	r2, [r3, #23]
	REG[0x03] = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	70da      	strb	r2, [r3, #3]
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | (battsysmin));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7d5b      	ldrb	r3, [r3, #21]
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	b25a      	sxtb	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7ddb      	ldrb	r3, [r3, #23]
 8000f6a:	015b      	lsls	r3, r3, #5
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7d9b      	ldrb	r3, [r3, #22]
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b25a      	sxtb	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7e1b      	ldrb	r3, [r3, #24]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	70da      	strb	r2, [r3, #3]
	updateREG(0x03);
 8000f8e:	2103      	movs	r1, #3
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f91f 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_ZN3cBQ14set_battchargeEb>:

void cBQ::set_battcharge(bool on){
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	70fb      	strb	r3, [r7, #3]
	battcharge = on;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	78fa      	ldrb	r2, [r7, #3]
 8000fae:	759a      	strb	r2, [r3, #22]
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | battsysmin);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7d5b      	ldrb	r3, [r3, #21]
 8000fb4:	01db      	lsls	r3, r3, #7
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7ddb      	ldrb	r3, [r3, #23]
 8000fbc:	015b      	lsls	r3, r3, #5
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b25a      	sxtb	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7d9b      	ldrb	r3, [r3, #22]
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b25a      	sxtb	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7e1b      	ldrb	r3, [r3, #24]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	70da      	strb	r2, [r3, #3]
	updateREG(0x03);
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f8f6 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN3cBQ14set_battsysminEh>:

void cBQ::set_battsysmin(uint8_t sysmin){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	battsysmin = sysmin;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	761a      	strb	r2, [r3, #24]
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | battsysmin);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7d5b      	ldrb	r3, [r3, #21]
 8001006:	01db      	lsls	r3, r3, #7
 8001008:	b25a      	sxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7ddb      	ldrb	r3, [r3, #23]
 800100e:	015b      	lsls	r3, r3, #5
 8001010:	b25b      	sxtb	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b25a      	sxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7d9b      	ldrb	r3, [r3, #22]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	b25b      	sxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b25a      	sxtb	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7e1b      	ldrb	r3, [r3, #24]
 8001026:	b25b      	sxtb	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b25b      	sxtb	r3, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	70da      	strb	r2, [r3, #3]
	updateREG(0x03);
 8001032:	2103      	movs	r1, #3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f8cd 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN3cBQ17set_chargecurrentEh>:

void cBQ::set_chargecurrent(uint8_t ichg){
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	70fb      	strb	r3, [r7, #3]
	REG[0x04] = static_cast<uint8_t>(ichg | (EN_PUMPX<<7));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7e5b      	ldrb	r3, [r3, #25]
 8001052:	01db      	lsls	r3, r3, #7
 8001054:	b25a      	sxtb	r2, r3
 8001056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800105a:	4313      	orrs	r3, r2
 800105c:	b25b      	sxtb	r3, r3
 800105e:	b2da      	uxtb	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	711a      	strb	r2, [r3, #4]
	updateREG(0x04);
 8001064:	2104      	movs	r1, #4
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f8b4 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN3cBQ21set_precharge_currentEh>:

void cBQ::set_precharge_current(uint8_t ipregchg){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	precharge_current = ipregchg;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	78fa      	ldrb	r2, [r7, #3]
 8001084:	769a      	strb	r2, [r3, #26]
	REG[0x05] = (ipregchg) | termination_current;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7eda      	ldrb	r2, [r3, #27]
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	715a      	strb	r2, [r3, #5]
	updateREG(0x05);
 8001094:	2105      	movs	r1, #5
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f89c 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZN3cBQ23set_termination_currentEh>:

void cBQ::set_termination_current(uint8_t iterm){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
	termination_current = iterm;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	76da      	strb	r2, [r3, #27]
	REG[0x05] = (precharge_current) | iterm;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7e9a      	ldrb	r2, [r3, #26]
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	4313      	orrs	r3, r2
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	715a      	strb	r2, [r3, #5]
	updateREG(0x05);
 80010c4:	2105      	movs	r1, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f884 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN3cBQ17set_chargevoltageEh>:


void cBQ::set_chargevoltage(uint8_t uchg){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
    REG[0x06] = static_cast<uint8_t>(uchg | BATLOWV<<1 | 0<<0);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7f1b      	ldrb	r3, [r3, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b25a      	sxtb	r2, r3
 80010e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	719a      	strb	r2, [r3, #6]
    updateREG(0x06);
 80010f6:	2106      	movs	r1, #6
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f86b 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN3cBQ17set_boost_voltageEh>:

void cBQ:: set_boost_voltage(uint8_t bmvr){
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	70fb      	strb	r3, [r7, #3]
	REG[0x0A] = bmvr;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	78fa      	ldrb	r2, [r7, #3]
 8001116:	729a      	strb	r2, [r3, #10]
	updateREG(0x0A);
 8001118:	210a      	movs	r1, #10
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f85a 	bl	80011d4 <_ZN3cBQ9updateREGEh>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZN3cBQ8shipmodeEv>:
uint8_t cBQ::read_charge_adapter(){
    uint8_t charge_status = BQRead_VALUE(0x0B);
    return static_cast<uint8_t>(charge_status>>5);
}

void cBQ::shipmode(){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	REGset(0x09,0b01100100);
 8001130:	2264      	movs	r2, #100	; 0x64
 8001132:	2109      	movs	r1, #9
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f8af 	bl	8001298 <_ZN3cBQ6REGsetEhh>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZN3cBQ23set_input_voltage_limitEh>:

void cBQ::set_input_voltage_limit(uint8_t ivdpm){
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	70fb      	strb	r3, [r7, #3]
    REGset(0x0D,(1<<7) | ivdpm);
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	210d      	movs	r1, #13
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f89c 	bl	8001298 <_ZN3cBQ6REGsetEhh>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN3cBQ16read_battvoltageEv>:

uint16_t cBQ::read_battvoltage(){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	set_startADCconv();
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fed9 	bl	8000f28 <_ZN3cBQ16set_startADCconvEv>
	uint16_t reg_value = BQRead_VALUE(0x0E);
 8001176:	210e      	movs	r1, #14
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f80f 	bl	800119c <_ZN3cBQ12BQRead_VALUEEh>
 800117e:	4603      	mov	r3, r0
 8001180:	81fb      	strh	r3, [r7, #14]
	return static_cast<uint16_t>(reg_value*20+2304);
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	461a      	mov	r2, r3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	b29b      	uxth	r3, r3
 800118e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001192:	b29b      	uxth	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN3cBQ12BQRead_VALUEEh>:
	set_startADCconv();
	uint16_t reg_value = BQRead_VALUE(0x12);
	return static_cast<uint16_t>(reg_value*50);
}

uint8_t cBQ::BQRead_VALUE(unsigned char Reg){
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	uint8_t reciveBuffer = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, BQaddress, Reg, 1, &reciveBuffer, 1, 10);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a18      	ldr	r0, [r3, #32]
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	230a      	movs	r3, #10
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	f107 030f 	add.w	r3, r7, #15
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	21d4      	movs	r1, #212	; 0xd4
 80011c6:	f003 fd53 	bl	8004c70 <HAL_I2C_Mem_Read>
	return (reciveBuffer);
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZN3cBQ9updateREGEh>:

void cBQ::updateREG(uint8_t REGx){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
	REGset(REGx,REG[REGx]);
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	5cd2      	ldrb	r2, [r2, r3]
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f854 	bl	8001298 <_ZN3cBQ6REGsetEhh>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN3cBQC1Ev>:

cBQ::cBQ(){
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	REG[0x00] = 0b00001000;// HIZmode & ilim & Imput Current LIMIT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2208      	movs	r2, #8
 8001204:	701a      	strb	r2, [r3, #0]
	REG[0x01] = 0b00001110;// boost temp mode monitor & imput voltage limit offset
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	220e      	movs	r2, #14
 800120a:	705a      	strb	r2, [r3, #1]
	REG[0x02] = 0b00111101;// ADCconv settings & DCP & D+/D- & Boost f mode
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	223d      	movs	r2, #61	; 0x3d
 8001210:	709a      	strb	r2, [r3, #2]
	REG[0x03] = 0b00110000;//  boost_on & charge &
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2230      	movs	r2, #48	; 0x30
 8001216:	70da      	strb	r2, [r3, #3]
	REG[0x04] = 0b00001100;//charge current setting
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	220c      	movs	r2, #12
 800121c:	711a      	strb	r2, [r3, #4]
	REG[0x05] = 0b00010011;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2213      	movs	r2, #19
 8001222:	715a      	strb	r2, [r3, #5]
	REG[0x06] = 0b01011110;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	225e      	movs	r2, #94	; 0x5e
 8001228:	719a      	strb	r2, [r3, #6]
	REG[0x07] = 0b10011101;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	229d      	movs	r2, #157	; 0x9d
 800122e:	71da      	strb	r2, [r3, #7]

    EN_HIZ = 0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	741a      	strb	r2, [r3, #16]
    EN_ILIM = 0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	745a      	strb	r2, [r3, #17]
	BCOLD = 1;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	749a      	strb	r2, [r3, #18]
    BHOT[0]=1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	74da      	strb	r2, [r3, #19]
    BHOT[1]=1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	751a      	strb	r2, [r3, #20]
	battload=0;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	755a      	strb	r2, [r3, #21]
    battcharge=1;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	759a      	strb	r2, [r3, #22]
    boostmode=1;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	75da      	strb	r2, [r3, #23]
	battsysmin=0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	761a      	strb	r2, [r3, #24]
	EN_PUMPX = 1;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	765a      	strb	r2, [r3, #25]
    statusVBUS = 7;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2207      	movs	r2, #7
 8001270:	775a      	strb	r2, [r3, #29]
    BATLOWV = 1; //Precharge
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	771a      	strb	r2, [r3, #28]
    termination_current = 0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	76da      	strb	r2, [r3, #27]
    precharge_current = 0;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	769a      	strb	r2, [r3, #26]
    hi2c = nullptr;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
}
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_ZN3cBQ6REGsetEhh>:
//	for(int i=0;i<7;i++)tempbuff[i+1]=REG[i];
//	TWI_MasterWriteRead(&twiMaster,BQaddress,&tempbuff[0],2,0);
//	while (twiMaster.status != TWIM_STATUS_READY) {}
}

void cBQ::REGset(uint8_t reg_number, uint8_t value){
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af04      	add	r7, sp, #16
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
 80012a4:	4613      	mov	r3, r2
 80012a6:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[2] = {value, 0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	733b      	strb	r3, [r7, #12]
	if(reg_number<16)REG[reg_number] = value;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	d803      	bhi.n	80012be <_ZN3cBQ6REGsetEhh+0x26>
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	78b9      	ldrb	r1, [r7, #2]
 80012bc:	54d1      	strb	r1, [r2, r3]
	HAL_I2C_Mem_Write(hi2c, BQaddress, reg_number, 1, &temp[0], 1, 10);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a18      	ldr	r0, [r3, #32]
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	230a      	movs	r3, #10
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	21d4      	movs	r1, #212	; 0xd4
 80012d8:	f003 fbf6 	bl	8004ac8 <HAL_I2C_Mem_Write>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZN3cBQ7init_BQEP19__I2C_HandleTypeDef>:



void cBQ::init_BQ(I2C_HandleTypeDef *phic){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	hi2c = phic;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	621a      	str	r2, [r3, #32]
    REGset(0x14,0b10111001);
 80012f4:	22b9      	movs	r2, #185	; 0xb9
 80012f6:	2114      	movs	r1, #20
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffcd 	bl	8001298 <_ZN3cBQ6REGsetEhh>
	set_inputcurrent(inc_1600mA | inc_800mA | inc_400mA | inc_200mA | inc_100mA | inc_50mA); //3.25A max input current
 80012fe:	213f      	movs	r1, #63	; 0x3f
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fdcd 	bl	8000ea0 <_ZN3cBQ16set_inputcurrentEh>
	set_battsysmin(sysmin_3000mV);
 8001306:	2100      	movs	r1, #0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fe71 	bl	8000ff0 <_ZN3cBQ14set_battsysminEh>
    set_inputvoltagelimitofset(ivlo_1600mV | ivlo_800mV | ivlo_400mV | ivlo_200mV | ivlo_100mV);
 800130e:	211f      	movs	r1, #31
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fde4 	bl	8000ede <_ZN3cBQ26set_inputvoltagelimitofsetEh>

    set_chargecurrent(ichg_2048mA | ichg_1024mA);              //charge current safe 2560mA
 8001316:	2130      	movs	r1, #48	; 0x30
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fe92 	bl	8001042 <_ZN3cBQ17set_chargecurrentEh>

	set_chargevoltage(uchg_3840mV | uchg_256mV | uchg_64mV | uchg_32mV); // charge voltage = 4192mV
 800131e:	2158      	movs	r1, #88	; 0x58
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fed7 	bl	80010d4 <_ZN3cBQ17set_chargevoltageEh>
    set_boost_voltage(bmvr_4550mV | bmvr_256mV);		// measured at 4.84V
 8001326:	2140      	movs	r1, #64	; 0x40
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff feec 	bl	8001106 <_ZN3cBQ17set_boost_voltageEh>

    set_precharge_current(iprechg_512mA | Iprechg_offset_64mA);
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fe9f 	bl	8001074 <_ZN3cBQ21set_precharge_currentEh>
    set_termination_current(iterm_64mA | iterm_offset_64mA);
 8001336:	2102      	movs	r1, #2
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff feb3 	bl	80010a4 <_ZN3cBQ23set_termination_currentEh>

    set_input_voltage_limit(vinpm_6400mV | vinpm_3200mV | vinpm_1600mV | vinpm_800mV |vinpm_400mV | vinpm_200mV | vinpm_100mV);
 800133e:	217f      	movs	r1, #127	; 0x7f
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fefe 	bl	8001142 <_ZN3cBQ23set_input_voltage_limitEh>

    REGset(0x0D,0b01100000);
 8001346:	2260      	movs	r2, #96	; 0x60
 8001348:	210d      	movs	r1, #13
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa4 	bl	8001298 <_ZN3cBQ6REGsetEhh>

	REGset(0x07,0b11000001);
 8001350:	22c1      	movs	r2, #193	; 0xc1
 8001352:	2107      	movs	r1, #7
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff9f 	bl	8001298 <_ZN3cBQ6REGsetEhh>
	REGset(0x08,0b00000011);
 800135a:	2203      	movs	r2, #3
 800135c:	2108      	movs	r1, #8
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff9a 	bl	8001298 <_ZN3cBQ6REGsetEhh>
    REGset(0x09,0b01000100);
 8001364:	2244      	movs	r2, #68	; 0x44
 8001366:	2109      	movs	r1, #9
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff95 	bl	8001298 <_ZN3cBQ6REGsetEhh>
    set_startADCconv(); // to setup REG 0x02;
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fdda 	bl	8000f28 <_ZN3cBQ16set_startADCconvEv>
    update_VBUS(1,400); // update status
 8001374:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001378:	2101      	movs	r1, #1
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f804 	bl	8001388 <_ZN3cBQ11update_VBUSEbt>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN3cBQ11update_VBUSEbt>:


bool cBQ::update_VBUS(bool bq_int_flag, uint16_t max_count = 500){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
 8001394:	4613      	mov	r3, r2
 8001396:	803b      	strh	r3, [r7, #0]

    static uint8_t iterator = 0;

    if(bq_int_flag)iterator = 1;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <_ZN3cBQ11update_VBUSEbt+0x1c>
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
    if(iterator!=0){
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d018      	beq.n	80013de <_ZN3cBQ11update_VBUSEbt+0x56>
        iterator++;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80013b6:	701a      	strb	r2, [r3, #0]
        if(iterator<max_count){
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	883b      	ldrh	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	da09      	bge.n	80013d8 <_ZN3cBQ11update_VBUSEbt+0x50>
            statusVBUS = static_cast<uint8_t>(BQRead_VALUE(0x0B) >> 5);
 80013c4:	210b      	movs	r1, #11
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fee8 	bl	800119c <_ZN3cBQ12BQRead_VALUEEh>
 80013cc:	4603      	mov	r3, r0
 80013ce:	115b      	asrs	r3, r3, #5
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	775a      	strb	r2, [r3, #29]
 80013d6:	e002      	b.n	80013de <_ZN3cBQ11update_VBUSEbt+0x56>
        }
        else {
            iterator=0;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
        }
    }
    return iterator;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000380 	.word	0x20000380

080013f8 <_ZN17mainboard_form_hbC1Ev>:
 */

#include <Data_form_HB.h>
#include <algorithm>

mainboard_form_hb::mainboard_form_hb(){
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    _data.ALS = 0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	809a      	strh	r2, [r3, #4]
    _data.IR = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	80da      	strh	r2, [r3, #6]
    _recive_data_ptr = nullptr;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
    std::fill(_data.TEMP.begin(),_data.TEMP.end(), 0);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3308      	adds	r3, #8
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f87f 	bl	800151a <_ZNSt5arrayIsLj3EE5beginEv>
 800141c:	4604      	mov	r4, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3308      	adds	r3, #8
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f885 	bl	8001532 <_ZNSt5arrayIsLj3EE3endEv>
 8001428:	4601      	mov	r1, r0
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	461a      	mov	r2, r3
 8001434:	4620      	mov	r0, r4
 8001436:	f000 f889 	bl	800154c <_ZSt4fillIPsiEvT_S1_RKT0_>
}
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}

08001444 <_ZN17mainboard_form_hb6updateEv>:


void mainboard_form_hb::update(){
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	const uint8_t offset = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
    _data.ALS = static_cast<uint16_t>((_recive_data_ptr[1+offset]<<8) | _recive_data_ptr[0+offset]);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3302      	adds	r3, #2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21a      	sxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	809a      	strh	r2, [r3, #4]
    _data.IR = static_cast<uint16_t>((_recive_data_ptr[3+offset]<<8) | _recive_data_ptr[2+offset]);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3304      	adds	r3, #4
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b21a      	sxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3303      	adds	r3, #3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	80da      	strh	r2, [r3, #6]
    _data.TEMP[D1] = static_cast<int16_t>(static_cast<uint16_t>((_recive_data_ptr[5+offset]<<8) | _recive_data_ptr[4+offset]));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3306      	adds	r3, #6
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3305      	adds	r3, #5
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21c      	sxth	r4, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3308      	adds	r3, #8
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f862 	bl	800157a <_ZNSt5arrayIsLj3EEixEj>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4622      	mov	r2, r4
 80014ba:	801a      	strh	r2, [r3, #0]
    _data.TEMP[D2] = static_cast<int16_t>(static_cast<uint16_t>((_recive_data_ptr[7+offset]<<8) | _recive_data_ptr[6+offset]));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3308      	adds	r3, #8
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3307      	adds	r3, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21c      	sxth	r4, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3308      	adds	r3, #8
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f84c 	bl	800157a <_ZNSt5arrayIsLj3EEixEj>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4622      	mov	r2, r4
 80014e6:	801a      	strh	r2, [r3, #0]
    _data.TEMP[D3] = static_cast<int16_t>(static_cast<uint16_t>((_recive_data_ptr[0]<<8) | _recive_data_ptr[8+offset]));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3309      	adds	r3, #9
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21c      	sxth	r4, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3308      	adds	r3, #8
 8001504:	2102      	movs	r1, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f837 	bl	800157a <_ZNSt5arrayIsLj3EEixEj>
 800150c:	4603      	mov	r3, r0
 800150e:	4622      	mov	r2, r4
 8001510:	801a      	strh	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <_ZNSt5arrayIsLj3EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f838 	bl	8001598 <_ZNSt5arrayIsLj3EE4dataEv>
 8001528:	4603      	mov	r3, r0
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_ZNSt5arrayIsLj3EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f82c 	bl	8001598 <_ZNSt5arrayIsLj3EE4dataEv>
 8001540:	4603      	mov	r3, r0
 8001542:	3306      	adds	r3, #6
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZSt4fillIPsiEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f82a 	bl	80015b2 <_ZSt12__niter_baseIPsET_S1_>
 800155e:	4604      	mov	r4, r0
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f000 f826 	bl	80015b2 <_ZSt12__niter_baseIPsET_S1_>
 8001566:	4603      	mov	r3, r0
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f000 f82b 	bl	80015c8 <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}

0800157a <_ZNSt5arrayIsLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f838 	bl	80015fe <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>
 800158e:	4603      	mov	r3, r0
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZNSt5arrayIsLj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f83a 	bl	800161c <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_ZSt12__niter_baseIPsET_S1_>:
    __niter_base(_Iterator __it)
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d007      	beq.n	80015f2 <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x2a>
	*__first = __tmp;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	801a      	strh	r2, [r3, #0]
      for (; __first != __last; ++__first)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3302      	adds	r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e7f3      	b.n	80015da <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <_Z15MPU6050_SetDlpfh>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af04      	add	r7, sp, #16
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <_Z15MPU6050_SetDlpfh+0x64>)
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	2314      	movs	r3, #20
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2301      	movs	r3, #1
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f107 030f 	add.w	r3, r7, #15
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	221a      	movs	r2, #26
 8001654:	21d0      	movs	r1, #208	; 0xd0
 8001656:	f003 fb0b 	bl	8004c70 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	f023 0307 	bic.w	r3, r3, #7
 8001660:	b2db      	uxtb	r3, r3
 8001662:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	b2da      	uxtb	r2, r3
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	4313      	orrs	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_Z15MPU6050_SetDlpfh+0x64>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	2314      	movs	r3, #20
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	2301      	movs	r3, #1
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	f107 030f 	add.w	r3, r7, #15
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	221a      	movs	r2, #26
 800168a:	21d0      	movs	r1, #208	; 0xd0
 800168c:	f003 fa1c 	bl	8004ac8 <HAL_I2C_Mem_Write>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000384 	.word	0x20000384

0800169c <_Z19MPU6050_DeviceReseth>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <_Z19MPU6050_DeviceReseth+0x68>)
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	2314      	movs	r3, #20
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	2301      	movs	r3, #1
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	f107 030f 	add.w	r3, r7, #15
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	226b      	movs	r2, #107	; 0x6b
 80016bc:	21d0      	movs	r1, #208	; 0xd0
 80016be:	f003 fad7 	bl	8004c70 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	01db      	lsls	r3, r3, #7
 80016d0:	b25a      	sxtb	r2, r3
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <_Z19MPU6050_DeviceReseth+0x68>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	2314      	movs	r3, #20
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2301      	movs	r3, #1
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f107 030f 	add.w	r3, r7, #15
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	226b      	movs	r2, #107	; 0x6b
 80016f4:	21d0      	movs	r1, #208	; 0xd0
 80016f6:	f003 f9e7 	bl	8004ac8 <HAL_I2C_Mem_Write>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000384 	.word	0x20000384

08001708 <_Z23MPU6050_SetSleepEnabledh>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af04      	add	r7, sp, #16
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <_Z23MPU6050_SetSleepEnabledh+0x6c>)
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	2314      	movs	r3, #20
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	2301      	movs	r3, #1
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	f107 030f 	add.w	r3, r7, #15
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2301      	movs	r3, #1
 8001726:	226b      	movs	r2, #107	; 0x6b
 8001728:	21d0      	movs	r1, #208	; 0xd0
 800172a:	f003 faa1 	bl	8004c70 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001734:	b2db      	uxtb	r3, r3
 8001736:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	019b      	lsls	r3, r3, #6
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001742:	b25a      	sxtb	r2, r3
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b25b      	sxtb	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_Z23MPU6050_SetSleepEnabledh+0x6c>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	2314      	movs	r3, #20
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2301      	movs	r3, #1
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	f107 030f 	add.w	r3, r7, #15
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	226b      	movs	r2, #107	; 0x6b
 8001766:	21d0      	movs	r1, #208	; 0xd0
 8001768:	f003 f9ae 	bl	8004ac8 <HAL_I2C_Mem_Write>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000384 	.word	0x20000384

08001778 <_Z22MPU6050_SetClockSourceh>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af04      	add	r7, sp, #16
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <_Z22MPU6050_SetClockSourceh+0x64>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	2314      	movs	r3, #20
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2301      	movs	r3, #1
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	f107 030f 	add.w	r3, r7, #15
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2301      	movs	r3, #1
 8001796:	226b      	movs	r2, #107	; 0x6b
 8001798:	21d0      	movs	r1, #208	; 0xd0
 800179a:	f003 fa69 	bl	8004c70 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	f023 0307 	bic.w	r3, r3, #7
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_Z22MPU6050_SetClockSourceh+0x64>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2314      	movs	r3, #20
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030f 	add.w	r3, r7, #15
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	226b      	movs	r2, #107	; 0x6b
 80017ce:	21d0      	movs	r1, #208	; 0xd0
 80017d0:	f003 f97a 	bl	8004ac8 <HAL_I2C_Mem_Write>
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000384 	.word	0x20000384

080017e0 <_Z29MPU6050_SetFullScaleGyroRangeh>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <_Z29MPU6050_SetFullScaleGyroRangeh+0xac>)
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	2314      	movs	r3, #20
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2301      	movs	r3, #1
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f107 030f 	add.w	r3, r7, #15
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	221b      	movs	r2, #27
 8001800:	21d0      	movs	r1, #208	; 0xd0
 8001802:	f003 fa35 	bl	8004c70 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	f023 0318 	bic.w	r3, r3, #24
 800180c:	b2db      	uxtb	r3, r3
 800180e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	b25b      	sxtb	r3, r3
 8001816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181a:	b25a      	sxtb	r2, r3
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <_Z29MPU6050_SetFullScaleGyroRangeh+0xac>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	2314      	movs	r3, #20
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 030f 	add.w	r3, r7, #15
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	221b      	movs	r2, #27
 800183e:	21d0      	movs	r1, #208	; 0xd0
 8001840:	f003 f942 	bl	8004ac8 <HAL_I2C_Mem_Write>

	switch(Range)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d81a      	bhi.n	8001880 <_Z29MPU6050_SetFullScaleGyroRangeh+0xa0>
 800184a:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <_Z29MPU6050_SetFullScaleGyroRangeh+0x70>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001861 	.word	0x08001861
 8001854:	08001869 	.word	0x08001869
 8001858:	08001871 	.word	0x08001871
 800185c:	08001879 	.word	0x08001879
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 8001862:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb4>)
 8001864:	601a      	str	r2, [r3, #0]
			break;
 8001866:	e00c      	b.n	8001882 <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb8>)
 800186c:	601a      	str	r2, [r3, #0]
			break;
 800186e:	e008      	b.n	8001882 <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <_Z29MPU6050_SetFullScaleGyroRangeh+0xbc>)
 8001874:	601a      	str	r2, [r3, #0]
			break;
 8001876:	e004      	b.n	8001882 <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <_Z29MPU6050_SetFullScaleGyroRangeh+0xc0>)
 800187c:	601a      	str	r2, [r3, #0]
			break;
 800187e:	e000      	b.n	8001882 <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		default:
			break;
 8001880:	bf00      	nop
	}
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000384 	.word	0x20000384
 8001890:	2000038c 	.word	0x2000038c
 8001894:	3bfa1e3f 	.word	0x3bfa1e3f
 8001898:	3c7a2270 	.word	0x3c7a2270
 800189c:	3cf9bfdf 	.word	0x3cf9bfdf
 80018a0:	3d79c0ec 	.word	0x3d79c0ec

080018a4 <_Z30MPU6050_SetFullScaleAccelRangeh>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <_Z30MPU6050_SetFullScaleAccelRangeh+0xac>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	2314      	movs	r3, #20
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	2301      	movs	r3, #1
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f107 030f 	add.w	r3, r7, #15
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2301      	movs	r3, #1
 80018c2:	221c      	movs	r2, #28
 80018c4:	21d0      	movs	r1, #208	; 0xd0
 80018c6:	f003 f9d3 	bl	8004c70 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	f023 0318 	bic.w	r3, r3, #24
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <_Z30MPU6050_SetFullScaleAccelRangeh+0xac>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	2314      	movs	r3, #20
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2301      	movs	r3, #1
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	f107 030f 	add.w	r3, r7, #15
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2301      	movs	r3, #1
 8001900:	221c      	movs	r2, #28
 8001902:	21d0      	movs	r1, #208	; 0xd0
 8001904:	f003 f8e0 	bl	8004ac8 <HAL_I2C_Mem_Write>

	switch(Range)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d81a      	bhi.n	8001944 <_Z30MPU6050_SetFullScaleAccelRangeh+0xa0>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <_Z30MPU6050_SetFullScaleAccelRangeh+0x70>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001925 	.word	0x08001925
 8001918:	0800192d 	.word	0x0800192d
 800191c:	08001935 	.word	0x08001935
 8001920:	0800193d 	.word	0x0800193d
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <_Z30MPU6050_SetFullScaleAccelRangeh+0xb4>)
 8001928:	601a      	str	r2, [r3, #0]
			break;
 800192a:	e00c      	b.n	8001946 <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <_Z30MPU6050_SetFullScaleAccelRangeh+0xb8>)
 8001930:	601a      	str	r2, [r3, #0]
			break;
 8001932:	e008      	b.n	8001946 <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <_Z30MPU6050_SetFullScaleAccelRangeh+0xbc>)
 8001938:	601a      	str	r2, [r3, #0]
			break;
 800193a:	e004      	b.n	8001946 <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <_Z30MPU6050_SetFullScaleAccelRangeh+0xc0>)
 8001940:	601a      	str	r2, [r3, #0]
			break;
 8001942:	e000      	b.n	8001946 <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		default:
			break;
 8001944:	bf00      	nop
	}
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000384 	.word	0x20000384
 8001954:	20000388 	.word	0x20000388
 8001958:	387fda40 	.word	0x387fda40
 800195c:	38ffda40 	.word	0x38ffda40
 8001960:	397fda40 	.word	0x397fda40
 8001964:	39fff518 	.word	0x39fff518

08001968 <_Z27MPU6050_GetAccelerometerRAWPsS_S_>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af04      	add	r7, sp, #16
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <_Z27MPU6050_GetAccelerometerRAWPsS_S_+0x68>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	2314      	movs	r3, #20
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2306      	movs	r3, #6
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	223b      	movs	r2, #59	; 0x3b
 800198a:	21d0      	movs	r1, #208	; 0xd0
 800198c:	f003 f970 	bl	8004c70 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8001990:	7c3b      	ldrb	r3, [r7, #16]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21a      	sxth	r2, r3
 8001996:	7c7b      	ldrb	r3, [r7, #17]
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21a      	sxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 80019a2:	7cbb      	ldrb	r3, [r7, #18]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 80019b4:	7d3b      	ldrb	r3, [r7, #20]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	7d7b      	ldrb	r3, [r7, #21]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	4313      	orrs	r3, r2
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	801a      	strh	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000384 	.word	0x20000384

080019d4 <_Z30MPU6050_GetAccelerometerScaledPfS_S_>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
	int16_t tmp_x;
	int16_t tmp_y;
	int16_t tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 80019e0:	f107 0212 	add.w	r2, r7, #18
 80019e4:	f107 0114 	add.w	r1, r7, #20
 80019e8:	f107 0316 	add.w	r3, r7, #22
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ffbb 	bl	8001968 <_Z27MPU6050_GetAccelerometerRAWPsS_S_>

	*x = (float)tmp_x * Acc_Scale;
 80019f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <_Z30MPU6050_GetAccelerometerScaledPfS_S_+0x7c>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 8001a0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <_Z30MPU6050_GetAccelerometerScaledPfS_S_+0x7c>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 8001a2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <_Z30MPU6050_GetAccelerometerScaledPfS_S_+0x7c>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edc3 7a00 	vstr	s15, [r3]
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000388 	.word	0x20000388

08001a54 <_Z23MPU6050_GetGyroscopeRAWPsS_S_>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <_Z23MPU6050_GetGyroscopeRAWPsS_S_+0x68>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	2314      	movs	r3, #20
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	2306      	movs	r3, #6
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2301      	movs	r3, #1
 8001a74:	2243      	movs	r2, #67	; 0x43
 8001a76:	21d0      	movs	r1, #208	; 0xd0
 8001a78:	f003 f8fa 	bl	8004c70 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8001a7c:	7c3b      	ldrb	r3, [r7, #16]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	7c7b      	ldrb	r3, [r7, #17]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 8001a8e:	7cbb      	ldrb	r3, [r7, #18]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	7cfb      	ldrb	r3, [r7, #19]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	7d7b      	ldrb	r3, [r7, #21]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	801a      	strh	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000384 	.word	0x20000384

08001ac0 <_Z26MPU6050_GetGyroscopeScaledPfS_S_>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
	int16_t tmp_x;
	int16_t tmp_y;
	int16_t tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 8001acc:	f107 0212 	add.w	r2, r7, #18
 8001ad0:	f107 0114 	add.w	r1, r7, #20
 8001ad4:	f107 0316 	add.w	r3, r7, #22
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ffbb 	bl	8001a54 <_Z23MPU6050_GetGyroscopeRAWPsS_S_>

	*x = (float)tmp_x * Gyr_Scale;
 8001ade:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <_Z26MPU6050_GetGyroscopeScaledPfS_S_+0x7c>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 8001afa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <_Z26MPU6050_GetGyroscopeScaledPfS_S_+0x7c>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 8001b16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <_Z26MPU6050_GetGyroscopeScaledPfS_S_+0x7c>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000038c 	.word	0x2000038c

08001b40 <_Z12MPU6050_InitP19__I2C_HandleTypeDef>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 8001b48:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <_Z12MPU6050_InitP19__I2C_HandleTypeDef+0x3c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fda4 	bl	800169c <_Z19MPU6050_DeviceReseth>
    MPU6050_SetSleepEnabled(0);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fdd7 	bl	8001708 <_Z23MPU6050_SetSleepEnabledh>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff fe0c 	bl	8001778 <_Z22MPU6050_SetClockSourceh>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8001b60:	2004      	movs	r0, #4
 8001b62:	f7ff fd67 	bl	8001634 <_Z15MPU6050_SetDlpfh>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff fe3a 	bl	80017e0 <_Z29MPU6050_SetFullScaleGyroRangeh>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff fe99 	bl	80018a4 <_Z30MPU6050_SetFullScaleAccelRangeh>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000384 	.word	0x20000384

08001b80 <_Z22Start_IMU_Gesture_TaskPKv>:
float gyr_x;
float gyr_y;
float gyr_z;


void Start_IMU_Gesture_Task([[maybe_unused]] void const * argument){
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b0a0      	sub	sp, #128	; 0x80
 8001b86:	af0a      	add	r7, sp, #40	; 0x28
 8001b88:	6178      	str	r0, [r7, #20]


	MPU6050_Init(&hi2c1);
 8001b8a:	4847      	ldr	r0, [pc, #284]	; (8001ca8 <_Z22Start_IMU_Gesture_TaskPKv+0x128>)
 8001b8c:	f7ff ffd8 	bl	8001b40 <_Z12MPU6050_InitP19__I2C_HandleTypeDef>
	MPU6050_SetSleepEnabled(0);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fdb9 	bl	8001708 <_Z23MPU6050_SetSleepEnabledh>
	MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fdee 	bl	8001778 <_Z22MPU6050_SetClockSourceh>
	MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8001b9c:	2004      	movs	r0, #4
 8001b9e:	f7ff fd49 	bl	8001634 <_Z15MPU6050_SetDlpfh>
	MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fe1c 	bl	80017e0 <_Z29MPU6050_SetFullScaleGyroRangeh>
	MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f7ff fe7b 	bl	80018a4 <_Z30MPU6050_SetFullScaleAccelRangeh>
	MPU6050_SetSleepEnabled(0);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fdaa 	bl	8001708 <_Z23MPU6050_SetSleepEnabledh>
	MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fddf 	bl	8001778 <_Z22MPU6050_SetClockSourceh>
	MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8001bba:	2004      	movs	r0, #4
 8001bbc:	f7ff fd3a 	bl	8001634 <_Z15MPU6050_SetDlpfh>
	MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fe0d 	bl	80017e0 <_Z29MPU6050_SetFullScaleGyroRangeh>
	MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fe6c 	bl	80018a4 <_Z30MPU6050_SetFullScaleAccelRangeh>
	MPU6050_SetSleepEnabled(0);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fd9b 	bl	8001708 <_Z23MPU6050_SetSleepEnabledh>
	MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fdd0 	bl	8001778 <_Z22MPU6050_SetClockSourceh>
	MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8001bd8:	2004      	movs	r0, #4
 8001bda:	f7ff fd2b 	bl	8001634 <_Z15MPU6050_SetDlpfh>
	MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7ff fdfe 	bl	80017e0 <_Z29MPU6050_SetFullScaleGyroRangeh>
	MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff fe5d 	bl	80018a4 <_Z30MPU6050_SetFullScaleAccelRangeh>



	MX_USB_DEVICE_Init();
 8001bea:	f009 fadb 	bl	800b1a4 <MX_USB_DEVICE_Init>
	char data[64];

	for(;;){


		osDelay(100);
 8001bee:	2064      	movs	r0, #100	; 0x64
 8001bf0:	f007 fde4 	bl	80097bc <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf8:	482c      	ldr	r0, [pc, #176]	; (8001cac <_Z22Start_IMU_Gesture_TaskPKv+0x12c>)
 8001bfa:	f002 fd83 	bl	8004704 <HAL_GPIO_TogglePin>

		MPU6050_GetAccelerometerScaled(&acc_x, &acc_y, &acc_z);
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <_Z22Start_IMU_Gesture_TaskPKv+0x130>)
 8001c00:	492c      	ldr	r1, [pc, #176]	; (8001cb4 <_Z22Start_IMU_Gesture_TaskPKv+0x134>)
 8001c02:	482d      	ldr	r0, [pc, #180]	; (8001cb8 <_Z22Start_IMU_Gesture_TaskPKv+0x138>)
 8001c04:	f7ff fee6 	bl	80019d4 <_Z30MPU6050_GetAccelerometerScaledPfS_S_>
		MPU6050_GetGyroscopeScaled(&gyr_x, &gyr_y,	 &gyr_z);
 8001c08:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <_Z22Start_IMU_Gesture_TaskPKv+0x13c>)
 8001c0a:	492d      	ldr	r1, [pc, #180]	; (8001cc0 <_Z22Start_IMU_Gesture_TaskPKv+0x140>)
 8001c0c:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <_Z22Start_IMU_Gesture_TaskPKv+0x144>)
 8001c0e:	f7ff ff57 	bl	8001ac0 <_Z26MPU6050_GetGyroscopeScaledPfS_S_>





		sprintf((data), "a_x =  %f | a_y = %f | a_z = %f | g_x = %f | g_y = %f | g_z = %f \r",
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <_Z22Start_IMU_Gesture_TaskPKv+0x138>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc96 	bl	8000548 <__aeabi_f2d>
 8001c1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <_Z22Start_IMU_Gesture_TaskPKv+0x134>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc8f 	bl	8000548 <__aeabi_f2d>
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	460d      	mov	r5, r1
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <_Z22Start_IMU_Gesture_TaskPKv+0x130>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	4680      	mov	r8, r0
 8001c3a:	4689      	mov	r9, r1
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <_Z22Start_IMU_Gesture_TaskPKv+0x144>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc81 	bl	8000548 <__aeabi_f2d>
 8001c46:	4682      	mov	sl, r0
 8001c48:	468b      	mov	fp, r1
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <_Z22Start_IMU_Gesture_TaskPKv+0x140>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc7a 	bl	8000548 <__aeabi_f2d>
 8001c54:	e9c7 0100 	strd	r0, r1, [r7]
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <_Z22Start_IMU_Gesture_TaskPKv+0x13c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc73 	bl	8000548 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	f107 0018 	add.w	r0, r7, #24
 8001c6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001c6e:	ed97 7b00 	vldr	d7, [r7]
 8001c72:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c76:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c7a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c7e:	e9cd 4500 	strd	r4, r5, [sp]
 8001c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c86:	4910      	ldr	r1, [pc, #64]	; (8001cc8 <_Z22Start_IMU_Gesture_TaskPKv+0x148>)
 8001c88:	f00a fa9e 	bl	800c1c8 <siprintf>
				acc_x, acc_y, acc_z, gyr_x, gyr_y, gyr_z);


		CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8001c8c:	f107 0318 	add.w	r3, r7, #24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fa9d 	bl	80001d0 <strlen>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f009 fad1 	bl	800b248 <CDC_Transmit_FS>
		osDelay(100);
 8001ca6:	e7a2      	b.n	8001bee <_Z22Start_IMU_Gesture_TaskPKv+0x6e>
 8001ca8:	20003cc8 	.word	0x20003cc8
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	20000398 	.word	0x20000398
 8001cb4:	20000394 	.word	0x20000394
 8001cb8:	20000390 	.word	0x20000390
 8001cbc:	200003a4 	.word	0x200003a4
 8001cc0:	200003a0 	.word	0x200003a0
 8001cc4:	2000039c 	.word	0x2000039c
 8001cc8:	0800e490 	.word	0x0800e490

08001ccc <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cda:	eef0 7ae7 	vabs.f32	s15, s15
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_ZN4SMPS5SBC_c7set_pwmEt>:
#include <LED_Driver.hpp>
#include "main.h"
#include "math.h"


inline void SMPS::SBC_c::set_pwm(uint16_t pwm){
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <_ZN4SMPS5SBC_c7set_pwmEt+0x20>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d0a:	e02c      	b.n	8001d66 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d105      	bne.n	8001d20 <_ZN4SMPS5SBC_c7set_pwmEt+0x34>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d1e:	e022      	b.n	8001d66 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d105      	bne.n	8001d34 <_ZN4SMPS5SBC_c7set_pwmEt+0x48>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d32:	e018      	b.n	8001d66 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d105      	bne.n	8001d48 <_ZN4SMPS5SBC_c7set_pwmEt+0x5c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d46:	e00e      	b.n	8001d66 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d105      	bne.n	8001d5c <_ZN4SMPS5SBC_c7set_pwmEt+0x70>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d5a:	e004      	b.n	8001d66 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_ZN4SMPS5SBC_c14get_current_mAEv>:


inline uint32_t SMPS::SBC_c::get_current_mA(){
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

	return static_cast<uint32_t>(
			static_cast<float>(_adc1_data_ptr[_current_channel]) * 0.2 * 2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7b5b      	ldrb	r3, [r3, #13]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d92:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001db4 <_ZN4SMPS5SBC_c14get_current_mAEv+0x40>
 8001d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	);
 8001d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da2:	ee17 3a90 	vmov	r3, s15
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	3e4ccccd 	.word	0x3e4ccccd

08001db8 <_ZN4SMPS5SBC_c11set_currentEm>:


void SMPS::SBC_c::set_current(uint32_t current_mA){
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	_set_current_mA = current_mA;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	611a      	str	r2, [r3, #16]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_ZN4SMPS5SBC_c14set_update_pidEv>:
}




void SMPS::SBC_c::set_update_pid(){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

	float measurement = static_cast<float>(get_current_mA());
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ffc9 	bl	8001d74 <_ZN4SMPS5SBC_c14get_current_mAEv>
 8001de2:	ee07 0a90 	vmov	s15, r0
 8001de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dea:	edc7 7a06 	vstr	s15, [r7, #24]

	float error = static_cast<float>(_set_current_mA) - measurement;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e02:	edc7 7a05 	vstr	s15, [r7, #20]

	float proportional = pid_const.Kp * error;
 8001e06:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001ff8 <_ZN4SMPS5SBC_c14set_update_pidEv+0x224>
 8001e0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e12:	edc7 7a04 	vstr	s15, [r7, #16]

	_pid_data.integrator = _pid_data.integrator + 0.5f * pid_const.Ki * pid_const.Ts *(error - _pid_data.prevError);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e1c:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001ffc <_ZN4SMPS5SBC_c14set_update_pidEv+0x228>
 8001e20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e28:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002000 <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001e2c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e36:	ed97 6a05 	vldr	s12, [r7, #20]
 8001e3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	edc3 7a05 	vstr	s15, [r3, #20]

	// Anti-wind-up via integrator clamping
	if(_pid_data.integrator > pid_const.integ_lim_max)_pid_data.integrator = pid_const.integ_lim_max;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e52:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dd02      	ble.n	8001e66 <_ZN4SMPS5SBC_c14set_update_pidEv+0x92>
 8001e60:	4a68      	ldr	r2, [pc, #416]	; (8002004 <_ZN4SMPS5SBC_c14set_update_pidEv+0x230>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	615a      	str	r2, [r3, #20]
	if(_pid_data.integrator < pid_const.integ_lim_min)_pid_data.integrator = pid_const.integ_lim_min;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e6c:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d502      	bpl.n	8001e80 <_ZN4SMPS5SBC_c14set_update_pidEv+0xac>
 8001e7a:	4a63      	ldr	r2, [pc, #396]	; (8002008 <_ZN4SMPS5SBC_c14set_update_pidEv+0x234>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	615a      	str	r2, [r3, #20]


	// - sign -> derative is on measurement + some inertia
	_pid_data.differentiator = -(2.0f * pid_const.Kd * (measurement - _pid_data.prevMeasurement)
 8001e80:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8002000 <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001e84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e8e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e96:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (2.0f * pid_const.tau - pid_const.Ts) * _pid_data.differentiator)
 8001e9a:	eddf 7a5c 	vldr	s15, [pc, #368]	; 800200c <_ZN4SMPS5SBC_c14set_update_pidEv+0x238>
 8001e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ea2:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002000 <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001ea6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
	_pid_data.differentiator = -(2.0f * pid_const.Kd * (measurement - _pid_data.prevMeasurement)
 8001eb8:	eef1 6a67 	vneg.f32	s13, s15
            				/ (2.0f * pid_const.tau + pid_const.Ts);
 8001ebc:	eddf 7a53 	vldr	s15, [pc, #332]	; 800200c <_ZN4SMPS5SBC_c14set_update_pidEv+0x238>
 8001ec0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ec4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002000 <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
	_pid_data.differentiator = -(2.0f * pid_const.Kd * (measurement - _pid_data.prevMeasurement)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edc3 7a07 	vstr	s15, [r3, #28]


	float output = proportional + _pid_data.integrator + _pid_data.differentiator;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001edc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	edc7 7a07 	vstr	s15, [r7, #28]


	if(output > pid_const.out_lim_max)output = pid_const.out_lim_max;
 8001ef2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ef6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	dd01      	ble.n	8001f08 <_ZN4SMPS5SBC_c14set_update_pidEv+0x134>
 8001f04:	4b42      	ldr	r3, [pc, #264]	; (8002010 <_ZN4SMPS5SBC_c14set_update_pidEv+0x23c>)
 8001f06:	61fb      	str	r3, [r7, #28]
	if(output < pid_const.out_lim_min)output = pid_const.out_lim_min;
 8001f08:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001f0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	d501      	bpl.n	8001f1e <_ZN4SMPS5SBC_c14set_update_pidEv+0x14a>
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <_ZN4SMPS5SBC_c14set_update_pidEv+0x240>)
 8001f1c:	61fb      	str	r3, [r7, #28]

	_pid_data.prevError = error;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	619a      	str	r2, [r3, #24]
	_pid_data.prevMeasurement = measurement;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	621a      	str	r2, [r3, #32]

	_now_pwm_val += output;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001f30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	if(fabs(measurement) < 1 && _set_current_mA != 0 && _now_pwm_val > 100){
 8001f3e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f42:	f7ff fec3 	bl	8001ccc <_ZSt4fabsf>
 8001f46:	eef0 7a40 	vmov.f32	s15, s0
 8001f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d50f      	bpl.n	8001f78 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00b      	beq.n	8001f78 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f66:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002018 <_ZN4SMPS5SBC_c14set_update_pidEv+0x244>
 8001f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	dd01      	ble.n	8001f78 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a4>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a6>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1bc>
		constexpr float max_pwm_no_load = MAX_PWM_TIM1 * MAX_VOLTAGE_mV_DISCONNECT_PROTECTION / 4200;
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <_ZN4SMPS5SBC_c14set_update_pidEv+0x248>)
 8001f80:	60fb      	str	r3, [r7, #12]
		_now_pwm_val = max_pwm_no_load;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <_ZN4SMPS5SBC_c14set_update_pidEv+0x248>)
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
		_pid_data.integrator = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
	}

	if(_now_pwm_val > pid_const.pwm_lim_max)_now_pwm_val = pid_const.pwm_lim_max;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001f96:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002020 <_ZN4SMPS5SBC_c14set_update_pidEv+0x24c>
 8001f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dd02      	ble.n	8001faa <_ZN4SMPS5SBC_c14set_update_pidEv+0x1d6>
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <_ZN4SMPS5SBC_c14set_update_pidEv+0x250>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
	if(_now_pwm_val < pid_const.pwm_lim_min)_now_pwm_val = pid_const.pwm_lim_min;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001fb0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002000 <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	d503      	bpl.n	8001fc6 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1f2>
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

	// TODO re-do next if and test stability
	if(_set_current_mA == 0)set_pwm(0);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <_ZN4SMPS5SBC_c14set_update_pidEv+0x204>
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fe8b 	bl	8001cec <_ZN4SMPS5SBC_c7set_pwmEt>
	else set_pwm( static_cast<uint16_t>(_now_pwm_val) );

}
 8001fd6:	e00b      	b.n	8001ff0 <_ZN4SMPS5SBC_c14set_update_pidEv+0x21c>
	else set_pwm( static_cast<uint16_t>(_now_pwm_val) );
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe2:	ee17 3a90 	vmov	r3, s15
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fe7e 	bl	8001cec <_ZN4SMPS5SBC_c7set_pwmEt>
}
 8001ff0:	bf00      	nop
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	3c23d70a 	.word	0x3c23d70a
 8001ffc:	3ba3d70a 	.word	0x3ba3d70a
 8002000:	00000000 	.word	0x00000000
 8002004:	40a00000 	.word	0x40a00000
 8002008:	c0a00000 	.word	0xc0a00000
 800200c:	3d4ccccd 	.word	0x3d4ccccd
 8002010:	41200000 	.word	0x41200000
 8002014:	c1200000 	.word	0xc1200000
 8002018:	42c80000 	.word	0x42c80000
 800201c:	43260000 	.word	0x43260000
 8002020:	43480000 	.word	0x43480000
 8002024:	43480000 	.word	0x43480000

08002028 <_ZN4SMPS10pid_data_sIfEC1Ev>:



// template for testing with volatile and interrupt: pid_data_s<volatile float> foo;
template <typename Type>
struct pid_data_s{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <_ZN4SMPS5SBC_cC1Ev>:


SMPS::SBC_c::SBC_c(){
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3314      	adds	r3, #20
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffdc 	bl	8002028 <_ZN4SMPS10pid_data_sIfEC1Ev>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	; 0x24
	_htim = nullptr;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
	_adc1_data_ptr = nullptr;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
	_tim_channel = 0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
	_voltage_channel = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	731a      	strb	r2, [r3, #12]
	_current_channel = 0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	735a      	strb	r2, [r3, #13]
	_set_current_mA = 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
}
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item>:


void SMPS::led_drivers_c::set_all_currents(set_current_item *data){
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
	if(data->set_current[D1] <= D1_D2_max_current)SBC[D1].set_current(data->set_current[D1]);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d80b      	bhi.n	80020d4 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item+0x2e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f82e 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 80020c6:	4602      	mov	r2, r0
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f7ff fe72 	bl	8001db8 <_ZN4SMPS5SBC_c11set_currentEm>
	if(data->set_current[D2] <= D1_D2_max_current)SBC[D2].set_current(data->set_current[D2]);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	885b      	ldrh	r3, [r3, #2]
 80020d8:	f640 52ac 	movw	r2, #3500	; 0xdac
 80020dc:	4293      	cmp	r3, r2
 80020de:	d80b      	bhi.n	80020f8 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item+0x52>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2101      	movs	r1, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f81c 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 80020ea:	4602      	mov	r2, r0
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	885b      	ldrh	r3, [r3, #2]
 80020f0:	4619      	mov	r1, r3
 80020f2:	4610      	mov	r0, r2
 80020f4:	f7ff fe60 	bl	8001db8 <_ZN4SMPS5SBC_c11set_currentEm>
	if(data->set_current[D3] <= D3_max_current)SBC[D3].set_current(data->set_current[D3]);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	889b      	ldrh	r3, [r3, #4]
 80020fc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002100:	d80b      	bhi.n	800211a <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item+0x74>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f80b 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 800210c:	4602      	mov	r2, r0
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f7ff fe4f 	bl	8001db8 <_ZN4SMPS5SBC_c11set_currentEm>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>:
      operator[](size_type __n) noexcept
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f805 	bl	8002140 <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_refERA3_KS1_j>
 8002136:	4603      	mov	r3, r0
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>:
	SBC_c();
	~SBC_c() = default;
	SBC_c(const SBC_c&)= default;
	SBC_c & operator= ( const SBC_c&) = default;

	constexpr void init(TIM_HandleTypeDef * htim, uint32_t tim_channel ,uint32_t *adc1_data_ptr, ADC_RANK_DMA voltage_channel, ADC_RANK_DMA current_channel){
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
		_htim = htim;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	601a      	str	r2, [r3, #0]
		_adc1_data_ptr = adc1_data_ptr;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	605a      	str	r2, [r3, #4]
		_tim_channel = tim_channel;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
		_voltage_channel = voltage_channel;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	7e3a      	ldrb	r2, [r7, #24]
 8002188:	731a      	strb	r2, [r3, #12]
		_current_channel = current_channel;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	7f3a      	ldrb	r2, [r7, #28]
 800218e:	735a      	strb	r2, [r3, #13]
	};
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev>:
    struct array
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2402      	movs	r4, #2
 80021a8:	461d      	mov	r5, r3
 80021aa:	2c00      	cmp	r4, #0
 80021ac:	db05      	blt.n	80021ba <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev+0x1e>
 80021ae:	4628      	mov	r0, r5
 80021b0:	f7ff ff55 	bl	800205e <_ZN4SMPS5SBC_cC1Ev>
 80021b4:	3528      	adds	r5, #40	; 0x28
 80021b6:	3c01      	subs	r4, #1
 80021b8:	e7f7      	b.n	80021aa <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev+0xe>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdb0      	pop	{r4, r5, r7, pc}

080021c4 <_ZN4SMPS13led_drivers_cC1Ev>:

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////


class led_drivers_c{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ffe4 	bl	800219c <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <_Z21Start_LED_Driver_TaskPKv>:
uint8_t Set_Current_QueueBuffer[Set_Current_Queue_Buffer_size];
osStaticMessageQDef_t Set_Current_QueueControlBlock;


void Start_LED_Driver_Task([[maybe_unused]] void const * argument)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b0b5      	sub	sp, #212	; 0xd4
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	6078      	str	r0, [r7, #4]


	const unsigned int adc1_number_of_channels = 6;
 80021e8:	2306      	movs	r3, #6
 80021ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	uint32_t adc1_data[adc1_number_of_channels];

	HAL_ADC_Start_DMA(&hadc1, adc1_data, 6);
 80021ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f2:	2206      	movs	r2, #6
 80021f4:	4619      	mov	r1, r3
 80021f6:	485f      	ldr	r0, [pc, #380]	; (8002374 <_Z21Start_LED_Driver_TaskPKv+0x194>)
 80021f8:	f001 fefc 	bl	8003ff4 <HAL_ADC_Start_DMA>
	SMPS::led_drivers_c led_drivers;
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ffdf 	bl	80021c4 <_ZN4SMPS13led_drivers_cC1Ev>

	led_drivers.SBC[0].init(&htim1, TIM_CHANNEL_3, adc1_data, ADC_RANK_0, ADC_RANK_3);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff88 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8002212:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002216:	2203      	movs	r2, #3
 8002218:	9201      	str	r2, [sp, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	9200      	str	r2, [sp, #0]
 800221e:	2208      	movs	r2, #8
 8002220:	4955      	ldr	r1, [pc, #340]	; (8002378 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 8002222:	f7ff ff9f 	bl	8002164 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>
	led_drivers.SBC[1].init(&htim1, TIM_CHANNEL_2, adc1_data, ADC_RANK_1, ADC_RANK_4);
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	2101      	movs	r1, #1
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff78 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8002232:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002236:	2204      	movs	r2, #4
 8002238:	9201      	str	r2, [sp, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	2204      	movs	r2, #4
 8002240:	494d      	ldr	r1, [pc, #308]	; (8002378 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 8002242:	f7ff ff8f 	bl	8002164 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>
	led_drivers.SBC[2].init(&htim1, TIM_CHANNEL_1, adc1_data, ADC_RANK_2, ADC_RANK_5);
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	2102      	movs	r1, #2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff68 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8002252:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002256:	2205      	movs	r2, #5
 8002258:	9201      	str	r2, [sp, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	9200      	str	r2, [sp, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	4945      	ldr	r1, [pc, #276]	; (8002378 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 8002262:	f7ff ff7f 	bl	8002164 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>

	led_drivers.SBC[0].set_current(0);
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff58 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8002272:	4603      	mov	r3, r0
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fd9e 	bl	8001db8 <_ZN4SMPS5SBC_c11set_currentEm>
	led_drivers.SBC[1].set_current(0);
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff4d 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8002288:	4603      	mov	r3, r0
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd93 	bl	8001db8 <_ZN4SMPS5SBC_c11set_currentEm>
	led_drivers.SBC[2].set_current(0);
 8002292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002296:	2102      	movs	r1, #2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff42 	bl	8002122 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 800229e:	4603      	mov	r3, r0
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fd88 	bl	8001db8 <_ZN4SMPS5SBC_c11set_currentEm>

	//osMessageQDef(Set_Current_Queue, 3, set_current_item);
	osMessageQStaticDef(Set_Current_Queue, 3, set_current_item, Set_Current_QueueBuffer, &Set_Current_QueueControlBlock);
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <_Z21Start_LED_Driver_TaskPKv+0x19c>)
 80022aa:	f107 0414 	add.w	r4, r7, #20
 80022ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Set_Current_QueueHandle = osMessageCreate(osMessageQ(Set_Current_Queue), NULL);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f007 faa9 	bl	8009812 <osMessageCreate>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <_Z21Start_LED_Driver_TaskPKv+0x1a0>)
 80022c4:	6013      	str	r3, [r2, #0]


	set_current_item set_current_data;

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80022c6:	2100      	movs	r1, #0
 80022c8:	482b      	ldr	r0, [pc, #172]	; (8002378 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 80022ca:	f004 ff33 	bl	8007134 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80022ce:	2104      	movs	r1, #4
 80022d0:	4829      	ldr	r0, [pc, #164]	; (8002378 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 80022d2:	f004 ff2f 	bl	8007134 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80022d6:	2108      	movs	r1, #8
 80022d8:	4827      	ldr	r0, [pc, #156]	; (8002378 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 80022da:	f004 ff2b 	bl	8007134 <HAL_TIM_PWM_Start>

	for(;;)
	{
		osDelay(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f007 fa6c 	bl	80097bc <osDelay>

		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80022e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022e8:	4826      	ldr	r0, [pc, #152]	; (8002384 <_Z21Start_LED_Driver_TaskPKv+0x1a4>)
 80022ea:	f002 fa0b 	bl	8004704 <HAL_GPIO_TogglePin>

		// __builtin_expect() test
		if (xQueueReceive( Set_Current_QueueHandle, &set_current_data, 0) == pdPASS)
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <_Z21Start_LED_Driver_TaskPKv+0x1a0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f107 010c 	add.w	r1, r7, #12
 80022f6:	2200      	movs	r2, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f007 fd69 	bl	8009dd0 <xQueueReceive>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <_Z21Start_LED_Driver_TaskPKv+0x13e>
			led_drivers.set_all_currents(&set_current_data);
 800230e:	f107 020c 	add.w	r2, r7, #12
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fec4 	bl	80020a6 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item>


		for(auto &el:led_drivers.SBC)el.set_update_pid();
 800231e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002326:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800232a:	f000 f82d 	bl	8002388 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE5beginEv>
 800232e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8002332:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002336:	f000 f833 	bl	80023a0 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE3endEv>
 800233a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 800233e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002346:	429a      	cmp	r2, r3
 8002348:	d00d      	beq.n	8002366 <_Z21Start_LED_Driver_TaskPKv+0x186>
 800234a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800234e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002352:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002356:	f7ff fd3d 	bl	8001dd4 <_ZN4SMPS5SBC_c14set_update_pidEv>
 800235a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800235e:	3328      	adds	r3, #40	; 0x28
 8002360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002364:	e7eb      	b.n	800233e <_Z21Start_LED_Driver_TaskPKv+0x15e>

		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <_Z21Start_LED_Driver_TaskPKv+0x1a4>)
 800236c:	f002 f9ca 	bl	8004704 <HAL_GPIO_TogglePin>


	}
 8002370:	e7b5      	b.n	80022de <_Z21Start_LED_Driver_TaskPKv+0xfe>
 8002372:	bf00      	nop
 8002374:	20003bd4 	.word	0x20003bd4
 8002378:	20003d70 	.word	0x20003d70
 800237c:	0800e4d4 	.word	0x0800e4d4
 8002380:	20001304 	.word	0x20001304
 8002384:	48000400 	.word	0x48000400

08002388 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE5beginEv>:
      begin() noexcept
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f812 	bl	80023ba <_ZNSt5arrayIN4SMPS5SBC_cELj3EE4dataEv>
 8002396:	4603      	mov	r3, r0
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE3endEv>:
      end() noexcept
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f806 	bl	80023ba <_ZNSt5arrayIN4SMPS5SBC_cELj3EE4dataEv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	3378      	adds	r3, #120	; 0x78
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_ZNSt5arrayIN4SMPS5SBC_cELj3EE4dataEv>:
      data() noexcept
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f805 	bl	80023d4 <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_ptrERA3_KS1_>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_ptrERA3_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_ZN17mainboard_form_hb4initEPh>:
	mainboard_form_hb();
	~mainboard_form_hb() = default;
	mainboard_form_hb(const mainboard_form_hb&)= default;
	mainboard_form_hb & operator= (const mainboard_form_hb&) = default;

	constexpr void init(uint8_t *uart_data_ptr){
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
	    _recive_data_ptr = uart_data_ptr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	601a      	str	r2, [r3, #0]
	};
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_ZN17mainboard_form_hb8get_dataEv>:

	void update();
	inline data_from_hb get_data(){return _data;};
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	3304      	adds	r3, #4
 8002416:	cb03      	ldmia	r3!, {r0, r1}
 8002418:	6010      	str	r0, [r2, #0]
 800241a:	6051      	str	r1, [r2, #4]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	8113      	strh	r3, [r2, #8]
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_Z23Start_Main_Control_TaskPKv>:
uint16_t b_voltage_debug;
uint8_t profile_debug;


void Start_Main_Control_Task([[maybe_unused]] void const * argument)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b0ad      	sub	sp, #180	; 0xb4
 8002430:	af00      	add	r7, sp, #0
 8002432:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Start_Main_Control_Task */
	/* Infinite loop */

	/* HeadBoard comunication */
	uint8_t headboard_uart_data[10];
	mainboard_form_hb hb;
 8002434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe ffdd 	bl	80013f8 <_ZN17mainboard_form_hbC1Ev>
	hb.init(headboard_uart_data);
 800243e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002442:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ffce 	bl	80023ea <_ZN17mainboard_form_hb4initEPh>
	HAL_UART_Receive_DMA(&huart3, headboard_uart_data, 10);
 800244e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002452:	220a      	movs	r2, #10
 8002454:	4619      	mov	r1, r3
 8002456:	48cf      	ldr	r0, [pc, #828]	; (8002794 <_Z23Start_Main_Control_TaskPKv+0x368>)
 8002458:	f004 ff9a 	bl	8007390 <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f002 f949 	bl	80046fa <HAL_GPIO_WritePin>

	/* Button State Queue init*/
	button_state_item button_state;
	osMessageQDef(Button_state_Queue, 3, button_state_item);
 8002468:	4bcb      	ldr	r3, [pc, #812]	; (8002798 <_Z23Start_Main_Control_TaskPKv+0x36c>)
 800246a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800246e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Button_state_QueueHandle = osMessageCreate(osMessageQ(Button_state_Queue), NULL);
 8002474:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f007 f9c9 	bl	8009812 <osMessageCreate>
 8002480:	4603      	mov	r3, r0
 8002482:	4ac6      	ldr	r2, [pc, #792]	; (800279c <_Z23Start_Main_Control_TaskPKv+0x370>)
 8002484:	6013      	str	r3, [r2, #0]

	/* Set initial current  */
	set_current_item set_current_data;
	set_current_data.set_current[D1] = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	set_current_data.set_current[D2] = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	set_current_data.set_current[D3] = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	xQueueSend( Set_Current_QueueHandle, &set_current_data, portMAX_DELAY );
 8002498:	4bc1      	ldr	r3, [pc, #772]	; (80027a0 <_Z23Start_Main_Control_TaskPKv+0x374>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80024a0:	2300      	movs	r3, #0
 80024a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024a6:	f007 fb79 	bl	8009b9c <xQueueGenericSend>

	/* Set profile Init */
	uint8_t profile = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint8_t profile_last = 5;
 80024b0:	2305      	movs	r3, #5
 80024b2:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
	uint16_t current_als = 2000;
 80024b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024ba:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

	/* Battery Management System Init*/
	cBQ BMS;
 80024be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fe98 	bl	80011f8 <_ZN3cBQC1Ev>
	BMS.init_BQ(&hi2c1);
 80024c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024cc:	49b5      	ldr	r1, [pc, #724]	; (80027a4 <_Z23Start_Main_Control_TaskPKv+0x378>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff08 	bl	80012e4 <_ZN3cBQ7init_BQEP19__I2C_HandleTypeDef>
	BMS.set_boost_mode(true);
 80024d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d8:	2101      	movs	r1, #1
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fd33 	bl	8000f46 <_ZN3cBQ14set_boost_modeEb>
	BMS.set_battcharge(true);
 80024e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fd59 	bl	8000f9e <_ZN3cBQ14set_battchargeEb>



	for(;;)
	{
		osDelay(50);
 80024ec:	2032      	movs	r0, #50	; 0x32
 80024ee:	f007 f965 	bl	80097bc <osDelay>
		HAL_IWDG_Refresh(&hiwdg);  // refresh more frequent than 15.25Hz
 80024f2:	48ad      	ldr	r0, [pc, #692]	; (80027a8 <_Z23Start_Main_Control_TaskPKv+0x37c>)
 80024f4:	f002 fd1a 	bl	8004f2c <HAL_IWDG_Refresh>

		/* Battery Management */
		BMS.update_VBUS(1,400);
 80024f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002500:	2101      	movs	r1, #1
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe ff40 	bl	8001388 <_ZN3cBQ11update_VBUSEbt>
		b_voltage_debug =  BMS.read_battvoltage(); //for live expression (debug)
 8002508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fe2b 	bl	8001168 <_ZN3cBQ16read_battvoltageEv>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	4ba5      	ldr	r3, [pc, #660]	; (80027ac <_Z23Start_Main_Control_TaskPKv+0x380>)
 8002518:	801a      	strh	r2, [r3, #0]

		/* Head Board - over temp protection */
		hb.update();
 800251a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe ff90 	bl	8001444 <_ZN17mainboard_form_hb6updateEv>
		HB_data_debug = hb.get_data(); //for live expression (debug)
 8002524:	4ca2      	ldr	r4, [pc, #648]	; (80027b0 <_Z23Start_Main_Control_TaskPKv+0x384>)
 8002526:	463b      	mov	r3, r7
 8002528:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff69 	bl	8002406 <_ZN17mainboard_form_hb8get_dataEv>
 8002534:	4623      	mov	r3, r4
 8002536:	463a      	mov	r2, r7
 8002538:	6810      	ldr	r0, [r2, #0]
 800253a:	6851      	ldr	r1, [r2, #4]
 800253c:	c303      	stmia	r3!, {r0, r1}
 800253e:	8912      	ldrh	r2, [r2, #8]
 8002540:	801a      	strh	r2, [r3, #0]

		for(const auto & temperature_in_degC_by_100 : hb.get_data().TEMP){
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5a 	bl	8002406 <_ZN17mainboard_form_hb8get_dataEv>
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	3304      	adds	r3, #4
 8002558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800255c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002560:	f7fe ffdb 	bl	800151a <_ZNSt5arrayIsLj3EE5beginEv>
 8002564:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8002568:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800256c:	f7fe ffe1 	bl	8001532 <_ZNSt5arrayIsLj3EE3endEv>
 8002570:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8002574:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800257c:	429a      	cmp	r2, r3
 800257e:	d013      	beq.n	80025a8 <_Z23Start_Main_Control_TaskPKv+0x17c>
 8002580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if(temperature_in_degC_by_100 > 8000) profile = 0;
 8002588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800258c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002590:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002594:	dd02      	ble.n	800259c <_Z23Start_Main_Control_TaskPKv+0x170>
 8002596:	2300      	movs	r3, #0
 8002598:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		for(const auto & temperature_in_degC_by_100 : hb.get_data().TEMP){
 800259c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025a0:	3302      	adds	r3, #2
 80025a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025a6:	e7e5      	b.n	8002574 <_Z23Start_Main_Control_TaskPKv+0x148>
		}


		/* User Interface */
		if ( xQueueReceive( Button_state_QueueHandle, &button_state, 0) == pdPASS ){
 80025a8:	4b7c      	ldr	r3, [pc, #496]	; (800279c <_Z23Start_Main_Control_TaskPKv+0x370>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80025b0:	2200      	movs	r2, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f007 fc0c 	bl	8009dd0 <xQueueReceive>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02d      	beq.n	8002624 <_Z23Start_Main_Control_TaskPKv+0x1f8>
			if(button_state.sw1_press){
 80025c8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d018      	beq.n	8002602 <_Z23Start_Main_Control_TaskPKv+0x1d6>
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80025d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d4:	4877      	ldr	r0, [pc, #476]	; (80027b4 <_Z23Start_Main_Control_TaskPKv+0x388>)
 80025d6:	f002 f895 	bl	8004704 <HAL_GPIO_TogglePin>
				button_state.sw1_press = false;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

				if(++profile > 5)profile = 0;
 80025e0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80025e4:	3301      	adds	r3, #1
 80025e6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80025ea:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	bf8c      	ite	hi
 80025f2:	2301      	movhi	r3, #1
 80025f4:	2300      	movls	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <_Z23Start_Main_Control_TaskPKv+0x1d6>
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			}
			if(button_state.sw2_press){
 8002602:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00c      	beq.n	8002624 <_Z23Start_Main_Control_TaskPKv+0x1f8>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800260a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260e:	4869      	ldr	r0, [pc, #420]	; (80027b4 <_Z23Start_Main_Control_TaskPKv+0x388>)
 8002610:	f002 f878 	bl	8004704 <HAL_GPIO_TogglePin>
				button_state.sw2_press = false;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				// TODO turn off procedure
				BMS.shipmode();
 800261a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fd82 	bl	8001128 <_ZN3cBQ8shipmodeEv>
			}
		}


		switch ( profile ){
 8002624:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002628:	2b05      	cmp	r3, #5
 800262a:	f200 8095 	bhi.w	8002758 <_Z23Start_Main_Control_TaskPKv+0x32c>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <_Z23Start_Main_Control_TaskPKv+0x208>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002661 	.word	0x08002661
 800263c:	08002677 	.word	0x08002677
 8002640:	0800268d 	.word	0x0800268d
 8002644:	080026a7 	.word	0x080026a7
 8002648:	080026bd 	.word	0x080026bd
		case 0:{
			set_current_data.set_current[D1] = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 800265e:	e07e      	b.n	800275e <_Z23Start_Main_Control_TaskPKv+0x332>
		}
		case 1:{
			set_current_data.set_current[D1] = 1500;
 8002660:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002664:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 8002674:	e073      	b.n	800275e <_Z23Start_Main_Control_TaskPKv+0x332>
		}
		case 2:{
			set_current_data.set_current[D1] = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 1500;
 800267c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002680:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 800268a:	e068      	b.n	800275e <_Z23Start_Main_Control_TaskPKv+0x332>
		}
		case 3:{
			set_current_data.set_current[D1] = 2500;
 800268c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 2500;
 8002694:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 300;
 800269c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 80026a4:	e05b      	b.n	800275e <_Z23Start_Main_Control_TaskPKv+0x332>
		}

		case 4:{
			set_current_data.set_current[D1] = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 300;
 80026b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 80026ba:	e050      	b.n	800275e <_Z23Start_Main_Control_TaskPKv+0x332>
		}

		case 5:{	/* testing adaptive mode */
			uint16_t als_now = hb.get_data().ALS;
 80026bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80026c0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fe9d 	bl	8002406 <_ZN17mainboard_form_hb8get_dataEv>
 80026cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80026d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

			uint16_t als_setpoint = 200;
 80026d4:	23c8      	movs	r3, #200	; 0xc8
 80026d6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

			float Proportional = 15 * ((float)als_setpoint - (float)als_now);
 80026da:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80026fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
			current_als += static_cast<uint16_t>(Proportional);
 8002702:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800270a:	ee17 3a90 	vmov	r3, s15
 800270e:	b29a      	uxth	r2, r3
 8002710:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002714:	4413      	add	r3, r2
 8002716:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

			if(current_als<200)current_als = 200;
 800271a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800271e:	2bc7      	cmp	r3, #199	; 0xc7
 8002720:	d802      	bhi.n	8002728 <_Z23Start_Main_Control_TaskPKv+0x2fc>
 8002722:	23c8      	movs	r3, #200	; 0xc8
 8002724:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			if(current_als>2000)current_als = 2000;
 8002728:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800272c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002730:	d903      	bls.n	800273a <_Z23Start_Main_Control_TaskPKv+0x30e>
 8002732:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002736:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

			set_current_data.set_current[D1] = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = (uint16_t)current_als;
 8002740:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

			alc_current_debug = current_als;
 800274e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002752:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <_Z23Start_Main_Control_TaskPKv+0x38c>)
 8002754:	6013      	str	r3, [r2, #0]
			break;
 8002756:	e002      	b.n	800275e <_Z23Start_Main_Control_TaskPKv+0x332>
		}

		default:{
			Error_Handler();
 8002758:	f000 fd54 	bl	8003204 <Error_Handler>
			break;
 800275c:	bf00      	nop
		}

		}

		/* to send data to LED_Driver_TAsk if it is needed */
		if(profile != profile_last || profile == 5){
 800275e:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8002762:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8002766:	429a      	cmp	r2, r3
 8002768:	d103      	bne.n	8002772 <_Z23Start_Main_Control_TaskPKv+0x346>
 800276a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800276e:	2b05      	cmp	r3, #5
 8002770:	d107      	bne.n	8002782 <_Z23Start_Main_Control_TaskPKv+0x356>
			xQueueSend( Set_Current_QueueHandle, &set_current_data, 10 );
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <_Z23Start_Main_Control_TaskPKv+0x374>)
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800277a:	2300      	movs	r3, #0
 800277c:	220a      	movs	r2, #10
 800277e:	f007 fa0d 	bl	8009b9c <xQueueGenericSend>
		}

		profile_last = profile;
 8002782:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002786:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		profile_debug = profile;
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <_Z23Start_Main_Control_TaskPKv+0x390>)
 800278c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002790:	7013      	strb	r3, [r2, #0]

	}
 8002792:	e6ab      	b.n	80024ec <_Z23Start_Main_Control_TaskPKv+0xc0>
 8002794:	20003e04 	.word	0x20003e04
 8002798:	0800e4e4 	.word	0x0800e4e4
 800279c:	20001004 	.word	0x20001004
 80027a0:	20001304 	.word	0x20001304
 80027a4:	20003cc8 	.word	0x20003cc8
 80027a8:	20003d14 	.word	0x20003d14
 80027ac:	20000448 	.word	0x20000448
 80027b0:	20000438 	.word	0x20000438
 80027b4:	48000400 	.word	0x48000400
 80027b8:	20000444 	.word	0x20000444
 80027bc:	2000044a 	.word	0x2000044a

080027c0 <_Z3sw1v>:

void User_Buttons_ISR_SW1_handle();

void Start_User_Buttons_Task(void const * argument);

inline bool sw1(){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET;
 80027c4:	2104      	movs	r1, #4
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <_Z3sw1v+0x1c>)
 80027c8:	f001 ff90 	bl	80046ec <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	48000400 	.word	0x48000400

080027e0 <_Z3sw2v>:

inline bool sw2(){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET;
 80027e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027e8:	4805      	ldr	r0, [pc, #20]	; (8002800 <_Z3sw2v+0x20>)
 80027ea:	f001 ff7f 	bl	80046ec <HAL_GPIO_ReadPin>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	48000800 	.word	0x48000800

08002804 <_Z23Start_User_Buttons_TaskPKv>:




void Start_User_Buttons_Task( [[maybe_unused]] void const * argument)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_User_Buttons_Task */
	/* Infinite loop */

	button_state_item button_state;
	button_state.sw1_press = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	723b      	strb	r3, [r7, #8]
	button_state.sw2_press = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	72bb      	strb	r3, [r7, #10]
	button_state.sw1_long_press = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	727b      	strb	r3, [r7, #9]
	button_state.sw2_long_press = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	72fb      	strb	r3, [r7, #11]
	button_state.both_longpress = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	733b      	strb	r3, [r7, #12]

	for(;;)
	{


		xSemaphoreTake(xButtonSemaphoreHandle,portMAX_DELAY);
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <_Z23Start_User_Buttons_TaskPKv+0x94>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002828:	4618      	mov	r0, r3
 800282a:	f007 fb7f 	bl	8009f2c <xQueueSemaphoreTake>

		if( sw1() ){
 800282e:	f7ff ffc7 	bl	80027c0 <_Z3sw1v>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d014      	beq.n	8002862 <_Z23Start_User_Buttons_TaskPKv+0x5e>
			osDelay(Button_Debounce_delay_SW1);
 8002838:	207d      	movs	r0, #125	; 0x7d
 800283a:	f006 ffbf 	bl	80097bc <osDelay>
			if(sw1()){
 800283e:	f7ff ffbf 	bl	80027c0 <_Z3sw1v>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <_Z23Start_User_Buttons_TaskPKv+0x5e>

				button_state.sw1_press = true;
 8002848:	2301      	movs	r3, #1
 800284a:	723b      	strb	r3, [r7, #8]
				xQueueSend(Button_state_QueueHandle, &button_state, portMAX_DELAY );
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <_Z23Start_User_Buttons_TaskPKv+0x98>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f107 0108 	add.w	r1, r7, #8
 8002854:	2300      	movs	r3, #0
 8002856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800285a:	f007 f99f 	bl	8009b9c <xQueueGenericSend>
				button_state.sw1_press = false;
 800285e:	2300      	movs	r3, #0
 8002860:	723b      	strb	r3, [r7, #8]
			}
		}


		if( sw2() ){
 8002862:	f7ff ffbd 	bl	80027e0 <_Z3sw2v>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0d9      	beq.n	8002820 <_Z23Start_User_Buttons_TaskPKv+0x1c>
			osDelay(Button_Debounce_delay_SW2);
 800286c:	203c      	movs	r0, #60	; 0x3c
 800286e:	f006 ffa5 	bl	80097bc <osDelay>
			if(sw2()){
 8002872:	f7ff ffb5 	bl	80027e0 <_Z3sw2v>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0d1      	beq.n	8002820 <_Z23Start_User_Buttons_TaskPKv+0x1c>

				button_state.sw2_press = true;
 800287c:	2301      	movs	r3, #1
 800287e:	72bb      	strb	r3, [r7, #10]
				xQueueSend(Button_state_QueueHandle, &button_state, portMAX_DELAY );
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <_Z23Start_User_Buttons_TaskPKv+0x98>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	f107 0108 	add.w	r1, r7, #8
 8002888:	2300      	movs	r3, #0
 800288a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800288e:	f007 f985 	bl	8009b9c <xQueueGenericSend>
				button_state.sw2_press = false;
 8002892:	2300      	movs	r3, #0
 8002894:	72bb      	strb	r3, [r7, #10]
		xSemaphoreTake(xButtonSemaphoreHandle,portMAX_DELAY);
 8002896:	e7c3      	b.n	8002820 <_Z23Start_User_Buttons_TaskPKv+0x1c>
 8002898:	200012b8 	.word	0x200012b8
 800289c:	20001004 	.word	0x20001004

080028a0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80028a0:	b510      	push	{r4, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 80028a4:	2300      	movs	r3, #0
 80028a6:	9307      	str	r3, [sp, #28]
 80028a8:	9308      	str	r3, [sp, #32]
 80028aa:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	9303      	str	r3, [sp, #12]
 80028b2:	9304      	str	r3, [sp, #16]
 80028b4:	9305      	str	r3, [sp, #20]
 80028b6:	9306      	str	r3, [sp, #24]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80028b8:	4842      	ldr	r0, [pc, #264]	; (80029c4 <MX_ADC1_Init+0x124>)
 80028ba:	4a43      	ldr	r2, [pc, #268]	; (80029c8 <MX_ADC1_Init+0x128>)
 80028bc:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80028be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028c2:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028c4:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028c6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028c8:	2201      	movs	r2, #1
 80028ca:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028cc:	2104      	movs	r1, #4
 80028ce:	6141      	str	r1, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028d0:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028d2:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 6;
 80028d4:	2406      	movs	r4, #6
 80028d6:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028d8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028dc:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028de:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028e0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028e4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80028e6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80028ea:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80028ec:	6403      	str	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80028ee:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80028f0:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028f2:	f000 ff87 	bl	8003804 <HAL_ADC_Init>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d14c      	bne.n	8002994 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028fa:	2300      	movs	r3, #0
 80028fc:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80028fe:	a907      	add	r1, sp, #28
 8002900:	4830      	ldr	r0, [pc, #192]	; (80029c4 <MX_ADC1_Init+0x124>)
 8002902:	f001 fbf9 	bl	80040f8 <HAL_ADCEx_MultiModeConfigChannel>
 8002906:	2800      	cmp	r0, #0
 8002908:	d147      	bne.n	800299a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <MX_ADC1_Init+0x12c>)
 800290c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800290e:	2306      	movs	r3, #6
 8002910:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002912:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002914:	237f      	movs	r3, #127	; 0x7f
 8002916:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002918:	2304      	movs	r3, #4
 800291a:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002920:	a901      	add	r1, sp, #4
 8002922:	4828      	ldr	r0, [pc, #160]	; (80029c4 <MX_ADC1_Init+0x124>)
 8002924:	f001 f8be 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 8002928:	2800      	cmp	r0, #0
 800292a:	d139      	bne.n	80029a0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <MX_ADC1_Init+0x130>)
 800292e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002930:	230c      	movs	r3, #12
 8002932:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002934:	a901      	add	r1, sp, #4
 8002936:	4823      	ldr	r0, [pc, #140]	; (80029c4 <MX_ADC1_Init+0x124>)
 8002938:	f001 f8b4 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 800293c:	2800      	cmp	r0, #0
 800293e:	d132      	bne.n	80029a6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <MX_ADC1_Init+0x134>)
 8002942:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002944:	2312      	movs	r3, #18
 8002946:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002948:	a901      	add	r1, sp, #4
 800294a:	481e      	ldr	r0, [pc, #120]	; (80029c4 <MX_ADC1_Init+0x124>)
 800294c:	f001 f8aa 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 8002950:	bb60      	cbnz	r0, 80029ac <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <MX_ADC1_Init+0x138>)
 8002954:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002956:	2318      	movs	r3, #24
 8002958:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800295a:	2305      	movs	r3, #5
 800295c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800295e:	a901      	add	r1, sp, #4
 8002960:	4818      	ldr	r0, [pc, #96]	; (80029c4 <MX_ADC1_Init+0x124>)
 8002962:	f001 f89f 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 8002966:	bb20      	cbnz	r0, 80029b2 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <MX_ADC1_Init+0x13c>)
 800296a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800296c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002970:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002972:	a901      	add	r1, sp, #4
 8002974:	4813      	ldr	r0, [pc, #76]	; (80029c4 <MX_ADC1_Init+0x124>)
 8002976:	f001 f895 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 800297a:	b9e8      	cbnz	r0, 80029b8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <MX_ADC1_Init+0x140>)
 800297e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002980:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002984:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002986:	a901      	add	r1, sp, #4
 8002988:	480e      	ldr	r0, [pc, #56]	; (80029c4 <MX_ADC1_Init+0x124>)
 800298a:	f001 f88b 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 800298e:	b9b0      	cbnz	r0, 80029be <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
  }

}
 8002990:	b00a      	add	sp, #40	; 0x28
 8002992:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002994:	f000 fc36 	bl	8003204 <Error_Handler>
 8002998:	e7af      	b.n	80028fa <MX_ADC1_Init+0x5a>
    Error_Handler();
 800299a:	f000 fc33 	bl	8003204 <Error_Handler>
 800299e:	e7b4      	b.n	800290a <MX_ADC1_Init+0x6a>
    Error_Handler();
 80029a0:	f000 fc30 	bl	8003204 <Error_Handler>
 80029a4:	e7c2      	b.n	800292c <MX_ADC1_Init+0x8c>
    Error_Handler();
 80029a6:	f000 fc2d 	bl	8003204 <Error_Handler>
 80029aa:	e7c9      	b.n	8002940 <MX_ADC1_Init+0xa0>
    Error_Handler();
 80029ac:	f000 fc2a 	bl	8003204 <Error_Handler>
 80029b0:	e7cf      	b.n	8002952 <MX_ADC1_Init+0xb2>
    Error_Handler();
 80029b2:	f000 fc27 	bl	8003204 <Error_Handler>
 80029b6:	e7d7      	b.n	8002968 <MX_ADC1_Init+0xc8>
    Error_Handler();
 80029b8:	f000 fc24 	bl	8003204 <Error_Handler>
 80029bc:	e7de      	b.n	800297c <MX_ADC1_Init+0xdc>
    Error_Handler();
 80029be:	f000 fc21 	bl	8003204 <Error_Handler>
}
 80029c2:	e7e5      	b.n	8002990 <MX_ADC1_Init+0xf0>
 80029c4:	20003bd4 	.word	0x20003bd4
 80029c8:	50040000 	.word	0x50040000
 80029cc:	14f00020 	.word	0x14f00020
 80029d0:	19200040 	.word	0x19200040
 80029d4:	1d500080 	.word	0x1d500080
 80029d8:	25b00200 	.word	0x25b00200
 80029dc:	2a000400 	.word	0x2a000400
 80029e0:	2e300800 	.word	0x2e300800

080029e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80029e4:	b500      	push	{lr}
 80029e6:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	9303      	str	r3, [sp, #12]
 80029f2:	9304      	str	r3, [sp, #16]
 80029f4:	9305      	str	r3, [sp, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80029f6:	4823      	ldr	r0, [pc, #140]	; (8002a84 <MX_ADC2_Init+0xa0>)
 80029f8:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <MX_ADC2_Init+0xa4>)
 80029fa:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80029fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a00:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a02:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a04:	60c3      	str	r3, [r0, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a06:	2201      	movs	r2, #1
 8002a08:	6102      	str	r2, [r0, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002a0e:	7603      	strb	r3, [r0, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002a10:	7642      	strb	r2, [r0, #25]
  hadc2.Init.NbrOfConversion = 2;
 8002a12:	2102      	movs	r1, #2
 8002a14:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a16:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a1a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a1c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a1e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a22:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = ENABLE;
 8002a24:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002a28:	210c      	movs	r1, #12
 8002a2a:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8002a2c:	6403      	str	r3, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002a2e:	6443      	str	r3, [r0, #68]	; 0x44
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002a30:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a32:	f000 fee7 	bl	8003804 <HAL_ADC_Init>
 8002a36:	b9e0      	cbnz	r0, 8002a72 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_ADC2_Init+0xa8>)
 8002a3a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a3c:	2306      	movs	r3, #6
 8002a3e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002a40:	2302      	movs	r3, #2
 8002a42:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a44:	237f      	movs	r3, #127	; 0x7f
 8002a46:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a48:	2304      	movs	r3, #4
 8002a4a:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a50:	4669      	mov	r1, sp
 8002a52:	480c      	ldr	r0, [pc, #48]	; (8002a84 <MX_ADC2_Init+0xa0>)
 8002a54:	f001 f826 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 8002a58:	b970      	cbnz	r0, 8002a78 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MX_ADC2_Init+0xac>)
 8002a5c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a5e:	230c      	movs	r3, #12
 8002a60:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a62:	4669      	mov	r1, sp
 8002a64:	4807      	ldr	r0, [pc, #28]	; (8002a84 <MX_ADC2_Init+0xa0>)
 8002a66:	f001 f81d 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 8002a6a:	b940      	cbnz	r0, 8002a7e <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
  }

}
 8002a6c:	b007      	add	sp, #28
 8002a6e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002a72:	f000 fbc7 	bl	8003204 <Error_Handler>
 8002a76:	e7df      	b.n	8002a38 <MX_ADC2_Init+0x54>
    Error_Handler();
 8002a78:	f000 fbc4 	bl	8003204 <Error_Handler>
 8002a7c:	e7ed      	b.n	8002a5a <MX_ADC2_Init+0x76>
    Error_Handler();
 8002a7e:	f000 fbc1 	bl	8003204 <Error_Handler>
}
 8002a82:	e7f3      	b.n	8002a6c <MX_ADC2_Init+0x88>
 8002a84:	20003b70 	.word	0x20003b70
 8002a88:	50040100 	.word	0x50040100
 8002a8c:	21800100 	.word	0x21800100
 8002a90:	3ef08000 	.word	0x3ef08000

08002a94 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9305      	str	r3, [sp, #20]
 8002a9e:	9306      	str	r3, [sp, #24]
 8002aa0:	9307      	str	r3, [sp, #28]
 8002aa2:	9308      	str	r3, [sp, #32]
 8002aa4:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8002aa6:	6803      	ldr	r3, [r0, #0]
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	; (8002be0 <HAL_ADC_MspInit+0x14c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8002aae:	4a4d      	ldr	r2, [pc, #308]	; (8002be4 <HAL_ADC_MspInit+0x150>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d042      	beq.n	8002b3a <HAL_ADC_MspInit+0xa6>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002ab4:	b00a      	add	sp, #40	; 0x28
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 8002ab8:	4a4b      	ldr	r2, [pc, #300]	; (8002be8 <HAL_ADC_MspInit+0x154>)
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d02c      	beq.n	8002b1e <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac4:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_ADC_MspInit+0x158>)
 8002ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_VD1_FB_Pin|ADC_VD2_FB_Pin|ADC_VD3_FB_Pin|ADC_ID1_FB_Pin
 8002ad8:	2377      	movs	r3, #119	; 0x77
 8002ada:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002adc:	230b      	movs	r3, #11
 8002ade:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2500      	movs	r5, #0
 8002ae2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	a905      	add	r1, sp, #20
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aea:	f001 fd3b 	bl	8004564 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002aee:	4840      	ldr	r0, [pc, #256]	; (8002bf0 <HAL_ADC_MspInit+0x15c>)
 8002af0:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <HAL_ADC_MspInit+0x160>)
 8002af2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002af4:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002af6:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af8:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b02:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b08:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b0e:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b10:	f001 fbe6 	bl	80042e0 <HAL_DMA_Init>
 8002b14:	b970      	cbnz	r0, 8002b34 <HAL_ADC_MspInit+0xa0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_ADC_MspInit+0x15c>)
 8002b18:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002b1a:	629c      	str	r4, [r3, #40]	; 0x28
 8002b1c:	e7ca      	b.n	8002ab4 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002b1e:	4b33      	ldr	r3, [pc, #204]	; (8002bec <HAL_ADC_MspInit+0x158>)
 8002b20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b26:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	9b00      	ldr	r3, [sp, #0]
 8002b32:	e7c7      	b.n	8002ac4 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 8002b34:	f000 fb66 	bl	8003204 <Error_Handler>
 8002b38:	e7ed      	b.n	8002b16 <HAL_ADC_MspInit+0x82>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002b3a:	4a2b      	ldr	r2, [pc, #172]	; (8002be8 <HAL_ADC_MspInit+0x154>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d03d      	beq.n	8002bc2 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_ADC_MspInit+0x158>)
 8002b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b52:	f002 0201 	and.w	r2, r2, #1
 8002b56:	9203      	str	r2, [sp, #12]
 8002b58:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b5c:	f042 0202 	orr.w	r2, r2, #2
 8002b60:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	9304      	str	r3, [sp, #16]
 8002b6a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ADC_I_IN_Pin;
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b70:	260b      	movs	r6, #11
 8002b72:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2500      	movs	r5, #0
 8002b76:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(ADC_I_IN_GPIO_Port, &GPIO_InitStruct);
 8002b78:	a905      	add	r1, sp, #20
 8002b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7e:	f001 fcf1 	bl	8004564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b82:	2301      	movs	r3, #1
 8002b84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b86:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	a905      	add	r1, sp, #20
 8002b8c:	481a      	ldr	r0, [pc, #104]	; (8002bf8 <HAL_ADC_MspInit+0x164>)
 8002b8e:	f001 fce9 	bl	8004564 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel4;
 8002b92:	481a      	ldr	r0, [pc, #104]	; (8002bfc <HAL_ADC_MspInit+0x168>)
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <HAL_ADC_MspInit+0x16c>)
 8002b96:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8002b98:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b9a:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9c:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba6:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bac:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002bb2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002bb4:	f001 fb94 	bl	80042e0 <HAL_DMA_Init>
 8002bb8:	b970      	cbnz	r0, 8002bd8 <HAL_ADC_MspInit+0x144>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_ADC_MspInit+0x168>)
 8002bbc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002bbe:	629c      	str	r4, [r3, #40]	; 0x28
}
 8002bc0:	e778      	b.n	8002ab4 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_ADC_MspInit+0x158>)
 8002bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bca:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	9b02      	ldr	r3, [sp, #8]
 8002bd6:	e7b6      	b.n	8002b46 <HAL_ADC_MspInit+0xb2>
      Error_Handler();
 8002bd8:	f000 fb14 	bl	8003204 <Error_Handler>
 8002bdc:	e7ed      	b.n	8002bba <HAL_ADC_MspInit+0x126>
 8002bde:	bf00      	nop
 8002be0:	50040000 	.word	0x50040000
 8002be4:	50040100 	.word	0x50040100
 8002be8:	2000044c 	.word	0x2000044c
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	20003c38 	.word	0x20003c38
 8002bf4:	40020008 	.word	0x40020008
 8002bf8:	48000400 	.word	0x48000400
 8002bfc:	20003c80 	.word	0x20003c80
 8002c00:	40020444 	.word	0x40020444

08002c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c04:	b500      	push	{lr}
 8002c06:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <MX_DMA_Init+0x60>)
 8002c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c0c:	f042 0202 	orr.w	r2, r2, #2
 8002c10:	649a      	str	r2, [r3, #72]	; 0x48
 8002c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c14:	f002 0202 	and.w	r2, r2, #2
 8002c18:	9200      	str	r2, [sp, #0]
 8002c1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	649a      	str	r2, [r3, #72]	; 0x48
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2105      	movs	r1, #5
 8002c32:	200b      	movs	r0, #11
 8002c34:	f001 fafa 	bl	800422c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c38:	200b      	movs	r0, #11
 8002c3a:	f001 fb2b 	bl	8004294 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2105      	movs	r1, #5
 8002c42:	200d      	movs	r0, #13
 8002c44:	f001 faf2 	bl	800422c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002c48:	200d      	movs	r0, #13
 8002c4a:	f001 fb23 	bl	8004294 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2105      	movs	r1, #5
 8002c52:	203b      	movs	r0, #59	; 0x3b
 8002c54:	f001 faea 	bl	800422c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002c58:	203b      	movs	r0, #59	; 0x3b
 8002c5a:	f001 fb1b 	bl	8004294 <HAL_NVIC_EnableIRQ>

}
 8002c5e:	b003      	add	sp, #12
 8002c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c64:	40021000 	.word	0x40021000

08002c68 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <vApplicationGetIdleTaskMemory+0x10>)
 8002c6a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <vApplicationGetIdleTaskMemory+0x14>)
 8002c6e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002c70:	2340      	movs	r3, #64	; 0x40
 8002c72:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000550 	.word	0x20000550
 8002c7c:	20000450 	.word	0x20000450

08002c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c84:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c86:	2400      	movs	r4, #0
 8002c88:	9405      	str	r4, [sp, #20]
 8002c8a:	9406      	str	r4, [sp, #24]
 8002c8c:	9407      	str	r4, [sp, #28]
 8002c8e:	9408      	str	r4, [sp, #32]
 8002c90:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <MX_GPIO_Init+0x124>)
 8002c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c96:	f042 0204 	orr.w	r2, r2, #4
 8002c9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c9e:	f002 0204 	and.w	r2, r2, #4
 8002ca2:	9201      	str	r2, [sp, #4]
 8002ca4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cb0:	f002 0201 	and.w	r2, r2, #1
 8002cb4:	9202      	str	r2, [sp, #8]
 8002cb6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cba:	f042 0202 	orr.w	r2, r2, #2
 8002cbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cc2:	f002 0202 	and.w	r2, r2, #2
 8002cc6:	9203      	str	r2, [sp, #12]
 8002cc8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	9304      	str	r3, [sp, #16]
 8002cda:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_RESET);
 8002cdc:	4622      	mov	r2, r4
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce4:	f001 fd09 	bl	80046fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SMPS_EN_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8002ce8:	4e2f      	ldr	r6, [pc, #188]	; (8002da8 <MX_GPIO_Init+0x128>)
 8002cea:	4622      	mov	r2, r4
 8002cec:	f24f 0102 	movw	r1, #61442	; 0xf002
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	f001 fd02 	bl	80046fa <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8002cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cfa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING | GPIO_MODE_INPUT;
 8002cfc:	4f2b      	ldr	r7, [pc, #172]	; (8002dac <MX_GPIO_Init+0x12c>)
 8002cfe:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d00:	2501      	movs	r5, #1
 8002d02:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8002d04:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002db4 <MX_GPIO_Init+0x134>
 8002d08:	a905      	add	r1, sp, #20
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	f001 fc2a 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 8002d10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d14:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d16:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	a905      	add	r1, sp, #20
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	f001 fc21 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_3V3_Pin;
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d26:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(EN_3V3_GPIO_Port, &GPIO_InitStruct);
 8002d2c:	a905      	add	r1, sp, #20
 8002d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d32:	f001 fc17 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin;
 8002d36:	2302      	movs	r3, #2
 8002d38:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d3a:	2311      	movs	r3, #17
 8002d3c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d3e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SMPS_EN_GPIO_Port, &GPIO_InitStruct);
 8002d42:	a905      	add	r1, sp, #20
 8002d44:	4630      	mov	r0, r6
 8002d46:	f001 fc0d 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING | GPIO_MODE_INPUT;
 8002d4e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d50:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8002d52:	a905      	add	r1, sp, #20
 8002d54:	4630      	mov	r0, r6
 8002d56:	f001 fc05 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8002d5a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002d5e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d60:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d66:	a905      	add	r1, sp, #20
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f001 fbfb 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8002d6e:	2508      	movs	r5, #8
 8002d70:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d72:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002d76:	a905      	add	r1, sp, #20
 8002d78:	480d      	ldr	r0, [pc, #52]	; (8002db0 <MX_GPIO_Init+0x130>)
 8002d7a:	f001 fbf3 	bl	8004564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002d7e:	4622      	mov	r2, r4
 8002d80:	2105      	movs	r1, #5
 8002d82:	4628      	mov	r0, r5
 8002d84:	f001 fa52 	bl	800422c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f001 fa83 	bl	8004294 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002d8e:	4622      	mov	r2, r4
 8002d90:	2105      	movs	r1, #5
 8002d92:	2028      	movs	r0, #40	; 0x28
 8002d94:	f001 fa4a 	bl	800422c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d98:	2028      	movs	r0, #40	; 0x28
 8002d9a:	f001 fa7b 	bl	8004294 <HAL_NVIC_EnableIRQ>

}
 8002d9e:	b00a      	add	sp, #40	; 0x28
 8002da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	48000400 	.word	0x48000400
 8002dac:	10210000 	.word	0x10210000
 8002db0:	48001c00 	.word	0x48001c00
 8002db4:	48000800 	.word	0x48000800

08002db8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002db8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002dba:	4812      	ldr	r0, [pc, #72]	; (8002e04 <MX_I2C1_Init+0x4c>)
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <MX_I2C1_Init+0x50>)
 8002dbe:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00702991;
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <MX_I2C1_Init+0x54>)
 8002dc2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dcc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dce:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dd2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dd4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dd6:	f001 fe19 	bl	8004a0c <HAL_I2C_Init>
 8002dda:	b950      	cbnz	r0, 8002df2 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4809      	ldr	r0, [pc, #36]	; (8002e04 <MX_I2C1_Init+0x4c>)
 8002de0:	f002 f81e 	bl	8004e20 <HAL_I2CEx_ConfigAnalogFilter>
 8002de4:	b940      	cbnz	r0, 8002df8 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002de6:	2100      	movs	r1, #0
 8002de8:	4806      	ldr	r0, [pc, #24]	; (8002e04 <MX_I2C1_Init+0x4c>)
 8002dea:	f002 f847 	bl	8004e7c <HAL_I2CEx_ConfigDigitalFilter>
 8002dee:	b930      	cbnz	r0, 8002dfe <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8002df0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002df2:	f000 fa07 	bl	8003204 <Error_Handler>
 8002df6:	e7f1      	b.n	8002ddc <MX_I2C1_Init+0x24>
    Error_Handler();
 8002df8:	f000 fa04 	bl	8003204 <Error_Handler>
 8002dfc:	e7f3      	b.n	8002de6 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8002dfe:	f000 fa01 	bl	8003204 <Error_Handler>
}
 8002e02:	e7f5      	b.n	8002df0 <MX_I2C1_Init+0x38>
 8002e04:	20003cc8 	.word	0x20003cc8
 8002e08:	40005400 	.word	0x40005400
 8002e0c:	00702991 	.word	0x00702991

08002e10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	2300      	movs	r3, #0
 8002e16:	9303      	str	r3, [sp, #12]
 8002e18:	9304      	str	r3, [sp, #16]
 8002e1a:	9305      	str	r3, [sp, #20]
 8002e1c:	9306      	str	r3, [sp, #24]
 8002e1e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_I2C_MspInit+0x64>)
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e28:	b008      	add	sp, #32
 8002e2a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2c:	4c12      	ldr	r4, [pc, #72]	; (8002e78 <HAL_I2C_MspInit+0x68>)
 8002e2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e46:	2312      	movs	r3, #18
 8002e48:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e52:	2304      	movs	r3, #4
 8002e54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e56:	a903      	add	r1, sp, #12
 8002e58:	4808      	ldr	r0, [pc, #32]	; (8002e7c <HAL_I2C_MspInit+0x6c>)
 8002e5a:	f001 fb83 	bl	8004564 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e64:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	9b02      	ldr	r3, [sp, #8]
}
 8002e70:	e7da      	b.n	8002e28 <HAL_I2C_MspInit+0x18>
 8002e72:	bf00      	nop
 8002e74:	40005400 	.word	0x40005400
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	48000400 	.word	0x48000400

08002e80 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002e80:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
 8002e82:	4808      	ldr	r0, [pc, #32]	; (8002ea4 <MX_IWDG_Init+0x24>)
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <MX_IWDG_Init+0x28>)
 8002e86:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8002e88:	2305      	movs	r3, #5
 8002e8a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8002e8c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002e90:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8002e92:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002e94:	f002 f81e 	bl	8004ed4 <HAL_IWDG_Init>
 8002e98:	b900      	cbnz	r0, 8002e9c <MX_IWDG_Init+0x1c>
  {
    Error_Handler();
  }

}
 8002e9a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e9c:	f000 f9b2 	bl	8003204 <Error_Handler>
}
 8002ea0:	e7fb      	b.n	8002e9a <MX_IWDG_Init+0x1a>
 8002ea2:	bf00      	nop
 8002ea4:	20003d14 	.word	0x20003d14
 8002ea8:	40003000 	.word	0x40003000

08002eac <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002eac:	b5b0      	push	{r4, r5, r7, lr}
 8002eae:	b090      	sub	sp, #64	; 0x40
 8002eb0:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of xButtonSemaphore */
  osSemaphoreStaticDef(xButtonSemaphore, &xButtonSemaphoreControlBlock);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <_Z16MX_FREERTOS_Initv+0x70>)
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  xButtonSemaphoreHandle = osSemaphoreCreate(osSemaphore(xButtonSemaphore), 1);
 8002eba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f006 fc82 	bl	80097ca <osSemaphoreCreate>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <_Z16MX_FREERTOS_Initv+0x74>)
 8002eca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 64, defaultTaskBuffer, &defaultTaskControlBlock);
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <_Z16MX_FREERTOS_Initv+0x78>)
 8002ece:	f107 041c 	add.w	r4, r7, #28
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002edc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f006 fc33 	bl	8009752 <osThreadCreate>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <_Z16MX_FREERTOS_Initv+0x7c>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* definition and creation of State_of_Charge */
  osThreadStaticDef(State_of_Charge, Start_State_of_Charge_Task, osPriorityNormal, 0, 64, State_of_ChargeBuffer, &State_of_ChargeControlBlock);
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <_Z16MX_FREERTOS_Initv+0x80>)
 8002ef4:	463c      	mov	r4, r7
 8002ef6:	461d      	mov	r5, r3
 8002ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  State_of_ChargeHandle = osThreadCreate(osThread(State_of_Charge), NULL);
 8002f04:	463b      	mov	r3, r7
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f006 fc22 	bl	8009752 <osThreadCreate>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <_Z16MX_FREERTOS_Initv+0x84>)
 8002f12:	6013      	str	r3, [r2, #0]


  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002f14:	bf00      	nop
 8002f16:	3740      	adds	r7, #64	; 0x40
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1c:	200012bc 	.word	0x200012bc
 8002f20:	200012b8 	.word	0x200012b8
 8002f24:	0800e548 	.word	0x0800e548
 8002f28:	20001008 	.word	0x20001008
 8002f2c:	0800e564 	.word	0x0800e564
 8002f30:	20001160 	.word	0x20001160

08002f34 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002f3c:	f008 f932 	bl	800b1a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(UNUSED_TASK_OS_DELAY);
 8002f40:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002f44:	f006 fc3a 	bl	80097bc <osDelay>
 8002f48:	e7fa      	b.n	8002f40 <_Z16StartDefaultTaskPKv+0xc>
	...

08002f4c <_Z26Start_State_of_Charge_TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_State_of_Charge_Task */
void Start_State_of_Charge_Task(void const * argument)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b094      	sub	sp, #80	; 0x50
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_State_of_Charge_Task */


	const unsigned int adc2_data_length = 16;
 8002f54:	2310      	movs	r3, #16
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t adc2_data[16];
	HAL_ADC_Start_DMA(&hadc2, adc2_data, adc2_data_length);
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4803      	ldr	r0, [pc, #12]	; (8002f70 <_Z26Start_State_of_Charge_TaskPKv+0x24>)
 8002f62:	f001 f847 	bl	8003ff4 <HAL_ADC_Start_DMA>


  /* Infinite loop */
  for(;;)
  {
    osDelay(UNUSED_TASK_OS_DELAY);
 8002f66:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002f6a:	f006 fc27 	bl	80097bc <osDelay>
 8002f6e:	e7fa      	b.n	8002f66 <_Z26Start_State_of_Charge_TaskPKv+0x1a>
 8002f70:	20003b70 	.word	0x20003b70

08002f74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f78:	f000 fc0f 	bl	800379a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f7c:	f000 f819 	bl	8002fb2 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f80:	f7ff fe7e 	bl	8002c80 <MX_GPIO_Init>
	MX_DMA_Init();
 8002f84:	f7ff fe3e 	bl	8002c04 <MX_DMA_Init>
	MX_I2C1_Init();
 8002f88:	f7ff ff16 	bl	8002db8 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8002f8c:	f000 fb68 	bl	8003660 <MX_USART3_UART_Init>
	MX_TIM1_Init();
 8002f90:	f000 faf2 	bl	8003578 <MX_TIM1_Init>
	MX_ADC1_Init();
 8002f94:	f7ff fc84 	bl	80028a0 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002f98:	f7ff fd24 	bl	80029e4 <MX_ADC2_Init>
	MX_IWDG_Init();
 8002f9c:	f7ff ff70 	bl	8002e80 <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */

	Custom_MainBoard_abstraction_init();
 8002fa0:	f000 f8f0 	bl	8003184 <_Z33Custom_MainBoard_abstraction_initv>

	Custom_FREERTOS_Init();
 8002fa4:	f000 f88c 	bl	80030c0 <_Z20Custom_FREERTOS_Initv>
	/* init indicator to prevent unseen reset*/



	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8002fa8:	f7ff ff80 	bl	8002eac <_Z16MX_FREERTOS_Initv>
	/* Start scheduler */
	osKernelStart();
 8002fac:	f006 fbcc 	bl	8009748 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <main+0x3c>

08002fb2 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b0a4      	sub	sp, #144	; 0x90
 8002fb6:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fbc:	2244      	movs	r2, #68	; 0x44
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f008 fbd5 	bl	800b770 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	2234      	movs	r2, #52	; 0x34
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f008 fbc7 	bl	800b770 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fe2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fe6:	f002 feb1 	bl	8005d4c <HAL_PWREx_ControlVoltageScaling>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <SystemClock_Config+0x4c>
	{
		Error_Handler();
 8002ffa:	f000 f903 	bl	8003204 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8002ffe:	2338      	movs	r3, #56	; 0x38
 8003000:	64fb      	str	r3, [r7, #76]	; 0x4c
			|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003002:	2301      	movs	r3, #1
 8003004:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003006:	2301      	movs	r3, #1
 8003008:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800300a:	2301      	movs	r3, #1
 800300c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003012:	2360      	movs	r3, #96	; 0x60
 8003014:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003016:	2302      	movs	r3, #2
 8003018:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800301a:	2301      	movs	r3, #1
 800301c:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800301e:	2301      	movs	r3, #1
 8003020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLN = 40;
 8003024:	2328      	movs	r3, #40	; 0x28
 8003026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800302a:	2302      	movs	r3, #2
 800302c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003036:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800303a:	4618      	mov	r0, r3
 800303c:	f002 ff78 	bl	8005f30 <HAL_RCC_OscConfig>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8003050:	f000 f8d8 	bl	8003204 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003054:	230f      	movs	r3, #15
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003058:	2303      	movs	r3, #3
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003060:	2300      	movs	r3, #0
 8003062:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003064:	2300      	movs	r3, #0
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003068:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800306c:	2104      	movs	r1, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f003 facc 	bl	800660c <HAL_RCC_ClockConfig>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf14      	ite	ne
 800307a:	2301      	movne	r3, #1
 800307c:	2300      	moveq	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <SystemClock_Config+0xd6>
	{
		Error_Handler();
 8003084:	f000 f8be 	bl	8003204 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8003088:	f246 0344 	movw	r3, #24644	; 0x6044
 800308c:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003096:	2300      	movs	r3, #0
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fbab 	bl	80067f8 <HAL_RCCEx_PeriphCLKConfig>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <SystemClock_Config+0x104>
	{
		Error_Handler();
 80030b2:	f000 f8a7 	bl	8003204 <Error_Handler>
	}
}
 80030b6:	bf00      	nop
 80030b8:	3790      	adds	r7, #144	; 0x90
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <_Z20Custom_FREERTOS_Initv>:
/* USER CODE BEGIN 4 */




void Custom_FREERTOS_Init(void){
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b09c      	sub	sp, #112	; 0x70
 80030c4:	af00      	add	r7, sp, #0

	// FIXME rewrite thread def to prevent warning ISO c++ tring -> char*

	osThreadStaticDef(Main_Control, Start_Main_Control_Task, osPriorityNormal, 0, Main_Control_Task_Buffer_size, Main_Control_Task_Buffer, &Main_Control_TaskControlBlock);
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <_Z20Custom_FREERTOS_Initv+0xa4>)
 80030c8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80030cc:	461d      	mov	r5, r3
 80030ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Main_ControlHandle = osThreadCreate(osThread(Main_Control), NULL);
 80030da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f006 fb36 	bl	8009752 <osThreadCreate>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <_Z20Custom_FREERTOS_Initv+0xa8>)
 80030ea:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(LED_Driver, Start_LED_Driver_Task, osPriorityHigh, 0, LED_Driver_Task_Buffer_size, LED_Driver_Task_Buffer, &LED_DriverControlBlock);
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <_Z20Custom_FREERTOS_Initv+0xac>)
 80030ee:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80030f2:	461d      	mov	r5, r3
 80030f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED_DriverHandle = osThreadCreate(osThread(LED_Driver), NULL);
 8003100:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f006 fb23 	bl	8009752 <osThreadCreate>
 800310c:	4603      	mov	r3, r0
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <_Z20Custom_FREERTOS_Initv+0xb0>)
 8003110:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(IMU_Gesture, Start_IMU_Gesture_Task, osPriorityBelowNormal, 0,IMU_Gesture_Task_Buffer_size, IMU_GestureBuffer, &IMU_GestureControlBlock);
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <_Z20Custom_FREERTOS_Initv+0xb4>)
 8003114:	f107 041c 	add.w	r4, r7, #28
 8003118:	461d      	mov	r5, r3
 800311a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800311c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800311e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMU_GestureHandle = osThreadCreate(osThread(IMU_Gesture), NULL);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f006 fb10 	bl	8009752 <osThreadCreate>
 8003132:	4603      	mov	r3, r0
 8003134:	4a10      	ldr	r2, [pc, #64]	; (8003178 <_Z20Custom_FREERTOS_Initv+0xb8>)
 8003136:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(User_Buttons, Start_User_Buttons_Task, osPriorityNormal, 0, User_Buttons_Task_Buffer_size, User_Buttons_Task_Buffer, &User_ButtonControlBlock);
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <_Z20Custom_FREERTOS_Initv+0xbc>)
 800313a:	463c      	mov	r4, r7
 800313c:	461d      	mov	r5, r3
 800313e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	User_ButtonsHandle = osThreadCreate(osThread(User_Buttons), NULL);
 800314a:	463b      	mov	r3, r7
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f006 faff 	bl	8009752 <osThreadCreate>
 8003154:	4603      	mov	r3, r0
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <_Z20Custom_FREERTOS_Initv+0xc0>)
 8003158:	6013      	str	r3, [r2, #0]

}
 800315a:	bf00      	nop
 800315c:	3770      	adds	r7, #112	; 0x70
 800315e:	46bd      	mov	sp, r7
 8003160:	bdb0      	pop	{r4, r5, r7, pc}
 8003162:	bf00      	nop
 8003164:	0800e580 	.word	0x0800e580
 8003168:	200005a4 	.word	0x200005a4
 800316c:	0800e59c 	.word	0x0800e59c
 8003170:	200007fc 	.word	0x200007fc
 8003174:	0800e5b8 	.word	0x0800e5b8
 8003178:	20000bac 	.word	0x20000bac
 800317c:	0800e5d4 	.word	0x0800e5d4
 8003180:	20000a54 	.word	0x20000a54

08003184 <_Z33Custom_MainBoard_abstraction_initv>:


void Custom_MainBoard_abstraction_init(){
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0

	//		SMPS - ON
	HAL_GPIO_WritePin(SMPS_EN_GPIO_Port, SMPS_EN_Pin, GPIO_PIN_SET);
 800318a:	2201      	movs	r2, #1
 800318c:	2102      	movs	r1, #2
 800318e:	4813      	ldr	r0, [pc, #76]	; (80031dc <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 8003190:	f001 fab3 	bl	80046fa <HAL_GPIO_WritePin>
	//		SMPS - OFF
	//HAL_GPIO_WritePin(SMPS_EN_GPIO_Port, SMPS_EN_Pin, (GPIO_PinState)0);


	/* Reset indicator to prevent unseen */
	for(int i = 0; i < 6; i++){
 8003194:	2300      	movs	r3, #0
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b05      	cmp	r3, #5
 800319c:	dc1a      	bgt.n	80031d4 <_Z33Custom_MainBoard_abstraction_initv+0x50>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800319e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031a2:	480e      	ldr	r0, [pc, #56]	; (80031dc <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 80031a4:	f001 faae 	bl	8004704 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80031a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ac:	480b      	ldr	r0, [pc, #44]	; (80031dc <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 80031ae:	f001 faa9 	bl	8004704 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80031b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031b6:	4809      	ldr	r0, [pc, #36]	; (80031dc <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 80031b8:	f001 faa4 	bl	8004704 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80031bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c0:	4806      	ldr	r0, [pc, #24]	; (80031dc <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 80031c2:	f001 fa9f 	bl	8004704 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80031c6:	20c8      	movs	r0, #200	; 0xc8
 80031c8:	f000 fb08 	bl	80037dc <HAL_Delay>
	for(int i = 0; i < 6; i++){
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3301      	adds	r3, #1
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e7e1      	b.n	8003198 <_Z33Custom_MainBoard_abstraction_initv+0x14>
	}



}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	48000400 	.word	0x48000400

080031e0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80031f2:	f000 fae1 	bl	80037b8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	/* USER CODE END Callback 1 */
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40014400 	.word	0x40014400

08003204 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* USER CODE END Error_Handler_Debug */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003214:	b500      	push	{lr}
 8003216:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_MspInit+0x3c>)
 800321a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
 8003222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003224:	f002 0201 	and.w	r2, r2, #1
 8003228:	9200      	str	r2, [sp, #0]
 800322a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800322e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003232:	659a      	str	r2, [r3, #88]	; 0x58
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	210f      	movs	r1, #15
 8003242:	f06f 0001 	mvn.w	r0, #1
 8003246:	f000 fff1 	bl	800422c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800324a:	b003      	add	sp, #12
 800324c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003254:	b500      	push	{lr}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800325a:	2200      	movs	r2, #0
 800325c:	2019      	movs	r0, #25
 800325e:	f000 ffe5 	bl	800422c <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003262:	2019      	movs	r0, #25
 8003264:	f001 f816 	bl	8004294 <HAL_NVIC_EnableIRQ>
  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003268:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_InitTick+0x68>)
 800326a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800326c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003270:	661a      	str	r2, [r3, #96]	; 0x60
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800327c:	a902      	add	r1, sp, #8
 800327e:	a803      	add	r0, sp, #12
 8003280:	f003 fa9c 	bl	80067bc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003284:	f003 fa88 	bl	8006798 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_InitTick+0x6c>)
 800328a:	fba3 2300 	umull	r2, r3, r3, r0
 800328e:	0c9b      	lsrs	r3, r3, #18
 8003290:	3b01      	subs	r3, #1

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003292:	480c      	ldr	r0, [pc, #48]	; (80032c4 <HAL_InitTick+0x70>)
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <HAL_InitTick+0x74>)
 8003296:	6002      	str	r2, [r0, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003298:	f240 32e7 	movw	r2, #999	; 0x3e7
 800329c:	60c2      	str	r2, [r0, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800329e:	6043      	str	r3, [r0, #4]
  htim16.Init.ClockDivision = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	6103      	str	r3, [r0, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a4:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80032a6:	f003 fe03 	bl	8006eb0 <HAL_TIM_Base_Init>
 80032aa:	b118      	cbz	r0, 80032b4 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
  }

  /* Return function status */
  return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
}
 80032ae:	b009      	add	sp, #36	; 0x24
 80032b0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim16);
 80032b4:	4803      	ldr	r0, [pc, #12]	; (80032c4 <HAL_InitTick+0x70>)
 80032b6:	f003 fcbb 	bl	8006c30 <HAL_TIM_Base_Start_IT>
 80032ba:	e7f8      	b.n	80032ae <HAL_InitTick+0x5a>
 80032bc:	40021000 	.word	0x40021000
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	20003d24 	.word	0x20003d24
 80032c8:	40014400 	.word	0x40014400

080032cc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032cc:	4770      	bx	lr
	...

080032d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d0:	b508      	push	{r3, lr}

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80032d2:	4c0d      	ldr	r4, [pc, #52]	; (8003308 <HardFault_Handler+0x38>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032da:	4620      	mov	r0, r4
 80032dc:	f001 fa0d 	bl	80046fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032e6:	4620      	mov	r0, r4
 80032e8:	f001 fa07 	bl	80046fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032f2:	4620      	mov	r0, r4
 80032f4:	f001 fa01 	bl	80046fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80032f8:	2201      	movs	r2, #1
 80032fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032fe:	4620      	mov	r0, r4
 8003300:	f001 f9fb 	bl	80046fa <HAL_GPIO_WritePin>
  while (1)
 8003304:	e7e5      	b.n	80032d2 <HardFault_Handler+0x2>
 8003306:	bf00      	nop
 8003308:	48000400 	.word	0x48000400

0800330c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800330c:	e7fe      	b.n	800330c <MemManage_Handler>

0800330e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330e:	e7fe      	b.n	800330e <BusFault_Handler>

08003310 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <UsageFault_Handler>

08003312 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003312:	4770      	bx	lr

08003314 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003314:	b500      	push	{lr}
 8003316:	b083      	sub	sp, #12
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003318:	2004      	movs	r0, #4
 800331a:	f001 f9fd 	bl	8004718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  BaseType_t sHigherPriorityTaskWoken = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	9301      	str	r3, [sp, #4]
  xSemaphoreGiveFromISR(xButtonSemaphoreHandle,&sHigherPriorityTaskWoken);
 8003322:	a901      	add	r1, sp, #4
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <EXTI2_IRQHandler+0x20>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	f006 fcf8 	bl	8009d1c <xQueueGiveFromISR>
  //portYIELD_FROM_ISR( sHigherPriorityTaskWoken );

  /* USER CODE END EXTI2_IRQn 1 */
}
 800332c:	b003      	add	sp, #12
 800332e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003332:	bf00      	nop
 8003334:	200012b8 	.word	0x200012b8

08003338 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003338:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800333a:	4802      	ldr	r0, [pc, #8]	; (8003344 <DMA1_Channel1_IRQHandler+0xc>)
 800333c:	f001 f8af 	bl	800449e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003340:	bd08      	pop	{r3, pc}
 8003342:	bf00      	nop
 8003344:	20003c38 	.word	0x20003c38

08003348 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003348:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800334a:	4802      	ldr	r0, [pc, #8]	; (8003354 <DMA1_Channel3_IRQHandler+0xc>)
 800334c:	f001 f8a7 	bl	800449e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003350:	bd08      	pop	{r3, pc}
 8003352:	bf00      	nop
 8003354:	20003dbc 	.word	0x20003dbc

08003358 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003358:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800335a:	4803      	ldr	r0, [pc, #12]	; (8003368 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800335c:	f003 fca2 	bl	8006ca4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003362:	f003 fc9f 	bl	8006ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003366:	bd08      	pop	{r3, pc}
 8003368:	20003d70 	.word	0x20003d70
 800336c:	20003d24 	.word	0x20003d24

08003370 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003372:	4802      	ldr	r0, [pc, #8]	; (800337c <USART3_IRQHandler+0xc>)
 8003374:	f004 f8c0 	bl	80074f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003378:	bd08      	pop	{r3, pc}
 800337a:	bf00      	nop
 800337c:	20003e04 	.word	0x20003e04

08003380 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003380:	b500      	push	{lr}
 8003382:	b083      	sub	sp, #12
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003384:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003388:	f001 f9c6 	bl	8004718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

	BaseType_t sHigherPriorityTaskWoken = pdFALSE;
 800338c:	2300      	movs	r3, #0
 800338e:	9301      	str	r3, [sp, #4]
	xSemaphoreGiveFromISR(xButtonSemaphoreHandle,&sHigherPriorityTaskWoken);
 8003390:	a901      	add	r1, sp, #4
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <EXTI15_10_IRQHandler+0x34>)
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f006 fcc1 	bl	8009d1c <xQueueGiveFromISR>
	portYIELD_FROM_ISR( sHigherPriorityTaskWoken );
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	b13b      	cbz	r3, 80033ae <EXTI15_10_IRQHandler+0x2e>
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <EXTI15_10_IRQHandler+0x38>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033ae:	b003      	add	sp, #12
 80033b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80033b4:	200012b8 	.word	0x200012b8
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80033bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80033be:	4802      	ldr	r0, [pc, #8]	; (80033c8 <DMA2_Channel4_IRQHandler+0xc>)
 80033c0:	f001 f86d 	bl	800449e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80033c4:	bd08      	pop	{r3, pc}
 80033c6:	bf00      	nop
 80033c8:	20003c80 	.word	0x20003c80

080033cc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80033cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80033ce:	4802      	ldr	r0, [pc, #8]	; (80033d8 <USB_IRQHandler+0xc>)
 80033d0:	f002 fa61 	bl	8005896 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80033d4:	bd08      	pop	{r3, pc}
 80033d6:	bf00      	nop
 80033d8:	20004b28 	.word	0x20004b28

080033dc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80033dc:	2001      	movs	r0, #1
 80033de:	4770      	bx	lr

080033e0 <_kill>:

int _kill(int pid, int sig)
{
 80033e0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80033e2:	f008 f97d 	bl	800b6e0 <__errno>
 80033e6:	2316      	movs	r3, #22
 80033e8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80033ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ee:	bd08      	pop	{r3, pc}

080033f0 <_exit>:

void _exit (int status)
{
 80033f0:	b508      	push	{r3, lr}
	_kill(status, -1);
 80033f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033f6:	f7ff fff3 	bl	80033e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033fa:	e7fe      	b.n	80033fa <_exit+0xa>

080033fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	460c      	mov	r4, r1
 8003400:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2500      	movs	r5, #0
 8003404:	42b5      	cmp	r5, r6
 8003406:	da07      	bge.n	8003418 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8003408:	f3af 8000 	nop.w
 800340c:	4621      	mov	r1, r4
 800340e:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003412:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003414:	460c      	mov	r4, r1
 8003416:	e7f5      	b.n	8003404 <_read+0x8>
	}

return len;
}
 8003418:	4630      	mov	r0, r6
 800341a:	bd70      	pop	{r4, r5, r6, pc}

0800341c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	460c      	mov	r4, r1
 8003420:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003422:	2500      	movs	r5, #0
 8003424:	42b5      	cmp	r5, r6
 8003426:	da05      	bge.n	8003434 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8003428:	f814 0b01 	ldrb.w	r0, [r4], #1
 800342c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003430:	3501      	adds	r5, #1
 8003432:	e7f7      	b.n	8003424 <_write+0x8>
	}
	return len;
}
 8003434:	4630      	mov	r0, r6
 8003436:	bd70      	pop	{r4, r5, r6, pc}

08003438 <_close>:

int _close(int file)
{
	return -1;
}
 8003438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800343c:	4770      	bx	lr

0800343e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800343e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003442:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003444:	2000      	movs	r0, #0
 8003446:	4770      	bx	lr

08003448 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003448:	2001      	movs	r0, #1
 800344a:	4770      	bx	lr

0800344c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800344c:	2000      	movs	r0, #0
 800344e:	4770      	bx	lr

08003450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003450:	b510      	push	{r4, lr}
 8003452:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003454:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <_sbrk+0x38>)
 8003456:	490d      	ldr	r1, [pc, #52]	; (800348c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end) // @suppress("Symbol is not resolved")
 8003458:	480d      	ldr	r0, [pc, #52]	; (8003490 <_sbrk+0x40>)
 800345a:	6800      	ldr	r0, [r0, #0]
 800345c:	b140      	cbz	r0, 8003470 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800345e:	480c      	ldr	r0, [pc, #48]	; (8003490 <_sbrk+0x40>)
 8003460:	6800      	ldr	r0, [r0, #0]
 8003462:	4403      	add	r3, r0
 8003464:	1a52      	subs	r2, r2, r1
 8003466:	4293      	cmp	r3, r2
 8003468:	d806      	bhi.n	8003478 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <_sbrk+0x40>)
 800346c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800346e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003470:	4807      	ldr	r0, [pc, #28]	; (8003490 <_sbrk+0x40>)
 8003472:	4c08      	ldr	r4, [pc, #32]	; (8003494 <_sbrk+0x44>)
 8003474:	6004      	str	r4, [r0, #0]
 8003476:	e7f2      	b.n	800345e <_sbrk+0xe>
    errno = ENOMEM;
 8003478:	f008 f932 	bl	800b6e0 <__errno>
 800347c:	230c      	movs	r3, #12
 800347e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003484:	e7f3      	b.n	800346e <_sbrk+0x1e>
 8003486:	bf00      	nop
 8003488:	2000a000 	.word	0x2000a000
 800348c:	00000400 	.word	0x00000400
 8003490:	20001308 	.word	0x20001308
 8003494:	20004e30 	.word	0x20004e30

08003498 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003498:	490f      	ldr	r1, [pc, #60]	; (80034d8 <SystemInit+0x40>)
 800349a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800349e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <SystemInit+0x44>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80034b0:	2000      	movs	r0, #0
 80034b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80034ba:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80034be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80034c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034cc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80034ce:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034d4:	608b      	str	r3, [r1, #8]
#endif
}
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00
 80034dc:	40021000 	.word	0x40021000

080034e0 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80034e0:	6802      	ldr	r2, [r0, #0]
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_TIM_PWM_MspInit+0x3c>)
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d000      	beq.n	80034ea <HAL_TIM_PWM_MspInit+0xa>
 80034e8:	4770      	bx	lr
{
 80034ea:	b500      	push	{lr}
 80034ec:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ee:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80034f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	4611      	mov	r1, r2
 8003508:	2019      	movs	r0, #25
 800350a:	f000 fe8f 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800350e:	2019      	movs	r0, #25
 8003510:	f000 fec0 	bl	8004294 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003514:	b003      	add	sp, #12
 8003516:	f85d fb04 	ldr.w	pc, [sp], #4
 800351a:	bf00      	nop
 800351c:	40012c00 	.word	0x40012c00

08003520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003520:	b500      	push	{lr}
 8003522:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	2300      	movs	r3, #0
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	9302      	str	r3, [sp, #8]
 800352a:	9303      	str	r3, [sp, #12]
 800352c:	9304      	str	r3, [sp, #16]
 800352e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8003530:	6802      	ldr	r2, [r0, #0]
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_TIM_MspPostInit+0x54>)
 8003534:	429a      	cmp	r2, r3
 8003536:	d002      	beq.n	800353e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003538:	b007      	add	sp, #28
 800353a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	64da      	str	r2, [r3, #76]	; 0x4c
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003554:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003558:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003564:	2301      	movs	r3, #1
 8003566:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	a901      	add	r1, sp, #4
 800356a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356e:	f000 fff9 	bl	8004564 <HAL_GPIO_Init>
}
 8003572:	e7e1      	b.n	8003538 <HAL_TIM_MspPostInit+0x18>
 8003574:	40012c00 	.word	0x40012c00

08003578 <MX_TIM1_Init>:
{
 8003578:	b510      	push	{r4, lr}
 800357a:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357c:	2400      	movs	r4, #0
 800357e:	9413      	str	r4, [sp, #76]	; 0x4c
 8003580:	9414      	str	r4, [sp, #80]	; 0x50
 8003582:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003584:	940c      	str	r4, [sp, #48]	; 0x30
 8003586:	940d      	str	r4, [sp, #52]	; 0x34
 8003588:	940e      	str	r4, [sp, #56]	; 0x38
 800358a:	940f      	str	r4, [sp, #60]	; 0x3c
 800358c:	9410      	str	r4, [sp, #64]	; 0x40
 800358e:	9411      	str	r4, [sp, #68]	; 0x44
 8003590:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003592:	222c      	movs	r2, #44	; 0x2c
 8003594:	4621      	mov	r1, r4
 8003596:	a801      	add	r0, sp, #4
 8003598:	f008 f8ea 	bl	800b770 <memset>
  htim1.Instance = TIM1;
 800359c:	482e      	ldr	r0, [pc, #184]	; (8003658 <MX_TIM1_Init+0xe0>)
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <MX_TIM1_Init+0xe4>)
 80035a0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80035a2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a4:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 200;
 80035a6:	23c8      	movs	r3, #200	; 0xc8
 80035a8:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035aa:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80035ac:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ae:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035b0:	f003 fcae 	bl	8006f10 <HAL_TIM_PWM_Init>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d13d      	bne.n	8003634 <MX_TIM1_Init+0xbc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035bc:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035be:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035c0:	a913      	add	r1, sp, #76	; 0x4c
 80035c2:	4825      	ldr	r0, [pc, #148]	; (8003658 <MX_TIM1_Init+0xe0>)
 80035c4:	f003 fe4e 	bl	8007264 <HAL_TIMEx_MasterConfigSynchronization>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d136      	bne.n	800363a <MX_TIM1_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035cc:	2360      	movs	r3, #96	; 0x60
 80035ce:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80035d0:	2200      	movs	r2, #0
 80035d2:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035d4:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035d6:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035d8:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035da:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035dc:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035de:	a90c      	add	r1, sp, #48	; 0x30
 80035e0:	481d      	ldr	r0, [pc, #116]	; (8003658 <MX_TIM1_Init+0xe0>)
 80035e2:	f003 fd01 	bl	8006fe8 <HAL_TIM_PWM_ConfigChannel>
 80035e6:	bb58      	cbnz	r0, 8003640 <MX_TIM1_Init+0xc8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035e8:	2204      	movs	r2, #4
 80035ea:	a90c      	add	r1, sp, #48	; 0x30
 80035ec:	481a      	ldr	r0, [pc, #104]	; (8003658 <MX_TIM1_Init+0xe0>)
 80035ee:	f003 fcfb 	bl	8006fe8 <HAL_TIM_PWM_ConfigChannel>
 80035f2:	bb40      	cbnz	r0, 8003646 <MX_TIM1_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035f4:	2208      	movs	r2, #8
 80035f6:	a90c      	add	r1, sp, #48	; 0x30
 80035f8:	4817      	ldr	r0, [pc, #92]	; (8003658 <MX_TIM1_Init+0xe0>)
 80035fa:	f003 fcf5 	bl	8006fe8 <HAL_TIM_PWM_ConfigChannel>
 80035fe:	bb28      	cbnz	r0, 800364c <MX_TIM1_Init+0xd4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003604:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003606:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003608:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800360a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800360c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003610:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003612:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003614:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361a:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800361c:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800361e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003620:	a901      	add	r1, sp, #4
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <MX_TIM1_Init+0xe0>)
 8003624:	f003 fe56 	bl	80072d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003628:	b998      	cbnz	r0, 8003652 <MX_TIM1_Init+0xda>
  HAL_TIM_MspPostInit(&htim1);
 800362a:	480b      	ldr	r0, [pc, #44]	; (8003658 <MX_TIM1_Init+0xe0>)
 800362c:	f7ff ff78 	bl	8003520 <HAL_TIM_MspPostInit>
}
 8003630:	b016      	add	sp, #88	; 0x58
 8003632:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003634:	f7ff fde6 	bl	8003204 <Error_Handler>
 8003638:	e7be      	b.n	80035b8 <MX_TIM1_Init+0x40>
    Error_Handler();
 800363a:	f7ff fde3 	bl	8003204 <Error_Handler>
 800363e:	e7c5      	b.n	80035cc <MX_TIM1_Init+0x54>
    Error_Handler();
 8003640:	f7ff fde0 	bl	8003204 <Error_Handler>
 8003644:	e7d0      	b.n	80035e8 <MX_TIM1_Init+0x70>
    Error_Handler();
 8003646:	f7ff fddd 	bl	8003204 <Error_Handler>
 800364a:	e7d3      	b.n	80035f4 <MX_TIM1_Init+0x7c>
    Error_Handler();
 800364c:	f7ff fdda 	bl	8003204 <Error_Handler>
 8003650:	e7d6      	b.n	8003600 <MX_TIM1_Init+0x88>
    Error_Handler();
 8003652:	f7ff fdd7 	bl	8003204 <Error_Handler>
 8003656:	e7e8      	b.n	800362a <MX_TIM1_Init+0xb2>
 8003658:	20003d70 	.word	0x20003d70
 800365c:	40012c00 	.word	0x40012c00

08003660 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003660:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003662:	480b      	ldr	r0, [pc, #44]	; (8003690 <MX_USART3_UART_Init+0x30>)
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <MX_USART3_UART_Init+0x34>)
 8003666:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8003668:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800366c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800366e:	2300      	movs	r3, #0
 8003670:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003672:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003674:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003676:	220c      	movs	r2, #12
 8003678:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800367a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800367c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800367e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003680:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003682:	f004 fa3f 	bl	8007b04 <HAL_UART_Init>
 8003686:	b900      	cbnz	r0, 800368a <MX_USART3_UART_Init+0x2a>
  {
    Error_Handler();
  }

}
 8003688:	bd08      	pop	{r3, pc}
    Error_Handler();
 800368a:	f7ff fdbb 	bl	8003204 <Error_Handler>
}
 800368e:	e7fb      	b.n	8003688 <MX_USART3_UART_Init+0x28>
 8003690:	20003e04 	.word	0x20003e04
 8003694:	40004800 	.word	0x40004800

08003698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	2300      	movs	r3, #0
 800369e:	9303      	str	r3, [sp, #12]
 80036a0:	9304      	str	r3, [sp, #16]
 80036a2:	9305      	str	r3, [sp, #20]
 80036a4:	9306      	str	r3, [sp, #24]
 80036a6:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 80036a8:	6802      	ldr	r2, [r0, #0]
 80036aa:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_UART_MspInit+0xa8>)
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80036b0:	b008      	add	sp, #32
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 80036b6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80036ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036c0:	659a      	str	r2, [r3, #88]	; 0x58
 80036c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036c4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80036c8:	9201      	str	r2, [sp, #4]
 80036ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ce:	f042 0202 	orr.w	r2, r2, #2
 80036d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2602      	movs	r6, #2
 80036e6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2500      	movs	r5, #0
 80036ea:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ec:	2303      	movs	r3, #3
 80036ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036f0:	2307      	movs	r3, #7
 80036f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f4:	a903      	add	r1, sp, #12
 80036f6:	4813      	ldr	r0, [pc, #76]	; (8003744 <HAL_UART_MspInit+0xac>)
 80036f8:	f000 ff34 	bl	8004564 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80036fc:	4812      	ldr	r0, [pc, #72]	; (8003748 <HAL_UART_MspInit+0xb0>)
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_UART_MspInit+0xb4>)
 8003700:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8003702:	6046      	str	r6, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003704:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003706:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800370c:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800370e:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003710:	2320      	movs	r3, #32
 8003712:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003718:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800371a:	f000 fde1 	bl	80042e0 <HAL_DMA_Init>
 800371e:	b958      	cbnz	r0, 8003738 <HAL_UART_MspInit+0xa0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_UART_MspInit+0xb0>)
 8003722:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003724:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2105      	movs	r1, #5
 800372a:	2027      	movs	r0, #39	; 0x27
 800372c:	f000 fd7e 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003730:	2027      	movs	r0, #39	; 0x27
 8003732:	f000 fdaf 	bl	8004294 <HAL_NVIC_EnableIRQ>
}
 8003736:	e7bb      	b.n	80036b0 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003738:	f7ff fd64 	bl	8003204 <Error_Handler>
 800373c:	e7f0      	b.n	8003720 <HAL_UART_MspInit+0x88>
 800373e:	bf00      	nop
 8003740:	40004800 	.word	0x40004800
 8003744:	48000400 	.word	0x48000400
 8003748:	20003dbc 	.word	0x20003dbc
 800374c:	40020030 	.word	0x40020030

08003750 <Reset_Handler>:
	.type	Reset_Handler, %function
Reset_Handler:

//c  ldr   sp, =_estack    /* Set stack pointer */
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003750:	f7ff fea2 	bl	8003498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003754:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003756:	e003      	b.n	8003760 <LoopCopyDataInit>

08003758 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 800375a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800375c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800375e:	3104      	adds	r1, #4

08003760 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003760:	4809      	ldr	r0, [pc, #36]	; (8003788 <LoopForever+0x6>)
	ldr	r3, =_edata
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <LoopForever+0xa>)
	adds	r2, r0, r1
 8003764:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003766:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003768:	d3f6      	bcc.n	8003758 <CopyDataInit>
	ldr	r2, =_sbss
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <LoopForever+0xe>)
	b	LoopFillZerobss
 800376c:	e002      	b.n	8003774 <LoopFillZerobss>

0800376e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800376e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003770:	f842 3b04 	str.w	r3, [r2], #4

08003774 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <LoopForever+0x12>)
	cmp	r2, r3
 8003776:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003778:	d3f9      	bcc.n	800376e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800377a:	f007 ffb7 	bl	800b6ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800377e:	f7ff fbf9 	bl	8002f74 <main>

08003782 <LoopForever>:

LoopForever:
    b LoopForever
 8003782:	e7fe      	b.n	8003782 <LoopForever>
	ldr	r3, =_sidata
 8003784:	0800ea7c 	.word	0x0800ea7c
	ldr	r0, =_sdata
 8003788:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800378c:	20000364 	.word	0x20000364
	ldr	r2, =_sbss
 8003790:	20000364 	.word	0x20000364
	ldr	r3, = _ebss
 8003794:	20004e2c 	.word	0x20004e2c

08003798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003798:	e7fe      	b.n	8003798 <ADC1_2_IRQHandler>

0800379a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800379a:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379c:	2003      	movs	r0, #3
 800379e:	f000 fd33 	bl	8004208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037a2:	2000      	movs	r0, #0
 80037a4:	f7ff fd56 	bl	8003254 <HAL_InitTick>
 80037a8:	b110      	cbz	r0, 80037b0 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 80037aa:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80037ac:	4620      	mov	r0, r4
 80037ae:	bd10      	pop	{r4, pc}
 80037b0:	4604      	mov	r4, r0
    HAL_MspInit();
 80037b2:	f7ff fd2f 	bl	8003214 <HAL_MspInit>
 80037b6:	e7f9      	b.n	80037ac <HAL_Init+0x12>

080037b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_IncTick+0x10>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4a03      	ldr	r2, [pc, #12]	; (80037cc <HAL_IncTick+0x14>)
 80037be:	6811      	ldr	r1, [r2, #0]
 80037c0:	440b      	add	r3, r1
 80037c2:	6013      	str	r3, [r2, #0]
}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000004 	.word	0x20000004
 80037cc:	20003e84 	.word	0x20003e84

080037d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <HAL_GetTick+0x8>)
 80037d2:	6818      	ldr	r0, [r3, #0]
}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20003e84 	.word	0x20003e84

080037dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80037e0:	f7ff fff6 	bl	80037d0 <HAL_GetTick>
 80037e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80037ea:	d002      	beq.n	80037f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_Delay+0x24>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f2:	f7ff ffed 	bl	80037d0 <HAL_GetTick>
 80037f6:	1b40      	subs	r0, r0, r5
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d3fa      	bcc.n	80037f2 <HAL_Delay+0x16>
  {
  }
}
 80037fc:	bd38      	pop	{r3, r4, r5, pc}
 80037fe:	bf00      	nop
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003804:	b530      	push	{r4, r5, lr}
 8003806:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003808:	2300      	movs	r3, #0
 800380a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800380c:	2800      	cmp	r0, #0
 800380e:	f000 80e1 	beq.w	80039d4 <HAL_ADC_Init+0x1d0>
 8003812:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003814:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003816:	b303      	cbz	r3, 800385a <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003818:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003820:	d005      	beq.n	800382e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003828:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800382c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800382e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003830:	6893      	ldr	r3, [r2, #8]
 8003832:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003836:	d11d      	bne.n	8003874 <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8003838:	6893      	ldr	r3, [r2, #8]
 800383a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800383e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003846:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003848:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_ADC_Init+0x1d4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	4a63      	ldr	r2, [pc, #396]	; (80039dc <HAL_ADC_Init+0x1d8>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003858:	e009      	b.n	800386e <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 800385a:	f7ff f91b 	bl	8002a94 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800385e:	2300      	movs	r3, #0
 8003860:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003862:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003866:	e7d7      	b.n	8003818 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003868:	9b01      	ldr	r3, [sp, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003874:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003876:	6893      	ldr	r3, [r2, #8]
 8003878:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800387c:	d109      	bne.n	8003892 <HAL_ADC_Init+0x8e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003880:	f043 0310 	orr.w	r3, r3, #16
 8003884:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800388e:	2001      	movs	r0, #1
 8003890:	e000      	b.n	8003894 <HAL_ADC_Init+0x90>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003892:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003894:	6893      	ldr	r3, [r2, #8]
 8003896:	f013 0304 	ands.w	r3, r3, #4
 800389a:	d000      	beq.n	800389e <HAL_ADC_Init+0x9a>
 800389c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800389e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038a0:	f011 0f10 	tst.w	r1, #16
 80038a4:	f040 808f 	bne.w	80039c6 <HAL_ADC_Init+0x1c2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 808c 	bne.w	80039c6 <HAL_ADC_Init+0x1c2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038ba:	6893      	ldr	r3, [r2, #8]
 80038bc:	f013 0f01 	tst.w	r3, #1
 80038c0:	d114      	bne.n	80038ec <HAL_ADC_Init+0xe8>
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_ADC_Init+0x1dc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f013 0301 	ands.w	r3, r3, #1
 80038ca:	d000      	beq.n	80038ce <HAL_ADC_Init+0xca>
 80038cc:	2301      	movs	r3, #1
 80038ce:	4a45      	ldr	r2, [pc, #276]	; (80039e4 <HAL_ADC_Init+0x1e0>)
 80038d0:	6892      	ldr	r2, [r2, #8]
 80038d2:	f012 0201 	ands.w	r2, r2, #1
 80038d6:	d000      	beq.n	80038da <HAL_ADC_Init+0xd6>
 80038d8:	2201      	movs	r2, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038da:	4313      	orrs	r3, r2
 80038dc:	d106      	bne.n	80038ec <HAL_ADC_Init+0xe8>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038de:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038e0:	4941      	ldr	r1, [pc, #260]	; (80039e8 <HAL_ADC_Init+0x1e4>)
 80038e2:	688a      	ldr	r2, [r1, #8]
 80038e4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038ec:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 80038ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038f0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80038f4:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80038f6:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80038f8:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80038fa:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038fc:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003904:	2a01      	cmp	r2, #1
 8003906:	d03e      	beq.n	8003986 <HAL_ADC_Init+0x182>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003908:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800390a:	b122      	cbz	r2, 8003916 <HAL_ADC_Init+0x112>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800390c:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003910:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003912:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003914:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	68cd      	ldr	r5, [r1, #12]
 800391a:	4a34      	ldr	r2, [pc, #208]	; (80039ec <HAL_ADC_Init+0x1e8>)
 800391c:	402a      	ands	r2, r5
 800391e:	4313      	orrs	r3, r2
 8003920:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003922:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003924:	688b      	ldr	r3, [r1, #8]
 8003926:	f013 0304 	ands.w	r3, r3, #4
 800392a:	d000      	beq.n	800392e <HAL_ADC_Init+0x12a>
 800392c:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800392e:	688a      	ldr	r2, [r1, #8]
 8003930:	f012 0208 	ands.w	r2, r2, #8
 8003934:	d000      	beq.n	8003938 <HAL_ADC_Init+0x134>
 8003936:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003938:	b9b3      	cbnz	r3, 8003968 <HAL_ADC_Init+0x164>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800393a:	b9aa      	cbnz	r2, 8003968 <HAL_ADC_Init+0x164>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800393c:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800393e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003942:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003944:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003948:	68cb      	ldr	r3, [r1, #12]
 800394a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800394e:	f023 0302 	bic.w	r3, r3, #2
 8003952:	4313      	orrs	r3, r2
 8003954:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003956:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800395a:	2b01      	cmp	r3, #1
 800395c:	d018      	beq.n	8003990 <HAL_ADC_Init+0x18c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	6913      	ldr	r3, [r2, #16]
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d022      	beq.n	80039b4 <HAL_ADC_Init+0x1b0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003972:	f023 030f 	bic.w	r3, r3, #15
 8003976:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003978:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6563      	str	r3, [r4, #84]	; 0x54
 8003984:	e024      	b.n	80039d0 <HAL_ADC_Init+0x1cc>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003986:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003988:	3a01      	subs	r2, #1
 800398a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800398e:	e7bb      	b.n	8003908 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003990:	6821      	ldr	r1, [r4, #0]
 8003992:	690b      	ldr	r3, [r1, #16]
 8003994:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800399e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80039a0:	432a      	orrs	r2, r5
 80039a2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80039a4:	432a      	orrs	r2, r5
 80039a6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80039a8:	432a      	orrs	r2, r5
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	610b      	str	r3, [r1, #16]
 80039b2:	e7d9      	b.n	8003968 <HAL_ADC_Init+0x164>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039b4:	6821      	ldr	r1, [r4, #0]
 80039b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80039b8:	f023 030f 	bic.w	r3, r3, #15
 80039bc:	69e2      	ldr	r2, [r4, #28]
 80039be:	3a01      	subs	r2, #1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	630b      	str	r3, [r1, #48]	; 0x30
 80039c4:	e7d8      	b.n	8003978 <HAL_ADC_Init+0x174>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039ce:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80039d0:	b003      	add	sp, #12
 80039d2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
 80039d6:	e7fb      	b.n	80039d0 <HAL_ADC_Init+0x1cc>
 80039d8:	20000000 	.word	0x20000000
 80039dc:	053e2d63 	.word	0x053e2d63
 80039e0:	50040000 	.word	0x50040000
 80039e4:	50040100 	.word	0x50040100
 80039e8:	50040300 	.word	0x50040300
 80039ec:	fff0c007 	.word	0xfff0c007

080039f0 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039f0:	4770      	bx	lr

080039f2 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039f2:	4770      	bx	lr

080039f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039f4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80039f8:	f7ff fffb 	bl	80039f2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039fc:	bd08      	pop	{r3, pc}

080039fe <HAL_ADC_ErrorCallback>:
}
 80039fe:	4770      	bx	lr

08003a00 <ADC_DMAConvCplt>:
{
 8003a00:	b508      	push	{r3, lr}
 8003a02:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a04:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a06:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003a08:	f012 0f50 	tst.w	r2, #80	; 0x50
 8003a0c:	d130      	bne.n	8003a70 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a0e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a14:	6543      	str	r3, [r0, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f012 0f08 	tst.w	r2, #8
 8003a1e:	d014      	beq.n	8003a4a <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003a26:	d120      	bne.n	8003a6a <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003a2e:	d11c      	bne.n	8003a6a <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a30:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a36:	6543      	str	r3, [r0, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a38:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a3a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003a3e:	d114      	bne.n	8003a6a <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a40:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6543      	str	r3, [r0, #84]	; 0x54
 8003a48:	e00f      	b.n	8003a6a <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f013 0f02 	tst.w	r3, #2
 8003a50:	d10b      	bne.n	8003a6a <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a52:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a58:	6543      	str	r3, [r0, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a5a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a5c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003a60:	d103      	bne.n	8003a6a <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a62:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8003a6a:	f7ff ffc1 	bl	80039f0 <HAL_ADC_ConvCpltCallback>
}
 8003a6e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a70:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003a72:	f012 0f10 	tst.w	r2, #16
 8003a76:	d104      	bne.n	8003a82 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a78:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	4790      	blx	r2
}
 8003a80:	e7f5      	b.n	8003a6e <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8003a82:	f7ff ffbc 	bl	80039fe <HAL_ADC_ErrorCallback>
 8003a86:	e7f2      	b.n	8003a6e <ADC_DMAConvCplt+0x6e>

08003a88 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a88:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8a:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a8c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a92:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a94:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a9c:	f7ff ffaf 	bl	80039fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aa0:	bd08      	pop	{r3, pc}
	...

08003aa4 <HAL_ADC_ConfigChannel>:
{
 8003aa4:	b4f0      	push	{r4, r5, r6, r7}
 8003aa6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003aac:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003ab0:	2a01      	cmp	r2, #1
 8003ab2:	f000 824d 	beq.w	8003f50 <HAL_ADC_ConfigChannel+0x4ac>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003abe:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ac0:	6892      	ldr	r2, [r2, #8]
 8003ac2:	f012 0f04 	tst.w	r2, #4
 8003ac6:	d00a      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003aca:	f042 0220 	orr.w	r2, r2, #32
 8003ace:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003ad0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003ad8:	b002      	add	sp, #8
 8003ada:	bcf0      	pop	{r4, r5, r6, r7}
 8003adc:	4770      	bx	lr
    if (sConfig->Rank <= 5U)
 8003ade:	684a      	ldr	r2, [r1, #4]
 8003ae0:	2a05      	cmp	r2, #5
 8003ae2:	d809      	bhi.n	8003af8 <HAL_ADC_ConfigChannel+0x54>
      switch (sConfig->Rank)
 8003ae4:	3a02      	subs	r2, #2
 8003ae6:	2a03      	cmp	r2, #3
 8003ae8:	f200 8097 	bhi.w	8003c1a <HAL_ADC_ConfigChannel+0x176>
 8003aec:	e8df f002 	tbb	[pc, r2]
 8003af0:	918e8b02 	.word	0x918e8b02
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003af4:	220c      	movs	r2, #12
 8003af6:	604a      	str	r2, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003af8:	681e      	ldr	r6, [r3, #0]
 8003afa:	684d      	ldr	r5, [r1, #4]
 8003afc:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003afe:	3630      	adds	r6, #48	; 0x30
 8003b00:	0a2a      	lsrs	r2, r5, #8
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003b08:	58b0      	ldr	r0, [r6, r2]
 8003b0a:	f005 051f 	and.w	r5, r5, #31
 8003b0e:	271f      	movs	r7, #31
 8003b10:	40af      	lsls	r7, r5
 8003b12:	ea20 0007 	bic.w	r0, r0, r7
 8003b16:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003b1a:	40ac      	lsls	r4, r5
 8003b1c:	4320      	orrs	r0, r4
 8003b1e:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b20:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b22:	68a2      	ldr	r2, [r4, #8]
 8003b24:	f012 0204 	ands.w	r2, r2, #4
 8003b28:	d000      	beq.n	8003b2c <HAL_ADC_ConfigChannel+0x88>
 8003b2a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b2c:	68a0      	ldr	r0, [r4, #8]
 8003b2e:	f010 0008 	ands.w	r0, r0, #8
 8003b32:	d000      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x92>
 8003b34:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	d132      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0xfc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b3a:	bb88      	cbnz	r0, 8003ba0 <HAL_ADC_ConfigChannel+0xfc>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b3c:	6888      	ldr	r0, [r1, #8]
 8003b3e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003b42:	d06d      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x17c>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b44:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b46:	3414      	adds	r4, #20
 8003b48:	0e72      	lsrs	r2, r6, #25
 8003b4a:	0092      	lsls	r2, r2, #2
 8003b4c:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003b50:	58a5      	ldr	r5, [r4, r2]
 8003b52:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003b56:	2707      	movs	r7, #7
 8003b58:	40b7      	lsls	r7, r6
 8003b5a:	ea25 0507 	bic.w	r5, r5, r7
 8003b5e:	40b0      	lsls	r0, r6
 8003b60:	4328      	orrs	r0, r5
 8003b62:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b64:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b66:	6942      	ldr	r2, [r0, #20]
 8003b68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b6c:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b6e:	694c      	ldr	r4, [r1, #20]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	68c2      	ldr	r2, [r0, #12]
 8003b74:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003b78:	0052      	lsls	r2, r2, #1
 8003b7a:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b7e:	690d      	ldr	r5, [r1, #16]
 8003b80:	2d04      	cmp	r5, #4
 8003b82:	d062      	beq.n	8003c4a <HAL_ADC_ConfigChannel+0x1a6>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b84:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b86:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8003b88:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8003b8c:	4cb0      	ldr	r4, [pc, #704]	; (8003e50 <HAL_ADC_ConfigChannel+0x3ac>)
 8003b8e:	403c      	ands	r4, r7
 8003b90:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003b94:	4332      	orrs	r2, r6
 8003b96:	4314      	orrs	r4, r2
 8003b98:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003b9c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba0:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba2:	6882      	ldr	r2, [r0, #8]
 8003ba4:	f012 0f01 	tst.w	r2, #1
 8003ba8:	d116      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x134>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003baa:	680a      	ldr	r2, [r1, #0]
 8003bac:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003bae:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8003bb2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003bb6:	ea24 0406 	bic.w	r4, r4, r6
 8003bba:	f005 0618 	and.w	r6, r5, #24
 8003bbe:	4da5      	ldr	r5, [pc, #660]	; (8003e54 <HAL_ADC_ConfigChannel+0x3b0>)
 8003bc0:	40f5      	lsrs	r5, r6
 8003bc2:	402a      	ands	r2, r5
 8003bc4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003bc8:	4322      	orrs	r2, r4
 8003bca:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bce:	68c8      	ldr	r0, [r1, #12]
 8003bd0:	4aa1      	ldr	r2, [pc, #644]	; (8003e58 <HAL_ADC_ConfigChannel+0x3b4>)
 8003bd2:	4290      	cmp	r0, r2
 8003bd4:	f000 80a1 	beq.w	8003d1a <HAL_ADC_ConfigChannel+0x276>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bd8:	680a      	ldr	r2, [r1, #0]
 8003bda:	49a0      	ldr	r1, [pc, #640]	; (8003e5c <HAL_ADC_ConfigChannel+0x3b8>)
 8003bdc:	420a      	tst	r2, r1
 8003bde:	f000 81b3 	beq.w	8003f48 <HAL_ADC_ConfigChannel+0x4a4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003be2:	499f      	ldr	r1, [pc, #636]	; (8003e60 <HAL_ADC_ConfigChannel+0x3bc>)
 8003be4:	6889      	ldr	r1, [r1, #8]
 8003be6:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bea:	489e      	ldr	r0, [pc, #632]	; (8003e64 <HAL_ADC_ConfigChannel+0x3c0>)
 8003bec:	4282      	cmp	r2, r0
 8003bee:	f000 815e 	beq.w	8003eae <HAL_ADC_ConfigChannel+0x40a>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bf2:	489d      	ldr	r0, [pc, #628]	; (8003e68 <HAL_ADC_ConfigChannel+0x3c4>)
 8003bf4:	4282      	cmp	r2, r0
 8003bf6:	f000 8180 	beq.w	8003efa <HAL_ADC_ConfigChannel+0x456>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bfa:	489c      	ldr	r0, [pc, #624]	; (8003e6c <HAL_ADC_ConfigChannel+0x3c8>)
 8003bfc:	4282      	cmp	r2, r0
 8003bfe:	f000 8190 	beq.w	8003f22 <HAL_ADC_ConfigChannel+0x47e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c02:	2000      	movs	r0, #0
 8003c04:	e765      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003c06:	2212      	movs	r2, #18
 8003c08:	604a      	str	r2, [r1, #4]
          break;
 8003c0a:	e775      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x54>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003c0c:	2218      	movs	r2, #24
 8003c0e:	604a      	str	r2, [r1, #4]
          break;
 8003c10:	e772      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x54>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c16:	604a      	str	r2, [r1, #4]
          break;
 8003c18:	e76e      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x54>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003c1a:	2206      	movs	r2, #6
 8003c1c:	604a      	str	r2, [r1, #4]
          break;
 8003c1e:	e76b      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x54>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c20:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c22:	3414      	adds	r4, #20
 8003c24:	0e42      	lsrs	r2, r0, #25
 8003c26:	0092      	lsls	r2, r2, #2
 8003c28:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003c2c:	58a5      	ldr	r5, [r4, r2]
 8003c2e:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003c32:	2607      	movs	r6, #7
 8003c34:	fa06 f000 	lsl.w	r0, r6, r0
 8003c38:	ea25 0000 	bic.w	r0, r5, r0
 8003c3c:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c3e:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c40:	6942      	ldr	r2, [r0, #20]
 8003c42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c46:	6142      	str	r2, [r0, #20]
}
 8003c48:	e791      	b.n	8003b6e <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c4a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003c4c:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c4e:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c52:	680a      	ldr	r2, [r1, #0]
 8003c54:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003c58:	bb85      	cbnz	r5, 8003cbc <HAL_ADC_ConfigChannel+0x218>
 8003c5a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c5e:	4294      	cmp	r4, r2
 8003c60:	d034      	beq.n	8003ccc <HAL_ADC_ConfigChannel+0x228>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c62:	681c      	ldr	r4, [r3, #0]
 8003c64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c66:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003c68:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c6c:	680a      	ldr	r2, [r1, #0]
 8003c6e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003c72:	bb85      	cbnz	r5, 8003cd6 <HAL_ADC_ConfigChannel+0x232>
 8003c74:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c78:	4290      	cmp	r0, r2
 8003c7a:	d034      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0x242>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c7c:	681c      	ldr	r4, [r3, #0]
 8003c7e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003c80:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003c82:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c86:	680a      	ldr	r2, [r1, #0]
 8003c88:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003c8c:	bb85      	cbnz	r5, 8003cf0 <HAL_ADC_ConfigChannel+0x24c>
 8003c8e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c92:	4290      	cmp	r0, r2
 8003c94:	d034      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x25c>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c96:	681c      	ldr	r4, [r3, #0]
 8003c98:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003c9a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003c9c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ca0:	680a      	ldr	r2, [r1, #0]
 8003ca2:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003ca6:	bb85      	cbnz	r5, 8003d0a <HAL_ADC_ConfigChannel+0x266>
 8003ca8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cac:	4290      	cmp	r0, r2
 8003cae:	f47f af77 	bne.w	8003ba0 <HAL_ADC_ConfigChannel+0xfc>
  MODIFY_REG(*preg,
 8003cb2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003cb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cb8:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8003cba:	e771      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0xfc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cc0:	b112      	cbz	r2, 8003cc8 <HAL_ADC_ConfigChannel+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	e7ca      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x1ba>
    return 32U;
 8003cc8:	2220      	movs	r2, #32
 8003cca:	e7c8      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x1ba>
  MODIFY_REG(*preg,
 8003ccc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003cce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cd2:	6602      	str	r2, [r0, #96]	; 0x60
}
 8003cd4:	e7c5      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003cda:	b112      	cbz	r2, 8003ce2 <HAL_ADC_ConfigChannel+0x23e>
  return __builtin_clz(value);
 8003cdc:	fab2 f282 	clz	r2, r2
 8003ce0:	e7ca      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x1d4>
    return 32U;
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	e7c8      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x1d4>
  MODIFY_REG(*preg,
 8003ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ce8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cec:	6662      	str	r2, [r4, #100]	; 0x64
}
 8003cee:	e7c5      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x1d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003cf4:	b112      	cbz	r2, 8003cfc <HAL_ADC_ConfigChannel+0x258>
  return __builtin_clz(value);
 8003cf6:	fab2 f282 	clz	r2, r2
 8003cfa:	e7ca      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x1ee>
    return 32U;
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	e7c8      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x1ee>
  MODIFY_REG(*preg,
 8003d00:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003d02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d06:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003d08:	e7c5      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x1f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003d0e:	b112      	cbz	r2, 8003d16 <HAL_ADC_ConfigChannel+0x272>
  return __builtin_clz(value);
 8003d10:	fab2 f282 	clz	r2, r2
 8003d14:	e7ca      	b.n	8003cac <HAL_ADC_ConfigChannel+0x208>
    return 32U;
 8003d16:	2220      	movs	r2, #32
 8003d18:	e7c8      	b.n	8003cac <HAL_ADC_ConfigChannel+0x208>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d1a:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d1c:	680a      	ldr	r2, [r1, #0]
 8003d1e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8003d22:	2e00      	cmp	r6, #0
 8003d24:	d135      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x2ee>
 8003d26:	0e90      	lsrs	r0, r2, #26
 8003d28:	3001      	adds	r0, #1
 8003d2a:	f000 001f 	and.w	r0, r0, #31
 8003d2e:	2809      	cmp	r0, #9
 8003d30:	bf8c      	ite	hi
 8003d32:	2000      	movhi	r0, #0
 8003d34:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d062      	beq.n	8003e00 <HAL_ADC_ConfigChannel+0x35c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d3a:	2e00      	cmp	r6, #0
 8003d3c:	d138      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x30c>
 8003d3e:	0e94      	lsrs	r4, r2, #26
 8003d40:	3401      	adds	r4, #1
 8003d42:	06a4      	lsls	r4, r4, #26
 8003d44:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003d48:	2e00      	cmp	r6, #0
 8003d4a:	d13d      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x324>
 8003d4c:	0e90      	lsrs	r0, r2, #26
 8003d4e:	3001      	adds	r0, #1
 8003d50:	f000 071f 	and.w	r7, r0, #31
 8003d54:	2001      	movs	r0, #1
 8003d56:	40b8      	lsls	r0, r7
 8003d58:	4304      	orrs	r4, r0
 8003d5a:	2e00      	cmp	r6, #0
 8003d5c:	d142      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x340>
 8003d5e:	0e92      	lsrs	r2, r2, #26
 8003d60:	3201      	adds	r2, #1
 8003d62:	f002 021f 	and.w	r2, r2, #31
 8003d66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003d6a:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d6c:	4322      	orrs	r2, r4
 8003d6e:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d70:	3514      	adds	r5, #20
 8003d72:	0e50      	lsrs	r0, r2, #25
 8003d74:	0080      	lsls	r0, r0, #2
 8003d76:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003d7a:	582e      	ldr	r6, [r5, r0]
 8003d7c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003d80:	2707      	movs	r7, #7
 8003d82:	4097      	lsls	r7, r2
 8003d84:	ea26 0607 	bic.w	r6, r6, r7
 8003d88:	fa04 f202 	lsl.w	r2, r4, r2
 8003d8c:	4332      	orrs	r2, r6
 8003d8e:	502a      	str	r2, [r5, r0]
}
 8003d90:	e722      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x134>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003d96:	b148      	cbz	r0, 8003dac <HAL_ADC_ConfigChannel+0x308>
  return __builtin_clz(value);
 8003d98:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	f000 001f 	and.w	r0, r0, #31
 8003da2:	2809      	cmp	r0, #9
 8003da4:	bf8c      	ite	hi
 8003da6:	2000      	movhi	r0, #0
 8003da8:	2001      	movls	r0, #1
 8003daa:	e7c4      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003dac:	2020      	movs	r0, #32
 8003dae:	e7f5      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003db4:	b134      	cbz	r4, 8003dc4 <HAL_ADC_ConfigChannel+0x320>
  return __builtin_clz(value);
 8003db6:	fab4 f484 	clz	r4, r4
 8003dba:	3401      	adds	r4, #1
 8003dbc:	06a4      	lsls	r4, r4, #26
 8003dbe:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003dc2:	e7c1      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003dc4:	2420      	movs	r4, #32
 8003dc6:	e7f8      	b.n	8003dba <HAL_ADC_ConfigChannel+0x316>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003dcc:	b140      	cbz	r0, 8003de0 <HAL_ADC_ConfigChannel+0x33c>
  return __builtin_clz(value);
 8003dce:	fab0 f080 	clz	r0, r0
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	f000 001f 	and.w	r0, r0, #31
 8003dd8:	2701      	movs	r7, #1
 8003dda:	fa07 f000 	lsl.w	r0, r7, r0
 8003dde:	e7bb      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003de0:	2020      	movs	r0, #32
 8003de2:	e7f6      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x32e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003de8:	b142      	cbz	r2, 8003dfc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003dea:	fab2 f282 	clz	r2, r2
 8003dee:	3201      	adds	r2, #1
 8003df0:	f002 021f 	and.w	r2, r2, #31
 8003df4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003df8:	0512      	lsls	r2, r2, #20
 8003dfa:	e7b7      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	e7f6      	b.n	8003dee <HAL_ADC_ConfigChannel+0x34a>
 8003e00:	b9ce      	cbnz	r6, 8003e36 <HAL_ADC_ConfigChannel+0x392>
 8003e02:	0e94      	lsrs	r4, r2, #26
 8003e04:	3401      	adds	r4, #1
 8003e06:	06a4      	lsls	r4, r4, #26
 8003e08:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e0c:	bb86      	cbnz	r6, 8003e70 <HAL_ADC_ConfigChannel+0x3cc>
 8003e0e:	0e90      	lsrs	r0, r2, #26
 8003e10:	3001      	adds	r0, #1
 8003e12:	f000 071f 	and.w	r7, r0, #31
 8003e16:	2001      	movs	r0, #1
 8003e18:	40b8      	lsls	r0, r7
 8003e1a:	4304      	orrs	r4, r0
 8003e1c:	bbb6      	cbnz	r6, 8003e8c <HAL_ADC_ConfigChannel+0x3e8>
 8003e1e:	0e90      	lsrs	r0, r2, #26
 8003e20:	3001      	adds	r0, #1
 8003e22:	f000 001f 	and.w	r0, r0, #31
 8003e26:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003e2a:	3a1e      	subs	r2, #30
 8003e2c:	0512      	lsls	r2, r2, #20
 8003e2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e32:	4322      	orrs	r2, r4
 8003e34:	e79b      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x2ca>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003e3a:	b134      	cbz	r4, 8003e4a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003e3c:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e40:	3401      	adds	r4, #1
 8003e42:	06a4      	lsls	r4, r4, #26
 8003e44:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e48:	e7e0      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003e4a:	2420      	movs	r4, #32
 8003e4c:	e7f8      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x39c>
 8003e4e:	bf00      	nop
 8003e50:	03fff000 	.word	0x03fff000
 8003e54:	0007ffff 	.word	0x0007ffff
 8003e58:	407f0000 	.word	0x407f0000
 8003e5c:	80080000 	.word	0x80080000
 8003e60:	50040300 	.word	0x50040300
 8003e64:	c7520000 	.word	0xc7520000
 8003e68:	cb840000 	.word	0xcb840000
 8003e6c:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003e74:	b140      	cbz	r0, 8003e88 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003e76:	fab0 f080 	clz	r0, r0
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	f000 001f 	and.w	r0, r0, #31
 8003e80:	2701      	movs	r7, #1
 8003e82:	fa07 f000 	lsl.w	r0, r7, r0
 8003e86:	e7c8      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003e88:	2020      	movs	r0, #32
 8003e8a:	e7f6      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x3d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003e90:	b15a      	cbz	r2, 8003eaa <HAL_ADC_ConfigChannel+0x406>
  return __builtin_clz(value);
 8003e92:	fab2 f082 	clz	r0, r2
 8003e96:	3001      	adds	r0, #1
 8003e98:	f000 001f 	and.w	r0, r0, #31
 8003e9c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003ea0:	3a1e      	subs	r2, #30
 8003ea2:	0512      	lsls	r2, r2, #20
 8003ea4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003ea8:	e7c3      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8003eaa:	2020      	movs	r0, #32
 8003eac:	e7f3      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x3f2>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eae:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8003eb2:	f47f ae9e 	bne.w	8003bf2 <HAL_ADC_ConfigChannel+0x14e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_ADC_ConfigChannel+0x4b0>)
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	d001      	beq.n	8003ec2 <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e607      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec2:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ec6:	4824      	ldr	r0, [pc, #144]	; (8003f58 <HAL_ADC_ConfigChannel+0x4b4>)
 8003ec8:	6881      	ldr	r1, [r0, #8]
 8003eca:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	6082      	str	r2, [r0, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <HAL_ADC_ConfigChannel+0x4b8>)
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	0992      	lsrs	r2, r2, #6
 8003ed8:	4921      	ldr	r1, [pc, #132]	; (8003f60 <HAL_ADC_ConfigChannel+0x4bc>)
 8003eda:	fba1 1202 	umull	r1, r2, r1, r2
 8003ede:	0992      	lsrs	r2, r2, #6
 8003ee0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ee4:	0092      	lsls	r2, r2, #2
 8003ee6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003ee8:	e002      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x44c>
            wait_loop_index--;
 8003eea:	9a01      	ldr	r2, [sp, #4]
 8003eec:	3a01      	subs	r2, #1
 8003eee:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003ef0:	9a01      	ldr	r2, [sp, #4]
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d1f9      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x446>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	e5eb      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003efa:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8003efe:	f47f ae7c 	bne.w	8003bfa <HAL_ADC_ConfigChannel+0x156>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <HAL_ADC_ConfigChannel+0x4b0>)
 8003f06:	4291      	cmp	r1, r2
 8003f08:	d001      	beq.n	8003f0e <HAL_ADC_ConfigChannel+0x46a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	e5e1      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f0e:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 8003f12:	4811      	ldr	r0, [pc, #68]	; (8003f58 <HAL_ADC_ConfigChannel+0x4b4>)
 8003f14:	6881      	ldr	r1, [r0, #8]
 8003f16:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f1e:	2000      	movs	r0, #0
}
 8003f20:	e5d7      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f22:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8003f26:	d111      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x4a8>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <HAL_ADC_ConfigChannel+0x4b0>)
 8003f2c:	4291      	cmp	r1, r2
 8003f2e:	d001      	beq.n	8003f34 <HAL_ADC_ConfigChannel+0x490>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f30:	2000      	movs	r0, #0
 8003f32:	e5ce      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f34:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f38:	4807      	ldr	r0, [pc, #28]	; (8003f58 <HAL_ADC_ConfigChannel+0x4b4>)
 8003f3a:	6881      	ldr	r1, [r0, #8]
 8003f3c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003f40:	430a      	orrs	r2, r1
 8003f42:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f44:	2000      	movs	r0, #0
}
 8003f46:	e5c4      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e5c2      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e5c0      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003f50:	2002      	movs	r0, #2
 8003f52:	e5c1      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x34>
 8003f54:	50040000 	.word	0x50040000
 8003f58:	50040300 	.word	0x50040300
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	053e2d63 	.word	0x053e2d63

08003f64 <ADC_Enable>:
{
 8003f64:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f66:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	f012 0f01 	tst.w	r2, #1
 8003f6e:	d13d      	bne.n	8003fec <ADC_Enable+0x88>
 8003f70:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <ADC_Enable+0x8c>)
 8003f76:	4211      	tst	r1, r2
 8003f78:	d009      	beq.n	8003f8e <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
 8003f80:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f82:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	e02f      	b.n	8003fee <ADC_Enable+0x8a>
  MODIFY_REG(ADCx->CR,
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f94:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003f9e:	f7ff fc17 	bl	80037d0 <HAL_GetTick>
 8003fa2:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fa4:	e004      	b.n	8003fb0 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fa6:	f7ff fc13 	bl	80037d0 <HAL_GetTick>
 8003faa:	1b43      	subs	r3, r0, r5
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d811      	bhi.n	8003fd4 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	f012 0f01 	tst.w	r2, #1
 8003fb8:	d116      	bne.n	8003fe8 <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	f012 0f01 	tst.w	r2, #1
 8003fc0:	d1f1      	bne.n	8003fa6 <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fc8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	609a      	str	r2, [r3, #8]
}
 8003fd2:	e7e8      	b.n	8003fa6 <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fd6:	f043 0310 	orr.w	r3, r3, #16
 8003fda:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	e002      	b.n	8003fee <ADC_Enable+0x8a>
  return HAL_OK;
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e000      	b.n	8003fee <ADC_Enable+0x8a>
 8003fec:	2000      	movs	r0, #0
}
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	8000003f 	.word	0x8000003f

08003ff4 <HAL_ADC_Start_DMA>:
{
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <HAL_ADC_Start_DMA+0xf0>)
 8003ff8:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ffa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f013 0f04 	tst.w	r3, #4
 8004002:	d16a      	bne.n	80040da <HAL_ADC_Start_DMA+0xe6>
 8004004:	4604      	mov	r4, r0
 8004006:	460e      	mov	r6, r1
 8004008:	4617      	mov	r7, r2
 800400a:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 800400e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004012:	2b01      	cmp	r3, #1
 8004014:	d063      	beq.n	80040de <HAL_ADC_Start_DMA+0xea>
 8004016:	2301      	movs	r3, #1
 8004018:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800401c:	b145      	cbz	r5, 8004030 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800401e:	2d05      	cmp	r5, #5
 8004020:	d006      	beq.n	8004030 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004022:	2d09      	cmp	r5, #9
 8004024:	d004      	beq.n	8004030 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 8004026:	2300      	movs	r3, #0
 8004028:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 800402c:	2001      	movs	r0, #1
 800402e:	e055      	b.n	80040dc <HAL_ADC_Start_DMA+0xe8>
      tmp_hal_status = ADC_Enable(hadc);
 8004030:	4620      	mov	r0, r4
 8004032:	f7ff ff97 	bl	8003f64 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8004036:	2800      	cmp	r0, #0
 8004038:	d14b      	bne.n	80040d2 <HAL_ADC_Start_DMA+0xde>
        ADC_STATE_CLR_SET(hadc->State,
 800403a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800403c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <HAL_ADC_Start_DMA+0xf4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d039      	beq.n	80040c6 <HAL_ADC_Start_DMA+0xd2>
 8004052:	461a      	mov	r2, r3
 8004054:	4293      	cmp	r3, r2
 8004056:	d000      	beq.n	800405a <HAL_ADC_Start_DMA+0x66>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004058:	b91d      	cbnz	r5, 8004062 <HAL_ADC_Start_DMA+0x6e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800405a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800405c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004060:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004062:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004064:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004068:	d030      	beq.n	80040cc <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800406a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800406c:	f023 0306 	bic.w	r3, r3, #6
 8004070:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004072:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004074:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_ADC_Start_DMA+0xf8>)
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004078:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800407a:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_ADC_Start_DMA+0xfc>)
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800407e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_ADC_Start_DMA+0x100>)
 8004082:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	221c      	movs	r2, #28
 8004088:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 800408a:	2300      	movs	r3, #0
 800408c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	6853      	ldr	r3, [r2, #4]
 8004094:	f043 0310 	orr.w	r3, r3, #16
 8004098:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	68d3      	ldr	r3, [r2, #12]
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040a4:	6821      	ldr	r1, [r4, #0]
 80040a6:	463b      	mov	r3, r7
 80040a8:	4632      	mov	r2, r6
 80040aa:	3140      	adds	r1, #64	; 0x40
 80040ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80040ae:	f000 f993 	bl	80043d8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80040b2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80040b4:	6893      	ldr	r3, [r2, #8]
 80040b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040be:	f043 0304 	orr.w	r3, r3, #4
 80040c2:	6093      	str	r3, [r2, #8]
}
 80040c4:	e00a      	b.n	80040dc <HAL_ADC_Start_DMA+0xe8>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040c6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80040ca:	e7c3      	b.n	8004054 <HAL_ADC_Start_DMA+0x60>
          ADC_CLEAR_ERRORCODE(hadc);
 80040cc:	2300      	movs	r3, #0
 80040ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80040d0:	e7cf      	b.n	8004072 <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 80040d2:	2300      	movs	r3, #0
 80040d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80040d8:	e000      	b.n	80040dc <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_BUSY;
 80040da:	2002      	movs	r0, #2
}
 80040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80040de:	2002      	movs	r0, #2
 80040e0:	e7fc      	b.n	80040dc <HAL_ADC_Start_DMA+0xe8>
 80040e2:	bf00      	nop
 80040e4:	50040300 	.word	0x50040300
 80040e8:	50040100 	.word	0x50040100
 80040ec:	08003a01 	.word	0x08003a01
 80040f0:	080039f5 	.word	0x080039f5
 80040f4:	08003a89 	.word	0x08003a89

080040f8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80040fc:	2a01      	cmp	r2, #1
 80040fe:	d07a      	beq.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
{
 8004100:	b430      	push	{r4, r5}
 8004102:	b09a      	sub	sp, #104	; 0x68
 8004104:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004106:	2201      	movs	r2, #1
 8004108:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8004110:	4290      	cmp	r0, r2
 8004112:	d038      	beq.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8004114:	2200      	movs	r2, #0
 8004116:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8004118:	9a01      	ldr	r2, [sp, #4]
 800411a:	2a00      	cmp	r2, #0
 800411c:	d037      	beq.n	800418e <HAL_ADCEx_MultiModeConfigChannel+0x96>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800411e:	6892      	ldr	r2, [r2, #8]
 8004120:	f012 0204 	ands.w	r2, r2, #4
 8004124:	d000      	beq.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 8004126:	2201      	movs	r2, #1
 8004128:	6880      	ldr	r0, [r0, #8]
 800412a:	f010 0f04 	tst.w	r0, #4
 800412e:	d153      	bne.n	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004130:	2a00      	cmp	r2, #0
 8004132:	d151      	bne.n	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004134:	680a      	ldr	r2, [r1, #0]
 8004136:	2a00      	cmp	r2, #0
 8004138:	d032      	beq.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800413a:	4c31      	ldr	r4, [pc, #196]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 800413c:	68a2      	ldr	r2, [r4, #8]
 800413e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004142:	6848      	ldr	r0, [r1, #4]
 8004144:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8004148:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 800414c:	4302      	orrs	r2, r0
 800414e:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8004152:	6892      	ldr	r2, [r2, #8]
 8004154:	f012 0201 	ands.w	r2, r2, #1
 8004158:	d000      	beq.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x64>
 800415a:	2201      	movs	r2, #1
 800415c:	4829      	ldr	r0, [pc, #164]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 800415e:	6880      	ldr	r0, [r0, #8]
 8004160:	f010 0001 	ands.w	r0, r0, #1
 8004164:	d000      	beq.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8004166:	2001      	movs	r0, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004168:	4302      	orrs	r2, r0
 800416a:	d140      	bne.n	80041ee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800416c:	4c24      	ldr	r4, [pc, #144]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 800416e:	68a2      	ldr	r2, [r4, #8]
 8004170:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004174:	f022 020f 	bic.w	r2, r2, #15
 8004178:	6808      	ldr	r0, [r1, #0]
 800417a:	6889      	ldr	r1, [r1, #8]
 800417c:	4301      	orrs	r1, r0
 800417e:	430a      	orrs	r2, r1
 8004180:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004182:	2000      	movs	r0, #0
 8004184:	e02d      	b.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0xea>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004186:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800418a:	9201      	str	r2, [sp, #4]
 800418c:	e7c4      	b.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800418e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004190:	f042 0220 	orr.w	r2, r2, #32
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800419c:	2001      	movs	r0, #1
 800419e:	e023      	b.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041a0:	4917      	ldr	r1, [pc, #92]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80041a2:	688a      	ldr	r2, [r1, #8]
 80041a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041a8:	608a      	str	r2, [r1, #8]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80041ac:	6892      	ldr	r2, [r2, #8]
 80041ae:	f012 0201 	ands.w	r2, r2, #1
 80041b2:	d000      	beq.n	80041b6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80041b4:	2201      	movs	r2, #1
 80041b6:	4913      	ldr	r1, [pc, #76]	; (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80041b8:	6889      	ldr	r1, [r1, #8]
 80041ba:	f011 0101 	ands.w	r1, r1, #1
 80041be:	d000      	beq.n	80041c2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80041c0:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c2:	430a      	orrs	r2, r1
 80041c4:	d115      	bne.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041c6:	490e      	ldr	r1, [pc, #56]	; (8004200 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80041c8:	688a      	ldr	r2, [r1, #8]
 80041ca:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80041ce:	f022 020f 	bic.w	r2, r2, #15
 80041d2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d4:	2000      	movs	r0, #0
 80041d6:	e004      	b.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0xea>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80041e8:	b01a      	add	sp, #104	; 0x68
 80041ea:	bc30      	pop	{r4, r5}
 80041ec:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ee:	2000      	movs	r0, #0
 80041f0:	e7f7      	b.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 80041f2:	2000      	movs	r0, #0
 80041f4:	e7f5      	b.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0xea>
  __HAL_LOCK(hadc);
 80041f6:	2002      	movs	r0, #2
}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	50040000 	.word	0x50040000
 8004200:	50040300 	.word	0x50040300
 8004204:	50040100 	.word	0x50040100

08004208 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004208:	4a07      	ldr	r2, [pc, #28]	; (8004228 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800420a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800420c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004214:	0200      	lsls	r0, r0, #8
 8004216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800421a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800421c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004224:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <HAL_NVIC_SetPriority+0x60>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004236:	f1c3 0407 	rsb	r4, r3, #7
 800423a:	2c04      	cmp	r4, #4
 800423c:	bf28      	it	cs
 800423e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004240:	1d1d      	adds	r5, r3, #4
 8004242:	2d06      	cmp	r5, #6
 8004244:	d918      	bls.n	8004278 <HAL_NVIC_SetPriority+0x4c>
 8004246:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800424c:	fa05 f404 	lsl.w	r4, r5, r4
 8004250:	ea21 0104 	bic.w	r1, r1, r4
 8004254:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004256:	fa05 f303 	lsl.w	r3, r5, r3
 800425a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004260:	2800      	cmp	r0, #0
 8004262:	db0b      	blt.n	800427c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	0109      	lsls	r1, r1, #4
 8004266:	b2c9      	uxtb	r1, r1
 8004268:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800426c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004270:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004274:	bc30      	pop	{r4, r5}
 8004276:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004278:	2300      	movs	r3, #0
 800427a:	e7e5      	b.n	8004248 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	f000 000f 	and.w	r0, r0, #15
 8004280:	0109      	lsls	r1, r1, #4
 8004282:	b2c9      	uxtb	r1, r1
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <HAL_NVIC_SetPriority+0x64>)
 8004286:	5419      	strb	r1, [r3, r0]
 8004288:	e7f4      	b.n	8004274 <HAL_NVIC_SetPriority+0x48>
 800428a:	bf00      	nop
 800428c:	e000ed00 	.word	0xe000ed00
 8004290:	e000ed14 	.word	0xe000ed14

08004294 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004294:	2800      	cmp	r0, #0
 8004296:	db07      	blt.n	80042a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004298:	f000 021f 	and.w	r2, r0, #31
 800429c:	0940      	lsrs	r0, r0, #5
 800429e:	2301      	movs	r3, #1
 80042a0:	4093      	lsls	r3, r2
 80042a2:	4a02      	ldr	r2, [pc, #8]	; (80042ac <HAL_NVIC_EnableIRQ+0x18>)
 80042a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e100 	.word	0xe000e100

080042b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042b0:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80042b4:	f004 051c 	and.w	r5, r4, #28
 80042b8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80042ba:	2401      	movs	r4, #1
 80042bc:	40ac      	lsls	r4, r5
 80042be:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042c0:	6804      	ldr	r4, [r0, #0]
 80042c2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c4:	6883      	ldr	r3, [r0, #8]
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d005      	beq.n	80042d6 <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80042ca:	6803      	ldr	r3, [r0, #0]
 80042cc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80042ce:	6803      	ldr	r3, [r0, #0]
 80042d0:	60da      	str	r2, [r3, #12]
  }
}
 80042d2:	bc70      	pop	{r4, r5, r6}
 80042d4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80042d6:	6803      	ldr	r3, [r0, #0]
 80042d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80042da:	6803      	ldr	r3, [r0, #0]
 80042dc:	60d9      	str	r1, [r3, #12]
 80042de:	e7f8      	b.n	80042d2 <DMA_SetConfig+0x22>

080042e0 <HAL_DMA_Init>:
  if(hdma == NULL)
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d068      	beq.n	80043b6 <HAL_DMA_Init+0xd6>
{
 80042e4:	b410      	push	{r4}
 80042e6:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042e8:	6800      	ldr	r0, [r0, #0]
 80042ea:	4a34      	ldr	r2, [pc, #208]	; (80043bc <HAL_DMA_Init+0xdc>)
 80042ec:	4290      	cmp	r0, r2
 80042ee:	d844      	bhi.n	800437a <HAL_DMA_Init+0x9a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042f0:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <HAL_DMA_Init+0xe0>)
 80042f2:	4402      	add	r2, r0
 80042f4:	4933      	ldr	r1, [pc, #204]	; (80043c4 <HAL_DMA_Init+0xe4>)
 80042f6:	fba1 1202 	umull	r1, r2, r1, r2
 80042fa:	0912      	lsrs	r2, r2, #4
 80042fc:	0092      	lsls	r2, r2, #2
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004300:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <HAL_DMA_Init+0xe8>)
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004304:	2202      	movs	r2, #2
 8004306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800430a:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800430c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004310:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8004314:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004316:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004318:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431a:	691c      	ldr	r4, [r3, #16]
 800431c:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800431e:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004320:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004322:	699c      	ldr	r4, [r3, #24]
 8004324:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8004326:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004328:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800432a:	6a1c      	ldr	r4, [r3, #32]
 800432c:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 800432e:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8004330:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004338:	d015      	beq.n	8004366 <HAL_DMA_Init+0x86>
    if (DMA1 == hdma->DmaBaseAddress)
 800433a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_DMA_Init+0xe8>)
 800433e:	4291      	cmp	r1, r2
 8004340:	d026      	beq.n	8004390 <HAL_DMA_Init+0xb0>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004342:	4a22      	ldr	r2, [pc, #136]	; (80043cc <HAL_DMA_Init+0xec>)
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004348:	f000 041c 	and.w	r4, r0, #28
 800434c:	200f      	movs	r0, #15
 800434e:	40a0      	lsls	r0, r4
 8004350:	ea21 0100 	bic.w	r1, r1, r0
 8004354:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004356:	6811      	ldr	r1, [r2, #0]
 8004358:	6858      	ldr	r0, [r3, #4]
 800435a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800435c:	f004 041c 	and.w	r4, r4, #28
 8004360:	40a0      	lsls	r0, r4
 8004362:	4301      	orrs	r1, r0
 8004364:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004366:	2000      	movs	r0, #0
 8004368:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8004370:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 8004374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004378:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <HAL_DMA_Init+0xf0>)
 800437c:	4402      	add	r2, r0
 800437e:	4911      	ldr	r1, [pc, #68]	; (80043c4 <HAL_DMA_Init+0xe4>)
 8004380:	fba1 1202 	umull	r1, r2, r1, r2
 8004384:	0912      	lsrs	r2, r2, #4
 8004386:	0092      	lsls	r2, r2, #2
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800438a:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <HAL_DMA_Init+0xf4>)
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
 800438e:	e7b9      	b.n	8004304 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004390:	32a8      	adds	r2, #168	; 0xa8
 8004392:	6811      	ldr	r1, [r2, #0]
 8004394:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004396:	f000 041c 	and.w	r4, r0, #28
 800439a:	200f      	movs	r0, #15
 800439c:	40a0      	lsls	r0, r4
 800439e:	ea21 0100 	bic.w	r1, r1, r0
 80043a2:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043a4:	6811      	ldr	r1, [r2, #0]
 80043a6:	6858      	ldr	r0, [r3, #4]
 80043a8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80043aa:	f004 041c 	and.w	r4, r4, #28
 80043ae:	40a0      	lsls	r0, r4
 80043b0:	4301      	orrs	r1, r0
 80043b2:	6011      	str	r1, [r2, #0]
 80043b4:	e7d7      	b.n	8004366 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40020407 	.word	0x40020407
 80043c0:	bffdfff8 	.word	0xbffdfff8
 80043c4:	cccccccd 	.word	0xcccccccd
 80043c8:	40020000 	.word	0x40020000
 80043cc:	400204a8 	.word	0x400204a8
 80043d0:	bffdfbf8 	.word	0xbffdfbf8
 80043d4:	40020400 	.word	0x40020400

080043d8 <HAL_DMA_Start_IT>:
{
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80043dc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80043e0:	2801      	cmp	r0, #1
 80043e2:	d032      	beq.n	800444a <HAL_DMA_Start_IT+0x72>
 80043e4:	2001      	movs	r0, #1
 80043e6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ea:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80043ee:	b2c0      	uxtb	r0, r0
 80043f0:	2801      	cmp	r0, #1
 80043f2:	d004      	beq.n	80043fe <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 80043f4:	2300      	movs	r3, #0
 80043f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 80043fa:	2002      	movs	r0, #2
}
 80043fc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80043fe:	2002      	movs	r0, #2
 8004400:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004404:	2000      	movs	r0, #0
 8004406:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	6828      	ldr	r0, [r5, #0]
 800440c:	f020 0001 	bic.w	r0, r0, #1
 8004410:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004412:	4620      	mov	r0, r4
 8004414:	f7ff ff4c 	bl	80042b0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8004418:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800441a:	b15b      	cbz	r3, 8004434 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	f043 030e 	orr.w	r3, r3, #14
 8004424:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004430:	2000      	movs	r0, #0
 8004432:	e7e3      	b.n	80043fc <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004434:	6822      	ldr	r2, [r4, #0]
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	f043 030a 	orr.w	r3, r3, #10
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	e7ed      	b.n	8004426 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800444a:	2002      	movs	r0, #2
 800444c:	e7d6      	b.n	80043fc <HAL_DMA_Start_IT+0x24>

0800444e <HAL_DMA_Abort_IT>:
{
 800444e:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004450:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d003      	beq.n	8004462 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800445a:	2304      	movs	r3, #4
 800445c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800445e:	2001      	movs	r0, #1
}
 8004460:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004462:	6802      	ldr	r2, [r0, #0]
 8004464:	6813      	ldr	r3, [r2, #0]
 8004466:	f023 030e 	bic.w	r3, r3, #14
 800446a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800446c:	6802      	ldr	r2, [r0, #0]
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004476:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004478:	f003 031c 	and.w	r3, r3, #28
 800447c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800447e:	2201      	movs	r2, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004486:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800448a:	2300      	movs	r3, #0
 800448c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8004490:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004492:	b113      	cbz	r3, 800449a <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8004494:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2000      	movs	r0, #0
 8004498:	e7e2      	b.n	8004460 <HAL_DMA_Abort_IT+0x12>
 800449a:	2000      	movs	r0, #0
 800449c:	e7e0      	b.n	8004460 <HAL_DMA_Abort_IT+0x12>

0800449e <HAL_DMA_IRQHandler>:
{
 800449e:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044a2:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80044a4:	6804      	ldr	r4, [r0, #0]
 80044a6:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044aa:	f003 031c 	and.w	r3, r3, #28
 80044ae:	2204      	movs	r2, #4
 80044b0:	409a      	lsls	r2, r3
 80044b2:	420a      	tst	r2, r1
 80044b4:	d015      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x44>
 80044b6:	f015 0f04 	tst.w	r5, #4
 80044ba:	d012      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	f013 0f20 	tst.w	r3, #32
 80044c2:	d103      	bne.n	80044cc <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f023 0304 	bic.w	r3, r3, #4
 80044ca:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80044cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044ce:	f003 021c 	and.w	r2, r3, #28
 80044d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80044d4:	2304      	movs	r3, #4
 80044d6:	4093      	lsls	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80044da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80044dc:	b103      	cbz	r3, 80044e0 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80044de:	4798      	blx	r3
}
 80044e0:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80044e2:	2202      	movs	r2, #2
 80044e4:	409a      	lsls	r2, r3
 80044e6:	420a      	tst	r2, r1
 80044e8:	d01c      	beq.n	8004524 <HAL_DMA_IRQHandler+0x86>
 80044ea:	f015 0f02 	tst.w	r5, #2
 80044ee:	d019      	beq.n	8004524 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	f013 0f20 	tst.w	r3, #32
 80044f6:	d106      	bne.n	8004506 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f023 030a 	bic.w	r3, r3, #10
 80044fe:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004500:	2301      	movs	r3, #1
 8004502:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004506:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004508:	f003 021c 	and.w	r2, r3, #28
 800450c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800450e:	2302      	movs	r3, #2
 8004510:	4093      	lsls	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004514:	2300      	movs	r3, #0
 8004516:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800451a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0df      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004520:	4798      	blx	r3
 8004522:	e7dd      	b.n	80044e0 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004524:	2208      	movs	r2, #8
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	420b      	tst	r3, r1
 800452c:	d0d8      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x42>
 800452e:	f015 0f08 	tst.w	r5, #8
 8004532:	d0d5      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f023 030e 	bic.w	r3, r3, #14
 800453a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800453c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800453e:	f003 031c 	and.w	r3, r3, #28
 8004542:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004544:	2201      	movs	r2, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800454c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800454e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004552:	2300      	movs	r3, #0
 8004554:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004558:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0c0      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800455e:	4798      	blx	r3
  return;
 8004560:	e7be      	b.n	80044e0 <HAL_DMA_IRQHandler+0x42>
	...

08004564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8004568:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456a:	e036      	b.n	80045da <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800456c:	2403      	movs	r4, #3
 800456e:	e000      	b.n	8004572 <HAL_GPIO_Init+0xe>
 8004570:	2400      	movs	r4, #0
 8004572:	40b4      	lsls	r4, r6
 8004574:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004576:	3502      	adds	r5, #2
 8004578:	4e58      	ldr	r6, [pc, #352]	; (80046dc <HAL_GPIO_Init+0x178>)
 800457a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800457e:	4c58      	ldr	r4, [pc, #352]	; (80046e0 <HAL_GPIO_Init+0x17c>)
 8004580:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004582:	43d4      	mvns	r4, r2
 8004584:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004588:	684f      	ldr	r7, [r1, #4]
 800458a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800458e:	d001      	beq.n	8004594 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8004590:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8004594:	4d52      	ldr	r5, [pc, #328]	; (80046e0 <HAL_GPIO_Init+0x17c>)
 8004596:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8004598:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800459a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800459e:	684f      	ldr	r7, [r1, #4]
 80045a0:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80045a4:	d001      	beq.n	80045aa <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80045a6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80045aa:	4d4d      	ldr	r5, [pc, #308]	; (80046e0 <HAL_GPIO_Init+0x17c>)
 80045ac:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ae:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80045b0:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b4:	684f      	ldr	r7, [r1, #4]
 80045b6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80045ba:	d001      	beq.n	80045c0 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 80045bc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80045c0:	4d47      	ldr	r5, [pc, #284]	; (80046e0 <HAL_GPIO_Init+0x17c>)
 80045c2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80045c4:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80045c6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045c8:	684e      	ldr	r6, [r1, #4]
 80045ca:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80045ce:	d001      	beq.n	80045d4 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80045d0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80045d4:	4a42      	ldr	r2, [pc, #264]	; (80046e0 <HAL_GPIO_Init+0x17c>)
 80045d6:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80045d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045da:	680a      	ldr	r2, [r1, #0]
 80045dc:	fa32 f403 	lsrs.w	r4, r2, r3
 80045e0:	d07a      	beq.n	80046d8 <HAL_GPIO_Init+0x174>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045e2:	2401      	movs	r4, #1
 80045e4:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80045e6:	4022      	ands	r2, r4
 80045e8:	d0f6      	beq.n	80045d8 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045ea:	684d      	ldr	r5, [r1, #4]
 80045ec:	1e6e      	subs	r6, r5, #1
 80045ee:	2e01      	cmp	r6, #1
 80045f0:	d903      	bls.n	80045fa <HAL_GPIO_Init+0x96>
 80045f2:	2d11      	cmp	r5, #17
 80045f4:	d001      	beq.n	80045fa <HAL_GPIO_Init+0x96>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f6:	2d12      	cmp	r5, #18
 80045f8:	d112      	bne.n	8004620 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 80045fa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045fc:	005f      	lsls	r7, r3, #1
 80045fe:	2503      	movs	r5, #3
 8004600:	40bd      	lsls	r5, r7
 8004602:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004606:	68cd      	ldr	r5, [r1, #12]
 8004608:	40bd      	lsls	r5, r7
 800460a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800460c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800460e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004610:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004614:	684d      	ldr	r5, [r1, #4]
 8004616:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800461a:	409c      	lsls	r4, r3
 800461c:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800461e:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8004620:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004622:	005e      	lsls	r6, r3, #1
 8004624:	2503      	movs	r5, #3
 8004626:	40b5      	lsls	r5, r6
 8004628:	43ec      	mvns	r4, r5
 800462a:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800462e:	688d      	ldr	r5, [r1, #8]
 8004630:	40b5      	lsls	r5, r6
 8004632:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8004634:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004636:	684d      	ldr	r5, [r1, #4]
 8004638:	2d02      	cmp	r5, #2
 800463a:	d001      	beq.n	8004640 <HAL_GPIO_Init+0xdc>
 800463c:	2d12      	cmp	r5, #18
 800463e:	d113      	bne.n	8004668 <HAL_GPIO_Init+0x104>
        temp = GPIOx->AFR[position >> 3u];
 8004640:	08df      	lsrs	r7, r3, #3
 8004642:	3708      	adds	r7, #8
 8004644:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004648:	f003 0507 	and.w	r5, r3, #7
 800464c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8004650:	250f      	movs	r5, #15
 8004652:	fa05 f50c 	lsl.w	r5, r5, ip
 8004656:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800465a:	690d      	ldr	r5, [r1, #16]
 800465c:	fa05 f50c 	lsl.w	r5, r5, ip
 8004660:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004664:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8004668:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800466a:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800466c:	684c      	ldr	r4, [r1, #4]
 800466e:	f004 0403 	and.w	r4, r4, #3
 8004672:	40b4      	lsls	r4, r6
 8004674:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8004676:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004678:	684c      	ldr	r4, [r1, #4]
 800467a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800467e:	d0ab      	beq.n	80045d8 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004680:	4c18      	ldr	r4, [pc, #96]	; (80046e4 <HAL_GPIO_Init+0x180>)
 8004682:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004684:	f045 0501 	orr.w	r5, r5, #1
 8004688:	6625      	str	r5, [r4, #96]	; 0x60
 800468a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800468c:	f004 0401 	and.w	r4, r4, #1
 8004690:	9401      	str	r4, [sp, #4]
 8004692:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004694:	089d      	lsrs	r5, r3, #2
 8004696:	1cae      	adds	r6, r5, #2
 8004698:	4c10      	ldr	r4, [pc, #64]	; (80046dc <HAL_GPIO_Init+0x178>)
 800469a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800469e:	f003 0403 	and.w	r4, r3, #3
 80046a2:	00a6      	lsls	r6, r4, #2
 80046a4:	240f      	movs	r4, #15
 80046a6:	40b4      	lsls	r4, r6
 80046a8:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046ac:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80046b0:	f43f af5e 	beq.w	8004570 <HAL_GPIO_Init+0xc>
 80046b4:	4c0c      	ldr	r4, [pc, #48]	; (80046e8 <HAL_GPIO_Init+0x184>)
 80046b6:	42a0      	cmp	r0, r4
 80046b8:	d00a      	beq.n	80046d0 <HAL_GPIO_Init+0x16c>
 80046ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80046be:	42a0      	cmp	r0, r4
 80046c0:	d008      	beq.n	80046d4 <HAL_GPIO_Init+0x170>
 80046c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80046c6:	42a0      	cmp	r0, r4
 80046c8:	f43f af50 	beq.w	800456c <HAL_GPIO_Init+0x8>
 80046cc:	2407      	movs	r4, #7
 80046ce:	e750      	b.n	8004572 <HAL_GPIO_Init+0xe>
 80046d0:	2401      	movs	r4, #1
 80046d2:	e74e      	b.n	8004572 <HAL_GPIO_Init+0xe>
 80046d4:	2402      	movs	r4, #2
 80046d6:	e74c      	b.n	8004572 <HAL_GPIO_Init+0xe>
  }
}
 80046d8:	b003      	add	sp, #12
 80046da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40010400 	.word	0x40010400
 80046e4:	40021000 	.word	0x40021000
 80046e8:	48000400 	.word	0x48000400

080046ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046ec:	6903      	ldr	r3, [r0, #16]
 80046ee:	4219      	tst	r1, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80046f2:	2001      	movs	r0, #1
 80046f4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80046f8:	4770      	bx	lr

080046fa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046fa:	b10a      	cbz	r2, 8004700 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046fc:	6181      	str	r1, [r0, #24]
 80046fe:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004700:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004702:	4770      	bx	lr

08004704 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004704:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004706:	ea01 0203 	and.w	r2, r1, r3
 800470a:	ea21 0103 	bic.w	r1, r1, r3
 800470e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004712:	6181      	str	r1, [r0, #24]
}
 8004714:	4770      	bx	lr

08004716 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004716:	4770      	bx	lr

08004718 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004718:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	4203      	tst	r3, r0
 8004720:	d100      	bne.n	8004724 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8004722:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004724:	4b02      	ldr	r3, [pc, #8]	; (8004730 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004726:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004728:	f7ff fff5 	bl	8004716 <HAL_GPIO_EXTI_Callback>
}
 800472c:	e7f9      	b.n	8004722 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800472e:	bf00      	nop
 8004730:	40010400 	.word	0x40010400

08004734 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004734:	6803      	ldr	r3, [r0, #0]
 8004736:	699a      	ldr	r2, [r3, #24]
 8004738:	f012 0f02 	tst.w	r2, #2
 800473c:	d001      	beq.n	8004742 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800473e:	2200      	movs	r2, #0
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004742:	6803      	ldr	r3, [r0, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	f012 0f01 	tst.w	r2, #1
 800474a:	d103      	bne.n	8004754 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	619a      	str	r2, [r3, #24]
  }
}
 8004754:	4770      	bx	lr

08004756 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004756:	b470      	push	{r4, r5, r6}
 8004758:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800475a:	6805      	ldr	r5, [r0, #0]
 800475c:	6868      	ldr	r0, [r5, #4]
 800475e:	0d74      	lsrs	r4, r6, #21
 8004760:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004764:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8004768:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800476c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004770:	f044 0403 	orr.w	r4, r4, #3
 8004774:	ea20 0004 	bic.w	r0, r0, r4
 8004778:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800477c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004780:	4319      	orrs	r1, r3
 8004782:	4331      	orrs	r1, r6
 8004784:	4301      	orrs	r1, r0
 8004786:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004788:	bc70      	pop	{r4, r5, r6}
 800478a:	4770      	bx	lr

0800478c <I2C_IsAcknowledgeFailed>:
{
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	4605      	mov	r5, r0
 8004790:	460e      	mov	r6, r1
 8004792:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004794:	6803      	ldr	r3, [r0, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f013 0f10 	tst.w	r3, #16
 800479c:	d101      	bne.n	80047a2 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 800479e:	2000      	movs	r0, #0
}
 80047a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a2:	682b      	ldr	r3, [r5, #0]
 80047a4:	699c      	ldr	r4, [r3, #24]
 80047a6:	f014 0f20 	tst.w	r4, #32
 80047aa:	d117      	bne.n	80047dc <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80047ac:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80047b0:	d0f7      	beq.n	80047a2 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7ff f80d 	bl	80037d0 <HAL_GetTick>
 80047b6:	1bc0      	subs	r0, r0, r7
 80047b8:	42b0      	cmp	r0, r6
 80047ba:	d801      	bhi.n	80047c0 <I2C_IsAcknowledgeFailed+0x34>
 80047bc:	2e00      	cmp	r6, #0
 80047be:	d1f0      	bne.n	80047a2 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	2320      	movs	r3, #32
 80047ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80047d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80047d8:	2001      	movs	r0, #1
 80047da:	e7e1      	b.n	80047a0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	2210      	movs	r2, #16
 80047de:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	2420      	movs	r4, #32
 80047e4:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7ff ffa4 	bl	8004734 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80047ec:	682a      	ldr	r2, [r5, #0]
 80047ee:	6853      	ldr	r3, [r2, #4]
 80047f0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80047f4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80047f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004802:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004804:	f043 0304 	orr.w	r3, r3, #4
 8004808:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800480a:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	2300      	movs	r3, #0
 8004810:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004814:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8004818:	2001      	movs	r0, #1
 800481a:	e7c1      	b.n	80047a0 <I2C_IsAcknowledgeFailed+0x14>

0800481c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4604      	mov	r4, r0
 8004820:	460d      	mov	r5, r1
 8004822:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f013 0f02 	tst.w	r3, #2
 800482c:	d11d      	bne.n	800486a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800482e:	4632      	mov	r2, r6
 8004830:	4629      	mov	r1, r5
 8004832:	4620      	mov	r0, r4
 8004834:	f7ff ffaa 	bl	800478c <I2C_IsAcknowledgeFailed>
 8004838:	b9c8      	cbnz	r0, 800486e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800483a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800483e:	d0f1      	beq.n	8004824 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004840:	f7fe ffc6 	bl	80037d0 <HAL_GetTick>
 8004844:	1b80      	subs	r0, r0, r6
 8004846:	42a8      	cmp	r0, r5
 8004848:	d801      	bhi.n	800484e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800484a:	2d00      	cmp	r5, #0
 800484c:	d1ea      	bne.n	8004824 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004856:	2320      	movs	r3, #32
 8004858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	2300      	movs	r3, #0
 800485e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004862:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004866:	2001      	movs	r0, #1
 8004868:	e000      	b.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800486a:	2000      	movs	r0, #0
}
 800486c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800486e:	2001      	movs	r0, #1
 8004870:	e7fc      	b.n	800486c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08004872 <I2C_WaitOnFlagUntilTimeout>:
{
 8004872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004876:	4606      	mov	r6, r0
 8004878:	4688      	mov	r8, r1
 800487a:	4617      	mov	r7, r2
 800487c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487e:	6834      	ldr	r4, [r6, #0]
 8004880:	69a4      	ldr	r4, [r4, #24]
 8004882:	ea38 0304 	bics.w	r3, r8, r4
 8004886:	bf0c      	ite	eq
 8004888:	2401      	moveq	r4, #1
 800488a:	2400      	movne	r4, #0
 800488c:	42bc      	cmp	r4, r7
 800488e:	d118      	bne.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004890:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004894:	d0f3      	beq.n	800487e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fe ff9b 	bl	80037d0 <HAL_GetTick>
 800489a:	9b06      	ldr	r3, [sp, #24]
 800489c:	1ac0      	subs	r0, r0, r3
 800489e:	42a8      	cmp	r0, r5
 80048a0:	d801      	bhi.n	80048a6 <I2C_WaitOnFlagUntilTimeout+0x34>
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	d1eb      	bne.n	800487e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80048a8:	f043 0320 	orr.w	r3, r3, #32
 80048ac:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	2320      	movs	r3, #32
 80048b0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80048ba:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80048be:	2001      	movs	r0, #1
 80048c0:	e000      	b.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80048c2:	2000      	movs	r0, #0
}
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048c8 <I2C_RequestMemoryWrite>:
{
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	4604      	mov	r4, r0
 80048d0:	4690      	mov	r8, r2
 80048d2:	461d      	mov	r5, r3
 80048d4:	9e08      	ldr	r6, [sp, #32]
 80048d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <I2C_RequestMemoryWrite+0x78>)
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048e0:	b2ea      	uxtb	r2, r5
 80048e2:	f7ff ff38 	bl	8004756 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e6:	463a      	mov	r2, r7
 80048e8:	4631      	mov	r1, r6
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7ff ff96 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 80048f0:	b9f8      	cbnz	r0, 8004932 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048f2:	2d01      	cmp	r5, #1
 80048f4:	d10e      	bne.n	8004914 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	fa5f f288 	uxtb.w	r2, r8
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048fe:	9700      	str	r7, [sp, #0]
 8004900:	4633      	mov	r3, r6
 8004902:	2200      	movs	r2, #0
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	4620      	mov	r0, r4
 8004908:	f7ff ffb3 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 800490c:	b9a8      	cbnz	r0, 800493a <I2C_RequestMemoryWrite+0x72>
}
 800490e:	b002      	add	sp, #8
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491c:	463a      	mov	r2, r7
 800491e:	4631      	mov	r1, r6
 8004920:	4620      	mov	r0, r4
 8004922:	f7ff ff7b 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 8004926:	b930      	cbnz	r0, 8004936 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	fa5f f288 	uxtb.w	r2, r8
 800492e:	629a      	str	r2, [r3, #40]	; 0x28
 8004930:	e7e5      	b.n	80048fe <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8004932:	2001      	movs	r0, #1
 8004934:	e7eb      	b.n	800490e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8004936:	2001      	movs	r0, #1
 8004938:	e7e9      	b.n	800490e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800493a:	2001      	movs	r0, #1
 800493c:	e7e7      	b.n	800490e <I2C_RequestMemoryWrite+0x46>
 800493e:	bf00      	nop
 8004940:	80002000 	.word	0x80002000

08004944 <I2C_RequestMemoryRead>:
{
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	4604      	mov	r4, r0
 800494c:	4690      	mov	r8, r2
 800494e:	461d      	mov	r5, r3
 8004950:	9e08      	ldr	r6, [sp, #32]
 8004952:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <I2C_RequestMemoryRead+0x74>)
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	b2ea      	uxtb	r2, r5
 800495c:	f7ff fefb 	bl	8004756 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004960:	463a      	mov	r2, r7
 8004962:	4631      	mov	r1, r6
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ff59 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 800496a:	b9f8      	cbnz	r0, 80049ac <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800496c:	2d01      	cmp	r5, #1
 800496e:	d10e      	bne.n	800498e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	fa5f f288 	uxtb.w	r2, r8
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	9700      	str	r7, [sp, #0]
 800497a:	4633      	mov	r3, r6
 800497c:	2200      	movs	r2, #0
 800497e:	2140      	movs	r1, #64	; 0x40
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff ff76 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8004986:	b9a8      	cbnz	r0, 80049b4 <I2C_RequestMemoryRead+0x70>
}
 8004988:	b002      	add	sp, #8
 800498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	463a      	mov	r2, r7
 8004998:	4631      	mov	r1, r6
 800499a:	4620      	mov	r0, r4
 800499c:	f7ff ff3e 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 80049a0:	b930      	cbnz	r0, 80049b0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	fa5f f288 	uxtb.w	r2, r8
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
 80049aa:	e7e5      	b.n	8004978 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80049ac:	2001      	movs	r0, #1
 80049ae:	e7eb      	b.n	8004988 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80049b0:	2001      	movs	r0, #1
 80049b2:	e7e9      	b.n	8004988 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80049b4:	2001      	movs	r0, #1
 80049b6:	e7e7      	b.n	8004988 <I2C_RequestMemoryRead+0x44>
 80049b8:	80002000 	.word	0x80002000

080049bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4605      	mov	r5, r0
 80049c0:	460c      	mov	r4, r1
 80049c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f013 0f20 	tst.w	r3, #32
 80049cc:	d11a      	bne.n	8004a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ce:	4632      	mov	r2, r6
 80049d0:	4621      	mov	r1, r4
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff feda 	bl	800478c <I2C_IsAcknowledgeFailed>
 80049d8:	b9b0      	cbnz	r0, 8004a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fe fef9 	bl	80037d0 <HAL_GetTick>
 80049de:	1b80      	subs	r0, r0, r6
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d801      	bhi.n	80049e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80049e4:	2c00      	cmp	r4, #0
 80049e6:	d1ed      	bne.n	80049c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80049ea:	f043 0320 	orr.w	r3, r3, #32
 80049ee:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049f0:	2320      	movs	r3, #32
 80049f2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80049fc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004a00:	2001      	movs	r0, #1
}
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	e7fc      	b.n	8004a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7fa      	b.n	8004a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004a0c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d059      	beq.n	8004ac4 <HAL_I2C_Init+0xb8>
{
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a14:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d043      	beq.n	8004aa4 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a1c:	2324      	movs	r3, #36	; 0x24
 8004a1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a2c:	6863      	ldr	r3, [r4, #4]
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004a34:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	6893      	ldr	r3, [r2, #8]
 8004a3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a3e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a40:	68e3      	ldr	r3, [r4, #12]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d033      	beq.n	8004aae <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a46:	68a3      	ldr	r3, [r4, #8]
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004a4e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a50:	68e3      	ldr	r3, [r4, #12]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d031      	beq.n	8004aba <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	6853      	ldr	r3, [r2, #4]
 8004a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a62:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	68d3      	ldr	r3, [r2, #12]
 8004a68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a6c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	6962      	ldr	r2, [r4, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	69a1      	ldr	r1, [r4, #24]
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004a7c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a7e:	69e3      	ldr	r3, [r4, #28]
 8004a80:	6a21      	ldr	r1, [r4, #32]
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a92:	2000      	movs	r0, #0
 8004a94:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	2320      	movs	r3, #32
 8004a98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004aa2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004aa4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004aa8:	f7fe f9b2 	bl	8002e10 <HAL_I2C_MspInit>
 8004aac:	e7b6      	b.n	8004a1c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aae:	68a3      	ldr	r3, [r4, #8]
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	6093      	str	r3, [r2, #8]
 8004ab8:	e7ca      	b.n	8004a50 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	e7c8      	b.n	8004a56 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004ac4:	2001      	movs	r0, #1
}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_I2C_Mem_Write>:
{
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	b083      	sub	sp, #12
 8004ace:	460e      	mov	r6, r1
 8004ad0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004ad4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004ada:	b2c9      	uxtb	r1, r1
 8004adc:	2920      	cmp	r1, #32
 8004ade:	f040 80bb 	bne.w	8004c58 <HAL_I2C_Mem_Write+0x190>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	4690      	mov	r8, r2
 8004ae6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004aea:	b1cb      	cbz	r3, 8004b20 <HAL_I2C_Mem_Write+0x58>
 8004aec:	f1ba 0f00 	cmp.w	sl, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8004af2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	f000 80b2 	beq.w	8004c60 <HAL_I2C_Mem_Write+0x198>
 8004afc:	f04f 0b01 	mov.w	fp, #1
 8004b00:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004b04:	f7fe fe64 	bl	80037d0 <HAL_GetTick>
 8004b08:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b0a:	9000      	str	r0, [sp, #0]
 8004b0c:	2319      	movs	r3, #25
 8004b0e:	465a      	mov	r2, fp
 8004b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7ff feac 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	b130      	cbz	r0, 8004b2a <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	e09c      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b24:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8004b26:	2001      	movs	r0, #1
 8004b28:	e097      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b2a:	2321      	movs	r3, #33	; 0x21
 8004b2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b30:	2340      	movs	r3, #64	; 0x40
 8004b32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b3c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b3e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b42:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b44:	9701      	str	r7, [sp, #4]
 8004b46:	9500      	str	r5, [sp, #0]
 8004b48:	464b      	mov	r3, r9
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff feba 	bl	80048c8 <I2C_RequestMemoryWrite>
 8004b54:	b970      	cbnz	r0, 8004b74 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2bff      	cmp	r3, #255	; 0xff
 8004b5c:	d90f      	bls.n	8004b7e <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b5e:	22ff      	movs	r2, #255	; 0xff
 8004b60:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b62:	2300      	movs	r3, #0
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7ff fdf2 	bl	8004756 <I2C_TransferConfig>
 8004b72:	e021      	b.n	8004bb8 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004b7a:	4658      	mov	r0, fp
 8004b7c:	e06d      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8004b7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b80:	b292      	uxth	r2, r2
 8004b82:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b84:	2300      	movs	r3, #0
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7ff fde0 	bl	8004756 <I2C_TransferConfig>
 8004b96:	e00f      	b.n	8004bb8 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004b98:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7ff fdd3 	bl	8004756 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004bb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d033      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb8:	463a      	mov	r2, r7
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7ff fe2d 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d14e      	bne.n	8004c64 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004bd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004bde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004be6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004be8:	b292      	uxth	r2, r2
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d0e0      	beq.n	8004bb0 <HAL_I2C_Mem_Write+0xe8>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1de      	bne.n	8004bb0 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bf2:	9700      	str	r7, [sp, #0]
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2180      	movs	r1, #128	; 0x80
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff fe39 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8004c00:	bb90      	cbnz	r0, 8004c68 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2bff      	cmp	r3, #255	; 0xff
 8004c08:	d9c6      	bls.n	8004b98 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c0a:	22ff      	movs	r2, #255	; 0xff
 8004c0c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c16:	4631      	mov	r1, r6
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7ff fd9c 	bl	8004756 <I2C_TransferConfig>
 8004c1e:	e7c7      	b.n	8004bb0 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c20:	463a      	mov	r2, r7
 8004c22:	4629      	mov	r1, r5
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff fec9 	bl	80049bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c2a:	b9f8      	cbnz	r0, 8004c6c <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004c32:	6821      	ldr	r1, [r4, #0]
 8004c34:	684b      	ldr	r3, [r1, #4]
 8004c36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004c3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004c3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004c52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004c56:	e000      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8004c58:	2002      	movs	r0, #2
}
 8004c5a:	b003      	add	sp, #12
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004c60:	2002      	movs	r0, #2
 8004c62:	e7fa      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8004c64:	2001      	movs	r0, #1
 8004c66:	e7f8      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8004c68:	2001      	movs	r0, #1
 8004c6a:	e7f6      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	e7f4      	b.n	8004c5a <HAL_I2C_Mem_Write+0x192>

08004c70 <HAL_I2C_Mem_Read>:
{
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	b083      	sub	sp, #12
 8004c76:	460e      	mov	r6, r1
 8004c78:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004c7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004c82:	b2c9      	uxtb	r1, r1
 8004c84:	2920      	cmp	r1, #32
 8004c86:	f040 80bc 	bne.w	8004e02 <HAL_I2C_Mem_Read+0x192>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4690      	mov	r8, r2
 8004c8e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c92:	b1cb      	cbz	r3, 8004cc8 <HAL_I2C_Mem_Read+0x58>
 8004c94:	f1ba 0f00 	cmp.w	sl, #0
 8004c98:	d016      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8004c9a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f000 80b3 	beq.w	8004e0a <HAL_I2C_Mem_Read+0x19a>
 8004ca4:	f04f 0b01 	mov.w	fp, #1
 8004ca8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004cac:	f7fe fd90 	bl	80037d0 <HAL_GetTick>
 8004cb0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cb2:	9000      	str	r0, [sp, #0]
 8004cb4:	2319      	movs	r3, #25
 8004cb6:	465a      	mov	r2, fp
 8004cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff fdd8 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	b130      	cbz	r0, 8004cd2 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	e09d      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ccc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8004cce:	2001      	movs	r0, #1
 8004cd0:	e098      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cd2:	2322      	movs	r3, #34	; 0x22
 8004cd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd8:	2340      	movs	r3, #64	; 0x40
 8004cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ce4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ce6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cea:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cec:	9701      	str	r7, [sp, #4]
 8004cee:	9500      	str	r5, [sp, #0]
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7ff fe24 	bl	8004944 <I2C_RequestMemoryRead>
 8004cfc:	b970      	cbnz	r0, 8004d1c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2bff      	cmp	r3, #255	; 0xff
 8004d04:	d90f      	bls.n	8004d26 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d0a:	4b44      	ldr	r3, [pc, #272]	; (8004e1c <HAL_I2C_Mem_Read+0x1ac>)
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d12:	4631      	mov	r1, r6
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff fd1e 	bl	8004756 <I2C_TransferConfig>
 8004d1a:	e021      	b.n	8004d60 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004d22:	4658      	mov	r0, fp
 8004d24:	e06e      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8004d26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d28:	b292      	uxth	r2, r2
 8004d2a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d2c:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <HAL_I2C_Mem_Read+0x1ac>)
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	4631      	mov	r1, r6
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff fd0c 	bl	8004756 <I2C_TransferConfig>
 8004d3e:	e00f      	b.n	8004d60 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004d40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d42:	b292      	uxth	r2, r2
 8004d44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d46:	2300      	movs	r3, #0
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	4631      	mov	r1, r6
 8004d52:	4620      	mov	r0, r4
 8004d54:	f7ff fcff 	bl	8004756 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004d58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d034      	beq.n	8004dca <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d60:	9700      	str	r7, [sp, #0]
 8004d62:	462b      	mov	r3, r5
 8004d64:	2200      	movs	r2, #0
 8004d66:	2104      	movs	r1, #4
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7ff fd82 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d14d      	bne.n	8004e0e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d78:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004d80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004d82:	3a01      	subs	r2, #1
 8004d84:	b292      	uxth	r2, r2
 8004d86:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0de      	beq.n	8004d58 <HAL_I2C_Mem_Read+0xe8>
 8004d9a:	2a00      	cmp	r2, #0
 8004d9c:	d1dc      	bne.n	8004d58 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d9e:	9700      	str	r7, [sp, #0]
 8004da0:	462b      	mov	r3, r5
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7ff fd64 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8004daa:	bb90      	cbnz	r0, 8004e12 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2bff      	cmp	r3, #255	; 0xff
 8004db2:	d9c5      	bls.n	8004d40 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db4:	22ff      	movs	r2, #255	; 0xff
 8004db6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004db8:	2300      	movs	r3, #0
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f7ff fcc7 	bl	8004756 <I2C_TransferConfig>
 8004dc8:	e7c6      	b.n	8004d58 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dca:	463a      	mov	r2, r7
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7ff fdf4 	bl	80049bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dd4:	b9f8      	cbnz	r0, 8004e16 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004ddc:	6821      	ldr	r1, [r4, #0]
 8004dde:	684b      	ldr	r3, [r1, #4]
 8004de0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004de4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004de8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004dfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004e00:	e000      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8004e02:	2002      	movs	r0, #2
}
 8004e04:	b003      	add	sp, #12
 8004e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004e0a:	2002      	movs	r0, #2
 8004e0c:	e7fa      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e7f8      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8004e12:	2001      	movs	r0, #1
 8004e14:	e7f6      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
 8004e18:	e7f4      	b.n	8004e04 <HAL_I2C_Mem_Read+0x194>
 8004e1a:	bf00      	nop
 8004e1c:	80002400 	.word	0x80002400

08004e20 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d124      	bne.n	8004e74 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e2a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d022      	beq.n	8004e78 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004e32:	2301      	movs	r3, #1
 8004e34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e38:	2324      	movs	r3, #36	; 0x24
 8004e3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3e:	6802      	ldr	r2, [r0, #0]
 8004e40:	6813      	ldr	r3, [r2, #0]
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e48:	6802      	ldr	r2, [r0, #0]
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e50:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e52:	6802      	ldr	r2, [r0, #0]
 8004e54:	6813      	ldr	r3, [r2, #0]
 8004e56:	4319      	orrs	r1, r3
 8004e58:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e5a:	6802      	ldr	r2, [r0, #0]
 8004e5c:	6813      	ldr	r3, [r2, #0]
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e64:	2320      	movs	r3, #32
 8004e66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004e70:	4618      	mov	r0, r3
 8004e72:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2002      	movs	r0, #2
 8004e76:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004e78:	2002      	movs	r0, #2
  }
}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d122      	bne.n	8004ecc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e86:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d020      	beq.n	8004ed0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e94:	2324      	movs	r3, #36	; 0x24
 8004e96:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e9a:	6802      	ldr	r2, [r0, #0]
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ea4:	6802      	ldr	r2, [r0, #0]
 8004ea6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004eac:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eb0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb2:	6802      	ldr	r2, [r0, #0]
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004ec8:	4618      	mov	r0, r3
 8004eca:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2002      	movs	r0, #2
 8004ece:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004ed0:	2002      	movs	r0, #2
  }
}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004ed4:	b340      	cbz	r0, 8004f28 <HAL_IWDG_Init+0x54>
{
 8004ed6:	b538      	push	{r3, r4, r5, lr}
 8004ed8:	4604      	mov	r4, r0
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004eda:	6803      	ldr	r3, [r0, #0]
 8004edc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004ee2:	6803      	ldr	r3, [r0, #0]
 8004ee4:	f245 5255 	movw	r2, #21845	; 0x5555
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004eea:	6803      	ldr	r3, [r0, #0]
 8004eec:	6842      	ldr	r2, [r0, #4]
 8004eee:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004ef0:	6803      	ldr	r3, [r0, #0]
 8004ef2:	6882      	ldr	r2, [r0, #8]
 8004ef4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004ef6:	f7fe fc6b 	bl	80037d0 <HAL_GetTick>
 8004efa:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	b132      	cbz	r2, 8004f10 <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004f02:	f7fe fc65 	bl	80037d0 <HAL_GetTick>
 8004f06:	1b40      	subs	r0, r0, r5
 8004f08:	2830      	cmp	r0, #48	; 0x30
 8004f0a:	d9f7      	bls.n	8004efc <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 8004f0c:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004f10:	6919      	ldr	r1, [r3, #16]
 8004f12:	68e2      	ldr	r2, [r4, #12]
 8004f14:	4291      	cmp	r1, r2
 8004f16:	d002      	beq.n	8004f1e <HAL_IWDG_Init+0x4a>
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004f18:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e7f7      	b.n	8004f0e <HAL_IWDG_Init+0x3a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f1e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004f22:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f24:	2000      	movs	r0, #0
 8004f26:	e7f2      	b.n	8004f0e <HAL_IWDG_Init+0x3a>
    return HAL_ERROR;
 8004f28:	2001      	movs	r0, #1
}
 8004f2a:	4770      	bx	lr

08004f2c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f2c:	6803      	ldr	r3, [r0, #0]
 8004f2e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004f32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8004f34:	2000      	movs	r0, #0
 8004f36:	4770      	bx	lr

08004f38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f38:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f3a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004f3e:	d041      	beq.n	8004fc4 <HAL_PCD_EP_DB_Receive+0x8c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f40:	6804      	ldr	r4, [r0, #0]
 8004f42:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004f46:	780d      	ldrb	r5, [r1, #0]
 8004f48:	00ee      	lsls	r6, r5, #3
 8004f4a:	fa16 f383 	uxtah	r3, r6, r3
 8004f4e:	4423      	add	r3, r4
 8004f50:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8004f54:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8004f58:	698b      	ldr	r3, [r1, #24]
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	d328      	bcc.n	8004fb0 <HAL_PCD_EP_DB_Receive+0x78>
    {
      ep->xfer_len -= count;
 8004f5e:	1b1b      	subs	r3, r3, r4
 8004f60:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8004f62:	698b      	ldr	r3, [r1, #24]
 8004f64:	b97b      	cbnz	r3, 8004f86 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f66:	6806      	ldr	r6, [r0, #0]
 8004f68:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f82:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f86:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f8a:	d00e      	beq.n	8004faa <HAL_PCD_EP_DB_Receive+0x72>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f8c:	6802      	ldr	r2, [r0, #0]
 8004f8e:	780d      	ldrb	r5, [r1, #0]
 8004f90:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa6:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8004faa:	b924      	cbnz	r4, 8004fb6 <HAL_PCD_EP_DB_Receive+0x7e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8004fac:	4620      	mov	r0, r4
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	618b      	str	r3, [r1, #24]
 8004fb4:	e7d5      	b.n	8004f62 <HAL_PCD_EP_DB_Receive+0x2a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	890a      	ldrh	r2, [r1, #8]
 8004fba:	6949      	ldr	r1, [r1, #20]
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f003 fd06 	bl	80089ce <USB_ReadPMA>
 8004fc2:	e7f3      	b.n	8004fac <HAL_PCD_EP_DB_Receive+0x74>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fc4:	6804      	ldr	r4, [r0, #0]
 8004fc6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004fca:	780d      	ldrb	r5, [r1, #0]
 8004fcc:	00ee      	lsls	r6, r5, #3
 8004fce:	fa16 f383 	uxtah	r3, r6, r3
 8004fd2:	4423      	add	r3, r4
 8004fd4:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8004fd8:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8004fdc:	698b      	ldr	r3, [r1, #24]
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	d32e      	bcc.n	8005040 <HAL_PCD_EP_DB_Receive+0x108>
      ep->xfer_len -= count;
 8004fe2:	1b1b      	subs	r3, r3, r4
 8004fe4:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8004fe6:	698b      	ldr	r3, [r1, #24]
 8004fe8:	b97b      	cbnz	r3, 800500a <HAL_PCD_EP_DB_Receive+0xd2>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fea:	6806      	ldr	r6, [r0, #0]
 8004fec:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800500a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800500e:	d10e      	bne.n	800502e <HAL_PCD_EP_DB_Receive+0xf6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005010:	6802      	ldr	r2, [r0, #0]
 8005012:	780d      	ldrb	r5, [r1, #0]
 8005014:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005026:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800502a:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 800502e:	2c00      	cmp	r4, #0
 8005030:	d0bc      	beq.n	8004fac <HAL_PCD_EP_DB_Receive+0x74>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005032:	4623      	mov	r3, r4
 8005034:	894a      	ldrh	r2, [r1, #10]
 8005036:	6949      	ldr	r1, [r1, #20]
 8005038:	6800      	ldr	r0, [r0, #0]
 800503a:	f003 fcc8 	bl	80089ce <USB_ReadPMA>
 800503e:	e7b5      	b.n	8004fac <HAL_PCD_EP_DB_Receive+0x74>
      ep->xfer_len = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	618b      	str	r3, [r1, #24]
 8005044:	e7cf      	b.n	8004fe6 <HAL_PCD_EP_DB_Receive+0xae>

08005046 <HAL_PCD_Init>:
{
 8005046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005048:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800504a:	2800      	cmp	r0, #0
 800504c:	f000 8087 	beq.w	800515e <HAL_PCD_Init+0x118>
 8005050:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005052:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8005056:	b1db      	cbz	r3, 8005090 <HAL_PCD_Init+0x4a>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005058:	2303      	movs	r3, #3
 800505a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	f002 fd92 	bl	8007b88 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005064:	4625      	mov	r5, r4
 8005066:	f855 7b10 	ldr.w	r7, [r5], #16
 800506a:	466e      	mov	r6, sp
 800506c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800506e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	1d23      	adds	r3, r4, #4
 8005076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005078:	4638      	mov	r0, r7
 800507a:	f002 fd75 	bl	8007b68 <USB_CoreInit>
 800507e:	4605      	mov	r5, r0
 8005080:	b158      	cbz	r0, 800509a <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005082:	2302      	movs	r3, #2
 8005084:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8005088:	2501      	movs	r5, #1
}
 800508a:	4628      	mov	r0, r5
 800508c:	b007      	add	sp, #28
 800508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005090:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8005094:	f006 f988 	bl	800b3a8 <HAL_PCD_MspInit>
 8005098:	e7de      	b.n	8005058 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800509a:	2100      	movs	r1, #0
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	f002 fd7d 	bl	8007b9c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a2:	462b      	mov	r3, r5
 80050a4:	e019      	b.n	80050da <HAL_PCD_Init+0x94>
    hpcd->IN_ep[i].is_in = 1U;
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80050ac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80050b0:	2001      	movs	r0, #1
 80050b2:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80050b4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80050b8:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80050c0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80050c4:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050c6:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 80050ca:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80050ce:	2000      	movs	r0, #0
 80050d0:	70f0      	strb	r0, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050d2:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050d4:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80050d6:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d8:	b2d3      	uxtb	r3, r2
 80050da:	6861      	ldr	r1, [r4, #4]
 80050dc:	428b      	cmp	r3, r1
 80050de:	d3e2      	bcc.n	80050a6 <HAL_PCD_Init+0x60>
 80050e0:	e016      	b.n	8005110 <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 80050e2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80050e6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80050f0:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050f4:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050f8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050fc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005100:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8005104:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005108:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800510c:	3501      	adds	r5, #1
 800510e:	b2ed      	uxtb	r5, r5
 8005110:	42a9      	cmp	r1, r5
 8005112:	d8e6      	bhi.n	80050e2 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005114:	4625      	mov	r5, r4
 8005116:	f855 7b10 	ldr.w	r7, [r5], #16
 800511a:	466e      	mov	r6, sp
 800511c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800511e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	1d23      	adds	r3, r4, #4
 8005126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005128:	4638      	mov	r0, r7
 800512a:	f002 fd39 	bl	8007ba0 <USB_DevInit>
 800512e:	4605      	mov	r5, r0
 8005130:	b960      	cbnz	r0, 800514c <HAL_PCD_Init+0x106>
  hpcd->USB_Address = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005138:	2301      	movs	r3, #1
 800513a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 800513e:	69e3      	ldr	r3, [r4, #28]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d008      	beq.n	8005156 <HAL_PCD_Init+0x110>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	f003 f851 	bl	80081ec <USB_DevDisconnect>
  return HAL_OK;
 800514a:	e79e      	b.n	800508a <HAL_PCD_Init+0x44>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800514c:	2302      	movs	r3, #2
 800514e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8005152:	2501      	movs	r5, #1
 8005154:	e799      	b.n	800508a <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005156:	4620      	mov	r0, r4
 8005158:	f000 fdda 	bl	8005d10 <HAL_PCDEx_ActivateLPM>
 800515c:	e7f2      	b.n	8005144 <HAL_PCD_Init+0xfe>
    return HAL_ERROR;
 800515e:	2501      	movs	r5, #1
 8005160:	e793      	b.n	800508a <HAL_PCD_Init+0x44>

08005162 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8005162:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8005166:	2b01      	cmp	r3, #1
 8005168:	d00e      	beq.n	8005188 <HAL_PCD_Start+0x26>
{
 800516a:	b510      	push	{r4, lr}
 800516c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800516e:	2301      	movs	r3, #1
 8005170:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005174:	6800      	ldr	r0, [r0, #0]
 8005176:	f002 fcfe 	bl	8007b76 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800517a:	6820      	ldr	r0, [r4, #0]
 800517c:	f003 f82b 	bl	80081d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005180:	2000      	movs	r0, #0
 8005182:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005186:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005188:	2002      	movs	r0, #2
}
 800518a:	4770      	bx	lr

0800518c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	4605      	mov	r5, r0
 8005190:	460c      	mov	r4, r1
 8005192:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005194:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005198:	f000 80b8 	beq.w	800530c <HAL_PCD_EP_DB_Transmit+0x180>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800519c:	6802      	ldr	r2, [r0, #0]
 800519e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80051a2:	7809      	ldrb	r1, [r1, #0]
 80051a4:	00c8      	lsls	r0, r1, #3
 80051a6:	fa10 f383 	uxtah	r3, r0, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80051b0:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 80051b4:	69a3      	ldr	r3, [r4, #24]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d92b      	bls.n	8005212 <HAL_PCD_EP_DB_Transmit+0x86>
    {
      ep->xfer_len -= TxByteNbre;
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051be:	69a3      	ldr	r3, [r4, #24]
 80051c0:	b353      	cbz	r3, 8005218 <HAL_PCD_EP_DB_Transmit+0x8c>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051c2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80051c6:	d00d      	beq.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x58>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051c8:	6828      	ldr	r0, [r5, #0]
 80051ca:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051e4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d02b      	beq.n	8005244 <HAL_PCD_EP_DB_Transmit+0xb8>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80051ec:	682a      	ldr	r2, [r5, #0]
 80051ee:	7821      	ldrb	r1, [r4, #0]
 80051f0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fe:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800520e:	2000      	movs	r0, #0
 8005210:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	61a3      	str	r3, [r4, #24]
 8005216:	e7d2      	b.n	80051be <HAL_PCD_EP_DB_Transmit+0x32>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005218:	4628      	mov	r0, r5
 800521a:	f006 f917 	bl	800b44c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800521e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005222:	d0e3      	beq.n	80051ec <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005224:	682a      	ldr	r2, [r5, #0]
 8005226:	7821      	ldrb	r1, [r4, #0]
 8005228:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800523a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005242:	e7d3      	b.n	80051ec <HAL_PCD_EP_DB_Transmit+0x60>
        ep->xfer_buff += TxByteNbre;
 8005244:	6963      	ldr	r3, [r4, #20]
 8005246:	4413      	add	r3, r2
 8005248:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 800524a:	69e3      	ldr	r3, [r4, #28]
 800524c:	4413      	add	r3, r2
 800524e:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8005250:	6a21      	ldr	r1, [r4, #32]
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	4299      	cmp	r1, r3
 8005256:	d31f      	bcc.n	8005298 <HAL_PCD_EP_DB_Transmit+0x10c>
          ep->xfer_len_db -= len;
 8005258:	1ac9      	subs	r1, r1, r3
 800525a:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800525c:	7862      	ldrb	r2, [r4, #1]
 800525e:	2a00      	cmp	r2, #0
 8005260:	d13f      	bne.n	80052e2 <HAL_PCD_EP_DB_Transmit+0x156>
 8005262:	6829      	ldr	r1, [r5, #0]
 8005264:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005268:	fa11 f282 	uxtah	r2, r1, r2
 800526c:	7821      	ldrb	r1, [r4, #0]
 800526e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005272:	b9eb      	cbnz	r3, 80052b0 <HAL_PCD_EP_DB_Transmit+0x124>
 8005274:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005278:	b289      	uxth	r1, r1
 800527a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800527e:	b289      	uxth	r1, r1
 8005280:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005284:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005288:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800528c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005290:	b289      	uxth	r1, r1
 8005292:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005296:	e026      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x15a>
        else if (ep->xfer_len_db == 0U)
 8005298:	b921      	cbnz	r1, 80052a4 <HAL_PCD_EP_DB_Transmit+0x118>
          ep->xfer_fill_db = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80052a0:	4613      	mov	r3, r2
 80052a2:	e7db      	b.n	800525c <HAL_PCD_EP_DB_Transmit+0xd0>
          ep->xfer_fill_db = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80052aa:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80052ac:	460b      	mov	r3, r1
 80052ae:	e7d5      	b.n	800525c <HAL_PCD_EP_DB_Transmit+0xd0>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052b0:	2b3e      	cmp	r3, #62	; 0x3e
 80052b2:	d809      	bhi.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x13c>
 80052b4:	0859      	lsrs	r1, r3, #1
 80052b6:	f013 0f01 	tst.w	r3, #1
 80052ba:	d000      	beq.n	80052be <HAL_PCD_EP_DB_Transmit+0x132>
 80052bc:	3101      	adds	r1, #1
 80052be:	0289      	lsls	r1, r1, #10
 80052c0:	b289      	uxth	r1, r1
 80052c2:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80052c6:	e00e      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x15a>
 80052c8:	0959      	lsrs	r1, r3, #5
 80052ca:	f013 0f1f 	tst.w	r3, #31
 80052ce:	d100      	bne.n	80052d2 <HAL_PCD_EP_DB_Transmit+0x146>
 80052d0:	3901      	subs	r1, #1
 80052d2:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80052d6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80052da:	b289      	uxth	r1, r1
 80052dc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80052e0:	e001      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x15a>
 80052e2:	2a01      	cmp	r2, #1
 80052e4:	d006      	beq.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x168>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8922      	ldrh	r2, [r4, #8]
 80052ea:	6961      	ldr	r1, [r4, #20]
 80052ec:	6828      	ldr	r0, [r5, #0]
 80052ee:	f002 ff8b 	bl	8008208 <USB_WritePMA>
 80052f2:	e77b      	b.n	80051ec <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052f4:	6829      	ldr	r1, [r5, #0]
 80052f6:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80052fa:	fa11 f282 	uxtah	r2, r1, r2
 80052fe:	7821      	ldrb	r1, [r4, #0]
 8005300:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005304:	b299      	uxth	r1, r3
 8005306:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800530a:	e7ec      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x15a>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800530c:	6802      	ldr	r2, [r0, #0]
 800530e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005312:	7809      	ldrb	r1, [r1, #0]
 8005314:	00c8      	lsls	r0, r1, #3
 8005316:	fa10 f383 	uxtah	r3, r0, r3
 800531a:	4413      	add	r3, r2
 800531c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005320:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8005324:	69a3      	ldr	r3, [r4, #24]
 8005326:	4293      	cmp	r3, r2
 8005328:	d344      	bcc.n	80053b4 <HAL_PCD_EP_DB_Transmit+0x228>
      ep->xfer_len -= TxByteNbre;
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 800532e:	69a3      	ldr	r3, [r4, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d042      	beq.n	80053ba <HAL_PCD_EP_DB_Transmit+0x22e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005334:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005338:	d10d      	bne.n	8005356 <HAL_PCD_EP_DB_Transmit+0x1ca>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800533a:	6828      	ldr	r0, [r5, #0]
 800533c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005356:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800535a:	2b01      	cmp	r3, #1
 800535c:	f47f af46 	bne.w	80051ec <HAL_PCD_EP_DB_Transmit+0x60>
        ep->xfer_buff += TxByteNbre;
 8005360:	6963      	ldr	r3, [r4, #20]
 8005362:	4413      	add	r3, r2
 8005364:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8005366:	69e3      	ldr	r3, [r4, #28]
 8005368:	4413      	add	r3, r2
 800536a:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800536c:	6a21      	ldr	r1, [r4, #32]
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	4299      	cmp	r1, r3
 8005372:	d339      	bcc.n	80053e8 <HAL_PCD_EP_DB_Transmit+0x25c>
          ep->xfer_len_db -= len;
 8005374:	1ac9      	subs	r1, r1, r3
 8005376:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005378:	6829      	ldr	r1, [r5, #0]
 800537a:	7862      	ldrb	r2, [r4, #1]
 800537c:	2a00      	cmp	r2, #0
 800537e:	d158      	bne.n	8005432 <HAL_PCD_EP_DB_Transmit+0x2a6>
 8005380:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005384:	fa11 f282 	uxtah	r2, r1, r2
 8005388:	7821      	ldrb	r1, [r4, #0]
 800538a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800538e:	bbbb      	cbnz	r3, 8005400 <HAL_PCD_EP_DB_Transmit+0x274>
 8005390:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8005394:	b289      	uxth	r1, r1
 8005396:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800539a:	b289      	uxth	r1, r1
 800539c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80053a0:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 80053a4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80053a8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80053ac:	b289      	uxth	r1, r1
 80053ae:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80053b2:	e040      	b.n	8005436 <HAL_PCD_EP_DB_Transmit+0x2aa>
      ep->xfer_len = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61a3      	str	r3, [r4, #24]
 80053b8:	e7b9      	b.n	800532e <HAL_PCD_EP_DB_Transmit+0x1a2>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053ba:	4628      	mov	r0, r5
 80053bc:	f006 f846 	bl	800b44c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053c0:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80053c4:	f47f af12 	bne.w	80051ec <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053c8:	682a      	ldr	r2, [r5, #0]
 80053ca:	7821      	ldrb	r1, [r4, #0]
 80053cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80053e6:	e701      	b.n	80051ec <HAL_PCD_EP_DB_Transmit+0x60>
        else if (ep->xfer_len_db == 0U)
 80053e8:	b921      	cbnz	r1, 80053f4 <HAL_PCD_EP_DB_Transmit+0x268>
          ep->xfer_fill_db = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80053f0:	4613      	mov	r3, r2
 80053f2:	e7c1      	b.n	8005378 <HAL_PCD_EP_DB_Transmit+0x1ec>
          ep->xfer_len_db = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80053f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80053fc:	460b      	mov	r3, r1
 80053fe:	e7bb      	b.n	8005378 <HAL_PCD_EP_DB_Transmit+0x1ec>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005400:	2b3e      	cmp	r3, #62	; 0x3e
 8005402:	d809      	bhi.n	8005418 <HAL_PCD_EP_DB_Transmit+0x28c>
 8005404:	0859      	lsrs	r1, r3, #1
 8005406:	f013 0f01 	tst.w	r3, #1
 800540a:	d000      	beq.n	800540e <HAL_PCD_EP_DB_Transmit+0x282>
 800540c:	3101      	adds	r1, #1
 800540e:	0289      	lsls	r1, r1, #10
 8005410:	b289      	uxth	r1, r1
 8005412:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005416:	e00e      	b.n	8005436 <HAL_PCD_EP_DB_Transmit+0x2aa>
 8005418:	0959      	lsrs	r1, r3, #5
 800541a:	f013 0f1f 	tst.w	r3, #31
 800541e:	d100      	bne.n	8005422 <HAL_PCD_EP_DB_Transmit+0x296>
 8005420:	3901      	subs	r1, #1
 8005422:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005426:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800542a:	b289      	uxth	r1, r1
 800542c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005430:	e001      	b.n	8005436 <HAL_PCD_EP_DB_Transmit+0x2aa>
 8005432:	2a01      	cmp	r2, #1
 8005434:	d006      	beq.n	8005444 <HAL_PCD_EP_DB_Transmit+0x2b8>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005436:	b29b      	uxth	r3, r3
 8005438:	8962      	ldrh	r2, [r4, #10]
 800543a:	6961      	ldr	r1, [r4, #20]
 800543c:	6828      	ldr	r0, [r5, #0]
 800543e:	f002 fee3 	bl	8008208 <USB_WritePMA>
 8005442:	e6d3      	b.n	80051ec <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005444:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005448:	fa11 f182 	uxtah	r1, r1, r2
 800544c:	7822      	ldrb	r2, [r4, #0]
 800544e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005452:	b29a      	uxth	r2, r3
 8005454:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8005458:	e7ed      	b.n	8005436 <HAL_PCD_EP_DB_Transmit+0x2aa>

0800545a <PCD_EP_ISR_Handler>:
{
 800545a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005460:	6828      	ldr	r0, [r5, #0]
 8005462:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005466:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800546a:	f000 81fd 	beq.w	8005868 <PCD_EP_ISR_Handler+0x40e>
    wIstr = hpcd->Instance->ISTR;
 800546e:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8005472:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8005474:	f014 040f 	ands.w	r4, r4, #15
 8005478:	f040 80ce 	bne.w	8005618 <PCD_EP_ISR_Handler+0x1be>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800547c:	f013 0f10 	tst.w	r3, #16
 8005480:	d05b      	beq.n	800553a <PCD_EP_ISR_Handler+0xe0>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005482:	8803      	ldrh	r3, [r0, #0]
 8005484:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005486:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800548a:	f040 808b 	bne.w	80055a4 <PCD_EP_ISR_Handler+0x14a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800548e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005492:	d0e5      	beq.n	8005460 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005494:	8803      	ldrh	r3, [r0, #0]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	051b      	lsls	r3, r3, #20
 800549c:	0d1b      	lsrs	r3, r3, #20
 800549e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054a4:	6828      	ldr	r0, [r5, #0]
 80054a6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80054aa:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80054ae:	00d2      	lsls	r2, r2, #3
 80054b0:	fa12 f383 	uxtah	r3, r2, r3
 80054b4:	4403      	add	r3, r0
 80054b6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80054ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054be:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80054c2:	b18b      	cbz	r3, 80054e8 <PCD_EP_ISR_Handler+0x8e>
 80054c4:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 80054c8:	b171      	cbz	r1, 80054e8 <PCD_EP_ISR_Handler+0x8e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80054ca:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80054ce:	f003 fa7e 	bl	80089ce <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80054d2:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80054d6:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80054da:	4413      	add	r3, r2
 80054dc:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80054e0:	2100      	movs	r1, #0
 80054e2:	4628      	mov	r0, r5
 80054e4:	f005 ffa6 	bl	800b434 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80054ee:	fa13 f382 	uxtah	r3, r3, r2
 80054f2:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d175      	bne.n	80055e6 <PCD_EP_ISR_Handler+0x18c>
 80054fa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80054fe:	b292      	uxth	r2, r2
 8005500:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005504:	b292      	uxth	r2, r2
 8005506:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800550a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800550e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005512:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005516:	b292      	uxth	r2, r2
 8005518:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800551c:	682a      	ldr	r2, [r5, #0]
 800551e:	8813      	ldrh	r3, [r2, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005536:	8013      	strh	r3, [r2, #0]
 8005538:	e792      	b.n	8005460 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800553a:	8803      	ldrh	r3, [r0, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29b      	uxth	r3, r3
 8005550:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005552:	6829      	ldr	r1, [r5, #0]
 8005554:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005558:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800555c:	00d2      	lsls	r2, r2, #3
 800555e:	fa12 f383 	uxtah	r3, r2, r3
 8005562:	440b      	add	r3, r1
 8005564:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8005568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800556c:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800556e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005570:	4413      	add	r3, r2
 8005572:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005574:	2100      	movs	r1, #0
 8005576:	4628      	mov	r0, r5
 8005578:	f005 ff68 	bl	800b44c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800557c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	f43f af6d 	beq.w	8005460 <PCD_EP_ISR_Handler+0x6>
 8005586:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	f47f af69 	bne.w	8005460 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800558e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005592:	682a      	ldr	r2, [r5, #0]
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80055a2:	e75d      	b.n	8005460 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80055a8:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80055ac:	00d2      	lsls	r2, r2, #3
 80055ae:	fa12 f383 	uxtah	r3, r2, r3
 80055b2:	4403      	add	r3, r0
 80055b4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80055b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055bc:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80055c0:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80055c4:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80055c8:	f003 fa01 	bl	80089ce <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055cc:	682a      	ldr	r2, [r5, #0]
 80055ce:	8813      	ldrh	r3, [r2, #0]
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	051b      	lsls	r3, r3, #20
 80055d6:	0d1b      	lsrs	r3, r3, #20
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80055de:	4628      	mov	r0, r5
 80055e0:	f005 ff20 	bl	800b424 <HAL_PCD_SetupStageCallback>
 80055e4:	e73c      	b.n	8005460 <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055e6:	2a3e      	cmp	r2, #62	; 0x3e
 80055e8:	d809      	bhi.n	80055fe <PCD_EP_ISR_Handler+0x1a4>
 80055ea:	0851      	lsrs	r1, r2, #1
 80055ec:	f012 0f01 	tst.w	r2, #1
 80055f0:	d000      	beq.n	80055f4 <PCD_EP_ISR_Handler+0x19a>
 80055f2:	3101      	adds	r1, #1
 80055f4:	0289      	lsls	r1, r1, #10
 80055f6:	b289      	uxth	r1, r1
 80055f8:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80055fc:	e78e      	b.n	800551c <PCD_EP_ISR_Handler+0xc2>
 80055fe:	0951      	lsrs	r1, r2, #5
 8005600:	f012 0f1f 	tst.w	r2, #31
 8005604:	d100      	bne.n	8005608 <PCD_EP_ISR_Handler+0x1ae>
 8005606:	3901      	subs	r1, #1
 8005608:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800560c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005610:	b292      	uxth	r2, r2
 8005612:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005616:	e781      	b.n	800551c <PCD_EP_ISR_Handler+0xc2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005618:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800561c:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800561e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005622:	d14a      	bne.n	80056ba <PCD_EP_ISR_Handler+0x260>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005624:	f016 0f80 	tst.w	r6, #128	; 0x80
 8005628:	f43f af1a 	beq.w	8005460 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 800562c:	1c62      	adds	r2, r4, #1
 800562e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005632:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005636:	6828      	ldr	r0, [r5, #0]
 8005638:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564e:	b29b      	uxth	r3, r3
 8005650:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8005654:	78cb      	ldrb	r3, [r1, #3]
 8005656:	2b02      	cmp	r3, #2
 8005658:	f000 80e9 	beq.w	800582e <PCD_EP_ISR_Handler+0x3d4>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800565c:	6828      	ldr	r0, [r5, #0]
 800565e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005662:	1c62      	adds	r2, r4, #1
 8005664:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005668:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800566c:	00d2      	lsls	r2, r2, #3
 800566e:	fa12 f383 	uxtah	r3, r2, r3
 8005672:	4403      	add	r3, r0
 8005674:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8005678:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 800567c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005680:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005684:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005686:	429a      	cmp	r2, r3
 8005688:	f240 80da 	bls.w	8005840 <PCD_EP_ISR_Handler+0x3e6>
            ep->xfer_len -= TxByteNbre;
 800568c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8005690:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8005694:	1ad2      	subs	r2, r2, r3
 8005696:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8005698:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800569c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80056a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	f040 80d3 	bne.w	800584e <PCD_EP_ISR_Handler+0x3f4>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056a8:	3401      	adds	r4, #1
 80056aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80056ae:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80056b2:	4628      	mov	r0, r5
 80056b4:	f005 feca 	bl	800b44c <HAL_PCD_DataInStageCallback>
 80056b8:	e6d2      	b.n	8005460 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056ba:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	051b      	lsls	r3, r3, #20
 80056c4:	0d1b      	lsrs	r3, r3, #20
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80056ce:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80056d2:	00c9      	lsls	r1, r1, #3
 80056d4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80056d8:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80056dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80056e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80056e4:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d140      	bne.n	800576e <PCD_EP_ISR_Handler+0x314>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056ec:	6828      	ldr	r0, [r5, #0]
 80056ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80056f2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80056f6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80056fa:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80056fe:	00d2      	lsls	r2, r2, #3
 8005700:	fa12 f383 	uxtah	r3, r2, r3
 8005704:	4403      	add	r3, r0
 8005706:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 800570a:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 800570e:	bb17      	cbnz	r7, 8005756 <PCD_EP_ISR_Handler+0x2fc>
        ep->xfer_count += count;
 8005710:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005714:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005718:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800571c:	443a      	add	r2, r7
 800571e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005722:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005726:	443a      	add	r2, r7
 8005728:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800572c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8005730:	b13b      	cbz	r3, 8005742 <PCD_EP_ISR_Handler+0x2e8>
 8005732:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005736:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800573a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800573e:	429f      	cmp	r7, r3
 8005740:	d270      	bcs.n	8005824 <PCD_EP_ISR_Handler+0x3ca>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005742:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005746:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800574a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800574e:	4628      	mov	r0, r5
 8005750:	f005 fe70 	bl	800b434 <HAL_PCD_DataOutStageCallback>
 8005754:	e766      	b.n	8005624 <PCD_EP_ISR_Handler+0x1ca>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005756:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800575a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800575e:	463b      	mov	r3, r7
 8005760:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005764:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005768:	f003 f931 	bl	80089ce <USB_ReadPMA>
 800576c:	e7d0      	b.n	8005710 <PCD_EP_ISR_Handler+0x2b6>
          if (ep->type == EP_TYPE_BULK)
 800576e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005772:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005776:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 800577a:	2b02      	cmp	r3, #2
 800577c:	d033      	beq.n	80057e6 <PCD_EP_ISR_Handler+0x38c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800577e:	6829      	ldr	r1, [r5, #0]
 8005780:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005784:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005788:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 800578c:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057a2:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80057a6:	6828      	ldr	r0, [r5, #0]
 80057a8:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 80057ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80057b0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80057b4:	d01e      	beq.n	80057f4 <PCD_EP_ISR_Handler+0x39a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057b6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	fa13 f382 	uxtah	r3, r3, r2
 80057c0:	4403      	add	r3, r0
 80057c2:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 80057c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80057ca:	2f00      	cmp	r7, #0
 80057cc:	d0a0      	beq.n	8005710 <PCD_EP_ISR_Handler+0x2b6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057ce:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80057d2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80057d6:	463b      	mov	r3, r7
 80057d8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80057dc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80057e0:	f003 f8f5 	bl	80089ce <USB_ReadPMA>
 80057e4:	e794      	b.n	8005710 <PCD_EP_ISR_Handler+0x2b6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80057e6:	4632      	mov	r2, r6
 80057e8:	4641      	mov	r1, r8
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7ff fba4 	bl	8004f38 <HAL_PCD_EP_DB_Receive>
 80057f0:	4607      	mov	r7, r0
 80057f2:	e78d      	b.n	8005710 <PCD_EP_ISR_Handler+0x2b6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057f4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	fa13 f382 	uxtah	r3, r3, r2
 80057fe:	4403      	add	r3, r0
 8005800:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005804:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005808:	2f00      	cmp	r7, #0
 800580a:	d081      	beq.n	8005710 <PCD_EP_ISR_Handler+0x2b6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800580c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005810:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005814:	463b      	mov	r3, r7
 8005816:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800581a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800581e:	f003 f8d6 	bl	80089ce <USB_ReadPMA>
 8005822:	e775      	b.n	8005710 <PCD_EP_ISR_Handler+0x2b6>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005824:	4641      	mov	r1, r8
 8005826:	6828      	ldr	r0, [r5, #0]
 8005828:	f002 fd01 	bl	800822e <USB_EPStartXfer>
 800582c:	e6fa      	b.n	8005624 <PCD_EP_ISR_Handler+0x1ca>
        if ((ep->type != EP_TYPE_BULK) ||
 800582e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8005832:	f43f af13 	beq.w	800565c <PCD_EP_ISR_Handler+0x202>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005836:	4632      	mov	r2, r6
 8005838:	4628      	mov	r0, r5
 800583a:	f7ff fca7 	bl	800518c <HAL_PCD_EP_DB_Transmit>
 800583e:	e60f      	b.n	8005460 <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 8005840:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005844:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005848:	2600      	movs	r6, #0
 800584a:	6416      	str	r6, [r2, #64]	; 0x40
 800584c:	e724      	b.n	8005698 <PCD_EP_ISR_Handler+0x23e>
            ep->xfer_buff += TxByteNbre;
 800584e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005852:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005856:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8005858:	441e      	add	r6, r3
 800585a:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800585c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800585e:	4423      	add	r3, r4
 8005860:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005862:	f002 fce4 	bl	800822e <USB_EPStartXfer>
 8005866:	e5fb      	b.n	8005460 <PCD_EP_ISR_Handler+0x6>
}
 8005868:	2000      	movs	r0, #0
 800586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800586e <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800586e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8005872:	2b01      	cmp	r3, #1
 8005874:	d00d      	beq.n	8005892 <HAL_PCD_SetAddress+0x24>
{
 8005876:	b510      	push	{r4, lr}
 8005878:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800587a:	2301      	movs	r3, #1
 800587c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005880:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005884:	6800      	ldr	r0, [r0, #0]
 8005886:	f002 fca0 	bl	80081ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800588a:	2000      	movs	r0, #0
 800588c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005890:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005892:	2002      	movs	r0, #2
}
 8005894:	4770      	bx	lr

08005896 <HAL_PCD_IRQHandler>:
{
 8005896:	b510      	push	{r4, lr}
 8005898:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	f002 fcae 	bl	80081fc <USB_ReadInterrupts>
 80058a0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80058a4:	f040 809b 	bne.w	80059de <HAL_PCD_IRQHandler+0x148>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	f002 fca7 	bl	80081fc <USB_ReadInterrupts>
 80058ae:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80058b2:	f040 8098 	bne.w	80059e6 <HAL_PCD_IRQHandler+0x150>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	f002 fca0 	bl	80081fc <USB_ReadInterrupts>
 80058bc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80058c0:	d008      	beq.n	80058d4 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	f002 fc91 	bl	80081fc <USB_ReadInterrupts>
 80058da:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80058de:	d008      	beq.n	80058f2 <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	f002 fc82 	bl	80081fc <USB_ReadInterrupts>
 80058f8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80058fc:	d021      	beq.n	8005942 <HAL_PCD_IRQHandler+0xac>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005904:	b29b      	uxth	r3, r3
 8005906:	f023 0304 	bic.w	r3, r3, #4
 800590a:	b29b      	uxth	r3, r3
 800590c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005910:	6822      	ldr	r2, [r4, #0]
 8005912:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005916:	b29b      	uxth	r3, r3
 8005918:	f023 0308 	bic.w	r3, r3, #8
 800591c:	b29b      	uxth	r3, r3
 800591e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8005922:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d06e      	beq.n	8005a08 <HAL_PCD_IRQHandler+0x172>
    HAL_PCD_ResumeCallback(hpcd);
 800592a:	4620      	mov	r0, r4
 800592c:	f005 fdc2 	bl	800b4b4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593c:	b29b      	uxth	r3, r3
 800593e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	f002 fc5a 	bl	80081fc <USB_ReadInterrupts>
 8005948:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800594c:	d163      	bne.n	8005a16 <HAL_PCD_IRQHandler+0x180>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	f002 fc54 	bl	80081fc <USB_ReadInterrupts>
 8005954:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005958:	d02b      	beq.n	80059b2 <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005960:	b29b      	uxth	r3, r3
 8005962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005966:	b29b      	uxth	r3, r3
 8005968:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800596c:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d16d      	bne.n	8005a50 <HAL_PCD_IRQHandler+0x1ba>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800597a:	b29b      	uxth	r3, r3
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005984:	6822      	ldr	r2, [r4, #0]
 8005986:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800598a:	b29b      	uxth	r3, r3
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8005994:	2101      	movs	r1, #1
 8005996:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80059a0:	f3c3 038d 	ubfx	r3, r3, #2, #14
 80059a4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80059a8:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80059ac:	4620      	mov	r0, r4
 80059ae:	f005 fe73 	bl	800b698 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	f002 fc22 	bl	80081fc <USB_ReadInterrupts>
 80059b8:	f410 7f00 	tst.w	r0, #512	; 0x200
 80059bc:	d14c      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x1c2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	f002 fc1c 	bl	80081fc <USB_ReadInterrupts>
 80059c4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80059c8:	d008      	beq.n	80059dc <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80059dc:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 80059de:	4620      	mov	r0, r4
 80059e0:	f7ff fd3b 	bl	800545a <PCD_EP_ISR_Handler>
 80059e4:	e760      	b.n	80058a8 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80059f8:	4620      	mov	r0, r4
 80059fa:	f005 fd38 	bl	800b46e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80059fe:	2100      	movs	r1, #0
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7ff ff34 	bl	800586e <HAL_PCD_SetAddress>
 8005a06:	e756      	b.n	80058b6 <HAL_PCD_IRQHandler+0x20>
      hpcd->LPM_State = LPM_L0;
 8005a08:	2100      	movs	r1, #0
 8005a0a:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f005 fe42 	bl	800b698 <HAL_PCDEx_LPM_Callback>
 8005a14:	e789      	b.n	800592a <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f043 0308 	orr.w	r3, r3, #8
 8005a22:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f043 0304 	orr.w	r3, r3, #4
 8005a44:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f005 fd23 	bl	800b494 <HAL_PCD_SuspendCallback>
 8005a4e:	e77e      	b.n	800594e <HAL_PCD_IRQHandler+0xb8>
      HAL_PCD_SuspendCallback(hpcd);
 8005a50:	4620      	mov	r0, r4
 8005a52:	f005 fd1f 	bl	800b494 <HAL_PCD_SuspendCallback>
 8005a56:	e7ac      	b.n	80059b2 <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f005 fcf9 	bl	800b462 <HAL_PCD_SOFCallback>
 8005a70:	e7a5      	b.n	80059be <HAL_PCD_IRQHandler+0x128>

08005a72 <HAL_PCD_EP_Open>:
{
 8005a72:	b570      	push	{r4, r5, r6, lr}
 8005a74:	4605      	mov	r5, r0
 8005a76:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005a78:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a7c:	d126      	bne.n	8005acc <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a7e:	f001 0007 	and.w	r0, r1, #7
 8005a82:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005a86:	00c9      	lsls	r1, r1, #3
 8005a88:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 8005a8c:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 8005a8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a92:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8005a96:	2600      	movs	r6, #0
 8005a98:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a9c:	f004 0407 	and.w	r4, r4, #7
 8005aa0:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8005aa2:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8005aa4:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8005aa6:	784a      	ldrb	r2, [r1, #1]
 8005aa8:	b102      	cbz	r2, 8005aac <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8005aaa:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d017      	beq.n	8005ae0 <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 8005ab0:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d016      	beq.n	8005ae6 <HAL_PCD_EP_Open+0x74>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005abe:	6828      	ldr	r0, [r5, #0]
 8005ac0:	f002 f882 	bl	8007bc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005acc:	f001 0007 	and.w	r0, r1, #7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005ad6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8005ada:	2601      	movs	r6, #1
 8005adc:	704e      	strb	r6, [r1, #1]
 8005ade:	e7dd      	b.n	8005a9c <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	710b      	strb	r3, [r1, #4]
 8005ae4:	e7e4      	b.n	8005ab0 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8005ae6:	2002      	movs	r0, #2
 8005ae8:	e7ef      	b.n	8005aca <HAL_PCD_EP_Open+0x58>

08005aea <HAL_PCD_EP_Close>:
{
 8005aea:	b510      	push	{r4, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005af0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005af4:	d11f      	bne.n	8005b36 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005af6:	f001 0207 	and.w	r2, r1, #7
 8005afa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005afe:	00c9      	lsls	r1, r1, #3
 8005b00:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005b04:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005b06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005b0a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005b1a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d013      	beq.n	8005b4a <HAL_PCD_EP_Close+0x60>
 8005b22:	2301      	movs	r3, #1
 8005b24:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	f002 f9ed 	bl	8007f08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b2e:	2000      	movs	r0, #0
 8005b30:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005b34:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b36:	f001 0207 	and.w	r2, r1, #7
 8005b3a:	3201      	adds	r2, #1
 8005b3c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005b40:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005b44:	2001      	movs	r0, #1
 8005b46:	7048      	strb	r0, [r1, #1]
 8005b48:	e7e4      	b.n	8005b14 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8005b4a:	2002      	movs	r0, #2
 8005b4c:	e7f2      	b.n	8005b34 <HAL_PCD_EP_Close+0x4a>

08005b4e <HAL_PCD_EP_Receive>:
{
 8005b4e:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b50:	f001 0407 	and.w	r4, r1, #7
 8005b54:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005b58:	00c9      	lsls	r1, r1, #3
 8005b5a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005b5e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8005b60:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8005b64:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8005b68:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8005b6c:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8005b76:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7a:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b7e:	b924      	cbnz	r4, 8005b8a <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005b80:	6800      	ldr	r0, [r0, #0]
 8005b82:	f002 fb54 	bl	800822e <USB_EPStartXfer>
}
 8005b86:	2000      	movs	r0, #0
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	f002 fb4f 	bl	800822e <USB_EPStartXfer>
 8005b90:	e7f9      	b.n	8005b86 <HAL_PCD_EP_Receive+0x38>

08005b92 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b92:	f001 0107 	and.w	r1, r1, #7
 8005b96:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005b9a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8005b9e:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_PCD_EP_Transmit>:
{
 8005ba4:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ba6:	f001 0507 	and.w	r5, r1, #7
 8005baa:	1c6c      	adds	r4, r5, #1
 8005bac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005bb0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8005bb4:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8005bb8:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8005bbc:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 8005bbe:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 8005bc6:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 8005bcc:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005bd2:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bd6:	b925      	cbnz	r5, 8005be2 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005bd8:	6800      	ldr	r0, [r0, #0]
 8005bda:	f002 fb28 	bl	800822e <USB_EPStartXfer>
}
 8005bde:	2000      	movs	r0, #0
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005be2:	6800      	ldr	r0, [r0, #0]
 8005be4:	f002 fb23 	bl	800822e <USB_EPStartXfer>
 8005be8:	e7f9      	b.n	8005bde <HAL_PCD_EP_Transmit+0x3a>

08005bea <HAL_PCD_EP_SetStall>:
{
 8005bea:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bec:	f001 0507 	and.w	r5, r1, #7
 8005bf0:	6842      	ldr	r2, [r0, #4]
 8005bf2:	4295      	cmp	r5, r2
 8005bf4:	d831      	bhi.n	8005c5a <HAL_PCD_EP_SetStall+0x70>
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8005bfa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005bfe:	d11e      	bne.n	8005c3e <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8005c00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005c04:	00c9      	lsls	r1, r1, #3
 8005c06:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005c0a:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005c0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c10:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c1e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005c20:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d01a      	beq.n	8005c5e <HAL_PCD_EP_SetStall+0x74>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	f002 fa55 	bl	80080de <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c34:	b15d      	cbz	r5, 8005c4e <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8005c36:	2000      	movs	r0, #0
 8005c38:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c3e:	1c6b      	adds	r3, r5, #1
 8005c40:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005c44:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	704a      	strb	r2, [r1, #1]
 8005c4c:	e7e5      	b.n	8005c1a <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005c4e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8005c52:	6820      	ldr	r0, [r4, #0]
 8005c54:	f002 fad6 	bl	8008204 <USB_EP0_OutStart>
 8005c58:	e7ed      	b.n	8005c36 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	e7ee      	b.n	8005c3c <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8005c5e:	2002      	movs	r0, #2
 8005c60:	e7ec      	b.n	8005c3c <HAL_PCD_EP_SetStall+0x52>

08005c62 <HAL_PCD_EP_ClrStall>:
{
 8005c62:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c64:	f001 010f 	and.w	r1, r1, #15
 8005c68:	6842      	ldr	r2, [r0, #4]
 8005c6a:	4291      	cmp	r1, r2
 8005c6c:	d830      	bhi.n	8005cd0 <HAL_PCD_EP_ClrStall+0x6e>
{
 8005c6e:	b510      	push	{r4, lr}
 8005c70:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8005c72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c76:	d121      	bne.n	8005cbc <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c78:	f003 0207 	and.w	r2, r3, #7
 8005c7c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005c80:	00c9      	lsls	r1, r1, #3
 8005c82:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005c86:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005c88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c8c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005c90:	2000      	movs	r0, #0
 8005c92:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8005c96:	2200      	movs	r2, #0
 8005c98:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005ca0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d015      	beq.n	8005cd4 <HAL_PCD_EP_ClrStall+0x72>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	f002 fa3a 	bl	8008128 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005cba:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cbc:	f003 0207 	and.w	r2, r3, #7
 8005cc0:	3201      	adds	r2, #1
 8005cc2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005cc6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005cca:	2001      	movs	r0, #1
 8005ccc:	7048      	strb	r0, [r1, #1]
 8005cce:	e7e2      	b.n	8005c96 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8005cd0:	2001      	movs	r0, #1
}
 8005cd2:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005cd4:	2002      	movs	r0, #2
 8005cd6:	e7f0      	b.n	8005cba <HAL_PCD_EP_ClrStall+0x58>

08005cd8 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005cd8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cde:	f001 0107 	and.w	r1, r1, #7
 8005ce2:	3101      	adds	r1, #1
 8005ce4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005ce8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cec:	b952      	cbnz	r2, 8005d04 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cee:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cf0:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8005cf6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005cfa:	00c9      	lsls	r1, r1, #3
 8005cfc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005d00:	4401      	add	r1, r0
 8005d02:	e7f3      	b.n	8005cec <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8005d04:	2201      	movs	r2, #1
 8005d06:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d08:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	814b      	strh	r3, [r1, #10]
 8005d0e:	e7f0      	b.n	8005cf2 <HAL_PCDEx_PMAConfig+0x1a>

08005d10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d10:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 8005d12:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8005d14:	2101      	movs	r1, #1
 8005d16:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d20:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	430b      	orrs	r3, r1
 8005d28:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d2c:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f043 0302 	orr.w	r3, r3, #2
 8005d36:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8005d3a:	4770      	bx	lr

08005d3c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d3c:	4b02      	ldr	r3, [pc, #8]	; (8005d48 <HAL_PWREx_GetVoltageRange+0xc>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8005d40:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40007000 	.word	0x40007000

08005d4c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005d50:	d00f      	beq.n	8005d72 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d52:	4b1f      	ldr	r3, [pc, #124]	; (8005dd0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	d034      	beq.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d6c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d6e:	2000      	movs	r0, #0
 8005d70:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d72:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7e:	d020      	beq.n	8005dc2 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d80:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005d82:	6813      	ldr	r3, [r2, #0]
 8005d84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d8c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	2332      	movs	r3, #50	; 0x32
 8005d94:	fb03 f302 	mul.w	r3, r3, r2
 8005d98:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	0c9b      	lsrs	r3, r3, #18
 8005da0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005da2:	e000      	b.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8005da4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005da8:	6952      	ldr	r2, [r2, #20]
 8005daa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005dae:	d001      	beq.n	8005db4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f7      	bne.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005dbc:	d103      	bne.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	4770      	bx	lr
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	4770      	bx	lr
        return HAL_TIMEOUT;
 8005dc6:	2003      	movs	r0, #3
 8005dc8:	4770      	bx	lr
  return HAL_OK;
 8005dca:	2000      	movs	r0, #0
}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40007000 	.word	0x40007000
 8005dd4:	20000000 	.word	0x20000000
 8005dd8:	431bde83 	.word	0x431bde83

08005ddc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005ddc:	4a02      	ldr	r2, [pc, #8]	; (8005de8 <HAL_PWREx_EnableVddUSB+0xc>)
 8005dde:	6853      	ldr	r3, [r2, #4]
 8005de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005de4:	6053      	str	r3, [r2, #4]
}
 8005de6:	4770      	bx	lr
 8005de8:	40007000 	.word	0x40007000

08005dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005dec:	b530      	push	{r4, r5, lr}
 8005dee:	b083      	sub	sp, #12
 8005df0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005df2:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005dfa:	d00b      	beq.n	8005e14 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005dfc:	f7ff ff9e 	bl	8005d3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e00:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005e04:	d017      	beq.n	8005e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e06:	2c80      	cmp	r4, #128	; 0x80
 8005e08:	d81f      	bhi.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e0a:	d02d      	beq.n	8005e68 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e0c:	2c70      	cmp	r4, #112	; 0x70
 8005e0e:	d02d      	beq.n	8005e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e10:	2100      	movs	r1, #0
 8005e12:	e01b      	b.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e14:	4d17      	ldr	r5, [pc, #92]	; (8005e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8005e16:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	65ab      	str	r3, [r5, #88]	; 0x58
 8005e1e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005e28:	f7ff ff88 	bl	8005d3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e32:	65ab      	str	r3, [r5, #88]	; 0x58
 8005e34:	e7e4      	b.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8005e36:	2c80      	cmp	r4, #128	; 0x80
 8005e38:	d903      	bls.n	8005e42 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8005e3a:	2ca0      	cmp	r4, #160	; 0xa0
 8005e3c:	d903      	bls.n	8005e46 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e3e:	2102      	movs	r1, #2
 8005e40:	e004      	b.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e42:	2100      	movs	r1, #0
 8005e44:	e002      	b.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e46:	2101      	movs	r1, #1
 8005e48:	e000      	b.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e4a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e4c:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	f023 0307 	bic.w	r3, r3, #7
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e58:	6813      	ldr	r3, [r2, #0]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	428b      	cmp	r3, r1
 8005e60:	d106      	bne.n	8005e70 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005e62:	2000      	movs	r0, #0
}
 8005e64:	b003      	add	sp, #12
 8005e66:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e68:	2102      	movs	r1, #2
 8005e6a:	e7ef      	b.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	e7ed      	b.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8005e70:	2001      	movs	r0, #1
 8005e72:	e7f7      	b.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40022000 	.word	0x40022000

08005e7c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e7e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e80:	68d2      	ldr	r2, [r2, #12]
 8005e82:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e86:	f013 030c 	ands.w	r3, r3, #12
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x26>
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	d006      	beq.n	8005e9e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d01f      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d020      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e98:	2000      	movs	r0, #0
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	e010      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e9e:	2a01      	cmp	r2, #1
 8005ea0:	d1f6      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ea2:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	f012 0f08 	tst.w	r2, #8
 8005eaa:	d10c      	bne.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005eae:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8005eb2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8005eb6:	491b      	ldr	r1, [pc, #108]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005eb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ebc:	b143      	cbz	r3, 8005ed0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ebe:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ec0:	2b0c      	cmp	r3, #12
 8005ec2:	d00d      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8005ec4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ec6:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005ece:	e7f2      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	e7f5      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8005ed4:	4814      	ldr	r0, [pc, #80]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	e7f2      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8005eda:	4814      	ldr	r0, [pc, #80]	; (8005f2c <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005edc:	2200      	movs	r2, #0
 8005ede:	e7ef      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d016      	beq.n	8005f1a <HAL_RCC_GetSysClockFreq+0x9e>
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d100      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8005ef0:	4a0e      	ldr	r2, [pc, #56]	; (8005f2c <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ef4:	68d8      	ldr	r0, [r3, #12]
 8005ef6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8005efa:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005efc:	68d9      	ldr	r1, [r3, #12]
 8005efe:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005f02:	fb02 f201 	mul.w	r2, r2, r1
 8005f06:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f0a:	68d8      	ldr	r0, [r3, #12]
 8005f0c:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005f10:	3001      	adds	r0, #1
 8005f12:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8005f14:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005f18:	e7d4      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8005f1a:	4a03      	ldr	r2, [pc, #12]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xac>)
 8005f1c:	e7e9      	b.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x76>
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000
 8005f24:	0800e608 	.word	0x0800e608
 8005f28:	00f42400 	.word	0x00f42400
 8005f2c:	007a1200 	.word	0x007a1200

08005f30 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f000 8354 	beq.w	80065de <HAL_RCC_OscConfig+0x6ae>
{
 8005f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3c:	4b96      	ldr	r3, [pc, #600]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005f3e:	689d      	ldr	r5, [r3, #8]
 8005f40:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f44:	68de      	ldr	r6, [r3, #12]
 8005f46:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f4a:	6803      	ldr	r3, [r0, #0]
 8005f4c:	f013 0f10 	tst.w	r3, #16
 8005f50:	d05a      	beq.n	8006008 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f52:	b1e5      	cbz	r5, 8005f8e <HAL_RCC_OscConfig+0x5e>
 8005f54:	2d0c      	cmp	r5, #12
 8005f56:	d018      	beq.n	8005f8a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f58:	69e3      	ldr	r3, [r4, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80bb 	beq.w	80060d6 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8005f60:	4a8d      	ldr	r2, [pc, #564]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f6a:	f7fd fc31 	bl	80037d0 <HAL_GetTick>
 8005f6e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f70:	4b89      	ldr	r3, [pc, #548]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f013 0f02 	tst.w	r3, #2
 8005f78:	f040 809a 	bne.w	80060b0 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f7c:	f7fd fc28 	bl	80037d0 <HAL_GetTick>
 8005f80:	1bc0      	subs	r0, r0, r7
 8005f82:	2802      	cmp	r0, #2
 8005f84:	d9f4      	bls.n	8005f70 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8005f86:	2003      	movs	r0, #3
 8005f88:	e336      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f8a:	2e01      	cmp	r6, #1
 8005f8c:	d1e4      	bne.n	8005f58 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f8e:	4b82      	ldr	r3, [pc, #520]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f013 0f02 	tst.w	r3, #2
 8005f96:	d003      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x70>
 8005f98:	69e3      	ldr	r3, [r4, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 8321 	beq.w	80065e2 <HAL_RCC_OscConfig+0x6b2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005fa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fa2:	4b7d      	ldr	r3, [pc, #500]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f013 0f08 	tst.w	r3, #8
 8005faa:	d05b      	beq.n	8006064 <HAL_RCC_OscConfig+0x134>
 8005fac:	4b7a      	ldr	r3, [pc, #488]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	d85c      	bhi.n	8006072 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fb8:	4b77      	ldr	r3, [pc, #476]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	f042 0208 	orr.w	r2, r2, #8
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005fc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005fd4:	6a21      	ldr	r1, [r4, #32]
 8005fd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005fda:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	d060      	beq.n	80060a2 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fe0:	f7ff ff4c 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8005fe4:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005fec:	4a6b      	ldr	r2, [pc, #428]	; (800619c <HAL_RCC_OscConfig+0x26c>)
 8005fee:	5cd3      	ldrb	r3, [r2, r3]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	40d8      	lsrs	r0, r3
 8005ff6:	4b6a      	ldr	r3, [pc, #424]	; (80061a0 <HAL_RCC_OscConfig+0x270>)
 8005ff8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005ffa:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCC_OscConfig+0x274>)
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f7fd f929 	bl	8003254 <HAL_InitTick>
        if(status != HAL_OK)
 8006002:	2800      	cmp	r0, #0
 8006004:	f040 82f8 	bne.w	80065f8 <HAL_RCC_OscConfig+0x6c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f013 0f01 	tst.w	r3, #1
 800600e:	f000 8081 	beq.w	8006114 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006012:	2d08      	cmp	r5, #8
 8006014:	d075      	beq.n	8006102 <HAL_RCC_OscConfig+0x1d2>
 8006016:	2d0c      	cmp	r5, #12
 8006018:	d071      	beq.n	80060fe <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800601a:	6863      	ldr	r3, [r4, #4]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	f000 8098 	beq.w	8006154 <HAL_RCC_OscConfig+0x224>
 8006024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006028:	f000 809a 	beq.w	8006160 <HAL_RCC_OscConfig+0x230>
 800602c:	4b5a      	ldr	r3, [pc, #360]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800603c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 809a 	beq.w	800617a <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8006046:	f7fd fbc3 	bl	80037d0 <HAL_GetTick>
 800604a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800604c:	4b52      	ldr	r3, [pc, #328]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006054:	d15e      	bne.n	8006114 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006056:	f7fd fbbb 	bl	80037d0 <HAL_GetTick>
 800605a:	1bc0      	subs	r0, r0, r7
 800605c:	2864      	cmp	r0, #100	; 0x64
 800605e:	d9f5      	bls.n	800604c <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8006060:	2003      	movs	r0, #3
 8006062:	e2c9      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006064:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8006066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006070:	e7a0      	b.n	8005fb4 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006072:	f7ff febb 	bl	8005dec <RCC_SetFlashLatencyFromMSIRange>
 8006076:	2800      	cmp	r0, #0
 8006078:	f040 82b5 	bne.w	80065e6 <HAL_RCC_OscConfig+0x6b6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	f042 0208 	orr.w	r2, r2, #8
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800608c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800608e:	430a      	orrs	r2, r1
 8006090:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006098:	6a21      	ldr	r1, [r4, #32]
 800609a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	e79e      	b.n	8005fe0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80060a4:	f7ff fea2 	bl	8005dec <RCC_SetFlashLatencyFromMSIRange>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d099      	beq.n	8005fe0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80060ac:	2001      	movs	r0, #1
 80060ae:	e2a3      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060b0:	4b39      	ldr	r3, [pc, #228]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	f042 0208 	orr.w	r2, r2, #8
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80060c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060c2:	430a      	orrs	r2, r1
 80060c4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80060cc:	6a21      	ldr	r1, [r4, #32]
 80060ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	e798      	b.n	8006008 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80060d6:	4a30      	ldr	r2, [pc, #192]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 80060d8:	6813      	ldr	r3, [r2, #0]
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80060e0:	f7fd fb76 	bl	80037d0 <HAL_GetTick>
 80060e4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060e6:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f013 0f02 	tst.w	r3, #2
 80060ee:	d08b      	beq.n	8006008 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060f0:	f7fd fb6e 	bl	80037d0 <HAL_GetTick>
 80060f4:	1bc0      	subs	r0, r0, r7
 80060f6:	2802      	cmp	r0, #2
 80060f8:	d9f5      	bls.n	80060e6 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80060fa:	2003      	movs	r0, #3
 80060fc:	e27c      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060fe:	2e03      	cmp	r6, #3
 8006100:	d18b      	bne.n	800601a <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006102:	4b25      	ldr	r3, [pc, #148]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800610a:	d003      	beq.n	8006114 <HAL_RCC_OscConfig+0x1e4>
 800610c:	6863      	ldr	r3, [r4, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 826b 	beq.w	80065ea <HAL_RCC_OscConfig+0x6ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	f013 0f02 	tst.w	r3, #2
 800611a:	d058      	beq.n	80061ce <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800611c:	2d04      	cmp	r5, #4
 800611e:	d045      	beq.n	80061ac <HAL_RCC_OscConfig+0x27c>
 8006120:	2d0c      	cmp	r5, #12
 8006122:	d041      	beq.n	80061a8 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006124:	68e3      	ldr	r3, [r4, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8091 	beq.w	800624e <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_HSI_ENABLE();
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006134:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006136:	f7fd fb4b 	bl	80037d0 <HAL_GetTick>
 800613a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800613c:	4b16      	ldr	r3, [pc, #88]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006144:	d17a      	bne.n	800623c <HAL_RCC_OscConfig+0x30c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006146:	f7fd fb43 	bl	80037d0 <HAL_GetTick>
 800614a:	1b80      	subs	r0, r0, r6
 800614c:	2802      	cmp	r0, #2
 800614e:	d9f5      	bls.n	800613c <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8006150:	2003      	movs	r0, #3
 8006152:	e251      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006154:	4a10      	ldr	r2, [pc, #64]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8006156:	6813      	ldr	r3, [r2, #0]
 8006158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	e76e      	b.n	800603e <HAL_RCC_OscConfig+0x10e>
 8006160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006164:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e761      	b.n	800603e <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800617a:	f7fd fb29 	bl	80037d0 <HAL_GetTick>
 800617e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <HAL_RCC_OscConfig+0x268>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006188:	d0c4      	beq.n	8006114 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800618a:	f7fd fb21 	bl	80037d0 <HAL_GetTick>
 800618e:	1bc0      	subs	r0, r0, r7
 8006190:	2864      	cmp	r0, #100	; 0x64
 8006192:	d9f5      	bls.n	8006180 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8006194:	2003      	movs	r0, #3
 8006196:	e22f      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
 8006198:	40021000 	.word	0x40021000
 800619c:	0800e5f0 	.word	0x0800e5f0
 80061a0:	20000000 	.word	0x20000000
 80061a4:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061a8:	2e02      	cmp	r6, #2
 80061aa:	d1bb      	bne.n	8006124 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ac:	4baf      	ldr	r3, [pc, #700]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80061b4:	d003      	beq.n	80061be <HAL_RCC_OscConfig+0x28e>
 80061b6:	68e3      	ldr	r3, [r4, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8218 	beq.w	80065ee <HAL_RCC_OscConfig+0x6be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4aab      	ldr	r2, [pc, #684]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80061c0:	6853      	ldr	r3, [r2, #4]
 80061c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061c6:	6921      	ldr	r1, [r4, #16]
 80061c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80061cc:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f013 0f08 	tst.w	r3, #8
 80061d4:	d07d      	beq.n	80062d2 <HAL_RCC_OscConfig+0x3a2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061d6:	6963      	ldr	r3, [r4, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d063      	beq.n	80062a4 <HAL_RCC_OscConfig+0x374>
      uint32_t csr_temp = RCC->CSR;
 80061dc:	4ba3      	ldr	r3, [pc, #652]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80061e2:	69a1      	ldr	r1, [r4, #24]
 80061e4:	f003 0210 	and.w	r2, r3, #16
 80061e8:	4291      	cmp	r1, r2
 80061ea:	d010      	beq.n	800620e <HAL_RCC_OscConfig+0x2de>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061ec:	f003 0203 	and.w	r2, r3, #3
 80061f0:	2a02      	cmp	r2, #2
 80061f2:	f000 81fe 	beq.w	80065f2 <HAL_RCC_OscConfig+0x6c2>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80061f6:	f013 0f01 	tst.w	r3, #1
 80061fa:	d13c      	bne.n	8006276 <HAL_RCC_OscConfig+0x346>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80061fc:	4a9b      	ldr	r2, [pc, #620]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80061fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006202:	f023 0310 	bic.w	r3, r3, #16
 8006206:	69a1      	ldr	r1, [r4, #24]
 8006208:	430b      	orrs	r3, r1
 800620a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 800620e:	4a97      	ldr	r2, [pc, #604]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006210:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800621c:	f7fd fad8 	bl	80037d0 <HAL_GetTick>
 8006220:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006222:	4b92      	ldr	r3, [pc, #584]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006228:	f013 0f02 	tst.w	r3, #2
 800622c:	d151      	bne.n	80062d2 <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800622e:	f7fd facf 	bl	80037d0 <HAL_GetTick>
 8006232:	1b80      	subs	r0, r0, r6
 8006234:	2811      	cmp	r0, #17
 8006236:	d9f4      	bls.n	8006222 <HAL_RCC_OscConfig+0x2f2>
          return HAL_TIMEOUT;
 8006238:	2003      	movs	r0, #3
 800623a:	e1dd      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623c:	4a8b      	ldr	r2, [pc, #556]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 800623e:	6853      	ldr	r3, [r2, #4]
 8006240:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006244:	6921      	ldr	r1, [r4, #16]
 8006246:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800624a:	6053      	str	r3, [r2, #4]
 800624c:	e7bf      	b.n	80061ce <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800624e:	4a87      	ldr	r2, [pc, #540]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006250:	6813      	ldr	r3, [r2, #0]
 8006252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006256:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006258:	f7fd faba 	bl	80037d0 <HAL_GetTick>
 800625c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800625e:	4b83      	ldr	r3, [pc, #524]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006266:	d0b2      	beq.n	80061ce <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006268:	f7fd fab2 	bl	80037d0 <HAL_GetTick>
 800626c:	1b80      	subs	r0, r0, r6
 800626e:	2802      	cmp	r0, #2
 8006270:	d9f5      	bls.n	800625e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8006272:	2003      	movs	r0, #3
 8006274:	e1c0      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
          __HAL_RCC_LSI_DISABLE();
 8006276:	4a7d      	ldr	r2, [pc, #500]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006278:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8006284:	f7fd faa4 	bl	80037d0 <HAL_GetTick>
 8006288:	4606      	mov	r6, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800628a:	4b78      	ldr	r3, [pc, #480]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 800628c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006290:	f013 0f02 	tst.w	r3, #2
 8006294:	d0b2      	beq.n	80061fc <HAL_RCC_OscConfig+0x2cc>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006296:	f7fd fa9b 	bl	80037d0 <HAL_GetTick>
 800629a:	1b80      	subs	r0, r0, r6
 800629c:	2811      	cmp	r0, #17
 800629e:	d9f4      	bls.n	800628a <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80062a0:	2003      	movs	r0, #3
 80062a2:	e1a9      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
      __HAL_RCC_LSI_DISABLE();
 80062a4:	4a71      	ldr	r2, [pc, #452]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80062a6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80062b2:	f7fd fa8d 	bl	80037d0 <HAL_GetTick>
 80062b6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062b8:	4b6c      	ldr	r3, [pc, #432]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80062ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062be:	f013 0f02 	tst.w	r3, #2
 80062c2:	d006      	beq.n	80062d2 <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c4:	f7fd fa84 	bl	80037d0 <HAL_GetTick>
 80062c8:	1b80      	subs	r0, r0, r6
 80062ca:	2811      	cmp	r0, #17
 80062cc:	d9f4      	bls.n	80062b8 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 80062ce:	2003      	movs	r0, #3
 80062d0:	e192      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	f013 0f04 	tst.w	r3, #4
 80062d8:	f000 808d 	beq.w	80063f6 <HAL_RCC_OscConfig+0x4c6>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80062dc:	4b63      	ldr	r3, [pc, #396]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80062e4:	d12e      	bne.n	8006344 <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e6:	4b61      	ldr	r3, [pc, #388]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80062e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062ee:	659a      	str	r2, [r3, #88]	; 0x58
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80062fa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062fc:	4b5c      	ldr	r3, [pc, #368]	; (8006470 <HAL_RCC_OscConfig+0x540>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006304:	d020      	beq.n	8006348 <HAL_RCC_OscConfig+0x418>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	f013 0f01 	tst.w	r3, #1
 800630c:	d038      	beq.n	8006380 <HAL_RCC_OscConfig+0x450>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800630e:	4957      	ldr	r1, [pc, #348]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006310:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006322:	68a3      	ldr	r3, [r4, #8]
 8006324:	f013 0f04 	tst.w	r3, #4
 8006328:	d022      	beq.n	8006370 <HAL_RCC_OscConfig+0x440>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800632a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800632e:	f042 0204 	orr.w	r2, r2, #4
 8006332:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006336:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8006342:	e02a      	b.n	800639a <HAL_RCC_OscConfig+0x46a>
    FlagStatus       pwrclkchanged = RESET;
 8006344:	2600      	movs	r6, #0
 8006346:	e7d9      	b.n	80062fc <HAL_RCC_OscConfig+0x3cc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006348:	4a49      	ldr	r2, [pc, #292]	; (8006470 <HAL_RCC_OscConfig+0x540>)
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006350:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006352:	f7fd fa3d 	bl	80037d0 <HAL_GetTick>
 8006356:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006358:	4b45      	ldr	r3, [pc, #276]	; (8006470 <HAL_RCC_OscConfig+0x540>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006360:	d1d1      	bne.n	8006306 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006362:	f7fd fa35 	bl	80037d0 <HAL_GetTick>
 8006366:	1bc0      	subs	r0, r0, r7
 8006368:	2802      	cmp	r0, #2
 800636a:	d9f5      	bls.n	8006358 <HAL_RCC_OscConfig+0x428>
          return HAL_TIMEOUT;
 800636c:	2003      	movs	r0, #3
 800636e:	e143      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006370:	4a3e      	ldr	r2, [pc, #248]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006372:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800637e:	e00c      	b.n	800639a <HAL_RCC_OscConfig+0x46a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006380:	4b3a      	ldr	r3, [pc, #232]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006382:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800638e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006392:	f022 0204 	bic.w	r2, r2, #4
 8006396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800639a:	68a3      	ldr	r3, [r4, #8]
 800639c:	b18b      	cbz	r3, 80063c2 <HAL_RCC_OscConfig+0x492>
      tickstart = HAL_GetTick();
 800639e:	f7fd fa17 	bl	80037d0 <HAL_GetTick>
 80063a2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a4:	4b31      	ldr	r3, [pc, #196]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f013 0f02 	tst.w	r3, #2
 80063ae:	d121      	bne.n	80063f4 <HAL_RCC_OscConfig+0x4c4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fd fa0e 	bl	80037d0 <HAL_GetTick>
 80063b4:	1bc0      	subs	r0, r0, r7
 80063b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80063ba:	4298      	cmp	r0, r3
 80063bc:	d9f2      	bls.n	80063a4 <HAL_RCC_OscConfig+0x474>
          return HAL_TIMEOUT;
 80063be:	2003      	movs	r0, #3
 80063c0:	e11a      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
      tickstart = HAL_GetTick();
 80063c2:	f7fd fa05 	bl	80037d0 <HAL_GetTick>
 80063c6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063c8:	4b28      	ldr	r3, [pc, #160]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f013 0f02 	tst.w	r3, #2
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d4:	f7fd f9fc 	bl	80037d0 <HAL_GetTick>
 80063d8:	1bc0      	subs	r0, r0, r7
 80063da:	f241 3388 	movw	r3, #5000	; 0x1388
 80063de:	4298      	cmp	r0, r3
 80063e0:	d9f2      	bls.n	80063c8 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 80063e2:	2003      	movs	r0, #3
 80063e4:	e108      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80063e6:	4a21      	ldr	r2, [pc, #132]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 80063e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80063ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 80063f4:	b9e6      	cbnz	r6, 8006430 <HAL_RCC_OscConfig+0x500>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	f013 0f20 	tst.w	r3, #32
 80063fc:	d03a      	beq.n	8006474 <HAL_RCC_OscConfig+0x544>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006400:	b1e3      	cbz	r3, 800643c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI48_ENABLE();
 8006402:	4a1a      	ldr	r2, [pc, #104]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006404:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006410:	f7fd f9de 	bl	80037d0 <HAL_GetTick>
 8006414:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800641c:	f013 0f02 	tst.w	r3, #2
 8006420:	d128      	bne.n	8006474 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006422:	f7fd f9d5 	bl	80037d0 <HAL_GetTick>
 8006426:	1b80      	subs	r0, r0, r6
 8006428:	2802      	cmp	r0, #2
 800642a:	d9f4      	bls.n	8006416 <HAL_RCC_OscConfig+0x4e6>
          return HAL_TIMEOUT;
 800642c:	2003      	movs	r0, #3
 800642e:	e0e3      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006430:	4a0e      	ldr	r2, [pc, #56]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006432:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006438:	6593      	str	r3, [r2, #88]	; 0x58
 800643a:	e7dc      	b.n	80063f6 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSI48_DISABLE();
 800643c:	4a0b      	ldr	r2, [pc, #44]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 800643e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800644a:	f7fd f9c1 	bl	80037d0 <HAL_GetTick>
 800644e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <HAL_RCC_OscConfig+0x53c>)
 8006452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006456:	f013 0f02 	tst.w	r3, #2
 800645a:	d00b      	beq.n	8006474 <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800645c:	f7fd f9b8 	bl	80037d0 <HAL_GetTick>
 8006460:	1b80      	subs	r0, r0, r6
 8006462:	2802      	cmp	r0, #2
 8006464:	d9f4      	bls.n	8006450 <HAL_RCC_OscConfig+0x520>
          return HAL_TIMEOUT;
 8006466:	2003      	movs	r0, #3
 8006468:	e0c6      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
 800646a:	bf00      	nop
 800646c:	40021000 	.word	0x40021000
 8006470:	40007000 	.word	0x40007000
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006474:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80bd 	beq.w	80065f6 <HAL_RCC_OscConfig+0x6c6>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800647c:	2b02      	cmp	r3, #2
 800647e:	d01f      	beq.n	80064c0 <HAL_RCC_OscConfig+0x590>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006480:	2d0c      	cmp	r5, #12
 8006482:	f000 80bd 	beq.w	8006600 <HAL_RCC_OscConfig+0x6d0>
        __HAL_RCC_PLL_DISABLE();
 8006486:	4b5f      	ldr	r3, [pc, #380]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800648e:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	f022 0203 	bic.w	r2, r2, #3
 8006496:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800649e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80064a0:	f7fd f996 	bl	80037d0 <HAL_GetTick>
 80064a4:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064a6:	4b57      	ldr	r3, [pc, #348]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80064ae:	f000 8094 	beq.w	80065da <HAL_RCC_OscConfig+0x6aa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b2:	f7fd f98d 	bl	80037d0 <HAL_GetTick>
 80064b6:	1b00      	subs	r0, r0, r4
 80064b8:	2802      	cmp	r0, #2
 80064ba:	d9f4      	bls.n	80064a6 <HAL_RCC_OscConfig+0x576>
            return HAL_TIMEOUT;
 80064bc:	2003      	movs	r0, #3
 80064be:	e09b      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
      pll_config = RCC->PLLCFGR;
 80064c0:	4b50      	ldr	r3, [pc, #320]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 80064c2:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c4:	f003 0103 	and.w	r1, r3, #3
 80064c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064ca:	4291      	cmp	r1, r2
 80064cc:	d016      	beq.n	80064fc <HAL_RCC_OscConfig+0x5cc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064ce:	2d0c      	cmp	r5, #12
 80064d0:	f000 8094 	beq.w	80065fc <HAL_RCC_OscConfig+0x6cc>
            __HAL_RCC_PLL_DISABLE();
 80064d4:	4a4b      	ldr	r2, [pc, #300]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064dc:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80064de:	f7fd f977 	bl	80037d0 <HAL_GetTick>
 80064e2:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064e4:	4b47      	ldr	r3, [pc, #284]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80064ec:	d02a      	beq.n	8006544 <HAL_RCC_OscConfig+0x614>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fd f96f 	bl	80037d0 <HAL_GetTick>
 80064f2:	1b40      	subs	r0, r0, r5
 80064f4:	2802      	cmp	r0, #2
 80064f6:	d9f5      	bls.n	80064e4 <HAL_RCC_OscConfig+0x5b4>
                return HAL_TIMEOUT;
 80064f8:	2003      	movs	r0, #3
 80064fa:	e07d      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006502:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006504:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006508:	d1e1      	bne.n	80064ce <HAL_RCC_OscConfig+0x59e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800650a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800650e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006510:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006514:	d1db      	bne.n	80064ce <HAL_RCC_OscConfig+0x59e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006516:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800651a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800651c:	0852      	lsrs	r2, r2, #1
 800651e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006520:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006524:	d1d3      	bne.n	80064ce <HAL_RCC_OscConfig+0x59e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006526:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800652a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800652c:	0852      	lsrs	r2, r2, #1
 800652e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006530:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8006534:	d1cb      	bne.n	80064ce <HAL_RCC_OscConfig+0x59e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006536:	4b33      	ldr	r3, [pc, #204]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800653e:	d032      	beq.n	80065a6 <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 8006540:	2000      	movs	r0, #0
 8006542:	e059      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006544:	4a2f      	ldr	r2, [pc, #188]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 8006546:	68d3      	ldr	r3, [r2, #12]
 8006548:	492f      	ldr	r1, [pc, #188]	; (8006608 <HAL_RCC_OscConfig+0x6d8>)
 800654a:	4019      	ands	r1, r3
 800654c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800654e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006550:	3801      	subs	r0, #1
 8006552:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006556:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006558:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800655c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800655e:	0840      	lsrs	r0, r0, #1
 8006560:	3801      	subs	r0, #1
 8006562:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8006566:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006568:	0840      	lsrs	r0, r0, #1
 800656a:	3801      	subs	r0, #1
 800656c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8006570:	430b      	orrs	r3, r1
 8006572:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800657a:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800657c:	68d3      	ldr	r3, [r2, #12]
 800657e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006582:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8006584:	f7fd f924 	bl	80037d0 <HAL_GetTick>
 8006588:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800658a:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x672>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006594:	f7fd f91c 	bl	80037d0 <HAL_GetTick>
 8006598:	1b00      	subs	r0, r0, r4
 800659a:	2802      	cmp	r0, #2
 800659c:	d9f5      	bls.n	800658a <HAL_RCC_OscConfig+0x65a>
                return HAL_TIMEOUT;
 800659e:	2003      	movs	r0, #3
 80065a0:	e02a      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
  return HAL_OK;
 80065a2:	2000      	movs	r0, #0
 80065a4:	e028      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
          __HAL_RCC_PLL_ENABLE();
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80065ae:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80065b6:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80065b8:	f7fd f90a 	bl	80037d0 <HAL_GetTick>
 80065bc:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065be:	4b11      	ldr	r3, [pc, #68]	; (8006604 <HAL_RCC_OscConfig+0x6d4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80065c6:	d106      	bne.n	80065d6 <HAL_RCC_OscConfig+0x6a6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c8:	f7fd f902 	bl	80037d0 <HAL_GetTick>
 80065cc:	1b03      	subs	r3, r0, r4
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d9f5      	bls.n	80065be <HAL_RCC_OscConfig+0x68e>
              return HAL_TIMEOUT;
 80065d2:	2003      	movs	r0, #3
 80065d4:	e010      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
  return HAL_OK;
 80065d6:	2000      	movs	r0, #0
 80065d8:	e00e      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
 80065da:	2000      	movs	r0, #0
 80065dc:	e00c      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
    return HAL_ERROR;
 80065de:	2001      	movs	r0, #1
}
 80065e0:	4770      	bx	lr
        return HAL_ERROR;
 80065e2:	2001      	movs	r0, #1
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
            return HAL_ERROR;
 80065e6:	2001      	movs	r0, #1
 80065e8:	e006      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
        return HAL_ERROR;
 80065ea:	2001      	movs	r0, #1
 80065ec:	e004      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
        return HAL_ERROR;
 80065ee:	2001      	movs	r0, #1
 80065f0:	e002      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
          return HAL_ERROR;
 80065f2:	2001      	movs	r0, #1
 80065f4:	e000      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
  return HAL_OK;
 80065f6:	2000      	movs	r0, #0
}
 80065f8:	b003      	add	sp, #12
 80065fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80065fc:	2001      	movs	r0, #1
 80065fe:	e7fb      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
        return HAL_ERROR;
 8006600:	2001      	movs	r0, #1
 8006602:	e7f9      	b.n	80065f8 <HAL_RCC_OscConfig+0x6c8>
 8006604:	40021000 	.word	0x40021000
 8006608:	f99f808c 	.word	0xf99f808c

0800660c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800660c:	2800      	cmp	r0, #0
 800660e:	f000 8098 	beq.w	8006742 <HAL_RCC_ClockConfig+0x136>
{
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	460c      	mov	r4, r1
 8006616:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006618:	4b4e      	ldr	r3, [pc, #312]	; (8006754 <HAL_RCC_ClockConfig+0x148>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	428b      	cmp	r3, r1
 8006622:	d20b      	bcs.n	800663c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006624:	4a4b      	ldr	r2, [pc, #300]	; (8006754 <HAL_RCC_ClockConfig+0x148>)
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	f023 0307 	bic.w	r3, r3, #7
 800662c:	430b      	orrs	r3, r1
 800662e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006630:	6813      	ldr	r3, [r2, #0]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	428b      	cmp	r3, r1
 8006638:	f040 8085 	bne.w	8006746 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	f013 0f01 	tst.w	r3, #1
 8006642:	d039      	beq.n	80066b8 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006644:	686b      	ldr	r3, [r5, #4]
 8006646:	2b03      	cmp	r3, #3
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800664a:	2b02      	cmp	r3, #2
 800664c:	d026      	beq.n	800669c <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800664e:	bb63      	cbnz	r3, 80066aa <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006650:	4a41      	ldr	r2, [pc, #260]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	f012 0f02 	tst.w	r2, #2
 8006658:	d106      	bne.n	8006668 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800665a:	2001      	movs	r0, #1
 800665c:	e070      	b.n	8006740 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800665e:	4a3e      	ldr	r2, [pc, #248]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006666:	d070      	beq.n	800674a <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006668:	493b      	ldr	r1, [pc, #236]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 800666a:	688a      	ldr	r2, [r1, #8]
 800666c:	f022 0203 	bic.w	r2, r2, #3
 8006670:	4313      	orrs	r3, r2
 8006672:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006674:	f7fd f8ac 	bl	80037d0 <HAL_GetTick>
 8006678:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667a:	4b37      	ldr	r3, [pc, #220]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	686a      	ldr	r2, [r5, #4]
 8006684:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006688:	d016      	beq.n	80066b8 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800668a:	f7fd f8a1 	bl	80037d0 <HAL_GetTick>
 800668e:	1b80      	subs	r0, r0, r6
 8006690:	f241 3388 	movw	r3, #5000	; 0x1388
 8006694:	4298      	cmp	r0, r3
 8006696:	d9f0      	bls.n	800667a <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8006698:	2003      	movs	r0, #3
 800669a:	e051      	b.n	8006740 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800669c:	4a2e      	ldr	r2, [pc, #184]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80066a4:	d1e0      	bne.n	8006668 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80066a6:	2001      	movs	r0, #1
 80066a8:	e04a      	b.n	8006740 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066aa:	4a2b      	ldr	r2, [pc, #172]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80066b2:	d1d9      	bne.n	8006668 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80066b4:	2001      	movs	r0, #1
 80066b6:	e043      	b.n	8006740 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	f013 0f02 	tst.w	r3, #2
 80066be:	d006      	beq.n	80066ce <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c0:	4a25      	ldr	r2, [pc, #148]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 80066c2:	6893      	ldr	r3, [r2, #8]
 80066c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c8:	68a9      	ldr	r1, [r5, #8]
 80066ca:	430b      	orrs	r3, r1
 80066cc:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <HAL_RCC_ClockConfig+0x148>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	d90a      	bls.n	80066f0 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_RCC_ClockConfig+0x148>)
 80066dc:	6813      	ldr	r3, [r2, #0]
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	4323      	orrs	r3, r4
 80066e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	6813      	ldr	r3, [r2, #0]
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d12e      	bne.n	800674e <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	f013 0f04 	tst.w	r3, #4
 80066f6:	d006      	beq.n	8006706 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066f8:	4a17      	ldr	r2, [pc, #92]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 80066fa:	6893      	ldr	r3, [r2, #8]
 80066fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006700:	68e9      	ldr	r1, [r5, #12]
 8006702:	430b      	orrs	r3, r1
 8006704:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	f013 0f08 	tst.w	r3, #8
 800670c:	d007      	beq.n	800671e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800670e:	4a12      	ldr	r2, [pc, #72]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 8006710:	6893      	ldr	r3, [r2, #8]
 8006712:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006716:	6929      	ldr	r1, [r5, #16]
 8006718:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800671c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800671e:	f7ff fbad 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <HAL_RCC_ClockConfig+0x14c>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800672a:	4a0c      	ldr	r2, [pc, #48]	; (800675c <HAL_RCC_ClockConfig+0x150>)
 800672c:	5cd3      	ldrb	r3, [r2, r3]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	40d8      	lsrs	r0, r3
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <HAL_RCC_ClockConfig+0x154>)
 8006736:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <HAL_RCC_ClockConfig+0x158>)
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	f7fc fd8a 	bl	8003254 <HAL_InitTick>
}
 8006740:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006742:	2001      	movs	r0, #1
}
 8006744:	4770      	bx	lr
      return HAL_ERROR;
 8006746:	2001      	movs	r0, #1
 8006748:	e7fa      	b.n	8006740 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 800674a:	2001      	movs	r0, #1
 800674c:	e7f8      	b.n	8006740 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 800674e:	2001      	movs	r0, #1
 8006750:	e7f6      	b.n	8006740 <HAL_RCC_ClockConfig+0x134>
 8006752:	bf00      	nop
 8006754:	40022000 	.word	0x40022000
 8006758:	40021000 	.word	0x40021000
 800675c:	0800e5f0 	.word	0x0800e5f0
 8006760:	20000000 	.word	0x20000000
 8006764:	20000008 	.word	0x20000008

08006768 <HAL_RCC_GetHCLKFreq>:
}
 8006768:	4b01      	ldr	r3, [pc, #4]	; (8006770 <HAL_RCC_GetHCLKFreq+0x8>)
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20000000 	.word	0x20000000

08006774 <HAL_RCC_GetPCLK1Freq>:
{
 8006774:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006776:	f7ff fff7 	bl	8006768 <HAL_RCC_GetHCLKFreq>
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006782:	4a04      	ldr	r2, [pc, #16]	; (8006794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006784:	5cd3      	ldrb	r3, [r2, r3]
 8006786:	f003 031f 	and.w	r3, r3, #31
}
 800678a:	40d8      	lsrs	r0, r3
 800678c:	bd08      	pop	{r3, pc}
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000
 8006794:	0800e600 	.word	0x0800e600

08006798 <HAL_RCC_GetPCLK2Freq>:
{
 8006798:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800679a:	f7ff ffe5 	bl	8006768 <HAL_RCC_GetHCLKFreq>
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80067a6:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067a8:	5cd3      	ldrb	r3, [r2, r3]
 80067aa:	f003 031f 	and.w	r3, r3, #31
}
 80067ae:	40d8      	lsrs	r0, r3
 80067b0:	bd08      	pop	{r3, pc}
 80067b2:	bf00      	nop
 80067b4:	40021000 	.word	0x40021000
 80067b8:	0800e600 	.word	0x0800e600

080067bc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067bc:	230f      	movs	r3, #15
 80067be:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_RCC_GetClockConfig+0x34>)
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	f002 0203 	and.w	r2, r2, #3
 80067c8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80067d0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80067d8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	08db      	lsrs	r3, r3, #3
 80067de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067e2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <HAL_RCC_GetClockConfig+0x38>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	600b      	str	r3, [r1, #0]
}
 80067ee:	4770      	bx	lr
 80067f0:	40021000 	.word	0x40021000
 80067f4:	40022000 	.word	0x40022000

080067f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fa:	b083      	sub	sp, #12
 80067fc:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067fe:	6803      	ldr	r3, [r0, #0]
 8006800:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006804:	d069      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006806:	4b87      	ldr	r3, [pc, #540]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800680e:	d11e      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006810:	4b84      	ldr	r3, [pc, #528]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006812:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006818:	659a      	str	r2, [r3, #88]	; 0x58
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006824:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006826:	4a80      	ldr	r2, [pc, #512]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006828:	6813      	ldr	r3, [r2, #0]
 800682a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006830:	f7fc ffce 	bl	80037d0 <HAL_GetTick>
 8006834:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006836:	4b7c      	ldr	r3, [pc, #496]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800683e:	d108      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006840:	f7fc ffc6 	bl	80037d0 <HAL_GetTick>
 8006844:	1b40      	subs	r0, r0, r5
 8006846:	2802      	cmp	r0, #2
 8006848:	d9f5      	bls.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800684a:	2503      	movs	r5, #3
 800684c:	e002      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800684e:	2600      	movs	r6, #0
 8006850:	e7e9      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006852:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8006854:	bb45      	cbnz	r5, 80068a8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006856:	4b73      	ldr	r3, [pc, #460]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800685c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006860:	d015      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8006862:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006864:	429a      	cmp	r2, r3
 8006866:	d012      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006868:	4a6e      	ldr	r2, [pc, #440]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800686a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800686e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006872:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006876:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800687a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800687e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006882:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006886:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800688a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800688e:	f013 0f01 	tst.w	r3, #1
 8006892:	d110      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }

      if(ret == HAL_OK)
 8006894:	b945      	cbnz	r5, 80068a8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006896:	4a63      	ldr	r2, [pc, #396]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006898:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800689c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068a2:	430b      	orrs	r3, r1
 80068a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a8:	b1c6      	cbz	r6, 80068dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068aa:	4a5e      	ldr	r2, [pc, #376]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80068ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80068ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b2:	6593      	str	r3, [r2, #88]	; 0x58
 80068b4:	e012      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80068b6:	f7fc ff8b 	bl	80037d0 <HAL_GetTick>
 80068ba:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068bc:	4b59      	ldr	r3, [pc, #356]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	f013 0f02 	tst.w	r3, #2
 80068c6:	d1e5      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c8:	f7fc ff82 	bl	80037d0 <HAL_GetTick>
 80068cc:	1bc0      	subs	r0, r0, r7
 80068ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80068d2:	4298      	cmp	r0, r3
 80068d4:	d9f2      	bls.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 80068d6:	2503      	movs	r5, #3
 80068d8:	e7dc      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068da:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	f013 0f01 	tst.w	r3, #1
 80068e2:	d008      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068e4:	4a4f      	ldr	r2, [pc, #316]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80068e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	6861      	ldr	r1, [r4, #4]
 80068f0:	430b      	orrs	r3, r1
 80068f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f013 0f02 	tst.w	r3, #2
 80068fc:	d008      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068fe:	4a49      	ldr	r2, [pc, #292]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006900:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006904:	f023 030c 	bic.w	r3, r3, #12
 8006908:	68a1      	ldr	r1, [r4, #8]
 800690a:	430b      	orrs	r3, r1
 800690c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	f013 0f04 	tst.w	r3, #4
 8006916:	d008      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006918:	4a42      	ldr	r2, [pc, #264]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800691a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800691e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006922:	68e1      	ldr	r1, [r4, #12]
 8006924:	430b      	orrs	r3, r1
 8006926:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	f013 0f20 	tst.w	r3, #32
 8006930:	d008      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006932:	4a3c      	ldr	r2, [pc, #240]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006934:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006938:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800693c:	6921      	ldr	r1, [r4, #16]
 800693e:	430b      	orrs	r3, r1
 8006940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	f413 7f00 	tst.w	r3, #512	; 0x200
 800694a:	d008      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800694c:	4a35      	ldr	r2, [pc, #212]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800694e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006952:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006956:	6a21      	ldr	r1, [r4, #32]
 8006958:	430b      	orrs	r3, r1
 800695a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006964:	d008      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006966:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006968:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800696c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006970:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006972:	430b      	orrs	r3, r1
 8006974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800697e:	d008      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006980:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006982:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800698a:	6961      	ldr	r1, [r4, #20]
 800698c:	430b      	orrs	r3, r1
 800698e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006998:	d008      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800699a:	4a22      	ldr	r2, [pc, #136]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800699c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80069a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80069a4:	69a1      	ldr	r1, [r4, #24]
 80069a6:	430b      	orrs	r3, r1
 80069a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069b2:	d008      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069b4:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80069b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80069ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80069be:	69e1      	ldr	r1, [r4, #28]
 80069c0:	430b      	orrs	r3, r1
 80069c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80069cc:	d00c      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80069d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80069d4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80069d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80069da:	430b      	orrs	r3, r1
 80069dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e6:	d013      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80069ee:	d00c      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069f0:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80069f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80069f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80069fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069fc:	430b      	orrs	r3, r1
 80069fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a08:	d007      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	b003      	add	sp, #12
 8006a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a10:	68d3      	ldr	r3, [r2, #12]
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a16:	60d3      	str	r3, [r2, #12]
 8006a18:	e7e6      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a1a:	68d3      	ldr	r3, [r2, #12]
 8006a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a20:	60d3      	str	r3, [r2, #12]
 8006a22:	e7f2      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8006a24:	40021000 	.word	0x40021000
 8006a28:	40007000 	.word	0x40007000

08006a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2e:	6a03      	ldr	r3, [r0, #32]
 8006a30:	f023 0301 	bic.w	r3, r3, #1
 8006a34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a3a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a40:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a44:	680d      	ldr	r5, [r1, #0]
 8006a46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a48:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a4c:	688d      	ldr	r5, [r1, #8]
 8006a4e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a50:	4d14      	ldr	r5, [pc, #80]	; (8006aa4 <TIM_OC1_SetConfig+0x78>)
 8006a52:	42a8      	cmp	r0, r5
 8006a54:	d007      	beq.n	8006a66 <TIM_OC1_SetConfig+0x3a>
 8006a56:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006a5a:	42a8      	cmp	r0, r5
 8006a5c:	d003      	beq.n	8006a66 <TIM_OC1_SetConfig+0x3a>
 8006a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a62:	42a8      	cmp	r0, r5
 8006a64:	d105      	bne.n	8006a72 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a66:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a6a:	68cd      	ldr	r5, [r1, #12]
 8006a6c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a6e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	4d0c      	ldr	r5, [pc, #48]	; (8006aa4 <TIM_OC1_SetConfig+0x78>)
 8006a74:	42a8      	cmp	r0, r5
 8006a76:	d007      	beq.n	8006a88 <TIM_OC1_SetConfig+0x5c>
 8006a78:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006a7c:	42a8      	cmp	r0, r5
 8006a7e:	d003      	beq.n	8006a88 <TIM_OC1_SetConfig+0x5c>
 8006a80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006a84:	42a8      	cmp	r0, r5
 8006a86:	d105      	bne.n	8006a94 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a88:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a8c:	694c      	ldr	r4, [r1, #20]
 8006a8e:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a90:	698d      	ldr	r5, [r1, #24]
 8006a92:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a94:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a96:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a98:	684a      	ldr	r2, [r1, #4]
 8006a9a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9c:	6203      	str	r3, [r0, #32]
}
 8006a9e:	bc30      	pop	{r4, r5}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00

08006aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aaa:	6a03      	ldr	r3, [r0, #32]
 8006aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ab6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ab8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006abc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac0:	680d      	ldr	r5, [r1, #0]
 8006ac2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ac8:	688d      	ldr	r5, [r1, #8]
 8006aca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ace:	4d12      	ldr	r5, [pc, #72]	; (8006b18 <TIM_OC3_SetConfig+0x70>)
 8006ad0:	42a8      	cmp	r0, r5
 8006ad2:	d019      	beq.n	8006b08 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad4:	4d10      	ldr	r5, [pc, #64]	; (8006b18 <TIM_OC3_SetConfig+0x70>)
 8006ad6:	42a8      	cmp	r0, r5
 8006ad8:	d007      	beq.n	8006aea <TIM_OC3_SetConfig+0x42>
 8006ada:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006ade:	42a8      	cmp	r0, r5
 8006ae0:	d003      	beq.n	8006aea <TIM_OC3_SetConfig+0x42>
 8006ae2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006ae6:	42a8      	cmp	r0, r5
 8006ae8:	d107      	bne.n	8006afa <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aea:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aee:	694d      	ldr	r5, [r1, #20]
 8006af0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006af4:	698d      	ldr	r5, [r1, #24]
 8006af6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006afc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006afe:	684a      	ldr	r2, [r1, #4]
 8006b00:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	6203      	str	r3, [r0, #32]
}
 8006b04:	bc30      	pop	{r4, r5}
 8006b06:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b0c:	68cd      	ldr	r5, [r1, #12]
 8006b0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b16:	e7dd      	b.n	8006ad4 <TIM_OC3_SetConfig+0x2c>
 8006b18:	40012c00 	.word	0x40012c00

08006b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b1e:	6a03      	ldr	r3, [r0, #32]
 8006b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b30:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b34:	680d      	ldr	r5, [r1, #0]
 8006b36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b3e:	688d      	ldr	r5, [r1, #8]
 8006b40:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b44:	4d0b      	ldr	r5, [pc, #44]	; (8006b74 <TIM_OC4_SetConfig+0x58>)
 8006b46:	42a8      	cmp	r0, r5
 8006b48:	d007      	beq.n	8006b5a <TIM_OC4_SetConfig+0x3e>
 8006b4a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006b4e:	42a8      	cmp	r0, r5
 8006b50:	d003      	beq.n	8006b5a <TIM_OC4_SetConfig+0x3e>
 8006b52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006b56:	42a8      	cmp	r0, r5
 8006b58:	d104      	bne.n	8006b64 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b5a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b5e:	694d      	ldr	r5, [r1, #20]
 8006b60:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b66:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b68:	684b      	ldr	r3, [r1, #4]
 8006b6a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	6202      	str	r2, [r0, #32]
}
 8006b6e:	bc30      	pop	{r4, r5}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40012c00 	.word	0x40012c00

08006b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b7a:	6a03      	ldr	r3, [r0, #32]
 8006b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b86:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	680d      	ldr	r5, [r1, #0]
 8006b92:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b98:	688d      	ldr	r5, [r1, #8]
 8006b9a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9e:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <TIM_OC5_SetConfig+0x54>)
 8006ba0:	42a8      	cmp	r0, r5
 8006ba2:	d007      	beq.n	8006bb4 <TIM_OC5_SetConfig+0x3c>
 8006ba4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006ba8:	42a8      	cmp	r0, r5
 8006baa:	d003      	beq.n	8006bb4 <TIM_OC5_SetConfig+0x3c>
 8006bac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bb0:	42a8      	cmp	r0, r5
 8006bb2:	d104      	bne.n	8006bbe <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bb4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bb8:	694d      	ldr	r5, [r1, #20]
 8006bba:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bc0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bc2:	684a      	ldr	r2, [r1, #4]
 8006bc4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc6:	6203      	str	r3, [r0, #32]
}
 8006bc8:	bc30      	pop	{r4, r5}
 8006bca:	4770      	bx	lr
 8006bcc:	40012c00 	.word	0x40012c00

08006bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bd2:	6a03      	ldr	r3, [r0, #32]
 8006bd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bde:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be8:	680d      	ldr	r5, [r1, #0]
 8006bea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bee:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bf2:	688d      	ldr	r5, [r1, #8]
 8006bf4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf8:	4d0b      	ldr	r5, [pc, #44]	; (8006c28 <TIM_OC6_SetConfig+0x58>)
 8006bfa:	42a8      	cmp	r0, r5
 8006bfc:	d007      	beq.n	8006c0e <TIM_OC6_SetConfig+0x3e>
 8006bfe:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006c02:	42a8      	cmp	r0, r5
 8006c04:	d003      	beq.n	8006c0e <TIM_OC6_SetConfig+0x3e>
 8006c06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c0a:	42a8      	cmp	r0, r5
 8006c0c:	d104      	bne.n	8006c18 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c0e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c12:	694d      	ldr	r5, [r1, #20]
 8006c14:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c1a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c1c:	684b      	ldr	r3, [r1, #4]
 8006c1e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c20:	6202      	str	r2, [r0, #32]
}
 8006c22:	bc30      	pop	{r4, r5}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40012c00 	.word	0x40012c00

08006c2c <HAL_TIM_Base_MspInit>:
}
 8006c2c:	4770      	bx	lr
	...

08006c30 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006c30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d126      	bne.n	8006c88 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c40:	6802      	ldr	r2, [r0, #0]
 8006c42:	68d3      	ldr	r3, [r2, #12]
 8006c44:	f043 0301 	orr.w	r3, r3, #1
 8006c48:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4a:	6803      	ldr	r3, [r0, #0]
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <HAL_TIM_Base_Start_IT+0x64>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00c      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x3c>
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c56:	d009      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x3c>
 8006c58:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d005      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006c68:	2000      	movs	r0, #0
 8006c6a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c6c:	6899      	ldr	r1, [r3, #8]
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <HAL_TIM_Base_Start_IT+0x68>)
 8006c70:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c72:	2a06      	cmp	r2, #6
 8006c74:	d00a      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x5c>
 8006c76:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006c84:	2000      	movs	r0, #0
 8006c86:	4770      	bx	lr
    return HAL_ERROR;
 8006c88:	2001      	movs	r0, #1
 8006c8a:	4770      	bx	lr
  return HAL_OK;
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4770      	bx	lr
 8006c90:	2000      	movs	r0, #0
}
 8006c92:	4770      	bx	lr
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	00010007 	.word	0x00010007

08006c9c <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006c9c:	4770      	bx	lr

08006c9e <HAL_TIM_IC_CaptureCallback>:
}
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_TIM_TriggerCallback>:
}
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIM_IRQHandler>:
{
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ca8:	6803      	ldr	r3, [r0, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	f012 0f02 	tst.w	r2, #2
 8006cb0:	d011      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	f012 0f02 	tst.w	r2, #2
 8006cb8:	d00d      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cba:	f06f 0202 	mvn.w	r2, #2
 8006cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f013 0f03 	tst.w	r3, #3
 8006ccc:	d079      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	f7ff ffe6 	bl	8006c9e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	f012 0f04 	tst.w	r2, #4
 8006cde:	d012      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	f012 0f04 	tst.w	r2, #4
 8006ce6:	d00e      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ce8:	f06f 0204 	mvn.w	r2, #4
 8006cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006cfa:	d068      	beq.n	8006dce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7ff ffce 	bl	8006c9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d02:	2300      	movs	r3, #0
 8006d04:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	f012 0f08 	tst.w	r2, #8
 8006d0e:	d012      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	f012 0f08 	tst.w	r2, #8
 8006d16:	d00e      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d18:	f06f 0208 	mvn.w	r2, #8
 8006d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1e:	2304      	movs	r3, #4
 8006d20:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f013 0f03 	tst.w	r3, #3
 8006d2a:	d057      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7ff ffb6 	bl	8006c9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	2300      	movs	r3, #0
 8006d34:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	f012 0f10 	tst.w	r2, #16
 8006d3e:	d012      	beq.n	8006d66 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	f012 0f10 	tst.w	r2, #16
 8006d46:	d00e      	beq.n	8006d66 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d48:	f06f 0210 	mvn.w	r2, #16
 8006d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d4e:	2308      	movs	r3, #8
 8006d50:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d5a:	d046      	beq.n	8006dea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f7ff ff9e 	bl	8006c9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d62:	2300      	movs	r3, #0
 8006d64:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	f012 0f01 	tst.w	r2, #1
 8006d6e:	d003      	beq.n	8006d78 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	f012 0f01 	tst.w	r2, #1
 8006d76:	d13f      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d80:	d003      	beq.n	8006d8a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d88:	d13d      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006d92:	d003      	beq.n	8006d9c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d9a:	d13b      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006da4:	d003      	beq.n	8006dae <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006dac:	d139      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	f012 0f20 	tst.w	r2, #32
 8006db6:	d003      	beq.n	8006dc0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	f012 0f20 	tst.w	r2, #32
 8006dbe:	d137      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x18c>
}
 8006dc0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	f7ff ff6b 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7ff ff6a 	bl	8006ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dcc:	e781      	b.n	8006cd2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7ff ff64 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff ff63 	bl	8006ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dda:	e792      	b.n	8006d02 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff ff5d 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de2:	4620      	mov	r0, r4
 8006de4:	f7ff ff5c 	bl	8006ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006de8:	e7a3      	b.n	8006d32 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dea:	4620      	mov	r0, r4
 8006dec:	f7ff ff56 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df0:	4620      	mov	r0, r4
 8006df2:	f7ff ff55 	bl	8006ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006df6:	e7b4      	b.n	8006d62 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006df8:	f06f 0201 	mvn.w	r2, #1
 8006dfc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7fc f9ee 	bl	80031e0 <HAL_TIM_PeriodElapsedCallback>
 8006e04:	e7b8      	b.n	8006d78 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 faa6 	bl	800735e <HAL_TIMEx_BreakCallback>
 8006e12:	e7ba      	b.n	8006d8a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 faa0 	bl	8007360 <HAL_TIMEx_Break2Callback>
 8006e20:	e7bc      	b.n	8006d9c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e26:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7ff ff3a 	bl	8006ca2 <HAL_TIM_TriggerCallback>
 8006e2e:	e7be      	b.n	8006dae <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e30:	f06f 0220 	mvn.w	r2, #32
 8006e34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 fa90 	bl	800735c <HAL_TIMEx_CommutCallback>
}
 8006e3c:	e7c0      	b.n	8006dc0 <HAL_TIM_IRQHandler+0x11c>
	...

08006e40 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006e40:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e42:	4a1a      	ldr	r2, [pc, #104]	; (8006eac <TIM_Base_SetConfig+0x6c>)
 8006e44:	4290      	cmp	r0, r2
 8006e46:	d002      	beq.n	8006e4e <TIM_Base_SetConfig+0xe>
 8006e48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e4c:	d103      	bne.n	8006e56 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e52:	684a      	ldr	r2, [r1, #4]
 8006e54:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e56:	4a15      	ldr	r2, [pc, #84]	; (8006eac <TIM_Base_SetConfig+0x6c>)
 8006e58:	4290      	cmp	r0, r2
 8006e5a:	d00a      	beq.n	8006e72 <TIM_Base_SetConfig+0x32>
 8006e5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e60:	d007      	beq.n	8006e72 <TIM_Base_SetConfig+0x32>
 8006e62:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8006e66:	4290      	cmp	r0, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_Base_SetConfig+0x32>
 8006e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e6e:	4290      	cmp	r0, r2
 8006e70:	d103      	bne.n	8006e7a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e76:	68ca      	ldr	r2, [r1, #12]
 8006e78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7e:	694a      	ldr	r2, [r1, #20]
 8006e80:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e82:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e84:	688b      	ldr	r3, [r1, #8]
 8006e86:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e88:	680b      	ldr	r3, [r1, #0]
 8006e8a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <TIM_Base_SetConfig+0x6c>)
 8006e8e:	4298      	cmp	r0, r3
 8006e90:	d007      	beq.n	8006ea2 <TIM_Base_SetConfig+0x62>
 8006e92:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8006e96:	4298      	cmp	r0, r3
 8006e98:	d003      	beq.n	8006ea2 <TIM_Base_SetConfig+0x62>
 8006e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	d101      	bne.n	8006ea6 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea2:	690b      	ldr	r3, [r1, #16]
 8006ea4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	6143      	str	r3, [r0, #20]
}
 8006eaa:	4770      	bx	lr
 8006eac:	40012c00 	.word	0x40012c00

08006eb0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006eb0:	b360      	cbz	r0, 8006f0c <HAL_TIM_Base_Init+0x5c>
{
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006eba:	b313      	cbz	r3, 8006f02 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ec8:	f7ff ffba 	bl	8006e40 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006ed6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006eda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006ede:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ef2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006ef6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006efa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006efe:	2000      	movs	r0, #0
}
 8006f00:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006f02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006f06:	f7ff fe91 	bl	8006c2c <HAL_TIM_Base_MspInit>
 8006f0a:	e7d7      	b.n	8006ebc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006f0c:	2001      	movs	r0, #1
}
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006f10:	b360      	cbz	r0, 8006f6c <HAL_TIM_PWM_Init+0x5c>
{
 8006f12:	b510      	push	{r4, lr}
 8006f14:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006f16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f1a:	b313      	cbz	r3, 8006f62 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f22:	4621      	mov	r1, r4
 8006f24:	f851 0b04 	ldr.w	r0, [r1], #4
 8006f28:	f7ff ff8a 	bl	8006e40 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006f36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006f3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006f3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006f56:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006f5e:	2000      	movs	r0, #0
}
 8006f60:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006f62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006f66:	f7fc fabb 	bl	80034e0 <HAL_TIM_PWM_MspInit>
 8006f6a:	e7d7      	b.n	8006f1c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006f6c:	2001      	movs	r0, #1
}
 8006f6e:	4770      	bx	lr

08006f70 <TIM_OC2_SetConfig>:
{
 8006f70:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f72:	6a03      	ldr	r3, [r0, #32]
 8006f74:	f023 0310 	bic.w	r3, r3, #16
 8006f78:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006f7a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006f7c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006f7e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006f84:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f88:	680d      	ldr	r5, [r1, #0]
 8006f8a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006f8e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f92:	688d      	ldr	r5, [r1, #8]
 8006f94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f98:	4d12      	ldr	r5, [pc, #72]	; (8006fe4 <TIM_OC2_SetConfig+0x74>)
 8006f9a:	42a8      	cmp	r0, r5
 8006f9c:	d019      	beq.n	8006fd2 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9e:	4d11      	ldr	r5, [pc, #68]	; (8006fe4 <TIM_OC2_SetConfig+0x74>)
 8006fa0:	42a8      	cmp	r0, r5
 8006fa2:	d007      	beq.n	8006fb4 <TIM_OC2_SetConfig+0x44>
 8006fa4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006fa8:	42a8      	cmp	r0, r5
 8006faa:	d003      	beq.n	8006fb4 <TIM_OC2_SetConfig+0x44>
 8006fac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006fb0:	42a8      	cmp	r0, r5
 8006fb2:	d107      	bne.n	8006fc4 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fb4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fb8:	694d      	ldr	r5, [r1, #20]
 8006fba:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fbe:	698d      	ldr	r5, [r1, #24]
 8006fc0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006fc4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006fc6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc8:	684a      	ldr	r2, [r1, #4]
 8006fca:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006fcc:	6203      	str	r3, [r0, #32]
}
 8006fce:	bc30      	pop	{r4, r5}
 8006fd0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fd6:	68cd      	ldr	r5, [r1, #12]
 8006fd8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe0:	e7dd      	b.n	8006f9e <TIM_OC2_SetConfig+0x2e>
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00

08006fe8 <HAL_TIM_PWM_ConfigChannel>:
{
 8006fe8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006fea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	f000 808c 	beq.w	800710c <HAL_TIM_PWM_ConfigChannel+0x124>
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006ffe:	2a14      	cmp	r2, #20
 8007000:	d81e      	bhi.n	8007040 <HAL_TIM_PWM_ConfigChannel+0x58>
 8007002:	e8df f002 	tbb	[pc, r2]
 8007006:	1d0b      	.short	0x1d0b
 8007008:	1d211d1d 	.word	0x1d211d1d
 800700c:	1d351d1d 	.word	0x1d351d1d
 8007010:	1d481d1d 	.word	0x1d481d1d
 8007014:	1d5c1d1d 	.word	0x1d5c1d1d
 8007018:	1d1d      	.short	0x1d1d
 800701a:	6f          	.byte	0x6f
 800701b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f7ff fd05 	bl	8006a2c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	6993      	ldr	r3, [r2, #24]
 8007026:	f043 0308 	orr.w	r3, r3, #8
 800702a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	6993      	ldr	r3, [r2, #24]
 8007030:	f023 0304 	bic.w	r3, r3, #4
 8007034:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	6993      	ldr	r3, [r2, #24]
 800703a:	6929      	ldr	r1, [r5, #16]
 800703c:	430b      	orrs	r3, r1
 800703e:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8007040:	2000      	movs	r0, #0
 8007042:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007046:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007048:	6800      	ldr	r0, [r0, #0]
 800704a:	f7ff ff91 	bl	8006f70 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	6993      	ldr	r3, [r2, #24]
 8007052:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007056:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007058:	6822      	ldr	r2, [r4, #0]
 800705a:	6993      	ldr	r3, [r2, #24]
 800705c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007060:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	6993      	ldr	r3, [r2, #24]
 8007066:	6929      	ldr	r1, [r5, #16]
 8007068:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800706c:	6193      	str	r3, [r2, #24]
      break;
 800706e:	e7e7      	b.n	8007040 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007070:	6800      	ldr	r0, [r0, #0]
 8007072:	f7ff fd19 	bl	8006aa8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	69d3      	ldr	r3, [r2, #28]
 800707a:	f043 0308 	orr.w	r3, r3, #8
 800707e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007080:	6822      	ldr	r2, [r4, #0]
 8007082:	69d3      	ldr	r3, [r2, #28]
 8007084:	f023 0304 	bic.w	r3, r3, #4
 8007088:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	69d3      	ldr	r3, [r2, #28]
 800708e:	6929      	ldr	r1, [r5, #16]
 8007090:	430b      	orrs	r3, r1
 8007092:	61d3      	str	r3, [r2, #28]
      break;
 8007094:	e7d4      	b.n	8007040 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007096:	6800      	ldr	r0, [r0, #0]
 8007098:	f7ff fd40 	bl	8006b1c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800709c:	6822      	ldr	r2, [r4, #0]
 800709e:	69d3      	ldr	r3, [r2, #28]
 80070a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070a6:	6822      	ldr	r2, [r4, #0]
 80070a8:	69d3      	ldr	r3, [r2, #28]
 80070aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	69d3      	ldr	r3, [r2, #28]
 80070b4:	6929      	ldr	r1, [r5, #16]
 80070b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80070ba:	61d3      	str	r3, [r2, #28]
      break;
 80070bc:	e7c0      	b.n	8007040 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	f7ff fd5a 	bl	8006b78 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070c8:	f043 0308 	orr.w	r3, r3, #8
 80070cc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070d2:	f023 0304 	bic.w	r3, r3, #4
 80070d6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070dc:	6929      	ldr	r1, [r5, #16]
 80070de:	430b      	orrs	r3, r1
 80070e0:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80070e2:	e7ad      	b.n	8007040 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070e4:	6800      	ldr	r0, [r0, #0]
 80070e6:	f7ff fd73 	bl	8006bd0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070f2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80070f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007102:	6929      	ldr	r1, [r5, #16]
 8007104:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007108:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800710a:	e799      	b.n	8007040 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 800710c:	2002      	movs	r0, #2
 800710e:	e79a      	b.n	8007046 <HAL_TIM_PWM_ConfigChannel+0x5e>

08007110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007110:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007112:	f001 011f 	and.w	r1, r1, #31
 8007116:	2301      	movs	r3, #1
 8007118:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800711c:	6a03      	ldr	r3, [r0, #32]
 800711e:	ea23 0304 	bic.w	r3, r3, r4
 8007122:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007124:	6a03      	ldr	r3, [r0, #32]
 8007126:	fa02 f101 	lsl.w	r1, r2, r1
 800712a:	430b      	orrs	r3, r1
 800712c:	6203      	str	r3, [r0, #32]
}
 800712e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIM_PWM_Start>:
{
 8007134:	b510      	push	{r4, lr}
 8007136:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007138:	4608      	mov	r0, r1
 800713a:	2900      	cmp	r1, #0
 800713c:	d132      	bne.n	80071a4 <HAL_TIM_PWM_Start+0x70>
 800713e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8007142:	b2db      	uxtb	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	bf18      	it	ne
 8007148:	2301      	movne	r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d17f      	bne.n	800724e <HAL_TIM_PWM_Start+0x11a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800714e:	2800      	cmp	r0, #0
 8007150:	d153      	bne.n	80071fa <HAL_TIM_PWM_Start+0xc6>
 8007152:	2302      	movs	r3, #2
 8007154:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007158:	2201      	movs	r2, #1
 800715a:	4601      	mov	r1, r0
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	f7ff ffd7 	bl	8007110 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	4a3d      	ldr	r2, [pc, #244]	; (800725c <HAL_TIM_PWM_Start+0x128>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d007      	beq.n	800717a <HAL_TIM_PWM_Start+0x46>
 800716a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <HAL_TIM_PWM_Start+0x46>
 8007172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007176:	4293      	cmp	r3, r2
 8007178:	d103      	bne.n	8007182 <HAL_TIM_PWM_Start+0x4e>
    __HAL_TIM_MOE_ENABLE(htim);
 800717a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007180:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	4a35      	ldr	r2, [pc, #212]	; (800725c <HAL_TIM_PWM_Start+0x128>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d053      	beq.n	8007232 <HAL_TIM_PWM_Start+0xfe>
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718e:	d050      	beq.n	8007232 <HAL_TIM_PWM_Start+0xfe>
 8007190:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8007194:	4293      	cmp	r3, r2
 8007196:	d04c      	beq.n	8007232 <HAL_TIM_PWM_Start+0xfe>
    __HAL_TIM_ENABLE(htim);
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80071a0:	2000      	movs	r0, #0
 80071a2:	e055      	b.n	8007250 <HAL_TIM_PWM_Start+0x11c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071a4:	2904      	cmp	r1, #4
 80071a6:	d00c      	beq.n	80071c2 <HAL_TIM_PWM_Start+0x8e>
 80071a8:	2908      	cmp	r1, #8
 80071aa:	d011      	beq.n	80071d0 <HAL_TIM_PWM_Start+0x9c>
 80071ac:	290c      	cmp	r1, #12
 80071ae:	d016      	beq.n	80071de <HAL_TIM_PWM_Start+0xaa>
 80071b0:	2910      	cmp	r1, #16
 80071b2:	d01b      	beq.n	80071ec <HAL_TIM_PWM_Start+0xb8>
 80071b4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	bf18      	it	ne
 80071be:	2301      	movne	r3, #1
 80071c0:	e7c3      	b.n	800714a <HAL_TIM_PWM_Start+0x16>
 80071c2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	bf18      	it	ne
 80071cc:	2301      	movne	r3, #1
 80071ce:	e7bc      	b.n	800714a <HAL_TIM_PWM_Start+0x16>
 80071d0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	bf18      	it	ne
 80071da:	2301      	movne	r3, #1
 80071dc:	e7b5      	b.n	800714a <HAL_TIM_PWM_Start+0x16>
 80071de:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	bf18      	it	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	e7ae      	b.n	800714a <HAL_TIM_PWM_Start+0x16>
 80071ec:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	bf18      	it	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	e7a7      	b.n	800714a <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fa:	2804      	cmp	r0, #4
 80071fc:	d009      	beq.n	8007212 <HAL_TIM_PWM_Start+0xde>
 80071fe:	2808      	cmp	r0, #8
 8007200:	d00b      	beq.n	800721a <HAL_TIM_PWM_Start+0xe6>
 8007202:	280c      	cmp	r0, #12
 8007204:	d00d      	beq.n	8007222 <HAL_TIM_PWM_Start+0xee>
 8007206:	2810      	cmp	r0, #16
 8007208:	d00f      	beq.n	800722a <HAL_TIM_PWM_Start+0xf6>
 800720a:	2302      	movs	r3, #2
 800720c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007210:	e7a2      	b.n	8007158 <HAL_TIM_PWM_Start+0x24>
 8007212:	2302      	movs	r3, #2
 8007214:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007218:	e79e      	b.n	8007158 <HAL_TIM_PWM_Start+0x24>
 800721a:	2302      	movs	r3, #2
 800721c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007220:	e79a      	b.n	8007158 <HAL_TIM_PWM_Start+0x24>
 8007222:	2302      	movs	r3, #2
 8007224:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007228:	e796      	b.n	8007158 <HAL_TIM_PWM_Start+0x24>
 800722a:	2302      	movs	r3, #2
 800722c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007230:	e792      	b.n	8007158 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007232:	6899      	ldr	r1, [r3, #8]
 8007234:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <HAL_TIM_PWM_Start+0x12c>)
 8007236:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007238:	2a06      	cmp	r2, #6
 800723a:	d00a      	beq.n	8007252 <HAL_TIM_PWM_Start+0x11e>
 800723c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007240:	d009      	beq.n	8007256 <HAL_TIM_PWM_Start+0x122>
      __HAL_TIM_ENABLE(htim);
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	f042 0201 	orr.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800724a:	2000      	movs	r0, #0
 800724c:	e000      	b.n	8007250 <HAL_TIM_PWM_Start+0x11c>
    return HAL_ERROR;
 800724e:	2001      	movs	r0, #1
}
 8007250:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8007252:	2000      	movs	r0, #0
 8007254:	e7fc      	b.n	8007250 <HAL_TIM_PWM_Start+0x11c>
 8007256:	2000      	movs	r0, #0
 8007258:	e7fa      	b.n	8007250 <HAL_TIM_PWM_Start+0x11c>
 800725a:	bf00      	nop
 800725c:	40012c00 	.word	0x40012c00
 8007260:	00010007 	.word	0x00010007

08007264 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007264:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007268:	2b01      	cmp	r3, #1
 800726a:	d02f      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 800726c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800726e:	2301      	movs	r3, #1
 8007270:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007274:	2302      	movs	r3, #2
 8007276:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800727a:	6802      	ldr	r2, [r0, #0]
 800727c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800727e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007280:	4c13      	ldr	r4, [pc, #76]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8007282:	42a2      	cmp	r2, r4
 8007284:	d01d      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800728a:	680c      	ldr	r4, [r1, #0]
 800728c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800728e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007290:	6803      	ldr	r3, [r0, #0]
 8007292:	4a0f      	ldr	r2, [pc, #60]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d006      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d003      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800729e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d104      	bne.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072aa:	688a      	ldr	r2, [r1, #8]
 80072ac:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ae:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072b6:	2300      	movs	r3, #0
 80072b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80072bc:	4618      	mov	r0, r3
}
 80072be:	bc30      	pop	{r4, r5}
 80072c0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072c6:	684c      	ldr	r4, [r1, #4]
 80072c8:	4323      	orrs	r3, r4
 80072ca:	e7dc      	b.n	8007286 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80072cc:	2002      	movs	r0, #2
}
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00

080072d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d03b      	beq.n	8007354 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 80072dc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80072de:	2301      	movs	r3, #1
 80072e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072e4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ea:	688a      	ldr	r2, [r1, #8]
 80072ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f2:	684a      	ldr	r2, [r1, #4]
 80072f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072fa:	680a      	ldr	r2, [r1, #0]
 80072fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007302:	690a      	ldr	r2, [r1, #16]
 8007304:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800730a:	694a      	ldr	r2, [r1, #20]
 800730c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800730e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007312:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8007314:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007316:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800731a:	698a      	ldr	r2, [r1, #24]
 800731c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007320:	6802      	ldr	r2, [r0, #0]
 8007322:	4c0d      	ldr	r4, [pc, #52]	; (8007358 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8007324:	42a2      	cmp	r2, r4
 8007326:	d007      	beq.n	8007338 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007328:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800732a:	2300      	movs	r3, #0
 800732c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007330:	4618      	mov	r0, r3
}
 8007332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007336:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800733c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800733e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007346:	69cc      	ldr	r4, [r1, #28]
 8007348:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800734a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800734e:	6a09      	ldr	r1, [r1, #32]
 8007350:	430b      	orrs	r3, r1
 8007352:	e7e9      	b.n	8007328 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8007354:	2002      	movs	r0, #2
}
 8007356:	4770      	bx	lr
 8007358:	40012c00 	.word	0x40012c00

0800735c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800735c:	4770      	bx	lr

0800735e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800735e:	4770      	bx	lr

08007360 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007360:	4770      	bx	lr

08007362 <UART_EndTxTransfer>:
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007362:	6802      	ldr	r2, [r0, #0]
 8007364:	6813      	ldr	r3, [r2, #0]
 8007366:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800736a:	6013      	str	r3, [r2, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800736c:	2320      	movs	r3, #32
 800736e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8007370:	4770      	bx	lr

08007372 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007372:	6802      	ldr	r2, [r0, #0]
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800737a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737c:	6802      	ldr	r2, [r0, #0]
 800737e:	6893      	ldr	r3, [r2, #8]
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007386:	2320      	movs	r3, #32
 8007388:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	6603      	str	r3, [r0, #96]	; 0x60
}
 800738e:	4770      	bx	lr

08007390 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007390:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007392:	2b20      	cmp	r3, #32
 8007394:	d144      	bne.n	8007420 <HAL_UART_Receive_DMA+0x90>
{
 8007396:	b510      	push	{r4, lr}
 8007398:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800739a:	2900      	cmp	r1, #0
 800739c:	d042      	beq.n	8007424 <HAL_UART_Receive_DMA+0x94>
 800739e:	2a00      	cmp	r2, #0
 80073a0:	d042      	beq.n	8007428 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 80073a2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d040      	beq.n	800742c <HAL_UART_Receive_DMA+0x9c>
 80073aa:	2301      	movs	r3, #1
 80073ac:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 80073b0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80073b2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073ba:	2322      	movs	r3, #34	; 0x22
 80073bc:	6783      	str	r3, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 80073be:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80073c0:	b1db      	cbz	r3, 80073fa <HAL_UART_Receive_DMA+0x6a>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073c2:	491b      	ldr	r1, [pc, #108]	; (8007430 <HAL_UART_Receive_DMA+0xa0>)
 80073c4:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073c6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80073c8:	491a      	ldr	r1, [pc, #104]	; (8007434 <HAL_UART_Receive_DMA+0xa4>)
 80073ca:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073cc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80073ce:	491a      	ldr	r1, [pc, #104]	; (8007438 <HAL_UART_Receive_DMA+0xa8>)
 80073d0:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmarx->XferAbortCallback = NULL;
 80073d2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80073d4:	2100      	movs	r1, #0
 80073d6:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073d8:	6801      	ldr	r1, [r0, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80073de:	3124      	adds	r1, #36	; 0x24
 80073e0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80073e2:	f7fc fff9 	bl	80043d8 <HAL_DMA_Start_IT>
 80073e6:	b140      	cbz	r0, 80073fa <HAL_UART_Receive_DMA+0x6a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073e8:	2310      	movs	r3, #16
 80073ea:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80073ec:	2300      	movs	r3, #0
 80073ee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 80073f2:	2320      	movs	r3, #32
 80073f4:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 80073f6:	2001      	movs	r0, #1
 80073f8:	e011      	b.n	800741e <HAL_UART_Receive_DMA+0x8e>
    __HAL_UNLOCK(huart);
 80073fa:	2000      	movs	r0, #0
 80073fc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	6813      	ldr	r3, [r2, #0]
 8007404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007408:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740a:	6822      	ldr	r2, [r4, #0]
 800740c:	6893      	ldr	r3, [r2, #8]
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007414:	6822      	ldr	r2, [r4, #0]
 8007416:	6893      	ldr	r3, [r2, #8]
 8007418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800741c:	6093      	str	r3, [r2, #8]
}
 800741e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007420:	2002      	movs	r0, #2
}
 8007422:	4770      	bx	lr
      return HAL_ERROR;
 8007424:	2001      	movs	r0, #1
 8007426:	e7fa      	b.n	800741e <HAL_UART_Receive_DMA+0x8e>
 8007428:	2001      	movs	r0, #1
 800742a:	e7f8      	b.n	800741e <HAL_UART_Receive_DMA+0x8e>
    __HAL_LOCK(huart);
 800742c:	2002      	movs	r0, #2
 800742e:	e7f6      	b.n	800741e <HAL_UART_Receive_DMA+0x8e>
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800749b 	.word	0x0800749b
 8007438:	080074a7 	.word	0x080074a7

0800743c <HAL_UART_TxCpltCallback>:
}
 800743c:	4770      	bx	lr

0800743e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800743e:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007440:	6801      	ldr	r1, [r0, #0]
 8007442:	680a      	ldr	r2, [r1, #0]
 8007444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007448:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800744a:	2220      	movs	r2, #32
 800744c:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800744e:	2200      	movs	r2, #0
 8007450:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007452:	f7ff fff3 	bl	800743c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007456:	bd08      	pop	{r3, pc}

08007458 <HAL_UART_RxCpltCallback>:
}
 8007458:	4770      	bx	lr

0800745a <UART_DMAReceiveCplt>:
{
 800745a:	b508      	push	{r3, lr}
 800745c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800745e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f013 0f20 	tst.w	r3, #32
 8007468:	d113      	bne.n	8007492 <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007470:	6802      	ldr	r2, [r0, #0]
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007478:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747a:	6802      	ldr	r2, [r0, #0]
 800747c:	6893      	ldr	r3, [r2, #8]
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007484:	6802      	ldr	r2, [r0, #0]
 8007486:	6893      	ldr	r3, [r2, #8]
 8007488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748c:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800748e:	2320      	movs	r3, #32
 8007490:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_RxCpltCallback(huart);
 8007492:	f7ff ffe1 	bl	8007458 <HAL_UART_RxCpltCallback>
}
 8007496:	bd08      	pop	{r3, pc}

08007498 <HAL_UART_RxHalfCpltCallback>:
}
 8007498:	4770      	bx	lr

0800749a <UART_DMARxHalfCplt>:
{
 800749a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800749c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800749e:	f7ff fffb 	bl	8007498 <HAL_UART_RxHalfCpltCallback>
}
 80074a2:	bd08      	pop	{r3, pc}

080074a4 <HAL_UART_ErrorCallback>:
}
 80074a4:	4770      	bx	lr

080074a6 <UART_DMAError>:
{
 80074a6:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074aa:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074ac:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074b6:	d001      	beq.n	80074bc <UART_DMAError+0x16>
 80074b8:	2a21      	cmp	r2, #33	; 0x21
 80074ba:	d00e      	beq.n	80074da <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074c4:	d001      	beq.n	80074ca <UART_DMAError+0x24>
 80074c6:	2d22      	cmp	r5, #34	; 0x22
 80074c8:	d00e      	beq.n	80074e8 <UART_DMAError+0x42>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80074cc:	f043 0310 	orr.w	r3, r3, #16
 80074d0:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80074d2:	4620      	mov	r0, r4
 80074d4:	f7ff ffe6 	bl	80074a4 <HAL_UART_ErrorCallback>
}
 80074d8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80074e0:	4620      	mov	r0, r4
 80074e2:	f7ff ff3e 	bl	8007362 <UART_EndTxTransfer>
 80074e6:	e7e9      	b.n	80074bc <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80074ee:	4620      	mov	r0, r4
 80074f0:	f7ff ff3f 	bl	8007372 <UART_EndRxTransfer>
 80074f4:	e7e9      	b.n	80074ca <UART_DMAError+0x24>
	...

080074f8 <HAL_UART_IRQHandler>:
{
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074fc:	6801      	ldr	r1, [r0, #0]
 80074fe:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007500:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007502:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007504:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8007508:	401a      	ands	r2, r3
 800750a:	d105      	bne.n	8007518 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800750c:	f013 0f20 	tst.w	r3, #32
 8007510:	d002      	beq.n	8007518 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007512:	f010 0f20 	tst.w	r0, #32
 8007516:	d11c      	bne.n	8007552 <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8007518:	b12a      	cbz	r2, 8007526 <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800751a:	f015 0201 	ands.w	r2, r5, #1
 800751e:	d11e      	bne.n	800755e <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007520:	4e54      	ldr	r6, [pc, #336]	; (8007674 <HAL_UART_IRQHandler+0x17c>)
 8007522:	4230      	tst	r0, r6
 8007524:	d11b      	bne.n	800755e <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007526:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800752a:	d003      	beq.n	8007534 <HAL_UART_IRQHandler+0x3c>
 800752c:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8007530:	f040 808e 	bne.w	8007650 <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007534:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007538:	d003      	beq.n	8007542 <HAL_UART_IRQHandler+0x4a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800753a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800753e:	f040 808e 	bne.w	800765e <HAL_UART_IRQHandler+0x166>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007542:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007546:	d003      	beq.n	8007550 <HAL_UART_IRQHandler+0x58>
 8007548:	f010 0f40 	tst.w	r0, #64	; 0x40
 800754c:	f040 808e 	bne.w	800766c <HAL_UART_IRQHandler+0x174>
}
 8007550:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8007552:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0fb      	beq.n	8007550 <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 8007558:	4620      	mov	r0, r4
 800755a:	4798      	blx	r3
      return;
 800755c:	e7f8      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800755e:	f013 0f01 	tst.w	r3, #1
 8007562:	d007      	beq.n	8007574 <HAL_UART_IRQHandler+0x7c>
 8007564:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007568:	d004      	beq.n	8007574 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800756a:	2501      	movs	r5, #1
 800756c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800756e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007570:	4329      	orrs	r1, r5
 8007572:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007574:	f013 0f02 	tst.w	r3, #2
 8007578:	d007      	beq.n	800758a <HAL_UART_IRQHandler+0x92>
 800757a:	b132      	cbz	r2, 800758a <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800757c:	6821      	ldr	r1, [r4, #0]
 800757e:	2502      	movs	r5, #2
 8007580:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007582:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007584:	f041 0104 	orr.w	r1, r1, #4
 8007588:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800758a:	f013 0f04 	tst.w	r3, #4
 800758e:	d007      	beq.n	80075a0 <HAL_UART_IRQHandler+0xa8>
 8007590:	b132      	cbz	r2, 80075a0 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007592:	6821      	ldr	r1, [r4, #0]
 8007594:	2504      	movs	r5, #4
 8007596:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007598:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800759a:	f041 0102 	orr.w	r1, r1, #2
 800759e:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075a0:	f013 0f08 	tst.w	r3, #8
 80075a4:	d009      	beq.n	80075ba <HAL_UART_IRQHandler+0xc2>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075a6:	f010 0f20 	tst.w	r0, #32
 80075aa:	d100      	bne.n	80075ae <HAL_UART_IRQHandler+0xb6>
 80075ac:	b12a      	cbz	r2, 80075ba <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	2108      	movs	r1, #8
 80075b2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075b4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80075b6:	430a      	orrs	r2, r1
 80075b8:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075ba:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80075be:	d00a      	beq.n	80075d6 <HAL_UART_IRQHandler+0xde>
 80075c0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80075c4:	d007      	beq.n	80075d6 <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075cc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075ce:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80075d0:	f042 0220 	orr.w	r2, r2, #32
 80075d4:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075d6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80075d8:	2a00      	cmp	r2, #0
 80075da:	d0b9      	beq.n	8007550 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075dc:	f013 0f20 	tst.w	r3, #32
 80075e0:	d006      	beq.n	80075f0 <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075e2:	f010 0f20 	tst.w	r0, #32
 80075e6:	d003      	beq.n	80075f0 <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 80075e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80075ea:	b10b      	cbz	r3, 80075f0 <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 80075ec:	4620      	mov	r0, r4
 80075ee:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80075f0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075fa:	d102      	bne.n	8007602 <HAL_UART_IRQHandler+0x10a>
 80075fc:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007600:	d020      	beq.n	8007644 <HAL_UART_IRQHandler+0x14c>
        UART_EndRxTransfer(huart);
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff feb5 	bl	8007372 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007610:	d014      	beq.n	800763c <HAL_UART_IRQHandler+0x144>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007618:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800761a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800761c:	b153      	cbz	r3, 8007634 <HAL_UART_IRQHandler+0x13c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800761e:	4a16      	ldr	r2, [pc, #88]	; (8007678 <HAL_UART_IRQHandler+0x180>)
 8007620:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007622:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007624:	f7fc ff13 	bl	800444e <HAL_DMA_Abort_IT>
 8007628:	2800      	cmp	r0, #0
 800762a:	d091      	beq.n	8007550 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800762c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800762e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007630:	4798      	blx	r3
 8007632:	e78d      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8007634:	4620      	mov	r0, r4
 8007636:	f7ff ff35 	bl	80074a4 <HAL_UART_ErrorCallback>
 800763a:	e789      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 800763c:	4620      	mov	r0, r4
 800763e:	f7ff ff31 	bl	80074a4 <HAL_UART_ErrorCallback>
 8007642:	e785      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff ff2d 	bl	80074a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764a:	2300      	movs	r3, #0
 800764c:	67e3      	str	r3, [r4, #124]	; 0x7c
    return;
 800764e:	e77f      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007650:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007654:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007656:	4620      	mov	r0, r4
 8007658:	f000 fa85 	bl	8007b66 <HAL_UARTEx_WakeupCallback>
    return;
 800765c:	e778      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 800765e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007660:	2b00      	cmp	r3, #0
 8007662:	f43f af75 	beq.w	8007550 <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 8007666:	4620      	mov	r0, r4
 8007668:	4798      	blx	r3
    return;
 800766a:	e771      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff fee6 	bl	800743e <UART_EndTransmit_IT>
    return;
 8007672:	e76d      	b.n	8007550 <HAL_UART_IRQHandler+0x58>
 8007674:	04000120 	.word	0x04000120
 8007678:	0800767d 	.word	0x0800767d

0800767c <UART_DMAAbortOnError>:
{
 800767c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007686:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800768a:	f7ff ff0b 	bl	80074a4 <HAL_UART_ErrorCallback>
}
 800768e:	bd08      	pop	{r3, pc}

08007690 <UART_SetConfig>:
{
 8007690:	b5d0      	push	{r4, r6, r7, lr}
 8007692:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007694:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007696:	6883      	ldr	r3, [r0, #8]
 8007698:	6902      	ldr	r2, [r0, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	6942      	ldr	r2, [r0, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	69c2      	ldr	r2, [r0, #28]
 80076a2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	4a9a      	ldr	r2, [pc, #616]	; (8007910 <UART_SetConfig+0x280>)
 80076a8:	4002      	ands	r2, r0
 80076aa:	4313      	orrs	r3, r2
 80076ac:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	6853      	ldr	r3, [r2, #4]
 80076b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076b6:	68e1      	ldr	r1, [r4, #12]
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076bc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	4b94      	ldr	r3, [pc, #592]	; (8007914 <UART_SetConfig+0x284>)
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d001      	beq.n	80076ca <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80076c6:	6a23      	ldr	r3, [r4, #32]
 80076c8:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076ca:	6893      	ldr	r3, [r2, #8]
 80076cc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076d0:	430b      	orrs	r3, r1
 80076d2:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	4b90      	ldr	r3, [pc, #576]	; (8007918 <UART_SetConfig+0x288>)
 80076d8:	429a      	cmp	r2, r3
 80076da:	d01f      	beq.n	800771c <UART_SetConfig+0x8c>
 80076dc:	4b8f      	ldr	r3, [pc, #572]	; (800791c <UART_SetConfig+0x28c>)
 80076de:	429a      	cmp	r2, r3
 80076e0:	d030      	beq.n	8007744 <UART_SetConfig+0xb4>
 80076e2:	4b8f      	ldr	r3, [pc, #572]	; (8007920 <UART_SetConfig+0x290>)
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d046      	beq.n	8007776 <UART_SetConfig+0xe6>
 80076e8:	4b8a      	ldr	r3, [pc, #552]	; (8007914 <UART_SetConfig+0x284>)
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d055      	beq.n	800779a <UART_SetConfig+0x10a>
 80076ee:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80076f0:	4988      	ldr	r1, [pc, #544]	; (8007914 <UART_SetConfig+0x284>)
 80076f2:	428a      	cmp	r2, r1
 80076f4:	d07a      	beq.n	80077ec <UART_SetConfig+0x15c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f6:	69e0      	ldr	r0, [r4, #28]
 80076f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80076fc:	f000 80a5 	beq.w	800784a <UART_SetConfig+0x1ba>
    switch (clocksource)
 8007700:	2b08      	cmp	r3, #8
 8007702:	f200 80fb 	bhi.w	80078fc <UART_SetConfig+0x26c>
 8007706:	e8df f013 	tbh	[pc, r3, lsl #1]
 800770a:	00cd      	.short	0x00cd
 800770c:	00cb00e0 	.word	0x00cb00e0
 8007710:	00e300f9 	.word	0x00e300f9
 8007714:	00f900f9 	.word	0x00f900f9
 8007718:	00e600f9 	.word	0x00e600f9
  UART_GETCLOCKSOURCE(huart, clocksource);
 800771c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007724:	f003 0303 	and.w	r3, r3, #3
 8007728:	2b03      	cmp	r3, #3
 800772a:	d809      	bhi.n	8007740 <UART_SetConfig+0xb0>
 800772c:	e8df f003 	tbb	[pc, r3]
 8007730:	064a0402 	.word	0x064a0402
 8007734:	2301      	movs	r3, #1
 8007736:	e7db      	b.n	80076f0 <UART_SetConfig+0x60>
 8007738:	2304      	movs	r3, #4
 800773a:	e7d9      	b.n	80076f0 <UART_SetConfig+0x60>
 800773c:	2308      	movs	r3, #8
 800773e:	e7d7      	b.n	80076f0 <UART_SetConfig+0x60>
 8007740:	2310      	movs	r3, #16
 8007742:	e7d5      	b.n	80076f0 <UART_SetConfig+0x60>
 8007744:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774c:	f003 030c 	and.w	r3, r3, #12
 8007750:	2b0c      	cmp	r3, #12
 8007752:	d80e      	bhi.n	8007772 <UART_SetConfig+0xe2>
 8007754:	e8df f003 	tbb	[pc, r3]
 8007758:	0d0d0d07 	.word	0x0d0d0d07
 800775c:	0d0d0d09 	.word	0x0d0d0d09
 8007760:	0d0d0d38 	.word	0x0d0d0d38
 8007764:	0b          	.byte	0x0b
 8007765:	00          	.byte	0x00
 8007766:	2300      	movs	r3, #0
 8007768:	e7c2      	b.n	80076f0 <UART_SetConfig+0x60>
 800776a:	2304      	movs	r3, #4
 800776c:	e7c0      	b.n	80076f0 <UART_SetConfig+0x60>
 800776e:	2308      	movs	r3, #8
 8007770:	e7be      	b.n	80076f0 <UART_SetConfig+0x60>
 8007772:	2310      	movs	r3, #16
 8007774:	e7bc      	b.n	80076f0 <UART_SetConfig+0x60>
 8007776:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007782:	2b20      	cmp	r3, #32
 8007784:	d022      	beq.n	80077cc <UART_SetConfig+0x13c>
 8007786:	d804      	bhi.n	8007792 <UART_SetConfig+0x102>
 8007788:	b313      	cbz	r3, 80077d0 <UART_SetConfig+0x140>
 800778a:	2b10      	cmp	r3, #16
 800778c:	d122      	bne.n	80077d4 <UART_SetConfig+0x144>
 800778e:	2304      	movs	r3, #4
 8007790:	e7ae      	b.n	80076f0 <UART_SetConfig+0x60>
 8007792:	2b30      	cmp	r3, #48	; 0x30
 8007794:	d120      	bne.n	80077d8 <UART_SetConfig+0x148>
 8007796:	2308      	movs	r3, #8
 8007798:	e7aa      	b.n	80076f0 <UART_SetConfig+0x60>
 800779a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077aa:	d017      	beq.n	80077dc <UART_SetConfig+0x14c>
 80077ac:	d805      	bhi.n	80077ba <UART_SetConfig+0x12a>
 80077ae:	b1bb      	cbz	r3, 80077e0 <UART_SetConfig+0x150>
 80077b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b4:	d116      	bne.n	80077e4 <UART_SetConfig+0x154>
 80077b6:	2304      	movs	r3, #4
 80077b8:	e79a      	b.n	80076f0 <UART_SetConfig+0x60>
 80077ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077be:	d113      	bne.n	80077e8 <UART_SetConfig+0x158>
 80077c0:	2308      	movs	r3, #8
 80077c2:	e795      	b.n	80076f0 <UART_SetConfig+0x60>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e793      	b.n	80076f0 <UART_SetConfig+0x60>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e791      	b.n	80076f0 <UART_SetConfig+0x60>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e78f      	b.n	80076f0 <UART_SetConfig+0x60>
 80077d0:	2300      	movs	r3, #0
 80077d2:	e78d      	b.n	80076f0 <UART_SetConfig+0x60>
 80077d4:	2310      	movs	r3, #16
 80077d6:	e78b      	b.n	80076f0 <UART_SetConfig+0x60>
 80077d8:	2310      	movs	r3, #16
 80077da:	e789      	b.n	80076f0 <UART_SetConfig+0x60>
 80077dc:	2302      	movs	r3, #2
 80077de:	e787      	b.n	80076f0 <UART_SetConfig+0x60>
 80077e0:	2300      	movs	r3, #0
 80077e2:	e785      	b.n	80076f0 <UART_SetConfig+0x60>
 80077e4:	2310      	movs	r3, #16
 80077e6:	e783      	b.n	80076f0 <UART_SetConfig+0x60>
 80077e8:	2310      	movs	r3, #16
 80077ea:	e781      	b.n	80076f0 <UART_SetConfig+0x60>
    switch (clocksource)
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d875      	bhi.n	80078dc <UART_SetConfig+0x24c>
 80077f0:	e8df f003 	tbb	[pc, r3]
 80077f4:	74297408 	.word	0x74297408
 80077f8:	74747426 	.word	0x74747426
 80077fc:	05          	.byte	0x05
 80077fd:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 80077fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007802:	e003      	b.n	800780c <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007804:	f7fe ffb6 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007808:	2800      	cmp	r0, #0
 800780a:	d069      	beq.n	80078e0 <UART_SetConfig+0x250>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800780c:	6862      	ldr	r2, [r4, #4]
 800780e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8007812:	4283      	cmp	r3, r0
 8007814:	d866      	bhi.n	80078e4 <UART_SetConfig+0x254>
 8007816:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800781a:	d865      	bhi.n	80078e8 <UART_SetConfig+0x258>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800781c:	2300      	movs	r3, #0
 800781e:	0e07      	lsrs	r7, r0, #24
 8007820:	0206      	lsls	r6, r0, #8
 8007822:	0850      	lsrs	r0, r2, #1
 8007824:	1830      	adds	r0, r6, r0
 8007826:	f147 0100 	adc.w	r1, r7, #0
 800782a:	f7f9 f9bd 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800782e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007832:	4b3c      	ldr	r3, [pc, #240]	; (8007924 <UART_SetConfig+0x294>)
 8007834:	429a      	cmp	r2, r3
 8007836:	d859      	bhi.n	80078ec <UART_SetConfig+0x25c>
          huart->Instance->BRR = usartdiv;
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	60d8      	str	r0, [r3, #12]
 800783c:	2000      	movs	r0, #0
 800783e:	e062      	b.n	8007906 <UART_SetConfig+0x276>
        pclk = HAL_RCC_GetSysClockFreq();
 8007840:	f7fe fb1c 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
        break;
 8007844:	e7e0      	b.n	8007808 <UART_SetConfig+0x178>
        pclk = (uint32_t) HSI_VALUE;
 8007846:	4838      	ldr	r0, [pc, #224]	; (8007928 <UART_SetConfig+0x298>)
 8007848:	e7e0      	b.n	800780c <UART_SetConfig+0x17c>
    switch (clocksource)
 800784a:	2b08      	cmp	r3, #8
 800784c:	d850      	bhi.n	80078f0 <UART_SetConfig+0x260>
 800784e:	e8df f003 	tbb	[pc, r3]
 8007852:	2107      	.short	0x2107
 8007854:	4f244f05 	.word	0x4f244f05
 8007858:	4f4f      	.short	0x4f4f
 800785a:	0b          	.byte	0x0b
 800785b:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800785c:	4832      	ldr	r0, [pc, #200]	; (8007928 <UART_SetConfig+0x298>)
 800785e:	e003      	b.n	8007868 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007860:	f7fe ff88 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007864:	2800      	cmp	r0, #0
 8007866:	d045      	beq.n	80078f4 <UART_SetConfig+0x264>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007868:	6862      	ldr	r2, [r4, #4]
 800786a:	0853      	lsrs	r3, r2, #1
 800786c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007870:	fbb0 f0f2 	udiv	r0, r0, r2
 8007874:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007876:	f1a0 0210 	sub.w	r2, r0, #16
 800787a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800787e:	429a      	cmp	r2, r3
 8007880:	d83a      	bhi.n	80078f8 <UART_SetConfig+0x268>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007882:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007886:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800788a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	60d8      	str	r0, [r3, #12]
 8007890:	2000      	movs	r0, #0
 8007892:	e038      	b.n	8007906 <UART_SetConfig+0x276>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007894:	f7fe ff80 	bl	8006798 <HAL_RCC_GetPCLK2Freq>
        break;
 8007898:	e7e4      	b.n	8007864 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 800789a:	f7fe faef 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
        break;
 800789e:	e7e1      	b.n	8007864 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078a0:	4821      	ldr	r0, [pc, #132]	; (8007928 <UART_SetConfig+0x298>)
 80078a2:	e002      	b.n	80078aa <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a4:	f7fe ff66 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80078a8:	b350      	cbz	r0, 8007900 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078aa:	6863      	ldr	r3, [r4, #4]
 80078ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80078b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80078b4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b6:	f1a0 0210 	sub.w	r2, r0, #16
 80078ba:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80078be:	429a      	cmp	r2, r3
 80078c0:	d820      	bhi.n	8007904 <UART_SetConfig+0x274>
        huart->Instance->BRR = usartdiv;
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	60d8      	str	r0, [r3, #12]
 80078c6:	2000      	movs	r0, #0
 80078c8:	e01d      	b.n	8007906 <UART_SetConfig+0x276>
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ca:	f7fe ff65 	bl	8006798 <HAL_RCC_GetPCLK2Freq>
        break;
 80078ce:	e7eb      	b.n	80078a8 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 80078d0:	f7fe fad4 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
        break;
 80078d4:	e7e8      	b.n	80078a8 <UART_SetConfig+0x218>
        pclk = (uint32_t) LSE_VALUE;
 80078d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80078da:	e7e6      	b.n	80078aa <UART_SetConfig+0x21a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80078dc:	2001      	movs	r0, #1
 80078de:	e012      	b.n	8007906 <UART_SetConfig+0x276>
 80078e0:	2000      	movs	r0, #0
 80078e2:	e010      	b.n	8007906 <UART_SetConfig+0x276>
        ret = HAL_ERROR;
 80078e4:	2001      	movs	r0, #1
 80078e6:	e00e      	b.n	8007906 <UART_SetConfig+0x276>
 80078e8:	2001      	movs	r0, #1
 80078ea:	e00c      	b.n	8007906 <UART_SetConfig+0x276>
          ret = HAL_ERROR;
 80078ec:	2001      	movs	r0, #1
 80078ee:	e00a      	b.n	8007906 <UART_SetConfig+0x276>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f0:	2001      	movs	r0, #1
 80078f2:	e008      	b.n	8007906 <UART_SetConfig+0x276>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e006      	b.n	8007906 <UART_SetConfig+0x276>
        ret = HAL_ERROR;
 80078f8:	2001      	movs	r0, #1
 80078fa:	e004      	b.n	8007906 <UART_SetConfig+0x276>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078fc:	2001      	movs	r0, #1
 80078fe:	e002      	b.n	8007906 <UART_SetConfig+0x276>
 8007900:	2000      	movs	r0, #0
 8007902:	e000      	b.n	8007906 <UART_SetConfig+0x276>
        ret = HAL_ERROR;
 8007904:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800790a:	6663      	str	r3, [r4, #100]	; 0x64
}
 800790c:	bdd0      	pop	{r4, r6, r7, pc}
 800790e:	bf00      	nop
 8007910:	efff69f3 	.word	0xefff69f3
 8007914:	40008000 	.word	0x40008000
 8007918:	40013800 	.word	0x40013800
 800791c:	40004400 	.word	0x40004400
 8007920:	40004800 	.word	0x40004800
 8007924:	000ffcff 	.word	0x000ffcff
 8007928:	00f42400 	.word	0x00f42400

0800792c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800792c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800792e:	f013 0f01 	tst.w	r3, #1
 8007932:	d006      	beq.n	8007942 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007934:	6802      	ldr	r2, [r0, #0]
 8007936:	6853      	ldr	r3, [r2, #4]
 8007938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800793c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800793e:	430b      	orrs	r3, r1
 8007940:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007942:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007944:	f013 0f02 	tst.w	r3, #2
 8007948:	d006      	beq.n	8007958 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800794a:	6802      	ldr	r2, [r0, #0]
 800794c:	6853      	ldr	r3, [r2, #4]
 800794e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007952:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007954:	430b      	orrs	r3, r1
 8007956:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007958:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800795a:	f013 0f04 	tst.w	r3, #4
 800795e:	d006      	beq.n	800796e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007960:	6802      	ldr	r2, [r0, #0]
 8007962:	6853      	ldr	r3, [r2, #4]
 8007964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007968:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800796a:	430b      	orrs	r3, r1
 800796c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800796e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007970:	f013 0f08 	tst.w	r3, #8
 8007974:	d006      	beq.n	8007984 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007976:	6802      	ldr	r2, [r0, #0]
 8007978:	6853      	ldr	r3, [r2, #4]
 800797a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800797e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007980:	430b      	orrs	r3, r1
 8007982:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007984:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007986:	f013 0f10 	tst.w	r3, #16
 800798a:	d006      	beq.n	800799a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800798c:	6802      	ldr	r2, [r0, #0]
 800798e:	6893      	ldr	r3, [r2, #8]
 8007990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007994:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007996:	430b      	orrs	r3, r1
 8007998:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800799a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800799c:	f013 0f20 	tst.w	r3, #32
 80079a0:	d006      	beq.n	80079b0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079a2:	6802      	ldr	r2, [r0, #0]
 80079a4:	6893      	ldr	r3, [r2, #8]
 80079a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079b6:	d00a      	beq.n	80079ce <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079b8:	6802      	ldr	r2, [r0, #0]
 80079ba:	6853      	ldr	r3, [r2, #4]
 80079bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80079c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079cc:	d00b      	beq.n	80079e6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079d4:	d006      	beq.n	80079e4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079d6:	6802      	ldr	r2, [r0, #0]
 80079d8:	6853      	ldr	r3, [r2, #4]
 80079da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80079de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80079e0:	430b      	orrs	r3, r1
 80079e2:	6053      	str	r3, [r2, #4]
}
 80079e4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079e6:	6802      	ldr	r2, [r0, #0]
 80079e8:	6853      	ldr	r3, [r2, #4]
 80079ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80079ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80079f0:	430b      	orrs	r3, r1
 80079f2:	6053      	str	r3, [r2, #4]
 80079f4:	e7eb      	b.n	80079ce <UART_AdvFeatureConfig+0xa2>

080079f6 <UART_WaitOnFlagUntilTimeout>:
{
 80079f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	4616      	mov	r6, r2
 8007a00:	4699      	mov	r9, r3
 8007a02:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a06:	682c      	ldr	r4, [r5, #0]
 8007a08:	69e4      	ldr	r4, [r4, #28]
 8007a0a:	ea37 0304 	bics.w	r3, r7, r4
 8007a0e:	bf0c      	ite	eq
 8007a10:	2401      	moveq	r4, #1
 8007a12:	2400      	movne	r4, #0
 8007a14:	42b4      	cmp	r4, r6
 8007a16:	d13c      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8007a18:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007a1c:	d0f3      	beq.n	8007a06 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a1e:	f7fb fed7 	bl	80037d0 <HAL_GetTick>
 8007a22:	eba0 0009 	sub.w	r0, r0, r9
 8007a26:	4540      	cmp	r0, r8
 8007a28:	d821      	bhi.n	8007a6e <UART_WaitOnFlagUntilTimeout+0x78>
 8007a2a:	f1b8 0f00 	cmp.w	r8, #0
 8007a2e:	d01e      	beq.n	8007a6e <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	f012 0f04 	tst.w	r2, #4
 8007a38:	d0e5      	beq.n	8007a06 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007a40:	d0e1      	beq.n	8007a06 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a46:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a48:	682a      	ldr	r2, [r5, #0]
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a50:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a52:	682a      	ldr	r2, [r5, #0]
 8007a54:	6893      	ldr	r3, [r2, #8]
 8007a56:	f023 0301 	bic.w	r3, r3, #1
 8007a5a:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007a5c:	2320      	movs	r3, #32
 8007a5e:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007a60:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a62:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8007a64:	2300      	movs	r3, #0
 8007a66:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          return HAL_TIMEOUT;
 8007a6a:	2003      	movs	r0, #3
 8007a6c:	e012      	b.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a6e:	682a      	ldr	r2, [r5, #0]
 8007a70:	6813      	ldr	r3, [r2, #0]
 8007a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a76:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a78:	682a      	ldr	r2, [r5, #0]
 8007a7a:	6893      	ldr	r3, [r2, #8]
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007a82:	2320      	movs	r3, #32
 8007a84:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007a86:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8007a8e:	2003      	movs	r0, #3
 8007a90:	e000      	b.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x9e>
  return HAL_OK;
 8007a92:	2000      	movs	r0, #0
}
 8007a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007a98 <UART_CheckIdleState>:
{
 8007a98:	b530      	push	{r4, r5, lr}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8007aa2:	f7fb fe95 	bl	80037d0 <HAL_GetTick>
 8007aa6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f013 0f08 	tst.w	r3, #8
 8007ab0:	d10c      	bne.n	8007acc <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f013 0f04 	tst.w	r3, #4
 8007aba:	d115      	bne.n	8007ae8 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8007abc:	2320      	movs	r3, #32
 8007abe:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8007ac8:	b003      	add	sp, #12
 8007aca:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7ff ff8b 	bl	80079f6 <UART_WaitOnFlagUntilTimeout>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d0e6      	beq.n	8007ab2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8007ae4:	2003      	movs	r0, #3
 8007ae6:	e7ef      	b.n	8007ac8 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	462b      	mov	r3, r5
 8007af0:	2200      	movs	r2, #0
 8007af2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7ff ff7d 	bl	80079f6 <UART_WaitOnFlagUntilTimeout>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d0dd      	beq.n	8007abc <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8007b00:	2003      	movs	r0, #3
 8007b02:	e7e1      	b.n	8007ac8 <UART_CheckIdleState+0x30>

08007b04 <HAL_UART_Init>:
  if (huart == NULL)
 8007b04:	b368      	cbz	r0, 8007b62 <HAL_UART_Init+0x5e>
{
 8007b06:	b510      	push	{r4, lr}
 8007b08:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007b0c:	b303      	cbz	r3, 8007b50 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007b0e:	2324      	movs	r3, #36	; 0x24
 8007b10:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	6813      	ldr	r3, [r2, #0]
 8007b16:	f023 0301 	bic.w	r3, r3, #1
 8007b1a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f7ff fdb7 	bl	8007690 <UART_SetConfig>
 8007b22:	2801      	cmp	r0, #1
 8007b24:	d013      	beq.n	8007b4e <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b28:	b9bb      	cbnz	r3, 8007b5a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	6853      	ldr	r3, [r2, #4]
 8007b2e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007b32:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	6893      	ldr	r3, [r2, #8]
 8007b38:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007b3c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	6813      	ldr	r3, [r2, #0]
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f7ff ffa5 	bl	8007a98 <UART_CheckIdleState>
}
 8007b4e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007b50:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8007b54:	f7fb fda0 	bl	8003698 <HAL_UART_MspInit>
 8007b58:	e7d9      	b.n	8007b0e <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff fee6 	bl	800792c <UART_AdvFeatureConfig>
 8007b60:	e7e3      	b.n	8007b2a <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8007b62:	2001      	movs	r0, #1
}
 8007b64:	4770      	bx	lr

08007b66 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b66:	4770      	bx	lr

08007b68 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b68:	b084      	sub	sp, #16
 8007b6a:	a801      	add	r0, sp, #4
 8007b6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8007b70:	2000      	movs	r0, #0
 8007b72:	b004      	add	sp, #16
 8007b74:	4770      	bx	lr

08007b76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007b76:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007b7e:	f64b 7280 	movw	r2, #49024	; 0xbf80
 8007b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8007b86:	4770      	bx	lr

08007b88 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007b88:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8007b8c:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8007b90:	045b      	lsls	r3, r3, #17
 8007b92:	0c5b      	lsrs	r3, r3, #17
 8007b94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8007b98:	2000      	movs	r0, #0
 8007b9a:	4770      	bx	lr

08007b9c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	4770      	bx	lr

08007ba0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	b410      	push	{r4}
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	a802      	add	r0, sp, #8
 8007ba8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007bac:	2301      	movs	r3, #1
 8007bae:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007bb8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007bbc:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8007bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc4:	b004      	add	sp, #16
 8007bc6:	4770      	bx	lr

08007bc8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bc8:	b430      	push	{r4, r5}
 8007bca:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007bcc:	780a      	ldrb	r2, [r1, #0]
 8007bce:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8007bd2:	b2a4      	uxth	r4, r4
 8007bd4:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8007bd8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8007bdc:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 8007bde:	78c8      	ldrb	r0, [r1, #3]
 8007be0:	2803      	cmp	r0, #3
 8007be2:	d85b      	bhi.n	8007c9c <USB_ActivateEndpoint+0xd4>
 8007be4:	e8df f000 	tbb	[pc, r0]
 8007be8:	5202564f 	.word	0x5202564f
 8007bec:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007bee:	f248 0580 	movw	r5, #32896	; 0x8080
 8007bf2:	432c      	orrs	r4, r5
 8007bf4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007bf8:	780c      	ldrb	r4, [r1, #0]
 8007bfa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007bfe:	b212      	sxth	r2, r2
 8007c00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007c04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007c08:	4322      	orrs	r2, r4
 8007c0a:	b292      	uxth	r2, r2
 8007c0c:	432a      	orrs	r2, r5
 8007c0e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8007c12:	7b0a      	ldrb	r2, [r1, #12]
 8007c14:	2a00      	cmp	r2, #0
 8007c16:	f040 80b6 	bne.w	8007d86 <USB_ActivateEndpoint+0x1be>
  {
    if (ep->is_in != 0U)
 8007c1a:	784a      	ldrb	r2, [r1, #1]
 8007c1c:	2a00      	cmp	r2, #0
 8007c1e:	d04e      	beq.n	8007cbe <USB_ActivateEndpoint+0xf6>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c20:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007c24:	fa13 f282 	uxtah	r2, r3, r2
 8007c28:	780c      	ldrb	r4, [r1, #0]
 8007c2a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007c2e:	88cc      	ldrh	r4, [r1, #6]
 8007c30:	0864      	lsrs	r4, r4, #1
 8007c32:	0064      	lsls	r4, r4, #1
 8007c34:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c38:	780c      	ldrb	r4, [r1, #0]
 8007c3a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007c3e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007c42:	d00c      	beq.n	8007c5e <USB_ActivateEndpoint+0x96>
 8007c44:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007c48:	b292      	uxth	r2, r2
 8007c4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007c4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c56:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007c5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007c5e:	78ca      	ldrb	r2, [r1, #3]
 8007c60:	2a01      	cmp	r2, #1
 8007c62:	d01d      	beq.n	8007ca0 <USB_ActivateEndpoint+0xd8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c64:	7809      	ldrb	r1, [r1, #0]
 8007c66:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c74:	f082 0220 	eor.w	r2, r2, #32
 8007c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c80:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007c84:	e064      	b.n	8007d50 <USB_ActivateEndpoint+0x188>
      wEpRegVal |= USB_EP_CONTROL;
 8007c86:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      break;
 8007c8a:	e7b0      	b.n	8007bee <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8007c8c:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8007c90:	2000      	movs	r0, #0
      break;
 8007c92:	e7ac      	b.n	8007bee <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007c94:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8007c98:	2000      	movs	r0, #0
      break;
 8007c9a:	e7a8      	b.n	8007bee <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	e7a6      	b.n	8007bee <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ca0:	7809      	ldrb	r1, [r1, #0]
 8007ca2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007ca6:	b292      	uxth	r2, r2
 8007ca8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cb8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007cbc:	e048      	b.n	8007d50 <USB_ActivateEndpoint+0x188>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007cbe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007cc2:	fa13 f282 	uxtah	r2, r3, r2
 8007cc6:	780c      	ldrb	r4, [r1, #0]
 8007cc8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007ccc:	88cc      	ldrh	r4, [r1, #6]
 8007cce:	0864      	lsrs	r4, r4, #1
 8007cd0:	0064      	lsls	r4, r4, #1
 8007cd2:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007cd6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007cda:	fa13 f282 	uxtah	r2, r3, r2
 8007cde:	780c      	ldrb	r4, [r1, #0]
 8007ce0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007ce4:	690c      	ldr	r4, [r1, #16]
 8007ce6:	bbac      	cbnz	r4, 8007d54 <USB_ActivateEndpoint+0x18c>
 8007ce8:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8007cec:	b2a4      	uxth	r4, r4
 8007cee:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8007cf2:	b2a4      	uxth	r4, r4
 8007cf4:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8007cf8:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8007cfc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007d00:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007d04:	b2a4      	uxth	r4, r4
 8007d06:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d0a:	780c      	ldrb	r4, [r1, #0]
 8007d0c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007d10:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007d14:	d00c      	beq.n	8007d30 <USB_ActivateEndpoint+0x168>
 8007d16:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007d1a:	b292      	uxth	r2, r2
 8007d1c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007d20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d24:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d2c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d30:	7809      	ldrb	r1, [r1, #0]
 8007d32:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007d36:	b292      	uxth	r2, r2
 8007d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d40:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8007d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d4c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8007d50:	bc30      	pop	{r4, r5}
 8007d52:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007d54:	2c3e      	cmp	r4, #62	; 0x3e
 8007d56:	d809      	bhi.n	8007d6c <USB_ActivateEndpoint+0x1a4>
 8007d58:	0865      	lsrs	r5, r4, #1
 8007d5a:	f014 0f01 	tst.w	r4, #1
 8007d5e:	d000      	beq.n	8007d62 <USB_ActivateEndpoint+0x19a>
 8007d60:	3501      	adds	r5, #1
 8007d62:	02ad      	lsls	r5, r5, #10
 8007d64:	b2ad      	uxth	r5, r5
 8007d66:	f8a2 5406 	strh.w	r5, [r2, #1030]	; 0x406
 8007d6a:	e7ce      	b.n	8007d0a <USB_ActivateEndpoint+0x142>
 8007d6c:	0965      	lsrs	r5, r4, #5
 8007d6e:	f014 0f1f 	tst.w	r4, #31
 8007d72:	d100      	bne.n	8007d76 <USB_ActivateEndpoint+0x1ae>
 8007d74:	3d01      	subs	r5, #1
 8007d76:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8007d7a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007d7e:	b2a4      	uxth	r4, r4
 8007d80:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8007d84:	e7c1      	b.n	8007d0a <USB_ActivateEndpoint+0x142>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007d86:	780c      	ldrb	r4, [r1, #0]
 8007d88:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007d8c:	b292      	uxth	r2, r2
 8007d8e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007d92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d96:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8007d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d9e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007da2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007da6:	fa13 f282 	uxtah	r2, r3, r2
 8007daa:	780c      	ldrb	r4, [r1, #0]
 8007dac:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007db0:	890c      	ldrh	r4, [r1, #8]
 8007db2:	0864      	lsrs	r4, r4, #1
 8007db4:	0064      	lsls	r4, r4, #1
 8007db6:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 8007dba:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007dbe:	fa13 f282 	uxtah	r2, r3, r2
 8007dc2:	780c      	ldrb	r4, [r1, #0]
 8007dc4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007dc8:	894c      	ldrh	r4, [r1, #10]
 8007dca:	0864      	lsrs	r4, r4, #1
 8007dcc:	0064      	lsls	r4, r4, #1
 8007dce:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8007dd2:	784a      	ldrb	r2, [r1, #1]
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d140      	bne.n	8007e5a <USB_ActivateEndpoint+0x292>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dd8:	780c      	ldrb	r4, [r1, #0]
 8007dda:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007dde:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007de2:	d00c      	beq.n	8007dfe <USB_ActivateEndpoint+0x236>
 8007de4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007de8:	b292      	uxth	r2, r2
 8007dea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007dee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007df2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dfa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dfe:	780c      	ldrb	r4, [r1, #0]
 8007e00:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007e04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007e08:	d00c      	beq.n	8007e24 <USB_ActivateEndpoint+0x25c>
 8007e0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007e0e:	b292      	uxth	r2, r2
 8007e10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007e14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e1c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007e20:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e24:	780d      	ldrb	r5, [r1, #0]
 8007e26:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8007e2a:	b292      	uxth	r2, r2
 8007e2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e34:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8007e38:	f248 0480 	movw	r4, #32896	; 0x8080
 8007e3c:	4322      	orrs	r2, r4
 8007e3e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e42:	7809      	ldrb	r1, [r1, #0]
 8007e44:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e52:	4322      	orrs	r2, r4
 8007e54:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007e58:	e77a      	b.n	8007d50 <USB_ActivateEndpoint+0x188>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e5a:	780c      	ldrb	r4, [r1, #0]
 8007e5c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007e60:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007e64:	d00c      	beq.n	8007e80 <USB_ActivateEndpoint+0x2b8>
 8007e66:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007e6a:	b292      	uxth	r2, r2
 8007e6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007e70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e74:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e7c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e80:	780c      	ldrb	r4, [r1, #0]
 8007e82:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007e86:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007e8a:	d00c      	beq.n	8007ea6 <USB_ActivateEndpoint+0x2de>
 8007e8c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007e90:	b292      	uxth	r2, r2
 8007e92:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007e96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e9e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007ea2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8007ea6:	78ca      	ldrb	r2, [r1, #3]
 8007ea8:	2a01      	cmp	r2, #1
 8007eaa:	d01e      	beq.n	8007eea <USB_ActivateEndpoint+0x322>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007eac:	780c      	ldrb	r4, [r1, #0]
 8007eae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007eb2:	b292      	uxth	r2, r2
 8007eb4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ebc:	f082 0220 	eor.w	r2, r2, #32
 8007ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ec8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ecc:	7809      	ldrb	r1, [r1, #0]
 8007ece:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007ed2:	b292      	uxth	r2, r2
 8007ed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ed8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ee4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007ee8:	e732      	b.n	8007d50 <USB_ActivateEndpoint+0x188>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eea:	780c      	ldrb	r4, [r1, #0]
 8007eec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007ef0:	b292      	uxth	r2, r2
 8007ef2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f02:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007f06:	e7e1      	b.n	8007ecc <USB_ActivateEndpoint+0x304>

08007f08 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007f08:	7b0b      	ldrb	r3, [r1, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d146      	bne.n	8007f9c <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8007f0e:	784b      	ldrb	r3, [r1, #1]
 8007f10:	b313      	cbz	r3, 8007f58 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f12:	780a      	ldrb	r2, [r1, #0]
 8007f14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f1c:	d00c      	beq.n	8007f38 <USB_DeactivateEndpoint+0x30>
 8007f1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f38:	780a      	ldrb	r2, [r1, #0]
 8007f3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8007f54:	2000      	movs	r0, #0
 8007f56:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f58:	780a      	ldrb	r2, [r1, #0]
 8007f5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f5e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007f62:	d00c      	beq.n	8007f7e <USB_DeactivateEndpoint+0x76>
 8007f64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f7e:	780a      	ldrb	r2, [r1, #0]
 8007f80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007f9a:	e7db      	b.n	8007f54 <USB_DeactivateEndpoint+0x4c>
{
 8007f9c:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8007f9e:	784b      	ldrb	r3, [r1, #1]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d14f      	bne.n	8008044 <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fa4:	780a      	ldrb	r2, [r1, #0]
 8007fa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007faa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007fae:	d00c      	beq.n	8007fca <USB_DeactivateEndpoint+0xc2>
 8007fb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fca:	780a      	ldrb	r2, [r1, #0]
 8007fcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007fd4:	d00c      	beq.n	8007ff0 <USB_DeactivateEndpoint+0xe8>
 8007fd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8007ff0:	780a      	ldrb	r2, [r1, #0]
 8007ff2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008008:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800800c:	780b      	ldrb	r3, [r1, #0]
 800800e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008012:	b292      	uxth	r2, r2
 8008014:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008018:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800801c:	f248 0480 	movw	r4, #32896	; 0x8080
 8008020:	4322      	orrs	r2, r4
 8008022:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008026:	780a      	ldrb	r2, [r1, #0]
 8008028:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008036:	4323      	orrs	r3, r4
 8008038:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800803c:	2000      	movs	r0, #0
 800803e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008042:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008044:	780a      	ldrb	r2, [r1, #0]
 8008046:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800804a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800804e:	d00c      	beq.n	800806a <USB_DeactivateEndpoint+0x162>
 8008050:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008066:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800806a:	780a      	ldrb	r2, [r1, #0]
 800806c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008070:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008074:	d00c      	beq.n	8008090 <USB_DeactivateEndpoint+0x188>
 8008076:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800808c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8008090:	780a      	ldrb	r2, [r1, #0]
 8008092:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008096:	b29b      	uxth	r3, r3
 8008098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080ac:	780b      	ldrb	r3, [r1, #0]
 80080ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80080b2:	b292      	uxth	r2, r2
 80080b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80080b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080bc:	f248 0480 	movw	r4, #32896	; 0x8080
 80080c0:	4322      	orrs	r2, r4
 80080c2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080c6:	780a      	ldrb	r2, [r1, #0]
 80080c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d6:	4323      	orrs	r3, r4
 80080d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80080dc:	e7ae      	b.n	800803c <USB_DeactivateEndpoint+0x134>

080080de <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80080de:	784b      	ldrb	r3, [r1, #1]
 80080e0:	b18b      	cbz	r3, 8008106 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80080e2:	780a      	ldrb	r2, [r1, #0]
 80080e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f2:	f083 0310 	eor.w	r3, r3, #16
 80080f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8008102:	2000      	movs	r0, #0
 8008104:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008106:	780a      	ldrb	r2, [r1, #0]
 8008108:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800810c:	b29b      	uxth	r3, r3
 800810e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800811a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008122:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008126:	e7ec      	b.n	8008102 <USB_EPSetStall+0x24>

08008128 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008128:	7b0b      	ldrb	r3, [r1, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d14b      	bne.n	80081c6 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800812e:	784b      	ldrb	r3, [r1, #1]
 8008130:	b333      	cbz	r3, 8008180 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008132:	780a      	ldrb	r2, [r1, #0]
 8008134:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008138:	f013 0f40 	tst.w	r3, #64	; 0x40
 800813c:	d00c      	beq.n	8008158 <USB_EPClearStall+0x30>
 800813e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008150:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008154:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008158:	78cb      	ldrb	r3, [r1, #3]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d033      	beq.n	80081c6 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800815e:	780a      	ldrb	r2, [r1, #0]
 8008160:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008164:	b29b      	uxth	r3, r3
 8008166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800816e:	f083 0320 	eor.w	r3, r3, #32
 8008172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800817e:	e022      	b.n	80081c6 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008180:	780a      	ldrb	r2, [r1, #0]
 8008182:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008186:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800818a:	d00c      	beq.n	80081a6 <USB_EPClearStall+0x7e>
 800818c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800819e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081a6:	780a      	ldrb	r2, [r1, #0]
 80081a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80081ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80081c6:	2000      	movs	r0, #0
 80081c8:	4770      	bx	lr

080081ca <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80081ca:	b911      	cbnz	r1, 80081d2 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80081d2:	2000      	movs	r0, #0
 80081d4:	4770      	bx	lr

080081d6 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80081d6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80081da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80081e8:	2000      	movs	r0, #0
 80081ea:	4770      	bx	lr

080081ec <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80081ec:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80081f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80081f4:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80081f8:	2000      	movs	r0, #0
 80081fa:	4770      	bx	lr

080081fc <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081fc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8008200:	b280      	uxth	r0, r0
 8008202:	4770      	bx	lr

08008204 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8008204:	2000      	movs	r0, #0
 8008206:	4770      	bx	lr

08008208 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008208:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800820a:	1c5c      	adds	r4, r3, #1
 800820c:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800820e:	4402      	add	r2, r0
 8008210:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8008214:	b144      	cbz	r4, 8008228 <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 8008216:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008218:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 800821a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800821e:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008222:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8008224:	3c01      	subs	r4, #1
 8008226:	e7f5      	b.n	8008214 <USB_WritePMA+0xc>
  }
}
 8008228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USB_EPStartXfer>:
{
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8008234:	784a      	ldrb	r2, [r1, #1]
 8008236:	2a01      	cmp	r2, #1
 8008238:	d037      	beq.n	80082aa <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 800823a:	7b0b      	ldrb	r3, [r1, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 82a1 	bne.w	8008784 <USB_EPStartXfer+0x556>
      if (ep->xfer_len > ep->maxpacket)
 8008242:	698b      	ldr	r3, [r1, #24]
 8008244:	690a      	ldr	r2, [r1, #16]
 8008246:	4293      	cmp	r3, r2
 8008248:	f240 827f 	bls.w	800874a <USB_EPStartXfer+0x51c>
        ep->xfer_len -= len;
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008250:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008254:	fa15 f383 	uxtah	r3, r5, r3
 8008258:	7821      	ldrb	r1, [r4, #0]
 800825a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800825e:	2a00      	cmp	r2, #0
 8008260:	f040 8277 	bne.w	8008752 <USB_EPStartXfer+0x524>
 8008264:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008268:	b292      	uxth	r2, r2
 800826a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800826e:	b292      	uxth	r2, r2
 8008270:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008274:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008278:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800827c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008280:	b292      	uxth	r2, r2
 8008282:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008286:	7822      	ldrb	r2, [r4, #0]
 8008288:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800829a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80082a6:	2000      	movs	r0, #0
}
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80082aa:	698b      	ldr	r3, [r1, #24]
 80082ac:	6909      	ldr	r1, [r1, #16]
 80082ae:	428b      	cmp	r3, r1
 80082b0:	d900      	bls.n	80082b4 <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 80082b2:	460b      	mov	r3, r1
    if (ep->doublebuffer == 0U)
 80082b4:	7b20      	ldrb	r0, [r4, #12]
 80082b6:	b338      	cbz	r0, 8008308 <USB_EPStartXfer+0xda>
      if (ep->type == EP_TYPE_BULK)
 80082b8:	78e0      	ldrb	r0, [r4, #3]
 80082ba:	2802      	cmp	r0, #2
 80082bc:	d046      	beq.n	800834c <USB_EPStartXfer+0x11e>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082be:	7821      	ldrb	r1, [r4, #0]
 80082c0:	f835 0021 	ldrh.w	r0, [r5, r1, lsl #2]
 80082c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082c8:	f000 81ef 	beq.w	80086aa <USB_EPStartXfer+0x47c>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	f040 81cb 	bne.w	8008668 <USB_EPStartXfer+0x43a>
 80082d2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80082d6:	fa15 f282 	uxtah	r2, r5, r2
 80082da:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f040 81a9 	bne.w	8008636 <USB_EPStartXfer+0x408>
 80082e4:	f8b1 2406 	ldrh.w	r2, [r1, #1030]	; 0x406
 80082e8:	b292      	uxth	r2, r2
 80082ea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80082ee:	b292      	uxth	r2, r2
 80082f0:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 80082f4:	f8b1 2406 	ldrh.w	r2, [r1, #1030]	; 0x406
 80082f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80082fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008300:	b292      	uxth	r2, r2
 8008302:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8008306:	e1b8      	b.n	800867a <USB_EPStartXfer+0x44c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008308:	b29e      	uxth	r6, r3
 800830a:	4633      	mov	r3, r6
 800830c:	88e2      	ldrh	r2, [r4, #6]
 800830e:	6961      	ldr	r1, [r4, #20]
 8008310:	4628      	mov	r0, r5
 8008312:	f7ff ff79 	bl	8008208 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008316:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800831a:	fa15 f383 	uxtah	r3, r5, r3
 800831e:	7822      	ldrb	r2, [r4, #0]
 8008320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008324:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008328:	7822      	ldrb	r2, [r4, #0]
 800832a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008338:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800833c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008344:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8008348:	2000      	movs	r0, #0
 800834a:	e7ad      	b.n	80082a8 <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 800834c:	6a23      	ldr	r3, [r4, #32]
 800834e:	4299      	cmp	r1, r3
 8008350:	f080 8153 	bcs.w	80085fa <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008354:	7822      	ldrb	r2, [r4, #0]
 8008356:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008364:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          len = ep->maxpacket;
 8008370:	6926      	ldr	r6, [r4, #16]
          ep->xfer_len_db -= len;
 8008372:	6a23      	ldr	r3, [r4, #32]
 8008374:	1b9b      	subs	r3, r3, r6
 8008376:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008378:	7823      	ldrb	r3, [r4, #0]
 800837a:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800837e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008382:	f000 809d 	beq.w	80084c0 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008386:	7862      	ldrb	r2, [r4, #1]
 8008388:	bb8a      	cbnz	r2, 80083ee <USB_EPStartXfer+0x1c0>
 800838a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800838e:	fa15 f282 	uxtah	r2, r5, r2
 8008392:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008396:	b98e      	cbnz	r6, 80083bc <USB_EPStartXfer+0x18e>
 8008398:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800839c:	b292      	uxth	r2, r2
 800839e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80083a2:	b292      	uxth	r2, r2
 80083a4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80083a8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80083ac:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80083b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80083b4:	b292      	uxth	r2, r2
 80083b6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80083ba:	e01a      	b.n	80083f2 <USB_EPStartXfer+0x1c4>
 80083bc:	2e3e      	cmp	r6, #62	; 0x3e
 80083be:	d809      	bhi.n	80083d4 <USB_EPStartXfer+0x1a6>
 80083c0:	0872      	lsrs	r2, r6, #1
 80083c2:	f016 0f01 	tst.w	r6, #1
 80083c6:	d000      	beq.n	80083ca <USB_EPStartXfer+0x19c>
 80083c8:	3201      	adds	r2, #1
 80083ca:	0292      	lsls	r2, r2, #10
 80083cc:	b292      	uxth	r2, r2
 80083ce:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80083d2:	e00e      	b.n	80083f2 <USB_EPStartXfer+0x1c4>
 80083d4:	0972      	lsrs	r2, r6, #5
 80083d6:	f016 0f1f 	tst.w	r6, #31
 80083da:	d100      	bne.n	80083de <USB_EPStartXfer+0x1b0>
 80083dc:	3a01      	subs	r2, #1
 80083de:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80083e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80083e6:	b292      	uxth	r2, r2
 80083e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80083ec:	e001      	b.n	80083f2 <USB_EPStartXfer+0x1c4>
 80083ee:	2a01      	cmp	r2, #1
 80083f0:	d02b      	beq.n	800844a <USB_EPStartXfer+0x21c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083f2:	b2b3      	uxth	r3, r6
 80083f4:	8962      	ldrh	r2, [r4, #10]
 80083f6:	6961      	ldr	r1, [r4, #20]
 80083f8:	4628      	mov	r0, r5
 80083fa:	f7ff ff05 	bl	8008208 <USB_WritePMA>
            ep->xfer_buff += len;
 80083fe:	6963      	ldr	r3, [r4, #20]
 8008400:	441e      	add	r6, r3
 8008402:	6166      	str	r6, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8008404:	6a22      	ldr	r2, [r4, #32]
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d928      	bls.n	800845e <USB_EPStartXfer+0x230>
              ep->xfer_len_db -= len;
 800840c:	1ad2      	subs	r2, r2, r3
 800840e:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008410:	7862      	ldrb	r2, [r4, #1]
 8008412:	2a00      	cmp	r2, #0
 8008414:	d140      	bne.n	8008498 <USB_EPStartXfer+0x26a>
 8008416:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800841a:	fa15 f282 	uxtah	r2, r5, r2
 800841e:	7821      	ldrb	r1, [r4, #0]
 8008420:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008424:	b9fb      	cbnz	r3, 8008466 <USB_EPStartXfer+0x238>
 8008426:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800842a:	b289      	uxth	r1, r1
 800842c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008430:	b289      	uxth	r1, r1
 8008432:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8008436:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800843a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800843e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8008442:	b289      	uxth	r1, r1
 8008444:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8008448:	e028      	b.n	800849c <USB_EPStartXfer+0x26e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800844a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800844e:	fa15 f282 	uxtah	r2, r5, r2
 8008452:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008456:	b2b2      	uxth	r2, r6
 8008458:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800845c:	e7c9      	b.n	80083f2 <USB_EPStartXfer+0x1c4>
              ep->xfer_len_db = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	6223      	str	r3, [r4, #32]
              len = ep->xfer_len_db;
 8008462:	4613      	mov	r3, r2
 8008464:	e7d4      	b.n	8008410 <USB_EPStartXfer+0x1e2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008466:	2b3e      	cmp	r3, #62	; 0x3e
 8008468:	d809      	bhi.n	800847e <USB_EPStartXfer+0x250>
 800846a:	0859      	lsrs	r1, r3, #1
 800846c:	f013 0f01 	tst.w	r3, #1
 8008470:	d000      	beq.n	8008474 <USB_EPStartXfer+0x246>
 8008472:	3101      	adds	r1, #1
 8008474:	0289      	lsls	r1, r1, #10
 8008476:	b289      	uxth	r1, r1
 8008478:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800847c:	e00e      	b.n	800849c <USB_EPStartXfer+0x26e>
 800847e:	0959      	lsrs	r1, r3, #5
 8008480:	f013 0f1f 	tst.w	r3, #31
 8008484:	d100      	bne.n	8008488 <USB_EPStartXfer+0x25a>
 8008486:	3901      	subs	r1, #1
 8008488:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800848c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8008490:	b289      	uxth	r1, r1
 8008492:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8008496:	e001      	b.n	800849c <USB_EPStartXfer+0x26e>
 8008498:	2a01      	cmp	r2, #1
 800849a:	d006      	beq.n	80084aa <USB_EPStartXfer+0x27c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800849c:	b29b      	uxth	r3, r3
 800849e:	8922      	ldrh	r2, [r4, #8]
 80084a0:	6961      	ldr	r1, [r4, #20]
 80084a2:	4628      	mov	r0, r5
 80084a4:	f7ff feb0 	bl	8008208 <USB_WritePMA>
 80084a8:	e73e      	b.n	8008328 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084aa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80084ae:	fa15 f282 	uxtah	r2, r5, r2
 80084b2:	7821      	ldrb	r1, [r4, #0]
 80084b4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80084b8:	b299      	uxth	r1, r3
 80084ba:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80084be:	e7ed      	b.n	800849c <USB_EPStartXfer+0x26e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084c0:	7862      	ldrb	r2, [r4, #1]
 80084c2:	bb8a      	cbnz	r2, 8008528 <USB_EPStartXfer+0x2fa>
 80084c4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80084c8:	fa15 f282 	uxtah	r2, r5, r2
 80084cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084d0:	b98e      	cbnz	r6, 80084f6 <USB_EPStartXfer+0x2c8>
 80084d2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80084d6:	b292      	uxth	r2, r2
 80084d8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80084dc:	b292      	uxth	r2, r2
 80084de:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80084e2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80084e6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80084ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80084ee:	b292      	uxth	r2, r2
 80084f0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80084f4:	e01a      	b.n	800852c <USB_EPStartXfer+0x2fe>
 80084f6:	2e3e      	cmp	r6, #62	; 0x3e
 80084f8:	d809      	bhi.n	800850e <USB_EPStartXfer+0x2e0>
 80084fa:	0872      	lsrs	r2, r6, #1
 80084fc:	f016 0f01 	tst.w	r6, #1
 8008500:	d000      	beq.n	8008504 <USB_EPStartXfer+0x2d6>
 8008502:	3201      	adds	r2, #1
 8008504:	0292      	lsls	r2, r2, #10
 8008506:	b292      	uxth	r2, r2
 8008508:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800850c:	e00e      	b.n	800852c <USB_EPStartXfer+0x2fe>
 800850e:	0972      	lsrs	r2, r6, #5
 8008510:	f016 0f1f 	tst.w	r6, #31
 8008514:	d100      	bne.n	8008518 <USB_EPStartXfer+0x2ea>
 8008516:	3a01      	subs	r2, #1
 8008518:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800851c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008520:	b292      	uxth	r2, r2
 8008522:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008526:	e001      	b.n	800852c <USB_EPStartXfer+0x2fe>
 8008528:	2a01      	cmp	r2, #1
 800852a:	d02b      	beq.n	8008584 <USB_EPStartXfer+0x356>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800852c:	b2b3      	uxth	r3, r6
 800852e:	8922      	ldrh	r2, [r4, #8]
 8008530:	6961      	ldr	r1, [r4, #20]
 8008532:	4628      	mov	r0, r5
 8008534:	f7ff fe68 	bl	8008208 <USB_WritePMA>
            ep->xfer_buff += len;
 8008538:	6963      	ldr	r3, [r4, #20]
 800853a:	441e      	add	r6, r3
 800853c:	6166      	str	r6, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800853e:	6a22      	ldr	r2, [r4, #32]
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	429a      	cmp	r2, r3
 8008544:	d928      	bls.n	8008598 <USB_EPStartXfer+0x36a>
              ep->xfer_len_db -= len;
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800854a:	7862      	ldrb	r2, [r4, #1]
 800854c:	2a00      	cmp	r2, #0
 800854e:	d140      	bne.n	80085d2 <USB_EPStartXfer+0x3a4>
 8008550:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8008554:	fa15 f282 	uxtah	r2, r5, r2
 8008558:	7821      	ldrb	r1, [r4, #0]
 800855a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800855e:	b9fb      	cbnz	r3, 80085a0 <USB_EPStartXfer+0x372>
 8008560:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8008564:	b289      	uxth	r1, r1
 8008566:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800856a:	b289      	uxth	r1, r1
 800856c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8008570:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8008574:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8008578:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800857c:	b289      	uxth	r1, r1
 800857e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8008582:	e028      	b.n	80085d6 <USB_EPStartXfer+0x3a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008584:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8008588:	fa15 f282 	uxtah	r2, r5, r2
 800858c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008590:	b2b2      	uxth	r2, r6
 8008592:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008596:	e7c9      	b.n	800852c <USB_EPStartXfer+0x2fe>
              ep->xfer_len_db = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	6223      	str	r3, [r4, #32]
              len = ep->xfer_len_db;
 800859c:	4613      	mov	r3, r2
 800859e:	e7d4      	b.n	800854a <USB_EPStartXfer+0x31c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085a0:	2b3e      	cmp	r3, #62	; 0x3e
 80085a2:	d809      	bhi.n	80085b8 <USB_EPStartXfer+0x38a>
 80085a4:	0859      	lsrs	r1, r3, #1
 80085a6:	f013 0f01 	tst.w	r3, #1
 80085aa:	d000      	beq.n	80085ae <USB_EPStartXfer+0x380>
 80085ac:	3101      	adds	r1, #1
 80085ae:	0289      	lsls	r1, r1, #10
 80085b0:	b289      	uxth	r1, r1
 80085b2:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80085b6:	e00e      	b.n	80085d6 <USB_EPStartXfer+0x3a8>
 80085b8:	0959      	lsrs	r1, r3, #5
 80085ba:	f013 0f1f 	tst.w	r3, #31
 80085be:	d100      	bne.n	80085c2 <USB_EPStartXfer+0x394>
 80085c0:	3901      	subs	r1, #1
 80085c2:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80085c6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80085ca:	b289      	uxth	r1, r1
 80085cc:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80085d0:	e001      	b.n	80085d6 <USB_EPStartXfer+0x3a8>
 80085d2:	2a01      	cmp	r2, #1
 80085d4:	d006      	beq.n	80085e4 <USB_EPStartXfer+0x3b6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	8962      	ldrh	r2, [r4, #10]
 80085da:	6961      	ldr	r1, [r4, #20]
 80085dc:	4628      	mov	r0, r5
 80085de:	f7ff fe13 	bl	8008208 <USB_WritePMA>
 80085e2:	e6a1      	b.n	8008328 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085e4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80085e8:	fa15 f282 	uxtah	r2, r5, r2
 80085ec:	7821      	ldrb	r1, [r4, #0]
 80085ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80085f2:	b299      	uxth	r1, r3
 80085f4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80085f8:	e7ed      	b.n	80085d6 <USB_EPStartXfer+0x3a8>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80085fa:	7821      	ldrb	r1, [r4, #0]
 80085fc:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8008600:	b292      	uxth	r2, r2
 8008602:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8008606:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800860a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800860e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008612:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008616:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800861a:	fa15 f282 	uxtah	r2, r5, r2
 800861e:	7821      	ldrb	r1, [r4, #0]
 8008620:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008624:	b29b      	uxth	r3, r3
 8008626:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800862a:	8922      	ldrh	r2, [r4, #8]
 800862c:	6961      	ldr	r1, [r4, #20]
 800862e:	4628      	mov	r0, r5
 8008630:	f7ff fdea 	bl	8008208 <USB_WritePMA>
 8008634:	e678      	b.n	8008328 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008636:	2b3e      	cmp	r3, #62	; 0x3e
 8008638:	d809      	bhi.n	800864e <USB_EPStartXfer+0x420>
 800863a:	085a      	lsrs	r2, r3, #1
 800863c:	f013 0f01 	tst.w	r3, #1
 8008640:	d000      	beq.n	8008644 <USB_EPStartXfer+0x416>
 8008642:	3201      	adds	r2, #1
 8008644:	0292      	lsls	r2, r2, #10
 8008646:	b292      	uxth	r2, r2
 8008648:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 800864c:	e015      	b.n	800867a <USB_EPStartXfer+0x44c>
 800864e:	095a      	lsrs	r2, r3, #5
 8008650:	f013 0f1f 	tst.w	r3, #31
 8008654:	d100      	bne.n	8008658 <USB_EPStartXfer+0x42a>
 8008656:	3a01      	subs	r2, #1
 8008658:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800865c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008660:	b292      	uxth	r2, r2
 8008662:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8008666:	e008      	b.n	800867a <USB_EPStartXfer+0x44c>
 8008668:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800866c:	fa15 f282 	uxtah	r2, r5, r2
 8008670:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008674:	b29a      	uxth	r2, r3
 8008676:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
          pmabuffer = ep->pmaaddr1;
 800867a:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800867c:	b29b      	uxth	r3, r3
 800867e:	6961      	ldr	r1, [r4, #20]
 8008680:	4628      	mov	r0, r5
 8008682:	f7ff fdc1 	bl	8008208 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008686:	7863      	ldrb	r3, [r4, #1]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d14c      	bne.n	8008726 <USB_EPStartXfer+0x4f8>
 800868c:	7822      	ldrb	r2, [r4, #0]
 800868e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086a4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80086a8:	e63e      	b.n	8008328 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086aa:	bb8a      	cbnz	r2, 8008710 <USB_EPStartXfer+0x4e2>
 80086ac:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80086b0:	fa15 f282 	uxtah	r2, r5, r2
 80086b4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80086b8:	b98b      	cbnz	r3, 80086de <USB_EPStartXfer+0x4b0>
 80086ba:	f8b1 2402 	ldrh.w	r2, [r1, #1026]	; 0x402
 80086be:	b292      	uxth	r2, r2
 80086c0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80086c4:	b292      	uxth	r2, r2
 80086c6:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 80086ca:	f8b1 2402 	ldrh.w	r2, [r1, #1026]	; 0x402
 80086ce:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80086d2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80086d6:	b292      	uxth	r2, r2
 80086d8:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 80086dc:	e021      	b.n	8008722 <USB_EPStartXfer+0x4f4>
 80086de:	2b3e      	cmp	r3, #62	; 0x3e
 80086e0:	d809      	bhi.n	80086f6 <USB_EPStartXfer+0x4c8>
 80086e2:	085a      	lsrs	r2, r3, #1
 80086e4:	f013 0f01 	tst.w	r3, #1
 80086e8:	d000      	beq.n	80086ec <USB_EPStartXfer+0x4be>
 80086ea:	3201      	adds	r2, #1
 80086ec:	0292      	lsls	r2, r2, #10
 80086ee:	b292      	uxth	r2, r2
 80086f0:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 80086f4:	e015      	b.n	8008722 <USB_EPStartXfer+0x4f4>
 80086f6:	095a      	lsrs	r2, r3, #5
 80086f8:	f013 0f1f 	tst.w	r3, #31
 80086fc:	d100      	bne.n	8008700 <USB_EPStartXfer+0x4d2>
 80086fe:	3a01      	subs	r2, #1
 8008700:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8008704:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008708:	b292      	uxth	r2, r2
 800870a:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 800870e:	e008      	b.n	8008722 <USB_EPStartXfer+0x4f4>
 8008710:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8008714:	fa15 f282 	uxtah	r2, r5, r2
 8008718:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800871c:	b29a      	uxth	r2, r3
 800871e:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
          pmabuffer = ep->pmaaddr0;
 8008722:	8922      	ldrh	r2, [r4, #8]
 8008724:	e7aa      	b.n	800867c <USB_EPStartXfer+0x44e>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008726:	2b01      	cmp	r3, #1
 8008728:	f47f adfe 	bne.w	8008328 <USB_EPStartXfer+0xfa>
 800872c:	7822      	ldrb	r2, [r4, #0]
 800872e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008744:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8008748:	e5ee      	b.n	8008328 <USB_EPStartXfer+0xfa>
        ep->xfer_len = 0U;
 800874a:	2200      	movs	r2, #0
 800874c:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800874e:	461a      	mov	r2, r3
 8008750:	e57e      	b.n	8008250 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008752:	2a3e      	cmp	r2, #62	; 0x3e
 8008754:	d809      	bhi.n	800876a <USB_EPStartXfer+0x53c>
 8008756:	0851      	lsrs	r1, r2, #1
 8008758:	f012 0f01 	tst.w	r2, #1
 800875c:	d000      	beq.n	8008760 <USB_EPStartXfer+0x532>
 800875e:	3101      	adds	r1, #1
 8008760:	0289      	lsls	r1, r1, #10
 8008762:	b289      	uxth	r1, r1
 8008764:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8008768:	e58d      	b.n	8008286 <USB_EPStartXfer+0x58>
 800876a:	0951      	lsrs	r1, r2, #5
 800876c:	f012 0f1f 	tst.w	r2, #31
 8008770:	d100      	bne.n	8008774 <USB_EPStartXfer+0x546>
 8008772:	3901      	subs	r1, #1
 8008774:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8008778:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800877c:	b289      	uxth	r1, r1
 800877e:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8008782:	e580      	b.n	8008286 <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8008784:	78cb      	ldrb	r3, [r1, #3]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d045      	beq.n	8008816 <USB_EPStartXfer+0x5e8>
      else if (ep->type == EP_TYPE_ISOC)
 800878a:	2b01      	cmp	r3, #1
 800878c:	f040 811d 	bne.w	80089ca <USB_EPStartXfer+0x79c>
        if (ep->xfer_len > ep->maxpacket)
 8008790:	6989      	ldr	r1, [r1, #24]
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	4299      	cmp	r1, r3
 8008796:	f240 80d4 	bls.w	8008942 <USB_EPStartXfer+0x714>
          ep->xfer_len -= len;
 800879a:	1ac9      	subs	r1, r1, r3
 800879c:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800879e:	b9d2      	cbnz	r2, 80087d6 <USB_EPStartXfer+0x5a8>
 80087a0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80087a4:	fa15 f282 	uxtah	r2, r5, r2
 80087a8:	7821      	ldrb	r1, [r4, #0]
 80087aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f040 80cb 	bne.w	800894a <USB_EPStartXfer+0x71c>
 80087b4:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80087b8:	b289      	uxth	r1, r1
 80087ba:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80087be:	b289      	uxth	r1, r1
 80087c0:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80087c4:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80087c8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80087cc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80087d0:	b289      	uxth	r1, r1
 80087d2:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80087d6:	7862      	ldrb	r2, [r4, #1]
 80087d8:	2a00      	cmp	r2, #0
 80087da:	f040 80e8 	bne.w	80089ae <USB_EPStartXfer+0x780>
 80087de:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80087e2:	fa15 f282 	uxtah	r2, r5, r2
 80087e6:	7821      	ldrb	r1, [r4, #0]
 80087e8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 80c5 	bne.w	800897c <USB_EPStartXfer+0x74e>
 80087f2:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8008802:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8008806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800880a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800880e:	b29b      	uxth	r3, r3
 8008810:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8008814:	e537      	b.n	8008286 <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008816:	b9ca      	cbnz	r2, 800884c <USB_EPStartXfer+0x61e>
 8008818:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800881c:	fa10 f383 	uxtah	r3, r0, r3
 8008820:	780a      	ldrb	r2, [r1, #0]
 8008822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008826:	690a      	ldr	r2, [r1, #16]
 8008828:	bb72      	cbnz	r2, 8008888 <USB_EPStartXfer+0x65a>
 800882a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800882e:	b292      	uxth	r2, r2
 8008830:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008834:	b292      	uxth	r2, r2
 8008836:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800883a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800883e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008842:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008846:	b292      	uxth	r2, r2
 8008848:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800884c:	7863      	ldrb	r3, [r4, #1]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d14c      	bne.n	80088ec <USB_EPStartXfer+0x6be>
 8008852:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008856:	fa15 f383 	uxtah	r3, r5, r3
 800885a:	7822      	ldrb	r2, [r4, #0]
 800885c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008860:	6922      	ldr	r2, [r4, #16]
 8008862:	bb52      	cbnz	r2, 80088ba <USB_EPStartXfer+0x68c>
 8008864:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008868:	b292      	uxth	r2, r2
 800886a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800886e:	b292      	uxth	r2, r2
 8008870:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008874:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008878:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800887c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008880:	b292      	uxth	r2, r2
 8008882:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008886:	e033      	b.n	80088f0 <USB_EPStartXfer+0x6c2>
 8008888:	2a3e      	cmp	r2, #62	; 0x3e
 800888a:	d809      	bhi.n	80088a0 <USB_EPStartXfer+0x672>
 800888c:	0851      	lsrs	r1, r2, #1
 800888e:	f012 0f01 	tst.w	r2, #1
 8008892:	d000      	beq.n	8008896 <USB_EPStartXfer+0x668>
 8008894:	3101      	adds	r1, #1
 8008896:	028a      	lsls	r2, r1, #10
 8008898:	b292      	uxth	r2, r2
 800889a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800889e:	e7d5      	b.n	800884c <USB_EPStartXfer+0x61e>
 80088a0:	0951      	lsrs	r1, r2, #5
 80088a2:	f012 0f1f 	tst.w	r2, #31
 80088a6:	d100      	bne.n	80088aa <USB_EPStartXfer+0x67c>
 80088a8:	3901      	subs	r1, #1
 80088aa:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80088ae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80088b2:	b292      	uxth	r2, r2
 80088b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80088b8:	e7c8      	b.n	800884c <USB_EPStartXfer+0x61e>
 80088ba:	2a3e      	cmp	r2, #62	; 0x3e
 80088bc:	d809      	bhi.n	80088d2 <USB_EPStartXfer+0x6a4>
 80088be:	0851      	lsrs	r1, r2, #1
 80088c0:	f012 0f01 	tst.w	r2, #1
 80088c4:	d000      	beq.n	80088c8 <USB_EPStartXfer+0x69a>
 80088c6:	3101      	adds	r1, #1
 80088c8:	028a      	lsls	r2, r1, #10
 80088ca:	b292      	uxth	r2, r2
 80088cc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80088d0:	e00e      	b.n	80088f0 <USB_EPStartXfer+0x6c2>
 80088d2:	0951      	lsrs	r1, r2, #5
 80088d4:	f012 0f1f 	tst.w	r2, #31
 80088d8:	d100      	bne.n	80088dc <USB_EPStartXfer+0x6ae>
 80088da:	3901      	subs	r1, #1
 80088dc:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80088e0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80088e4:	b292      	uxth	r2, r2
 80088e6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80088ea:	e001      	b.n	80088f0 <USB_EPStartXfer+0x6c2>
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d01d      	beq.n	800892c <USB_EPStartXfer+0x6fe>
        if (ep->xfer_count != 0U)
 80088f0:	69e3      	ldr	r3, [r4, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f43f acc7 	beq.w	8008286 <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80088f8:	7822      	ldrb	r2, [r4, #0]
 80088fa:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088fe:	f244 0340 	movw	r3, #16448	; 0x4040
 8008902:	ea03 0001 	and.w	r0, r3, r1
 8008906:	438b      	bics	r3, r1
 8008908:	d002      	beq.n	8008910 <USB_EPStartXfer+0x6e2>
 800890a:	2800      	cmp	r0, #0
 800890c:	f47f acbb 	bne.w	8008286 <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008910:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008914:	b29b      	uxth	r3, r3
 8008916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008926:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800892a:	e4ac      	b.n	8008286 <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800892c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008930:	fa15 f383 	uxtah	r3, r5, r3
 8008934:	7822      	ldrb	r2, [r4, #0]
 8008936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800893a:	8a22      	ldrh	r2, [r4, #16]
 800893c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008940:	e7d6      	b.n	80088f0 <USB_EPStartXfer+0x6c2>
          ep->xfer_len = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 8008946:	460b      	mov	r3, r1
 8008948:	e729      	b.n	800879e <USB_EPStartXfer+0x570>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800894a:	2b3e      	cmp	r3, #62	; 0x3e
 800894c:	d809      	bhi.n	8008962 <USB_EPStartXfer+0x734>
 800894e:	0859      	lsrs	r1, r3, #1
 8008950:	f013 0f01 	tst.w	r3, #1
 8008954:	d000      	beq.n	8008958 <USB_EPStartXfer+0x72a>
 8008956:	3101      	adds	r1, #1
 8008958:	0289      	lsls	r1, r1, #10
 800895a:	b289      	uxth	r1, r1
 800895c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8008960:	e739      	b.n	80087d6 <USB_EPStartXfer+0x5a8>
 8008962:	0959      	lsrs	r1, r3, #5
 8008964:	f013 0f1f 	tst.w	r3, #31
 8008968:	d100      	bne.n	800896c <USB_EPStartXfer+0x73e>
 800896a:	3901      	subs	r1, #1
 800896c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8008970:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8008974:	b289      	uxth	r1, r1
 8008976:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800897a:	e72c      	b.n	80087d6 <USB_EPStartXfer+0x5a8>
 800897c:	2b3e      	cmp	r3, #62	; 0x3e
 800897e:	d809      	bhi.n	8008994 <USB_EPStartXfer+0x766>
 8008980:	0859      	lsrs	r1, r3, #1
 8008982:	f013 0f01 	tst.w	r3, #1
 8008986:	d000      	beq.n	800898a <USB_EPStartXfer+0x75c>
 8008988:	3101      	adds	r1, #1
 800898a:	028b      	lsls	r3, r1, #10
 800898c:	b29b      	uxth	r3, r3
 800898e:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8008992:	e478      	b.n	8008286 <USB_EPStartXfer+0x58>
 8008994:	0959      	lsrs	r1, r3, #5
 8008996:	f013 0f1f 	tst.w	r3, #31
 800899a:	d100      	bne.n	800899e <USB_EPStartXfer+0x770>
 800899c:	3901      	subs	r1, #1
 800899e:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 80089a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80089ac:	e46b      	b.n	8008286 <USB_EPStartXfer+0x58>
 80089ae:	2a01      	cmp	r2, #1
 80089b0:	f47f ac69 	bne.w	8008286 <USB_EPStartXfer+0x58>
 80089b4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80089b8:	fa15 f282 	uxtah	r2, r5, r2
 80089bc:	7821      	ldrb	r1, [r4, #0]
 80089be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80089c8:	e45d      	b.n	8008286 <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 80089ca:	2001      	movs	r0, #1
 80089cc:	e46c      	b.n	80082a8 <USB_EPStartXfer+0x7a>

080089ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089ce:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80089d0:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089d2:	4410      	add	r0, r2
 80089d4:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80089d8:	b144      	cbz	r4, 80089ec <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80089da:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089de:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80089e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80089e4:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80089e6:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80089e8:	3c01      	subs	r4, #1
 80089ea:	e7f5      	b.n	80089d8 <USB_ReadPMA+0xa>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80089ec:	f013 0f01 	tst.w	r3, #1
 80089f0:	d001      	beq.n	80089f6 <USB_ReadPMA+0x28>
  {
    temp = *pdwVal;
 80089f2:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089f4:	700b      	strb	r3, [r1, #0]
  }
}
 80089f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089fc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089fe:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a02:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8008a06:	b15b      	cbz	r3, 8008a20 <USBD_CDC_EP0_RxReady+0x24>
 8008a08:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8008a0c:	28ff      	cmp	r0, #255	; 0xff
 8008a0e:	d007      	beq.n	8008a20 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8008a16:	4621      	mov	r1, r4
 8008a18:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008a1a:	23ff      	movs	r3, #255	; 0xff
 8008a1c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
}
 8008a20:	2000      	movs	r0, #0
 8008a22:	bd10      	pop	{r4, pc}

08008a24 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008a24:	2343      	movs	r3, #67	; 0x43
 8008a26:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8008a28:	4800      	ldr	r0, [pc, #0]	; (8008a2c <USBD_CDC_GetFSCfgDesc+0x8>)
 8008a2a:	4770      	bx	lr
 8008a2c:	20000044 	.word	0x20000044

08008a30 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008a30:	2343      	movs	r3, #67	; 0x43
 8008a32:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8008a34:	4800      	ldr	r0, [pc, #0]	; (8008a38 <USBD_CDC_GetHSCfgDesc+0x8>)
 8008a36:	4770      	bx	lr
 8008a38:	20000088 	.word	0x20000088

08008a3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a3c:	2343      	movs	r3, #67	; 0x43
 8008a3e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008a40:	4800      	ldr	r0, [pc, #0]	; (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008a42:	4770      	bx	lr
 8008a44:	200000d8 	.word	0x200000d8

08008a48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a48:	230a      	movs	r3, #10
 8008a4a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8008a4c:	4800      	ldr	r0, [pc, #0]	; (8008a50 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008a4e:	4770      	bx	lr
 8008a50:	200000cc 	.word	0x200000cc

08008a54 <USBD_CDC_DataOut>:
{
 8008a54:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a56:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8008a5a:	b175      	cbz	r5, 8008a7a <USBD_CDC_DataOut+0x26>
 8008a5c:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a5e:	f002 fe15 	bl	800b68c <USBD_LL_GetRxDataSize>
 8008a62:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a66:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8008a70:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8008a74:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8008a76:	2000      	movs	r0, #0
}
 8008a78:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8008a7a:	2003      	movs	r0, #3
 8008a7c:	e7fc      	b.n	8008a78 <USBD_CDC_DataOut+0x24>

08008a7e <USBD_CDC_DataIn>:
{
 8008a7e:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a80:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8008a84:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008a88:	b353      	cbz	r3, 8008ae0 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a8a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8008a8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008a92:	6992      	ldr	r2, [r2, #24]
 8008a94:	b14a      	cbz	r2, 8008aaa <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a96:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008a9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a9e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008aa0:	fbb2 f4f5 	udiv	r4, r2, r5
 8008aa4:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008aa8:	b172      	cbz	r2, 8008ac8 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008ab0:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8008ab4:	6914      	ldr	r4, [r2, #16]
 8008ab6:	b1ac      	cbz	r4, 8008ae4 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ab8:	460a      	mov	r2, r1
 8008aba:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8008abe:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8008ac2:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8008ac4:	2000      	movs	r0, #0
}
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8008ac8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008acc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008ad0:	2400      	movs	r4, #0
 8008ad2:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	f002 fdba 	bl	800b650 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8008adc:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ade:	e7f2      	b.n	8008ac6 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8008ae0:	2003      	movs	r0, #3
 8008ae2:	e7f0      	b.n	8008ac6 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e7ee      	b.n	8008ac6 <USBD_CDC_DataIn+0x48>

08008ae8 <USBD_CDC_Setup>:
{
 8008ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aea:	b083      	sub	sp, #12
 8008aec:	4606      	mov	r6, r0
 8008aee:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008af0:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8008afa:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afe:	780b      	ldrb	r3, [r1, #0]
 8008b00:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8008b04:	d027      	beq.n	8008b56 <USBD_CDC_Setup+0x6e>
 8008b06:	2d20      	cmp	r5, #32
 8008b08:	d158      	bne.n	8008bbc <USBD_CDC_Setup+0xd4>
      if (req->wLength != 0U)
 8008b0a:	88ca      	ldrh	r2, [r1, #6]
 8008b0c:	b1da      	cbz	r2, 8008b46 <USBD_CDC_Setup+0x5e>
        if ((req->bmRequest & 0x80U) != 0U)
 8008b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b12:	d00c      	beq.n	8008b2e <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b14:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	7860      	ldrb	r0, [r4, #1]
 8008b1e:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b20:	88e2      	ldrh	r2, [r4, #6]
 8008b22:	4639      	mov	r1, r7
 8008b24:	4630      	mov	r0, r6
 8008b26:	f000 fdc7 	bl	80096b8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	e049      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
          hcdc->CmdOpCode = req->bRequest;
 8008b2e:	784b      	ldrb	r3, [r1, #1]
 8008b30:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b34:	798b      	ldrb	r3, [r1, #6]
 8008b36:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b3a:	88ca      	ldrh	r2, [r1, #6]
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f000 fdd0 	bl	80096e2 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b42:	2500      	movs	r5, #0
 8008b44:	e03d      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b46:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	7848      	ldrb	r0, [r1, #1]
 8008b50:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8008b52:	2500      	movs	r5, #0
 8008b54:	e035      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
      switch (req->bRequest)
 8008b56:	784f      	ldrb	r7, [r1, #1]
 8008b58:	2f0b      	cmp	r7, #11
 8008b5a:	d82b      	bhi.n	8008bb4 <USBD_CDC_Setup+0xcc>
 8008b5c:	e8df f007 	tbb	[pc, r7]
 8008b60:	2a2a3106 	.word	0x2a2a3106
 8008b64:	2a2a2a2a 	.word	0x2a2a2a2a
 8008b68:	22142a2a 	.word	0x22142a2a
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d003      	beq.n	8008b7c <USBD_CDC_Setup+0x94>
            USBD_CtlError(pdev, req);
 8008b74:	f000 fa6e 	bl	8009054 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b78:	2503      	movs	r5, #3
 8008b7a:	e022      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	a901      	add	r1, sp, #4
 8008b80:	f000 fd9a 	bl	80096b8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b84:	463d      	mov	r5, r7
 8008b86:	e01c      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d003      	beq.n	8008b98 <USBD_CDC_Setup+0xb0>
            USBD_CtlError(pdev, req);
 8008b90:	f000 fa60 	bl	8009054 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b94:	2503      	movs	r5, #3
 8008b96:	e014      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f10d 0107 	add.w	r1, sp, #7
 8008b9e:	f000 fd8b 	bl	80096b8 <USBD_CtlSendData>
 8008ba2:	e00e      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ba4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d00a      	beq.n	8008bc2 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8008bac:	f000 fa52 	bl	8009054 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bb0:	2503      	movs	r5, #3
 8008bb2:	e006      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
          USBD_CtlError(pdev, req);
 8008bb4:	f000 fa4e 	bl	8009054 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bb8:	2503      	movs	r5, #3
          break;
 8008bba:	e002      	b.n	8008bc2 <USBD_CDC_Setup+0xda>
      USBD_CtlError(pdev, req);
 8008bbc:	f000 fa4a 	bl	8009054 <USBD_CtlError>
      ret = USBD_FAIL;
 8008bc0:	2503      	movs	r5, #3
}
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bc8 <USBD_CDC_DeInit>:
{
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008bcc:	2181      	movs	r1, #129	; 0x81
 8008bce:	f002 fcec 	bl	800b5aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008bd2:	2500      	movs	r5, #0
 8008bd4:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f002 fce6 	bl	800b5aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008bde:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008be2:	2182      	movs	r1, #130	; 0x82
 8008be4:	4620      	mov	r0, r4
 8008be6:	f002 fce0 	bl	800b5aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008bea:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008bee:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8008bf2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008bf6:	b14b      	cbz	r3, 8008c0c <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008bf8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008c00:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8008c04:	f002 fd9e 	bl	800b744 <free>
    pdev->pClassData = NULL;
 8008c08:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}

08008c10 <USBD_CDC_Init>:
{
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c18:	f002 fd8c 	bl	800b734 <malloc>
  if (hcdc == NULL)
 8008c1c:	b3b8      	cbz	r0, 8008c8e <USBD_CDC_Init+0x7e>
 8008c1e:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8008c20:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c24:	7c23      	ldrb	r3, [r4, #16]
 8008c26:	bbbb      	cbnz	r3, 8008c98 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	2181      	movs	r1, #129	; 0x81
 8008c30:	4620      	mov	r0, r4
 8008c32:	f002 fca8 	bl	800b586 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c36:	2501      	movs	r5, #1
 8008c38:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c3e:	2202      	movs	r2, #2
 8008c40:	4629      	mov	r1, r5
 8008c42:	4620      	mov	r0, r4
 8008c44:	f002 fc9f 	bl	800b586 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c48:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c52:	2308      	movs	r3, #8
 8008c54:	2203      	movs	r2, #3
 8008c56:	2182      	movs	r1, #130	; 0x82
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f002 fc94 	bl	800b586 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c64:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4798      	blx	r3
  hcdc->TxState = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c72:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c76:	7c25      	ldrb	r5, [r4, #16]
 8008c78:	bb15      	cbnz	r5, 8008cc0 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c7e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008c82:	2101      	movs	r1, #1
 8008c84:	4620      	mov	r0, r4
 8008c86:	f002 fcf2 	bl	800b66e <USBD_LL_PrepareReceive>
}
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008c94:	2502      	movs	r5, #2
 8008c96:	e7f8      	b.n	8008c8a <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c98:	2340      	movs	r3, #64	; 0x40
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	2181      	movs	r1, #129	; 0x81
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f002 fc71 	bl	800b586 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ca4:	2501      	movs	r5, #1
 8008ca6:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	2202      	movs	r2, #2
 8008cac:	4629      	mov	r1, r5
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f002 fc69 	bl	800b586 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cb4:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008cb8:	2310      	movs	r3, #16
 8008cba:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8008cbe:	e7c8      	b.n	8008c52 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f002 fcd0 	bl	800b66e <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8008cce:	2500      	movs	r5, #0
 8008cd0:	e7db      	b.n	8008c8a <USBD_CDC_Init+0x7a>

08008cd2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8008cd2:	b119      	cbz	r1, 8008cdc <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8008cd4:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008cd8:	2000      	movs	r0, #0
 8008cda:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008cdc:	2003      	movs	r0, #3
}
 8008cde:	4770      	bx	lr

08008ce0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ce0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 8008ce4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ce8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8008cec:	2000      	movs	r0, #0
 8008cee:	4770      	bx	lr

08008cf0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cf0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 8008cf4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	4770      	bx	lr

08008cfc <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cfc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8008d00:	b1a2      	cbz	r2, 8008d2c <USBD_CDC_TransmitPacket+0x30>
{
 8008d02:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8008d04:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8008d08:	b10b      	cbz	r3, 8008d0e <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d0a:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8008d0c:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d14:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8008d18:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008d1a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8008d1e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8008d22:	2181      	movs	r1, #129	; 0x81
 8008d24:	f002 fc94 	bl	800b650 <USBD_LL_Transmit>
    ret = USBD_OK;
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7ef      	b.n	8008d0c <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8008d2c:	2003      	movs	r0, #3
}
 8008d2e:	4770      	bx	lr

08008d30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d30:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d32:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8008d36:	b192      	cbz	r2, 8008d5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d38:	7c04      	ldrb	r4, [r0, #16]
 8008d3a:	b944      	cbnz	r4, 8008d4e <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d40:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008d44:	2101      	movs	r1, #1
 8008d46:	f002 fc92 	bl	800b66e <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d4e:	2340      	movs	r3, #64	; 0x40
 8008d50:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008d54:	2101      	movs	r1, #1
 8008d56:	f002 fc8a 	bl	800b66e <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8008d5a:	2400      	movs	r4, #0
 8008d5c:	e7f5      	b.n	8008d4a <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8008d5e:	2403      	movs	r4, #3
 8008d60:	e7f3      	b.n	8008d4a <USBD_CDC_ReceivePacket+0x1a>

08008d62 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d62:	b198      	cbz	r0, 8008d8c <USBD_Init+0x2a>
{
 8008d64:	b508      	push	{r3, lr}
 8008d66:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008d6e:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008d72:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d76:	b109      	cbz	r1, 8008d7c <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8008d78:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8008d82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d84:	4618      	mov	r0, r3
 8008d86:	f002 fba9 	bl	800b4dc <USBD_LL_Init>

  return ret;
}
 8008d8a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008d8c:	2003      	movs	r0, #3
}
 8008d8e:	4770      	bx	lr

08008d90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d90:	b510      	push	{r4, lr}
 8008d92:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8008d9a:	b161      	cbz	r1, 8008db6 <USBD_RegisterClass+0x26>
 8008d9c:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008d9e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008da2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008da4:	b14b      	cbz	r3, 8008dba <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008da6:	f10d 0006 	add.w	r0, sp, #6
 8008daa:	4798      	blx	r3
 8008dac:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008db0:	2000      	movs	r0, #0
}
 8008db2:	b002      	add	sp, #8
 8008db4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008db6:	2003      	movs	r0, #3
 8008db8:	e7fb      	b.n	8008db2 <USBD_RegisterClass+0x22>
  return USBD_OK;
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e7f9      	b.n	8008db2 <USBD_RegisterClass+0x22>

08008dbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dbe:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008dc0:	f002 fbd2 	bl	800b568 <USBD_LL_Start>
}
 8008dc4:	bd08      	pop	{r3, pc}

08008dc6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dc6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008dc8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008dcc:	b113      	cbz	r3, 8008dd4 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4798      	blx	r3
  }

  return ret;
}
 8008dd2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008dd4:	2003      	movs	r0, #3
 8008dd6:	e7fc      	b.n	8008dd2 <USBD_SetClassConfig+0xc>

08008dd8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dd8:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008dda:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008dde:	b10b      	cbz	r3, 8008de4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008de4:	2000      	movs	r0, #0
 8008de6:	bd08      	pop	{r3, pc}

08008de8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008dec:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8008df0:	4628      	mov	r0, r5
 8008df2:	f000 f91b 	bl	800902c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008df6:	2301      	movs	r3, #1
 8008df8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008dfc:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8008e00:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e04:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8008e08:	f001 031f 	and.w	r3, r1, #31
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d00d      	beq.n	8008e2c <USBD_LL_SetupStage+0x44>
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d010      	beq.n	8008e36 <USBD_LL_SetupStage+0x4e>
 8008e14:	b12b      	cbz	r3, 8008e22 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e16:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f002 fbd4 	bl	800b5c8 <USBD_LL_StallEP>
      break;
 8008e20:	e003      	b.n	8008e2a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e22:	4629      	mov	r1, r5
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 facd 	bl	80093c4 <USBD_StdDevReq>
  }

  return ret;
}
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 fb00 	bl	8009434 <USBD_StdItfReq>
      break;
 8008e34:	e7f9      	b.n	8008e2a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e36:	4629      	mov	r1, r5
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 fb2f 	bl	800949c <USBD_StdEPReq>
      break;
 8008e3e:	e7f4      	b.n	8008e2a <USBD_LL_SetupStage+0x42>

08008e40 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e44:	460d      	mov	r5, r1
 8008e46:	bb31      	cbnz	r1, 8008e96 <USBD_LL_DataOutStage+0x56>
 8008e48:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e4a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008e4e:	2a03      	cmp	r2, #3
 8008e50:	d001      	beq.n	8008e56 <USBD_LL_DataOutStage+0x16>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008e52:	4608      	mov	r0, r1
}
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008e56:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8008e5a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	d80c      	bhi.n	8008e7c <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e62:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	b11b      	cbz	r3, 8008e72 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e6a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e6e:	2a03      	cmp	r2, #3
 8008e70:	d00f      	beq.n	8008e92 <USBD_LL_DataOutStage+0x52>
        (void)USBD_CtlSendStatus(pdev);
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fc4c 	bl	8009710 <USBD_CtlSendStatus>
  return USBD_OK;
 8008e78:	4628      	mov	r0, r5
 8008e7a:	e7eb      	b.n	8008e54 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008e7c:	1a89      	subs	r1, r1, r2
 8008e7e:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e82:	428a      	cmp	r2, r1
 8008e84:	bf28      	it	cs
 8008e86:	460a      	movcs	r2, r1
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f000 fc39 	bl	8009700 <USBD_CtlContinueRx>
  return USBD_OK;
 8008e8e:	4628      	mov	r0, r5
 8008e90:	e7e0      	b.n	8008e54 <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev);
 8008e92:	4798      	blx	r3
 8008e94:	e7ed      	b.n	8008e72 <USBD_LL_DataOutStage+0x32>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	b12b      	cbz	r3, 8008eaa <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e9e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ea2:	2a03      	cmp	r2, #3
 8008ea4:	d103      	bne.n	8008eae <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008ea6:	4798      	blx	r3
    if (ret != USBD_OK)
 8008ea8:	e7d4      	b.n	8008e54 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8008eaa:	2003      	movs	r0, #3
 8008eac:	e7d2      	b.n	8008e54 <USBD_LL_DataOutStage+0x14>
 8008eae:	2003      	movs	r0, #3
 8008eb0:	e7d0      	b.n	8008e54 <USBD_LL_DataOutStage+0x14>

08008eb2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008eb2:	b538      	push	{r3, r4, r5, lr}
 8008eb4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d148      	bne.n	8008f4e <USBD_LL_DataInStage+0x9c>
 8008ebc:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ebe:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008ec2:	2a02      	cmp	r2, #2
 8008ec4:	d005      	beq.n	8008ed2 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008ec6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d03a      	beq.n	8008f44 <USBD_LL_DataInStage+0x92>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008ece:	4628      	mov	r0, r5
}
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008ed2:	69c2      	ldr	r2, [r0, #28]
 8008ed4:	6a01      	ldr	r1, [r0, #32]
 8008ed6:	428a      	cmp	r2, r1
 8008ed8:	d811      	bhi.n	8008efe <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 8008eda:	428a      	cmp	r2, r1
 8008edc:	d01b      	beq.n	8008f16 <USBD_LL_DataInStage+0x64>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ede:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	b11b      	cbz	r3, 8008eee <USBD_LL_DataInStage+0x3c>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ee6:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008eea:	2a03      	cmp	r2, #3
 8008eec:	d027      	beq.n	8008f3e <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eee:	2180      	movs	r1, #128	; 0x80
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f002 fb69 	bl	800b5c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 fc15 	bl	8009726 <USBD_CtlReceiveStatus>
 8008efc:	e7e3      	b.n	8008ec6 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008efe:	1a52      	subs	r2, r2, r1
 8008f00:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f02:	4619      	mov	r1, r3
 8008f04:	f000 fbe5 	bl	80096d2 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f002 fbad 	bl	800b66e <USBD_LL_PrepareReceive>
 8008f14:	e7d7      	b.n	8008ec6 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8008f16:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d8e0      	bhi.n	8008ede <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8008f1c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d2dc      	bcs.n	8008ede <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f24:	2200      	movs	r2, #0
 8008f26:	4611      	mov	r1, r2
 8008f28:	f000 fbd3 	bl	80096d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f32:	460b      	mov	r3, r1
 8008f34:	460a      	mov	r2, r1
 8008f36:	4620      	mov	r0, r4
 8008f38:	f002 fb99 	bl	800b66e <USBD_LL_PrepareReceive>
 8008f3c:	e7c3      	b.n	8008ec6 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4798      	blx	r3
 8008f42:	e7d4      	b.n	8008eee <USBD_LL_DataInStage+0x3c>
      pdev->dev_test_mode = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	e7c0      	b.n	8008ed0 <USBD_LL_DataInStage+0x1e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f4e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	b12b      	cbz	r3, 8008f62 <USBD_LL_DataInStage+0xb0>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f56:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f5a:	2a03      	cmp	r2, #3
 8008f5c:	d103      	bne.n	8008f66 <USBD_LL_DataInStage+0xb4>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f5e:	4798      	blx	r3
    if (ret != USBD_OK)
 8008f60:	e7b6      	b.n	8008ed0 <USBD_LL_DataInStage+0x1e>
    return USBD_FAIL;
 8008f62:	2003      	movs	r0, #3
 8008f64:	e7b4      	b.n	8008ed0 <USBD_LL_DataInStage+0x1e>
 8008f66:	2003      	movs	r0, #3
 8008f68:	e7b2      	b.n	8008ed0 <USBD_LL_DataInStage+0x1e>

08008f6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f6a:	b570      	push	{r4, r5, r6, lr}
 8008f6c:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f7a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f7c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008f80:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008f84:	b123      	cbz	r3, 8008f90 <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f86:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f90:	2340      	movs	r3, #64	; 0x40
 8008f92:	2200      	movs	r2, #0
 8008f94:	4611      	mov	r1, r2
 8008f96:	4620      	mov	r0, r4
 8008f98:	f002 faf5 	bl	800b586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f9c:	2601      	movs	r6, #1
 8008f9e:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fa2:	2540      	movs	r5, #64	; 0x40
 8008fa4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fa8:	462b      	mov	r3, r5
 8008faa:	2200      	movs	r2, #0
 8008fac:	2180      	movs	r1, #128	; 0x80
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f002 fae9 	bl	800b586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fb4:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fb6:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8008fb8:	2000      	movs	r0, #0
 8008fba:	bd70      	pop	{r4, r5, r6, pc}

08008fbc <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008fbc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	4770      	bx	lr

08008fc2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8008fc2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008fc6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fca:	2304      	movs	r3, #4
 8008fcc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	4770      	bx	lr

08008fd4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fd4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d001      	beq.n	8008fe0 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8008fdc:	2000      	movs	r0, #0
 8008fde:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8008fe0:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8008fe4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8008fe8:	e7f8      	b.n	8008fdc <USBD_LL_Resume+0x8>

08008fea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fea:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d001      	beq.n	8008ff8 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8008ff8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0f8      	beq.n	8008ff4 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8009002:	4798      	blx	r3
 8009004:	e7f6      	b.n	8008ff4 <USBD_LL_SOF+0xa>

08009006 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009006:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8009008:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	b11a      	cbz	r2, 8009016 <USBD_GetLen+0x10>
  {
    len++;
 800900e:	3001      	adds	r0, #1
 8009010:	b2c0      	uxtb	r0, r0
    pbuff++;
 8009012:	3301      	adds	r3, #1
 8009014:	e7f9      	b.n	800900a <USBD_GetLen+0x4>
  }

  return len;
}
 8009016:	4770      	bx	lr

08009018 <USBD_SetFeature>:
{
 8009018:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800901a:	884b      	ldrh	r3, [r1, #2]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d000      	beq.n	8009022 <USBD_SetFeature+0xa>
}
 8009020:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8009022:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009026:	f000 fb73 	bl	8009710 <USBD_CtlSendStatus>
}
 800902a:	e7f9      	b.n	8009020 <USBD_SetFeature+0x8>

0800902c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800902c:	780b      	ldrb	r3, [r1, #0]
 800902e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8009030:	784b      	ldrb	r3, [r1, #1]
 8009032:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8009034:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8009036:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800903c:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800903e:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8009040:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009042:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8009046:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8009048:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800904a:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800904c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8009050:	80c3      	strh	r3, [r0, #6]
}
 8009052:	4770      	bx	lr

08009054 <USBD_CtlError>:
{
 8009054:	b510      	push	{r4, lr}
 8009056:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009058:	2180      	movs	r1, #128	; 0x80
 800905a:	f002 fab5 	bl	800b5c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800905e:	2100      	movs	r1, #0
 8009060:	4620      	mov	r0, r4
 8009062:	f002 fab1 	bl	800b5c8 <USBD_LL_StallEP>
}
 8009066:	bd10      	pop	{r4, pc}

08009068 <USBD_GetDescriptor>:
{
 8009068:	b530      	push	{r4, r5, lr}
 800906a:	b083      	sub	sp, #12
 800906c:	4604      	mov	r4, r0
 800906e:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8009076:	884a      	ldrh	r2, [r1, #2]
 8009078:	0a13      	lsrs	r3, r2, #8
 800907a:	3b01      	subs	r3, #1
 800907c:	2b0e      	cmp	r3, #14
 800907e:	f200 80bc 	bhi.w	80091fa <USBD_GetDescriptor+0x192>
 8009082:	e8df f003 	tbb	[pc, r3]
 8009086:	3015      	.short	0x3015
 8009088:	9ebaba44 	.word	0x9ebaba44
 800908c:	bababaab 	.word	0xbababaab
 8009090:	babababa 	.word	0xbabababa
 8009094:	08          	.byte	0x08
 8009095:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009096:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	b123      	cbz	r3, 80090a8 <USBD_GetDescriptor+0x40>
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800909e:	f10d 0106 	add.w	r1, sp, #6
 80090a2:	7c00      	ldrb	r0, [r0, #16]
 80090a4:	4798      	blx	r3
  if (err != 0U)
 80090a6:	e00a      	b.n	80090be <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7ff ffd3 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 80090ae:	e018      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f10d 0106 	add.w	r1, sp, #6
 80090ba:	7c00      	ldrb	r0, [r0, #16]
 80090bc:	4798      	blx	r3
    if (req->wLength != 0U)
 80090be:	88ea      	ldrh	r2, [r5, #6]
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	f000 80a3 	beq.w	800920c <USBD_GetDescriptor+0x1a4>
      if (len != 0U)
 80090c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 8099 	beq.w	8009202 <USBD_GetDescriptor+0x19a>
        len = MIN(len, req->wLength);
 80090d0:	429a      	cmp	r2, r3
 80090d2:	bf28      	it	cs
 80090d4:	461a      	movcs	r2, r3
 80090d6:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80090da:	4601      	mov	r1, r0
 80090dc:	4620      	mov	r0, r4
 80090de:	f000 faeb 	bl	80096b8 <USBD_CtlSendData>
}
 80090e2:	b003      	add	sp, #12
 80090e4:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090e6:	7c03      	ldrb	r3, [r0, #16]
 80090e8:	b943      	cbnz	r3, 80090fc <USBD_GetDescriptor+0x94>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80090ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f0:	f10d 0006 	add.w	r0, sp, #6
 80090f4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090f6:	2302      	movs	r3, #2
 80090f8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80090fa:	e7e0      	b.n	80090be <USBD_GetDescriptor+0x56>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	f10d 0006 	add.w	r0, sp, #6
 8009106:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009108:	2302      	movs	r3, #2
 800910a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800910c:	e7d7      	b.n	80090be <USBD_GetDescriptor+0x56>
    switch ((uint8_t)(req->wValue))
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	2a05      	cmp	r2, #5
 8009112:	d852      	bhi.n	80091ba <USBD_GetDescriptor+0x152>
 8009114:	e8df f002 	tbb	[pc, r2]
 8009118:	2a1d1003 	.word	0x2a1d1003
 800911c:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800911e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	b123      	cbz	r3, 8009130 <USBD_GetDescriptor+0xc8>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009126:	f10d 0106 	add.w	r1, sp, #6
 800912a:	7c00      	ldrb	r0, [r0, #16]
 800912c:	4798      	blx	r3
  if (err != 0U)
 800912e:	e7c6      	b.n	80090be <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8009130:	4629      	mov	r1, r5
 8009132:	f7ff ff8f 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 8009136:	e7d4      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009138:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	b123      	cbz	r3, 800914a <USBD_GetDescriptor+0xe2>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009140:	f10d 0106 	add.w	r1, sp, #6
 8009144:	7c00      	ldrb	r0, [r0, #16]
 8009146:	4798      	blx	r3
  if (err != 0U)
 8009148:	e7b9      	b.n	80090be <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800914a:	4629      	mov	r1, r5
 800914c:	f7ff ff82 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 8009150:	e7c7      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009152:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	b123      	cbz	r3, 8009164 <USBD_GetDescriptor+0xfc>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800915a:	f10d 0106 	add.w	r1, sp, #6
 800915e:	7c00      	ldrb	r0, [r0, #16]
 8009160:	4798      	blx	r3
  if (err != 0U)
 8009162:	e7ac      	b.n	80090be <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8009164:	4629      	mov	r1, r5
 8009166:	f7ff ff75 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 800916a:	e7ba      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800916c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	b123      	cbz	r3, 800917e <USBD_GetDescriptor+0x116>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009174:	f10d 0106 	add.w	r1, sp, #6
 8009178:	7c00      	ldrb	r0, [r0, #16]
 800917a:	4798      	blx	r3
  if (err != 0U)
 800917c:	e79f      	b.n	80090be <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800917e:	4629      	mov	r1, r5
 8009180:	f7ff ff68 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 8009184:	e7ad      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009186:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	b123      	cbz	r3, 8009198 <USBD_GetDescriptor+0x130>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800918e:	f10d 0106 	add.w	r1, sp, #6
 8009192:	7c00      	ldrb	r0, [r0, #16]
 8009194:	4798      	blx	r3
  if (err != 0U)
 8009196:	e792      	b.n	80090be <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8009198:	4629      	mov	r1, r5
 800919a:	f7ff ff5b 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 800919e:	e7a0      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	b123      	cbz	r3, 80091b2 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091a8:	f10d 0106 	add.w	r1, sp, #6
 80091ac:	7c00      	ldrb	r0, [r0, #16]
 80091ae:	4798      	blx	r3
  if (err != 0U)
 80091b0:	e785      	b.n	80090be <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80091b2:	4629      	mov	r1, r5
 80091b4:	f7ff ff4e 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 80091b8:	e793      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7ff ff4a 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 80091c0:	e78f      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c2:	7c03      	ldrb	r3, [r0, #16]
 80091c4:	b933      	cbnz	r3, 80091d4 <USBD_GetDescriptor+0x16c>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80091c6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80091ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091cc:	f10d 0006 	add.w	r0, sp, #6
 80091d0:	4798      	blx	r3
  if (err != 0U)
 80091d2:	e774      	b.n	80090be <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7ff ff3d 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 80091da:	e782      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091dc:	7c03      	ldrb	r3, [r0, #16]
 80091de:	b943      	cbnz	r3, 80091f2 <USBD_GetDescriptor+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	f10d 0006 	add.w	r0, sp, #6
 80091ea:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091ec:	2307      	movs	r3, #7
 80091ee:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80091f0:	e765      	b.n	80090be <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7ff ff2e 	bl	8009054 <USBD_CtlError>
  if (err != 0U)
 80091f8:	e773      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
    USBD_CtlError(pdev, req);
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7ff ff2a 	bl	8009054 <USBD_CtlError>
    return;
 8009200:	e76f      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
        USBD_CtlError(pdev, req);
 8009202:	4629      	mov	r1, r5
 8009204:	4620      	mov	r0, r4
 8009206:	f7ff ff25 	bl	8009054 <USBD_CtlError>
 800920a:	e76a      	b.n	80090e2 <USBD_GetDescriptor+0x7a>
      (void)USBD_CtlSendStatus(pdev);
 800920c:	4620      	mov	r0, r4
 800920e:	f000 fa7f 	bl	8009710 <USBD_CtlSendStatus>
 8009212:	e766      	b.n	80090e2 <USBD_GetDescriptor+0x7a>

08009214 <USBD_SetAddress>:
{
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009218:	888b      	ldrh	r3, [r1, #4]
 800921a:	b9f3      	cbnz	r3, 800925a <USBD_SetAddress+0x46>
 800921c:	88cb      	ldrh	r3, [r1, #6]
 800921e:	b9e3      	cbnz	r3, 800925a <USBD_SetAddress+0x46>
 8009220:	884b      	ldrh	r3, [r1, #2]
 8009222:	2b7f      	cmp	r3, #127	; 0x7f
 8009224:	d819      	bhi.n	800925a <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009226:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800922e:	2b03      	cmp	r3, #3
 8009230:	d00c      	beq.n	800924c <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8009232:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009236:	4629      	mov	r1, r5
 8009238:	f002 f9fb 	bl	800b632 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fa67 	bl	8009710 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8009242:	b135      	cbz	r5, 8009252 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009244:	2302      	movs	r3, #2
 8009246:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800924a:	e009      	b.n	8009260 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800924c:	f7ff ff02 	bl	8009054 <USBD_CtlError>
 8009250:	e006      	b.n	8009260 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009252:	2301      	movs	r3, #1
 8009254:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8009258:	e002      	b.n	8009260 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800925a:	4620      	mov	r0, r4
 800925c:	f7ff fefa 	bl	8009054 <USBD_CtlError>
}
 8009260:	bd38      	pop	{r3, r4, r5, pc}
	...

08009264 <USBD_SetConfig>:
{
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800926a:	788d      	ldrb	r5, [r1, #2]
 800926c:	4b2d      	ldr	r3, [pc, #180]	; (8009324 <USBD_SetConfig+0xc0>)
 800926e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009270:	2d01      	cmp	r5, #1
 8009272:	d80f      	bhi.n	8009294 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8009274:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009278:	2b02      	cmp	r3, #2
 800927a:	d00f      	beq.n	800929c <USBD_SetConfig+0x38>
 800927c:	2b03      	cmp	r3, #3
 800927e:	d023      	beq.n	80092c8 <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 8009280:	f7ff fee8 	bl	8009054 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009284:	4b27      	ldr	r3, [pc, #156]	; (8009324 <USBD_SetConfig+0xc0>)
 8009286:	7819      	ldrb	r1, [r3, #0]
 8009288:	4620      	mov	r0, r4
 800928a:	f7ff fda5 	bl	8008dd8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800928e:	2503      	movs	r5, #3
}
 8009290:	4628      	mov	r0, r5
 8009292:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8009294:	f7ff fede 	bl	8009054 <USBD_CtlError>
    return USBD_FAIL;
 8009298:	2503      	movs	r5, #3
 800929a:	e7f9      	b.n	8009290 <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 800929c:	b18d      	cbz	r5, 80092c2 <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 800929e:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7ff fd90 	bl	8008dc6 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80092a6:	4605      	mov	r5, r0
 80092a8:	b120      	cbz	r0, 80092b4 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 80092aa:	4631      	mov	r1, r6
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7ff fed1 	bl	8009054 <USBD_CtlError>
 80092b2:	e7ed      	b.n	8009290 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 fa2b 	bl	8009710 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80092ba:	2303      	movs	r3, #3
 80092bc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80092c0:	e7e6      	b.n	8009290 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 80092c2:	f000 fa25 	bl	8009710 <USBD_CtlSendStatus>
 80092c6:	e7e3      	b.n	8009290 <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 80092c8:	b1cd      	cbz	r5, 80092fe <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 80092ca:	6841      	ldr	r1, [r0, #4]
 80092cc:	428d      	cmp	r5, r1
 80092ce:	d025      	beq.n	800931c <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092d0:	b2c9      	uxtb	r1, r1
 80092d2:	f7ff fd81 	bl	8008dd8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <USBD_SetConfig+0xc0>)
 80092d8:	7819      	ldrb	r1, [r3, #0]
 80092da:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff fd72 	bl	8008dc6 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80092e2:	4605      	mov	r5, r0
 80092e4:	b1b0      	cbz	r0, 8009314 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 80092e6:	4631      	mov	r1, r6
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7ff feb3 	bl	8009054 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092ee:	7921      	ldrb	r1, [r4, #4]
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7ff fd71 	bl	8008dd8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092f6:	2302      	movs	r3, #2
 80092f8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80092fc:	e7c8      	b.n	8009290 <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80092fe:	2302      	movs	r3, #2
 8009300:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009304:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009306:	4629      	mov	r1, r5
 8009308:	f7ff fd66 	bl	8008dd8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800930c:	4620      	mov	r0, r4
 800930e:	f000 f9ff 	bl	8009710 <USBD_CtlSendStatus>
 8009312:	e7bd      	b.n	8009290 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8009314:	4620      	mov	r0, r4
 8009316:	f000 f9fb 	bl	8009710 <USBD_CtlSendStatus>
 800931a:	e7b9      	b.n	8009290 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 800931c:	f000 f9f8 	bl	8009710 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8009320:	2500      	movs	r5, #0
 8009322:	e7b5      	b.n	8009290 <USBD_SetConfig+0x2c>
 8009324:	2000130c 	.word	0x2000130c

08009328 <USBD_GetConfig>:
{
 8009328:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800932a:	88cb      	ldrh	r3, [r1, #6]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10a      	bne.n	8009346 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8009330:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009334:	2b02      	cmp	r3, #2
 8009336:	d909      	bls.n	800934c <USBD_GetConfig+0x24>
 8009338:	2b03      	cmp	r3, #3
 800933a:	d109      	bne.n	8009350 <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800933c:	2201      	movs	r2, #1
 800933e:	1d01      	adds	r1, r0, #4
 8009340:	f000 f9ba 	bl	80096b8 <USBD_CtlSendData>
      break;
 8009344:	e001      	b.n	800934a <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 8009346:	f7ff fe85 	bl	8009054 <USBD_CtlError>
}
 800934a:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800934c:	b25b      	sxtb	r3, r3
 800934e:	b913      	cbnz	r3, 8009356 <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 8009350:	f7ff fe80 	bl	8009054 <USBD_CtlError>
}
 8009354:	e7f9      	b.n	800934a <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 8009356:	4601      	mov	r1, r0
 8009358:	2300      	movs	r3, #0
 800935a:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800935e:	2201      	movs	r2, #1
 8009360:	f000 f9aa 	bl	80096b8 <USBD_CtlSendData>
      break;
 8009364:	e7f1      	b.n	800934a <USBD_GetConfig+0x22>

08009366 <USBD_GetStatus>:
{
 8009366:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8009368:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800936c:	3b01      	subs	r3, #1
 800936e:	2b02      	cmp	r3, #2
 8009370:	d812      	bhi.n	8009398 <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8009372:	88cb      	ldrh	r3, [r1, #6]
 8009374:	2b02      	cmp	r3, #2
 8009376:	d10c      	bne.n	8009392 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009378:	2301      	movs	r3, #1
 800937a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800937c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8009380:	b10b      	cbz	r3, 8009386 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009382:	2303      	movs	r3, #3
 8009384:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009386:	2202      	movs	r2, #2
 8009388:	f100 010c 	add.w	r1, r0, #12
 800938c:	f000 f994 	bl	80096b8 <USBD_CtlSendData>
}
 8009390:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8009392:	f7ff fe5f 	bl	8009054 <USBD_CtlError>
      break;
 8009396:	e7fb      	b.n	8009390 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 8009398:	f7ff fe5c 	bl	8009054 <USBD_CtlError>
}
 800939c:	e7f8      	b.n	8009390 <USBD_GetStatus+0x2a>

0800939e <USBD_ClrFeature>:
{
 800939e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80093a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80093a4:	3b01      	subs	r3, #1
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d809      	bhi.n	80093be <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093aa:	884b      	ldrh	r3, [r1, #2]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d000      	beq.n	80093b2 <USBD_ClrFeature+0x14>
}
 80093b0:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093b8:	f000 f9aa 	bl	8009710 <USBD_CtlSendStatus>
 80093bc:	e7f8      	b.n	80093b0 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80093be:	f7ff fe49 	bl	8009054 <USBD_CtlError>
}
 80093c2:	e7f5      	b.n	80093b0 <USBD_ClrFeature+0x12>

080093c4 <USBD_StdDevReq>:
{
 80093c4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c6:	780c      	ldrb	r4, [r1, #0]
 80093c8:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80093cc:	2c20      	cmp	r4, #32
 80093ce:	d006      	beq.n	80093de <USBD_StdDevReq+0x1a>
 80093d0:	2c40      	cmp	r4, #64	; 0x40
 80093d2:	d004      	beq.n	80093de <USBD_StdDevReq+0x1a>
 80093d4:	b154      	cbz	r4, 80093ec <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 80093d6:	f7ff fe3d 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80093da:	2400      	movs	r4, #0
    break;
 80093dc:	e004      	b.n	80093e8 <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	4798      	blx	r3
 80093e6:	4604      	mov	r4, r0
}
 80093e8:	4620      	mov	r0, r4
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80093ec:	784d      	ldrb	r5, [r1, #1]
 80093ee:	2d09      	cmp	r5, #9
 80093f0:	d81d      	bhi.n	800942e <USBD_StdDevReq+0x6a>
 80093f2:	e8df f005 	tbb	[pc, r5]
 80093f6:	1912      	.short	0x1912
 80093f8:	081c161c 	.word	0x081c161c
 80093fc:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 8009400:	f7ff fe32 	bl	8009068 <USBD_GetDescriptor>
      break;
 8009404:	e7f0      	b.n	80093e8 <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 8009406:	f7ff ff05 	bl	8009214 <USBD_SetAddress>
      break;
 800940a:	e7ed      	b.n	80093e8 <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 800940c:	f7ff ff2a 	bl	8009264 <USBD_SetConfig>
 8009410:	4604      	mov	r4, r0
      break;
 8009412:	e7e9      	b.n	80093e8 <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 8009414:	f7ff ff88 	bl	8009328 <USBD_GetConfig>
      break;
 8009418:	e7e6      	b.n	80093e8 <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 800941a:	f7ff ffa4 	bl	8009366 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800941e:	462c      	mov	r4, r5
      break;
 8009420:	e7e2      	b.n	80093e8 <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 8009422:	f7ff fdf9 	bl	8009018 <USBD_SetFeature>
      break;
 8009426:	e7df      	b.n	80093e8 <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 8009428:	f7ff ffb9 	bl	800939e <USBD_ClrFeature>
      break;
 800942c:	e7dc      	b.n	80093e8 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 800942e:	f7ff fe11 	bl	8009054 <USBD_CtlError>
      break;
 8009432:	e7d9      	b.n	80093e8 <USBD_StdDevReq+0x24>

08009434 <USBD_StdItfReq>:
{
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	4605      	mov	r5, r0
 8009438:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800943a:	780b      	ldrb	r3, [r1, #0]
 800943c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009440:	2b20      	cmp	r3, #32
 8009442:	d007      	beq.n	8009454 <USBD_StdItfReq+0x20>
 8009444:	2b40      	cmp	r3, #64	; 0x40
 8009446:	d005      	beq.n	8009454 <USBD_StdItfReq+0x20>
 8009448:	b123      	cbz	r3, 8009454 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 800944a:	f7ff fe03 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800944e:	2600      	movs	r6, #0
}
 8009450:	4630      	mov	r0, r6
 8009452:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8009454:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8009458:	3b01      	subs	r3, #1
 800945a:	2b02      	cmp	r3, #2
 800945c:	d818      	bhi.n	8009490 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800945e:	7923      	ldrb	r3, [r4, #4]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d80f      	bhi.n	8009484 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009464:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	4621      	mov	r1, r4
 800946c:	4628      	mov	r0, r5
 800946e:	4798      	blx	r3
 8009470:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009472:	88e3      	ldrh	r3, [r4, #6]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1eb      	bne.n	8009450 <USBD_StdItfReq+0x1c>
 8009478:	2800      	cmp	r0, #0
 800947a:	d1e9      	bne.n	8009450 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 800947c:	4628      	mov	r0, r5
 800947e:	f000 f947 	bl	8009710 <USBD_CtlSendStatus>
 8009482:	e7e5      	b.n	8009450 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8009484:	4621      	mov	r1, r4
 8009486:	4628      	mov	r0, r5
 8009488:	f7ff fde4 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800948c:	2600      	movs	r6, #0
 800948e:	e7df      	b.n	8009450 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8009490:	4621      	mov	r1, r4
 8009492:	4628      	mov	r0, r5
 8009494:	f7ff fdde 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009498:	2600      	movs	r6, #0
      break;
 800949a:	e7d9      	b.n	8009450 <USBD_StdItfReq+0x1c>

0800949c <USBD_StdEPReq>:
{
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	4606      	mov	r6, r0
 80094a0:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80094a2:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a4:	780c      	ldrb	r4, [r1, #0]
 80094a6:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80094aa:	2c20      	cmp	r4, #32
 80094ac:	d008      	beq.n	80094c0 <USBD_StdEPReq+0x24>
 80094ae:	b2d9      	uxtb	r1, r3
 80094b0:	2c40      	cmp	r4, #64	; 0x40
 80094b2:	d005      	beq.n	80094c0 <USBD_StdEPReq+0x24>
 80094b4:	b16c      	cbz	r4, 80094d2 <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 80094b6:	4629      	mov	r1, r5
 80094b8:	f7ff fdcc 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80094bc:	2400      	movs	r4, #0
    break;
 80094be:	e006      	b.n	80094ce <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094c0:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	4629      	mov	r1, r5
 80094c8:	4630      	mov	r0, r6
 80094ca:	4798      	blx	r3
 80094cc:	4604      	mov	r4, r0
}
 80094ce:	4620      	mov	r0, r4
 80094d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 80094d2:	786f      	ldrb	r7, [r5, #1]
 80094d4:	2f01      	cmp	r7, #1
 80094d6:	d02e      	beq.n	8009536 <USBD_StdEPReq+0x9a>
 80094d8:	2f03      	cmp	r7, #3
 80094da:	d005      	beq.n	80094e8 <USBD_StdEPReq+0x4c>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	d057      	beq.n	8009590 <USBD_StdEPReq+0xf4>
      USBD_CtlError(pdev, req);
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7ff fdb7 	bl	8009054 <USBD_CtlError>
      break;
 80094e6:	e7f2      	b.n	80094ce <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80094e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d005      	beq.n	80094fc <USBD_StdEPReq+0x60>
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d012      	beq.n	800951a <USBD_StdEPReq+0x7e>
        USBD_CtlError(pdev, req);
 80094f4:	4629      	mov	r1, r5
 80094f6:	f7ff fdad 	bl	8009054 <USBD_CtlError>
        break;
 80094fa:	e7e8      	b.n	80094ce <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094fc:	b109      	cbz	r1, 8009502 <USBD_StdEPReq+0x66>
 80094fe:	2980      	cmp	r1, #128	; 0x80
 8009500:	d104      	bne.n	800950c <USBD_StdEPReq+0x70>
          USBD_CtlError(pdev, req);
 8009502:	4629      	mov	r1, r5
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff fda5 	bl	8009054 <USBD_CtlError>
 800950a:	e7e0      	b.n	80094ce <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800950c:	f002 f85c 	bl	800b5c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009510:	2180      	movs	r1, #128	; 0x80
 8009512:	4630      	mov	r0, r6
 8009514:	f002 f858 	bl	800b5c8 <USBD_LL_StallEP>
 8009518:	e7d9      	b.n	80094ce <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800951a:	886b      	ldrh	r3, [r5, #2]
 800951c:	b923      	cbnz	r3, 8009528 <USBD_StdEPReq+0x8c>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800951e:	b119      	cbz	r1, 8009528 <USBD_StdEPReq+0x8c>
 8009520:	2980      	cmp	r1, #128	; 0x80
 8009522:	d001      	beq.n	8009528 <USBD_StdEPReq+0x8c>
 8009524:	88eb      	ldrh	r3, [r5, #6]
 8009526:	b11b      	cbz	r3, 8009530 <USBD_StdEPReq+0x94>
        (void)USBD_CtlSendStatus(pdev);
 8009528:	4630      	mov	r0, r6
 800952a:	f000 f8f1 	bl	8009710 <USBD_CtlSendStatus>
        break;
 800952e:	e7ce      	b.n	80094ce <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009530:	f002 f84a 	bl	800b5c8 <USBD_LL_StallEP>
 8009534:	e7f8      	b.n	8009528 <USBD_StdEPReq+0x8c>
      switch (pdev->dev_state)
 8009536:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800953a:	2b02      	cmp	r3, #2
 800953c:	d005      	beq.n	800954a <USBD_StdEPReq+0xae>
 800953e:	2b03      	cmp	r3, #3
 8009540:	d012      	beq.n	8009568 <USBD_StdEPReq+0xcc>
        USBD_CtlError(pdev, req);
 8009542:	4629      	mov	r1, r5
 8009544:	f7ff fd86 	bl	8009054 <USBD_CtlError>
        break;
 8009548:	e7c1      	b.n	80094ce <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800954a:	b109      	cbz	r1, 8009550 <USBD_StdEPReq+0xb4>
 800954c:	2980      	cmp	r1, #128	; 0x80
 800954e:	d104      	bne.n	800955a <USBD_StdEPReq+0xbe>
          USBD_CtlError(pdev, req);
 8009550:	4629      	mov	r1, r5
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff fd7e 	bl	8009054 <USBD_CtlError>
 8009558:	e7b9      	b.n	80094ce <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800955a:	f002 f835 	bl	800b5c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800955e:	2180      	movs	r1, #128	; 0x80
 8009560:	4630      	mov	r0, r6
 8009562:	f002 f831 	bl	800b5c8 <USBD_LL_StallEP>
 8009566:	e7b2      	b.n	80094ce <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009568:	886b      	ldrh	r3, [r5, #2]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1af      	bne.n	80094ce <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 800956e:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8009572:	d10a      	bne.n	800958a <USBD_StdEPReq+0xee>
          (void)USBD_CtlSendStatus(pdev);
 8009574:	4630      	mov	r0, r6
 8009576:	f000 f8cb 	bl	8009710 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800957a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	4629      	mov	r1, r5
 8009582:	4630      	mov	r0, r6
 8009584:	4798      	blx	r3
 8009586:	4604      	mov	r4, r0
 8009588:	e7a1      	b.n	80094ce <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800958a:	f002 f82c 	bl	800b5e6 <USBD_LL_ClearStallEP>
 800958e:	e7f1      	b.n	8009574 <USBD_StdEPReq+0xd8>
      switch (pdev->dev_state)
 8009590:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009594:	2a02      	cmp	r2, #2
 8009596:	d006      	beq.n	80095a6 <USBD_StdEPReq+0x10a>
 8009598:	2a03      	cmp	r2, #3
 800959a:	d029      	beq.n	80095f0 <USBD_StdEPReq+0x154>
        USBD_CtlError(pdev, req);
 800959c:	4629      	mov	r1, r5
 800959e:	f7ff fd59 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80095a2:	463c      	mov	r4, r7
        break;
 80095a4:	e793      	b.n	80094ce <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095a6:	b109      	cbz	r1, 80095ac <USBD_StdEPReq+0x110>
 80095a8:	2980      	cmp	r1, #128	; 0x80
 80095aa:	d113      	bne.n	80095d4 <USBD_StdEPReq+0x138>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095b0:	d115      	bne.n	80095de <USBD_StdEPReq+0x142>
              &pdev->ep_out[ep_addr & 0x7FU];
 80095b2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80095ba:	0089      	lsls	r1, r1, #2
 80095bc:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80095c0:	4431      	add	r1, r6
 80095c2:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095c8:	2202      	movs	r2, #2
 80095ca:	4630      	mov	r0, r6
 80095cc:	f000 f874 	bl	80096b8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80095d0:	463c      	mov	r4, r7
        break;
 80095d2:	e77c      	b.n	80094ce <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 80095d4:	4629      	mov	r1, r5
 80095d6:	f7ff fd3d 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80095da:	463c      	mov	r4, r7
          break;
 80095dc:	e777      	b.n	80094ce <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095de:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80095e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80095e6:	0089      	lsls	r1, r1, #2
 80095e8:	3110      	adds	r1, #16
 80095ea:	4431      	add	r1, r6
 80095ec:	3104      	adds	r1, #4
 80095ee:	e7e9      	b.n	80095c4 <USBD_StdEPReq+0x128>
        if ((ep_addr & 0x80U) == 0x80U)
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	db1f      	blt.n	8009636 <USBD_StdEPReq+0x19a>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095f6:	f001 020f 	and.w	r2, r1, #15
 80095fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80095fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009602:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8009606:	b322      	cbz	r2, 8009652 <USBD_StdEPReq+0x1b6>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009608:	2b00      	cmp	r3, #0
 800960a:	db27      	blt.n	800965c <USBD_StdEPReq+0x1c0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800960c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009610:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009614:	009c      	lsls	r4, r3, #2
 8009616:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800961a:	4434      	add	r4, r6
 800961c:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800961e:	b109      	cbz	r1, 8009624 <USBD_StdEPReq+0x188>
 8009620:	2980      	cmp	r1, #128	; 0x80
 8009622:	d124      	bne.n	800966e <USBD_StdEPReq+0x1d2>
            pep->status = 0x0000U;
 8009624:	2300      	movs	r3, #0
 8009626:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009628:	2202      	movs	r2, #2
 800962a:	4621      	mov	r1, r4
 800962c:	4630      	mov	r0, r6
 800962e:	f000 f843 	bl	80096b8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009632:	463c      	mov	r4, r7
          break;
 8009634:	e74b      	b.n	80094ce <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009636:	f001 020f 	and.w	r2, r1, #15
 800963a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800963e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009642:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8009644:	2a00      	cmp	r2, #0
 8009646:	d1df      	bne.n	8009608 <USBD_StdEPReq+0x16c>
            USBD_CtlError(pdev, req);
 8009648:	4629      	mov	r1, r5
 800964a:	f7ff fd03 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800964e:	463c      	mov	r4, r7
            break;
 8009650:	e73d      	b.n	80094ce <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 8009652:	4629      	mov	r1, r5
 8009654:	f7ff fcfe 	bl	8009054 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009658:	463c      	mov	r4, r7
            break;
 800965a:	e738      	b.n	80094ce <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800965c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8009660:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009664:	009c      	lsls	r4, r3, #2
 8009666:	3410      	adds	r4, #16
 8009668:	4434      	add	r4, r6
 800966a:	3404      	adds	r4, #4
 800966c:	e7d7      	b.n	800961e <USBD_StdEPReq+0x182>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800966e:	4630      	mov	r0, r6
 8009670:	f001 ffc8 	bl	800b604 <USBD_LL_IsStallEP>
 8009674:	b110      	cbz	r0, 800967c <USBD_StdEPReq+0x1e0>
            pep->status = 0x0001U;
 8009676:	2301      	movs	r3, #1
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	e7d5      	b.n	8009628 <USBD_StdEPReq+0x18c>
            pep->status = 0x0000U;
 800967c:	2300      	movs	r3, #0
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	e7d2      	b.n	8009628 <USBD_StdEPReq+0x18c>

08009682 <USBD_GetString>:
  if (desc == NULL)
 8009682:	b1c0      	cbz	r0, 80096b6 <USBD_GetString+0x34>
{
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	460d      	mov	r5, r1
 8009688:	4616      	mov	r6, r2
 800968a:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800968c:	f7ff fcbb 	bl	8009006 <USBD_GetLen>
 8009690:	3001      	adds	r0, #1
 8009692:	0040      	lsls	r0, r0, #1
 8009694:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8009696:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009698:	2303      	movs	r3, #3
 800969a:	706b      	strb	r3, [r5, #1]
  idx++;
 800969c:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800969e:	7822      	ldrb	r2, [r4, #0]
 80096a0:	b142      	cbz	r2, 80096b4 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 80096a2:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80096a4:	3401      	adds	r4, #1
    idx++;
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80096aa:	2100      	movs	r1, #0
 80096ac:	54a9      	strb	r1, [r5, r2]
    idx++;
 80096ae:	3302      	adds	r3, #2
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	e7f4      	b.n	800969e <USBD_GetString+0x1c>
}
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	4770      	bx	lr

080096b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096b8:	b510      	push	{r4, lr}
 80096ba:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096bc:	2202      	movs	r2, #2
 80096be:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096c2:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 80096c4:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096c6:	460a      	mov	r2, r1
 80096c8:	2100      	movs	r1, #0
 80096ca:	f001 ffc1 	bl	800b650 <USBD_LL_Transmit>

  return USBD_OK;
}
 80096ce:	2000      	movs	r0, #0
 80096d0:	bd10      	pop	{r4, pc}

080096d2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096d2:	b508      	push	{r3, lr}
 80096d4:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096d6:	460a      	mov	r2, r1
 80096d8:	2100      	movs	r1, #0
 80096da:	f001 ffb9 	bl	800b650 <USBD_LL_Transmit>

  return USBD_OK;
}
 80096de:	2000      	movs	r0, #0
 80096e0:	bd08      	pop	{r3, pc}

080096e2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096e2:	b510      	push	{r4, lr}
 80096e4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096e6:	2203      	movs	r2, #3
 80096e8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096ec:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80096f0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096f4:	460a      	mov	r2, r1
 80096f6:	2100      	movs	r1, #0
 80096f8:	f001 ffb9 	bl	800b66e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80096fc:	2000      	movs	r0, #0
 80096fe:	bd10      	pop	{r4, pc}

08009700 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009700:	b508      	push	{r3, lr}
 8009702:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009704:	460a      	mov	r2, r1
 8009706:	2100      	movs	r1, #0
 8009708:	f001 ffb1 	bl	800b66e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800970c:	2000      	movs	r0, #0
 800970e:	bd08      	pop	{r3, pc}

08009710 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009710:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009712:	2304      	movs	r3, #4
 8009714:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009718:	2300      	movs	r3, #0
 800971a:	461a      	mov	r2, r3
 800971c:	4619      	mov	r1, r3
 800971e:	f001 ff97 	bl	800b650 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009722:	2000      	movs	r0, #0
 8009724:	bd08      	pop	{r3, pc}

08009726 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009726:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009728:	2305      	movs	r3, #5
 800972a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800972e:	2300      	movs	r3, #0
 8009730:	461a      	mov	r2, r3
 8009732:	4619      	mov	r1, r3
 8009734:	f001 ff9b 	bl	800b66e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009738:	2000      	movs	r0, #0
 800973a:	bd08      	pop	{r3, pc}

0800973c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800973c:	2884      	cmp	r0, #132	; 0x84
 800973e:	d001      	beq.n	8009744 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8009740:	3003      	adds	r0, #3
 8009742:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009744:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8009746:	4770      	bx	lr

08009748 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009748:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800974a:	f000 feb7 	bl	800a4bc <vTaskStartScheduler>
  
  return osOK;
}
 800974e:	2000      	movs	r0, #0
 8009750:	bd08      	pop	{r3, pc}

08009752 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009756:	b087      	sub	sp, #28
 8009758:	4604      	mov	r4, r0
 800975a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800975c:	6945      	ldr	r5, [r0, #20]
 800975e:	b1bd      	cbz	r5, 8009790 <osThreadCreate+0x3e>
 8009760:	6986      	ldr	r6, [r0, #24]
 8009762:	b1ae      	cbz	r6, 8009790 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009764:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009768:	f8d0 9000 	ldr.w	r9, [r0]
 800976c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8009770:	f7ff ffe4 	bl	800973c <makeFreeRtosPriority>
 8009774:	9602      	str	r6, [sp, #8]
 8009776:	9501      	str	r5, [sp, #4]
 8009778:	9000      	str	r0, [sp, #0]
 800977a:	463b      	mov	r3, r7
 800977c:	6922      	ldr	r2, [r4, #16]
 800977e:	4649      	mov	r1, r9
 8009780:	4640      	mov	r0, r8
 8009782:	f000 fe2d 	bl	800a3e0 <xTaskCreateStatic>
 8009786:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009788:	9805      	ldr	r0, [sp, #20]
}
 800978a:	b007      	add	sp, #28
 800978c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009790:	6865      	ldr	r5, [r4, #4]
 8009792:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009794:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009798:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800979c:	f7ff ffce 	bl	800973c <makeFreeRtosPriority>
 80097a0:	ab05      	add	r3, sp, #20
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	9000      	str	r0, [sp, #0]
 80097a6:	463b      	mov	r3, r7
 80097a8:	fa1f f288 	uxth.w	r2, r8
 80097ac:	4631      	mov	r1, r6
 80097ae:	4628      	mov	r0, r5
 80097b0:	f000 fe50 	bl	800a454 <xTaskCreate>
 80097b4:	2801      	cmp	r0, #1
 80097b6:	d0e7      	beq.n	8009788 <osThreadCreate+0x36>
      return NULL;
 80097b8:	2000      	movs	r0, #0
 80097ba:	e7e6      	b.n	800978a <osThreadCreate+0x38>

080097bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80097bc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80097be:	b900      	cbnz	r0, 80097c2 <osDelay+0x6>
 80097c0:	2001      	movs	r0, #1
 80097c2:	f000 ffc1 	bl	800a748 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80097c6:	2000      	movs	r0, #0
 80097c8:	bd08      	pop	{r3, pc}

080097ca <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80097ca:	b510      	push	{r4, lr}
 80097cc:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80097ce:	6844      	ldr	r4, [r0, #4]
 80097d0:	b17c      	cbz	r4, 80097f2 <osSemaphoreCreate+0x28>
    if (count == 1) {
 80097d2:	2901      	cmp	r1, #1
 80097d4:	d003      	beq.n	80097de <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80097d6:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 80097d8:	4620      	mov	r0, r4
 80097da:	b002      	add	sp, #8
 80097dc:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80097de:	2303      	movs	r3, #3
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	4623      	mov	r3, r4
 80097e4:	2200      	movs	r2, #0
 80097e6:	4611      	mov	r1, r2
 80097e8:	2001      	movs	r0, #1
 80097ea:	f000 f965 	bl	8009ab8 <xQueueGenericCreateStatic>
 80097ee:	4604      	mov	r4, r0
 80097f0:	e7f2      	b.n	80097d8 <osSemaphoreCreate+0xe>
    if (count == 1) {
 80097f2:	2901      	cmp	r1, #1
 80097f4:	d1f0      	bne.n	80097d8 <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 80097f6:	2203      	movs	r2, #3
 80097f8:	2100      	movs	r1, #0
 80097fa:	2001      	movs	r0, #1
 80097fc:	f000 f9a6 	bl	8009b4c <xQueueGenericCreate>
 8009800:	4604      	mov	r4, r0
 8009802:	2800      	cmp	r0, #0
 8009804:	d0e8      	beq.n	80097d8 <osSemaphoreCreate+0xe>
 8009806:	2300      	movs	r3, #0
 8009808:	461a      	mov	r2, r3
 800980a:	4619      	mov	r1, r3
 800980c:	f000 f9c6 	bl	8009b9c <xQueueGenericSend>
      return sema;
 8009810:	e7e2      	b.n	80097d8 <osSemaphoreCreate+0xe>

08009812 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009812:	b500      	push	{lr}
 8009814:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009816:	6882      	ldr	r2, [r0, #8]
 8009818:	b142      	cbz	r2, 800982c <osMessageCreate+0x1a>
 800981a:	68c3      	ldr	r3, [r0, #12]
 800981c:	b133      	cbz	r3, 800982c <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800981e:	2100      	movs	r1, #0
 8009820:	9100      	str	r1, [sp, #0]
 8009822:	6841      	ldr	r1, [r0, #4]
 8009824:	6800      	ldr	r0, [r0, #0]
 8009826:	f000 f947 	bl	8009ab8 <xQueueGenericCreateStatic>
 800982a:	e004      	b.n	8009836 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800982c:	2200      	movs	r2, #0
 800982e:	6841      	ldr	r1, [r0, #4]
 8009830:	6800      	ldr	r0, [r0, #0]
 8009832:	f000 f98b 	bl	8009b4c <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009836:	b003      	add	sp, #12
 8009838:	f85d fb04 	ldr.w	pc, [sp], #4

0800983c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800983c:	f100 0308 	add.w	r3, r0, #8
 8009840:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009846:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009848:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800984a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009850:	4770      	bx	lr

08009852 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009856:	4770      	bx	lr

08009858 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009858:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800985a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800985c:	689a      	ldr	r2, [r3, #8]
 800985e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009860:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009862:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009864:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009866:	6803      	ldr	r3, [r0, #0]
 8009868:	3301      	adds	r3, #1
 800986a:	6003      	str	r3, [r0, #0]
}
 800986c:	4770      	bx	lr

0800986e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800986e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009870:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009872:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009876:	d011      	beq.n	800989c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009878:	f100 0308 	add.w	r3, r0, #8
 800987c:	461c      	mov	r4, r3
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	42aa      	cmp	r2, r5
 8009884:	d9fa      	bls.n	800987c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009886:	6863      	ldr	r3, [r4, #4]
 8009888:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800988a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800988c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800988e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009890:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009892:	6803      	ldr	r3, [r0, #0]
 8009894:	3301      	adds	r3, #1
 8009896:	6003      	str	r3, [r0, #0]
}
 8009898:	bc30      	pop	{r4, r5}
 800989a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800989c:	6904      	ldr	r4, [r0, #16]
 800989e:	e7f2      	b.n	8009886 <vListInsert+0x18>

080098a0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098a0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098a2:	6841      	ldr	r1, [r0, #4]
 80098a4:	6882      	ldr	r2, [r0, #8]
 80098a6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098a8:	6841      	ldr	r1, [r0, #4]
 80098aa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	4282      	cmp	r2, r0
 80098b0:	d006      	beq.n	80098c0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098b2:	2200      	movs	r2, #0
 80098b4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	3a01      	subs	r2, #1
 80098ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098bc:	6818      	ldr	r0, [r3, #0]
}
 80098be:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098c0:	6882      	ldr	r2, [r0, #8]
 80098c2:	605a      	str	r2, [r3, #4]
 80098c4:	e7f5      	b.n	80098b2 <uxListRemove+0x12>

080098c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80098c6:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80098c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80098ca:	b118      	cbz	r0, 80098d4 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80098d4:	4770      	bx	lr

080098d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80098d6:	b510      	push	{r4, lr}
 80098d8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098da:	f001 f9fb 	bl	800acd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80098e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d004      	beq.n	80098f0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80098e6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80098e8:	f001 fa16 	bl	800ad18 <vPortExitCritical>

	return xReturn;
}
 80098ec:	4620      	mov	r0, r4
 80098ee:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80098f0:	2401      	movs	r4, #1
 80098f2:	e7f9      	b.n	80098e8 <prvIsQueueFull+0x12>

080098f4 <prvIsQueueEmpty>:
{
 80098f4:	b510      	push	{r4, lr}
 80098f6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80098f8:	f001 f9ec 	bl	800acd4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098fe:	b923      	cbnz	r3, 800990a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009900:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009902:	f001 fa09 	bl	800ad18 <vPortExitCritical>
}
 8009906:	4620      	mov	r0, r4
 8009908:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800990a:	2400      	movs	r4, #0
 800990c:	e7f9      	b.n	8009902 <prvIsQueueEmpty+0xe>

0800990e <prvCopyDataToQueue>:
{
 800990e:	b570      	push	{r4, r5, r6, lr}
 8009910:	4604      	mov	r4, r0
 8009912:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009914:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009916:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009918:	b95a      	cbnz	r2, 8009932 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800991a:	6803      	ldr	r3, [r0, #0]
 800991c:	b11b      	cbz	r3, 8009926 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800991e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009920:	3601      	adds	r6, #1
 8009922:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009924:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009926:	6880      	ldr	r0, [r0, #8]
 8009928:	f001 f89e 	bl	800aa68 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800992c:	2300      	movs	r3, #0
 800992e:	60a3      	str	r3, [r4, #8]
 8009930:	e7f6      	b.n	8009920 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009932:	b96d      	cbnz	r5, 8009950 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009934:	6840      	ldr	r0, [r0, #4]
 8009936:	f001 ff0d 	bl	800b754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800993a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800993c:	6863      	ldr	r3, [r4, #4]
 800993e:	4413      	add	r3, r2
 8009940:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009942:	68a2      	ldr	r2, [r4, #8]
 8009944:	4293      	cmp	r3, r2
 8009946:	d319      	bcc.n	800997c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800994c:	4628      	mov	r0, r5
 800994e:	e7e7      	b.n	8009920 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009950:	68c0      	ldr	r0, [r0, #12]
 8009952:	f001 feff 	bl	800b754 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009956:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009958:	4251      	negs	r1, r2
 800995a:	68e3      	ldr	r3, [r4, #12]
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009960:	6822      	ldr	r2, [r4, #0]
 8009962:	4293      	cmp	r3, r2
 8009964:	d202      	bcs.n	800996c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	440b      	add	r3, r1
 800996a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800996c:	2d02      	cmp	r5, #2
 800996e:	d001      	beq.n	8009974 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009970:	2000      	movs	r0, #0
 8009972:	e7d5      	b.n	8009920 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009974:	b126      	cbz	r6, 8009980 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8009976:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009978:	2000      	movs	r0, #0
 800997a:	e7d1      	b.n	8009920 <prvCopyDataToQueue+0x12>
 800997c:	4628      	mov	r0, r5
 800997e:	e7cf      	b.n	8009920 <prvCopyDataToQueue+0x12>
 8009980:	2000      	movs	r0, #0
 8009982:	e7cd      	b.n	8009920 <prvCopyDataToQueue+0x12>

08009984 <prvCopyDataFromQueue>:
{
 8009984:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009986:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009988:	b16a      	cbz	r2, 80099a6 <prvCopyDataFromQueue+0x22>
{
 800998a:	b510      	push	{r4, lr}
 800998c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800998e:	68d9      	ldr	r1, [r3, #12]
 8009990:	4411      	add	r1, r2
 8009992:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009994:	689c      	ldr	r4, [r3, #8]
 8009996:	42a1      	cmp	r1, r4
 8009998:	d301      	bcc.n	800999e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800999a:	6819      	ldr	r1, [r3, #0]
 800999c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800999e:	68d9      	ldr	r1, [r3, #12]
 80099a0:	f001 fed8 	bl	800b754 <memcpy>
}
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	4770      	bx	lr

080099a8 <prvUnlockQueue>:
{
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80099ac:	f001 f992 	bl	800acd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80099b0:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80099b4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099b6:	e003      	b.n	80099c0 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80099b8:	f000 ffe4 	bl	800a984 <vTaskMissedYield>
			--cTxLock;
 80099bc:	3c01      	subs	r4, #1
 80099be:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099c0:	2c00      	cmp	r4, #0
 80099c2:	dd08      	ble.n	80099d6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099c6:	b133      	cbz	r3, 80099d6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099c8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80099cc:	f000 ff46 	bl	800a85c <xTaskRemoveFromEventList>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0f3      	beq.n	80099bc <prvUnlockQueue+0x14>
 80099d4:	e7f0      	b.n	80099b8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80099d6:	23ff      	movs	r3, #255	; 0xff
 80099d8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80099dc:	f001 f99c 	bl	800ad18 <vPortExitCritical>
	taskENTER_CRITICAL();
 80099e0:	f001 f978 	bl	800acd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80099e4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80099e8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099ea:	e003      	b.n	80099f4 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80099ec:	f000 ffca 	bl	800a984 <vTaskMissedYield>
				--cRxLock;
 80099f0:	3c01      	subs	r4, #1
 80099f2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099f4:	2c00      	cmp	r4, #0
 80099f6:	dd08      	ble.n	8009a0a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f8:	692b      	ldr	r3, [r5, #16]
 80099fa:	b133      	cbz	r3, 8009a0a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099fc:	f105 0010 	add.w	r0, r5, #16
 8009a00:	f000 ff2c 	bl	800a85c <xTaskRemoveFromEventList>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d0f3      	beq.n	80099f0 <prvUnlockQueue+0x48>
 8009a08:	e7f0      	b.n	80099ec <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009a0a:	23ff      	movs	r3, #255	; 0xff
 8009a0c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009a10:	f001 f982 	bl	800ad18 <vPortExitCritical>
}
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
	...

08009a18 <xQueueGenericReset>:
{
 8009a18:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009a1a:	b1e0      	cbz	r0, 8009a56 <xQueueGenericReset+0x3e>
 8009a1c:	460d      	mov	r5, r1
 8009a1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009a20:	f001 f958 	bl	800acd4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a24:	6821      	ldr	r1, [r4, #0]
 8009a26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009a28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a2a:	fb03 1002 	mla	r0, r3, r2, r1
 8009a2e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a30:	2000      	movs	r0, #0
 8009a32:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a34:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a36:	3a01      	subs	r2, #1
 8009a38:	fb02 1303 	mla	r3, r2, r3, r1
 8009a3c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a3e:	23ff      	movs	r3, #255	; 0xff
 8009a40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009a48:	b9ed      	cbnz	r5, 8009a86 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	b963      	cbnz	r3, 8009a68 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009a4e:	f001 f963 	bl	800ad18 <vPortExitCritical>
}
 8009a52:	2001      	movs	r0, #1
 8009a54:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009a66:	e7fe      	b.n	8009a66 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a68:	f104 0010 	add.w	r0, r4, #16
 8009a6c:	f000 fef6 	bl	800a85c <xTaskRemoveFromEventList>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d0ec      	beq.n	8009a4e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <xQueueGenericReset+0x80>)
 8009a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	e7e3      	b.n	8009a4e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a86:	f104 0010 	add.w	r0, r4, #16
 8009a8a:	f7ff fed7 	bl	800983c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a92:	f7ff fed3 	bl	800983c <vListInitialise>
 8009a96:	e7da      	b.n	8009a4e <xQueueGenericReset+0x36>
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <prvInitialiseNewQueue>:
{
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	b931      	cbnz	r1, 8009ab4 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009aa6:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8009aa8:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009aaa:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009aac:	2101      	movs	r1, #1
 8009aae:	f7ff ffb3 	bl	8009a18 <xQueueGenericReset>
}
 8009ab2:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ab4:	6002      	str	r2, [r0, #0]
 8009ab6:	e7f7      	b.n	8009aa8 <prvInitialiseNewQueue+0xc>

08009ab8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ab8:	b940      	cbnz	r0, 8009acc <xQueueGenericCreateStatic+0x14>
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	e7fe      	b.n	8009aca <xQueueGenericCreateStatic+0x12>
	{
 8009acc:	b530      	push	{r4, r5, lr}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	461c      	mov	r4, r3
 8009ad2:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8009ad4:	b153      	cbz	r3, 8009aec <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ad6:	b192      	cbz	r2, 8009afe <xQueueGenericCreateStatic+0x46>
 8009ad8:	b989      	cbnz	r1, 8009afe <xQueueGenericCreateStatic+0x46>
 8009ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	e7fe      	b.n	8009aea <xQueueGenericCreateStatic+0x32>
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009afc:	e7fe      	b.n	8009afc <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009afe:	b16a      	cbz	r2, 8009b1c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b00:	2348      	movs	r3, #72	; 0x48
 8009b02:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	2b48      	cmp	r3, #72	; 0x48
 8009b08:	d013      	beq.n	8009b32 <xQueueGenericCreateStatic+0x7a>
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	e7fe      	b.n	8009b1a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b1c:	2900      	cmp	r1, #0
 8009b1e:	d0ef      	beq.n	8009b00 <xQueueGenericCreateStatic+0x48>
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	e7fe      	b.n	8009b30 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b32:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b34:	2301      	movs	r3, #1
 8009b36:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b3a:	9400      	str	r4, [sp, #0]
 8009b3c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009b40:	4628      	mov	r0, r5
 8009b42:	f7ff ffab 	bl	8009a9c <prvInitialiseNewQueue>
	}
 8009b46:	4620      	mov	r0, r4
 8009b48:	b005      	add	sp, #20
 8009b4a:	bd30      	pop	{r4, r5, pc}

08009b4c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b4c:	b940      	cbnz	r0, 8009b60 <xQueueGenericCreate+0x14>
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	e7fe      	b.n	8009b5e <xQueueGenericCreate+0x12>
	{
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b62:	b083      	sub	sp, #12
 8009b64:	460c      	mov	r4, r1
 8009b66:	4616      	mov	r6, r2
 8009b68:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8009b6a:	b1a1      	cbz	r1, 8009b96 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b6c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b70:	3048      	adds	r0, #72	; 0x48
 8009b72:	f001 fa67 	bl	800b044 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009b76:	4605      	mov	r5, r0
 8009b78:	b150      	cbz	r0, 8009b90 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b80:	9000      	str	r0, [sp, #0]
 8009b82:	4633      	mov	r3, r6
 8009b84:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	f7ff ff86 	bl	8009a9c <prvInitialiseNewQueue>
	}
 8009b90:	4628      	mov	r0, r5
 8009b92:	b003      	add	sp, #12
 8009b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8009b96:	4608      	mov	r0, r1
 8009b98:	e7ea      	b.n	8009b70 <xQueueGenericCreate+0x24>
	...

08009b9c <xQueueGenericSend>:
{
 8009b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009ba2:	b188      	cbz	r0, 8009bc8 <xQueueGenericSend+0x2c>
 8009ba4:	460e      	mov	r6, r1
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009baa:	b1b1      	cbz	r1, 8009bda <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bac:	2d02      	cmp	r5, #2
 8009bae:	d120      	bne.n	8009bf2 <xQueueGenericSend+0x56>
 8009bb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d01d      	beq.n	8009bf2 <xQueueGenericSend+0x56>
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	e7fe      	b.n	8009bc6 <xQueueGenericSend+0x2a>
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bda:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0e5      	beq.n	8009bac <xQueueGenericSend+0x10>
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	e7fe      	b.n	8009bf0 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bf2:	f000 fecd 	bl	800a990 <xTaskGetSchedulerState>
 8009bf6:	4607      	mov	r7, r0
 8009bf8:	b958      	cbnz	r0, 8009c12 <xQueueGenericSend+0x76>
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d044      	beq.n	8009c8a <xQueueGenericSend+0xee>
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	e7fe      	b.n	8009c10 <xQueueGenericSend+0x74>
 8009c12:	2700      	movs	r7, #0
 8009c14:	e039      	b.n	8009c8a <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c16:	462a      	mov	r2, r5
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7ff fe77 	bl	800990e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009c22:	b96a      	cbnz	r2, 8009c40 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8009c24:	b138      	cbz	r0, 8009c36 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8009c26:	4b3c      	ldr	r3, [pc, #240]	; (8009d18 <xQueueGenericSend+0x17c>)
 8009c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009c36:	f001 f86f 	bl	800ad18 <vPortExitCritical>
				return pdPASS;
 8009c3a:	2001      	movs	r0, #1
}
 8009c3c:	b005      	add	sp, #20
 8009c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c44:	f000 fe0a 	bl	800a85c <xTaskRemoveFromEventList>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d0f4      	beq.n	8009c36 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8009c4c:	4b32      	ldr	r3, [pc, #200]	; (8009d18 <xQueueGenericSend+0x17c>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	e7eb      	b.n	8009c36 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8009c5e:	f001 f85b 	bl	800ad18 <vPortExitCritical>
					return errQUEUE_FULL;
 8009c62:	2000      	movs	r0, #0
 8009c64:	e7ea      	b.n	8009c3c <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c66:	a802      	add	r0, sp, #8
 8009c68:	f000 fe3e 	bl	800a8e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c6c:	2701      	movs	r7, #1
 8009c6e:	e019      	b.n	8009ca4 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8009c70:	2300      	movs	r3, #0
 8009c72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009c76:	e021      	b.n	8009cbc <xQueueGenericSend+0x120>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c7e:	e023      	b.n	8009cc8 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7ff fe91 	bl	80099a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c86:	f000 fce3 	bl	800a650 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009c8a:	f001 f823 	bl	800acd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009c90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d3bf      	bcc.n	8009c16 <xQueueGenericSend+0x7a>
 8009c96:	2d02      	cmp	r5, #2
 8009c98:	d0bd      	beq.n	8009c16 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c9a:	9b01      	ldr	r3, [sp, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0de      	beq.n	8009c5e <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 8009ca0:	2f00      	cmp	r7, #0
 8009ca2:	d0e0      	beq.n	8009c66 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 8009ca4:	f001 f838 	bl	800ad18 <vPortExitCritical>
		vTaskSuspendAll();
 8009ca8:	f000 fc3e 	bl	800a528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cac:	f001 f812 	bl	800acd4 <vPortEnterCritical>
 8009cb0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009cb4:	b25b      	sxtb	r3, r3
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cba:	d0d9      	beq.n	8009c70 <xQueueGenericSend+0xd4>
 8009cbc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009cc0:	b25b      	sxtb	r3, r3
 8009cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cc6:	d0d7      	beq.n	8009c78 <xQueueGenericSend+0xdc>
 8009cc8:	f001 f826 	bl	800ad18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ccc:	a901      	add	r1, sp, #4
 8009cce:	a802      	add	r0, sp, #8
 8009cd0:	f000 fe16 	bl	800a900 <xTaskCheckForTimeOut>
 8009cd4:	b9c8      	cbnz	r0, 8009d0a <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff fdfd 	bl	80098d6 <prvIsQueueFull>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0cf      	beq.n	8009c80 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ce0:	9901      	ldr	r1, [sp, #4]
 8009ce2:	f104 0010 	add.w	r0, r4, #16
 8009ce6:	f000 fda1 	bl	800a82c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff fe5c 	bl	80099a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009cf0:	f000 fcae 	bl	800a650 <xTaskResumeAll>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d1c8      	bne.n	8009c8a <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8009cf8:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <xQueueGenericSend+0x17c>)
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	e7bf      	b.n	8009c8a <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff fe4c 	bl	80099a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d10:	f000 fc9e 	bl	800a650 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009d14:	2000      	movs	r0, #0
 8009d16:	e791      	b.n	8009c3c <xQueueGenericSend+0xa0>
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8009d1c:	b168      	cbz	r0, 8009d3a <xQueueGiveFromISR+0x1e>
{
 8009d1e:	b570      	push	{r4, r5, r6, lr}
 8009d20:	460e      	mov	r6, r1
 8009d22:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d24:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009d26:	b18b      	cbz	r3, 8009d4c <xQueueGiveFromISR+0x30>
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	e7fe      	b.n	8009d38 <xQueueGiveFromISR+0x1c>
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009d4a:	e7fe      	b.n	8009d4a <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009d4c:	6803      	ldr	r3, [r0, #0]
 8009d4e:	b1eb      	cbz	r3, 8009d8c <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d50:	f001 f8ea 	bl	800af28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d54:	f3ef 8511 	mrs	r5, BASEPRI
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d926      	bls.n	8009dbe <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d70:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d74:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d76:	3201      	adds	r2, #1
 8009d78:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7e:	d011      	beq.n	8009da4 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d80:	3301      	adds	r3, #1
 8009d82:	b25b      	sxtb	r3, r3
 8009d84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8009d88:	2001      	movs	r0, #1
 8009d8a:	e019      	b.n	8009dc0 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009d8c:	6883      	ldr	r3, [r0, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0de      	beq.n	8009d50 <xQueueGiveFromISR+0x34>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	e7fe      	b.n	8009da2 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da6:	b90b      	cbnz	r3, 8009dac <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8009da8:	2001      	movs	r0, #1
 8009daa:	e009      	b.n	8009dc0 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009db0:	f000 fd54 	bl	800a85c <xTaskRemoveFromEventList>
 8009db4:	b138      	cbz	r0, 8009dc6 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8009db6:	b146      	cbz	r6, 8009dca <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009db8:	2001      	movs	r0, #1
 8009dba:	6030      	str	r0, [r6, #0]
 8009dbc:	e000      	b.n	8009dc0 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8009dbe:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dc0:	f385 8811 	msr	BASEPRI, r5
}
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	e7fa      	b.n	8009dc0 <xQueueGiveFromISR+0xa4>
 8009dca:	2001      	movs	r0, #1
 8009dcc:	e7f8      	b.n	8009dc0 <xQueueGiveFromISR+0xa4>
	...

08009dd0 <xQueueReceive>:
{
 8009dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009dd6:	b190      	cbz	r0, 8009dfe <xQueueReceive+0x2e>
 8009dd8:	460e      	mov	r6, r1
 8009dda:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ddc:	b1c1      	cbz	r1, 8009e10 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dde:	f000 fdd7 	bl	800a990 <xTaskGetSchedulerState>
 8009de2:	4607      	mov	r7, r0
 8009de4:	bb00      	cbnz	r0, 8009e28 <xQueueReceive+0x58>
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d05c      	beq.n	8009ea6 <xQueueReceive+0xd6>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	e7fe      	b.n	8009dfc <xQueueReceive+0x2c>
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009e0e:	e7fe      	b.n	8009e0e <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0e3      	beq.n	8009dde <xQueueReceive+0xe>
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	e7fe      	b.n	8009e26 <xQueueReceive+0x56>
 8009e28:	2700      	movs	r7, #0
 8009e2a:	e03c      	b.n	8009ea6 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f7ff fda8 	bl	8009984 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e34:	3d01      	subs	r5, #1
 8009e36:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e38:	6923      	ldr	r3, [r4, #16]
 8009e3a:	b923      	cbnz	r3, 8009e46 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009e3c:	f000 ff6c 	bl	800ad18 <vPortExitCritical>
				return pdPASS;
 8009e40:	2001      	movs	r0, #1
}
 8009e42:	b005      	add	sp, #20
 8009e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e46:	f104 0010 	add.w	r0, r4, #16
 8009e4a:	f000 fd07 	bl	800a85c <xTaskRemoveFromEventList>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d0f4      	beq.n	8009e3c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8009e52:	4b35      	ldr	r3, [pc, #212]	; (8009f28 <xQueueReceive+0x158>)
 8009e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	e7eb      	b.n	8009e3c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009e64:	f000 ff58 	bl	800ad18 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009e68:	2000      	movs	r0, #0
 8009e6a:	e7ea      	b.n	8009e42 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e6c:	a802      	add	r0, sp, #8
 8009e6e:	f000 fd3b 	bl	800a8e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e72:	2701      	movs	r7, #1
 8009e74:	e021      	b.n	8009eba <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 8009e76:	2300      	movs	r3, #0
 8009e78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009e7c:	e029      	b.n	8009ed2 <xQueueReceive+0x102>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e84:	e02b      	b.n	8009ede <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7ff fd8e 	bl	80099a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e8c:	f000 fbe0 	bl	800a650 <xTaskResumeAll>
 8009e90:	e009      	b.n	8009ea6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8009e92:	4620      	mov	r0, r4
 8009e94:	f7ff fd88 	bl	80099a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e98:	f000 fbda 	bl	800a650 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7ff fd29 	bl	80098f4 <prvIsQueueEmpty>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d13d      	bne.n	8009f22 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 8009ea6:	f000 ff15 	bl	800acd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eaa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009eac:	2d00      	cmp	r5, #0
 8009eae:	d1bd      	bne.n	8009e2c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0d6      	beq.n	8009e64 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 8009eb6:	2f00      	cmp	r7, #0
 8009eb8:	d0d8      	beq.n	8009e6c <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 8009eba:	f000 ff2d 	bl	800ad18 <vPortExitCritical>
		vTaskSuspendAll();
 8009ebe:	f000 fb33 	bl	800a528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ec2:	f000 ff07 	bl	800acd4 <vPortEnterCritical>
 8009ec6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009eca:	b25b      	sxtb	r3, r3
 8009ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ed0:	d0d1      	beq.n	8009e76 <xQueueReceive+0xa6>
 8009ed2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ed6:	b25b      	sxtb	r3, r3
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009edc:	d0cf      	beq.n	8009e7e <xQueueReceive+0xae>
 8009ede:	f000 ff1b 	bl	800ad18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ee2:	a901      	add	r1, sp, #4
 8009ee4:	a802      	add	r0, sp, #8
 8009ee6:	f000 fd0b 	bl	800a900 <xTaskCheckForTimeOut>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d1d1      	bne.n	8009e92 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f7ff fd00 	bl	80098f4 <prvIsQueueEmpty>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0c6      	beq.n	8009e86 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ef8:	9901      	ldr	r1, [sp, #4]
 8009efa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009efe:	f000 fc95 	bl	800a82c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f02:	4620      	mov	r0, r4
 8009f04:	f7ff fd50 	bl	80099a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f08:	f000 fba2 	bl	800a650 <xTaskResumeAll>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d1ca      	bne.n	8009ea6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <xQueueReceive+0x158>)
 8009f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	e7c1      	b.n	8009ea6 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 8009f22:	2000      	movs	r0, #0
 8009f24:	e78d      	b.n	8009e42 <xQueueReceive+0x72>
 8009f26:	bf00      	nop
 8009f28:	e000ed04 	.word	0xe000ed04

08009f2c <xQueueSemaphoreTake>:
{
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009f32:	b158      	cbz	r0, 8009f4c <xQueueSemaphoreTake+0x20>
 8009f34:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009f38:	b18b      	cbz	r3, 8009f5e <xQueueSemaphoreTake+0x32>
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	e7fe      	b.n	8009f4a <xQueueSemaphoreTake+0x1e>
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009f5c:	e7fe      	b.n	8009f5c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f5e:	f000 fd17 	bl	800a990 <xTaskGetSchedulerState>
 8009f62:	4606      	mov	r6, r0
 8009f64:	b950      	cbnz	r0, 8009f7c <xQueueSemaphoreTake+0x50>
 8009f66:	9b01      	ldr	r3, [sp, #4]
 8009f68:	b15b      	cbz	r3, 8009f82 <xQueueSemaphoreTake+0x56>
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	e7fe      	b.n	8009f7a <xQueueSemaphoreTake+0x4e>
 8009f7c:	2500      	movs	r5, #0
 8009f7e:	462e      	mov	r6, r5
 8009f80:	e053      	b.n	800a02a <xQueueSemaphoreTake+0xfe>
 8009f82:	4605      	mov	r5, r0
 8009f84:	e051      	b.n	800a02a <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009f86:	3b01      	subs	r3, #1
 8009f88:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	b13b      	cbz	r3, 8009f9e <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	b94b      	cbnz	r3, 8009fa6 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8009f92:	f000 fec1 	bl	800ad18 <vPortExitCritical>
				return pdPASS;
 8009f96:	2501      	movs	r5, #1
}
 8009f98:	4628      	mov	r0, r5
 8009f9a:	b004      	add	sp, #16
 8009f9c:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009f9e:	f000 fe1f 	bl	800abe0 <pvTaskIncrementMutexHeldCount>
 8009fa2:	60a0      	str	r0, [r4, #8]
 8009fa4:	e7f3      	b.n	8009f8e <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fa6:	f104 0010 	add.w	r0, r4, #16
 8009faa:	f000 fc57 	bl	800a85c <xTaskRemoveFromEventList>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d0ef      	beq.n	8009f92 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8009fb2:	4b46      	ldr	r3, [pc, #280]	; (800a0cc <xQueueSemaphoreTake+0x1a0>)
 8009fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	e7e6      	b.n	8009f92 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009fc4:	b145      	cbz	r5, 8009fd8 <xQueueSemaphoreTake+0xac>
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	e7fe      	b.n	8009fd6 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 8009fd8:	f000 fe9e 	bl	800ad18 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009fdc:	e7dc      	b.n	8009f98 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fde:	a802      	add	r0, sp, #8
 8009fe0:	f000 fc82 	bl	800a8e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fe4:	2601      	movs	r6, #1
 8009fe6:	e02a      	b.n	800a03e <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009fee:	e032      	b.n	800a056 <xQueueSemaphoreTake+0x12a>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ff6:	e034      	b.n	800a062 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 8009ff8:	f000 fe6c 	bl	800acd4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ffc:	68a0      	ldr	r0, [r4, #8]
 8009ffe:	f000 fcd7 	bl	800a9b0 <xTaskPriorityInherit>
 800a002:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a004:	f000 fe88 	bl	800ad18 <vPortExitCritical>
 800a008:	e03b      	b.n	800a082 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 800a00a:	4620      	mov	r0, r4
 800a00c:	f7ff fccc 	bl	80099a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a010:	f000 fb1e 	bl	800a650 <xTaskResumeAll>
 800a014:	e009      	b.n	800a02a <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800a016:	4620      	mov	r0, r4
 800a018:	f7ff fcc6 	bl	80099a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a01c:	f000 fb18 	bl	800a650 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a020:	4620      	mov	r0, r4
 800a022:	f7ff fc67 	bl	80098f4 <prvIsQueueEmpty>
 800a026:	2800      	cmp	r0, #0
 800a028:	d140      	bne.n	800a0ac <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 800a02a:	f000 fe53 	bl	800acd4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a02e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1a8      	bne.n	8009f86 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a034:	9b01      	ldr	r3, [sp, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0c4      	beq.n	8009fc4 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d0cf      	beq.n	8009fde <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 800a03e:	f000 fe6b 	bl	800ad18 <vPortExitCritical>
		vTaskSuspendAll();
 800a042:	f000 fa71 	bl	800a528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a046:	f000 fe45 	bl	800acd4 <vPortEnterCritical>
 800a04a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a04e:	b25b      	sxtb	r3, r3
 800a050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a054:	d0c8      	beq.n	8009fe8 <xQueueSemaphoreTake+0xbc>
 800a056:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a05a:	b25b      	sxtb	r3, r3
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a060:	d0c6      	beq.n	8009ff0 <xQueueSemaphoreTake+0xc4>
 800a062:	f000 fe59 	bl	800ad18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a066:	a901      	add	r1, sp, #4
 800a068:	a802      	add	r0, sp, #8
 800a06a:	f000 fc49 	bl	800a900 <xTaskCheckForTimeOut>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d1d1      	bne.n	800a016 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a072:	4620      	mov	r0, r4
 800a074:	f7ff fc3e 	bl	80098f4 <prvIsQueueEmpty>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d0c6      	beq.n	800a00a <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0ba      	beq.n	8009ff8 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a082:	9901      	ldr	r1, [sp, #4]
 800a084:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a088:	f000 fbd0 	bl	800a82c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a08c:	4620      	mov	r0, r4
 800a08e:	f7ff fc8b 	bl	80099a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a092:	f000 fadd 	bl	800a650 <xTaskResumeAll>
 800a096:	2800      	cmp	r0, #0
 800a098:	d1c7      	bne.n	800a02a <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 800a09a:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <xQueueSemaphoreTake+0x1a0>)
 800a09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	e7be      	b.n	800a02a <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 800a0ac:	b90d      	cbnz	r5, 800a0b2 <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	e772      	b.n	8009f98 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800a0b2:	f000 fe0f 	bl	800acd4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f7ff fc05 	bl	80098c6 <prvGetDisinheritPriorityAfterTimeout>
 800a0bc:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a0be:	68a0      	ldr	r0, [r4, #8]
 800a0c0:	f000 fd2c 	bl	800ab1c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a0c4:	f000 fe28 	bl	800ad18 <vPortExitCritical>
 800a0c8:	e7f1      	b.n	800a0ae <xQueueSemaphoreTake+0x182>
 800a0ca:	bf00      	nop
 800a0cc:	e000ed04 	.word	0xe000ed04

0800a0d0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0d0:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <prvResetNextTaskUnblockTime+0x24>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	b923      	cbnz	r3, 800a0e2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0d8:	4b07      	ldr	r3, [pc, #28]	; (800a0f8 <prvResetNextTaskUnblockTime+0x28>)
 800a0da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e2:	4b04      	ldr	r3, [pc, #16]	; (800a0f4 <prvResetNextTaskUnblockTime+0x24>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	4b02      	ldr	r3, [pc, #8]	; (800a0f8 <prvResetNextTaskUnblockTime+0x28>)
 800a0ee:	601a      	str	r2, [r3, #0]
	}
}
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20001314 	.word	0x20001314
 800a0f8:	200013e8 	.word	0x200013e8

0800a0fc <prvInitialiseNewTask>:
{
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	4680      	mov	r8, r0
 800a102:	4699      	mov	r9, r3
 800a104:	9e08      	ldr	r6, [sp, #32]
 800a106:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a10a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a10c:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800a10e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a112:	3a01      	subs	r2, #1
 800a114:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a118:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800a11c:	b389      	cbz	r1, 800a182 <prvInitialiseNewTask+0x86>
 800a11e:	460d      	mov	r5, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a120:	2200      	movs	r2, #0
 800a122:	2a0f      	cmp	r2, #15
 800a124:	d807      	bhi.n	800a136 <prvInitialiseNewTask+0x3a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a126:	5ca9      	ldrb	r1, [r5, r2]
 800a128:	18a3      	adds	r3, r4, r2
 800a12a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800a12e:	5cab      	ldrb	r3, [r5, r2]
 800a130:	b10b      	cbz	r3, 800a136 <prvInitialiseNewTask+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a132:	3201      	adds	r2, #1
 800a134:	e7f5      	b.n	800a122 <prvInitialiseNewTask+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a136:	2300      	movs	r3, #0
 800a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a13c:	2e06      	cmp	r6, #6
 800a13e:	d900      	bls.n	800a142 <prvInitialiseNewTask+0x46>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a140:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 800a142:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a144:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a146:	2500      	movs	r5, #0
 800a148:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a14a:	1d20      	adds	r0, r4, #4
 800a14c:	f7ff fb81 	bl	8009852 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a150:	f104 0018 	add.w	r0, r4, #24
 800a154:	f7ff fb7d 	bl	8009852 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a158:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15a:	f1c6 0607 	rsb	r6, r6, #7
 800a15e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a160:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800a162:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a164:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a168:	464a      	mov	r2, r9
 800a16a:	4641      	mov	r1, r8
 800a16c:	4638      	mov	r0, r7
 800a16e:	f000 fd83 	bl	800ac78 <pxPortInitialiseStack>
 800a172:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a174:	f1ba 0f00 	cmp.w	sl, #0
 800a178:	d001      	beq.n	800a17e <prvInitialiseNewTask+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a17a:	f8ca 4000 	str.w	r4, [sl]
}
 800a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a182:	2300      	movs	r3, #0
 800a184:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a188:	e7d8      	b.n	800a13c <prvInitialiseNewTask+0x40>
	...

0800a18c <prvInitialiseTaskLists>:
{
 800a18c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a18e:	2400      	movs	r4, #0
 800a190:	e007      	b.n	800a1a2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a192:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a196:	0093      	lsls	r3, r2, #2
 800a198:	480e      	ldr	r0, [pc, #56]	; (800a1d4 <prvInitialiseTaskLists+0x48>)
 800a19a:	4418      	add	r0, r3
 800a19c:	f7ff fb4e 	bl	800983c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1a0:	3401      	adds	r4, #1
 800a1a2:	2c06      	cmp	r4, #6
 800a1a4:	d9f5      	bls.n	800a192 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800a1a6:	4d0c      	ldr	r5, [pc, #48]	; (800a1d8 <prvInitialiseTaskLists+0x4c>)
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f7ff fb47 	bl	800983c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1ae:	4c0b      	ldr	r4, [pc, #44]	; (800a1dc <prvInitialiseTaskLists+0x50>)
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f7ff fb43 	bl	800983c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1b6:	480a      	ldr	r0, [pc, #40]	; (800a1e0 <prvInitialiseTaskLists+0x54>)
 800a1b8:	f7ff fb40 	bl	800983c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800a1bc:	4809      	ldr	r0, [pc, #36]	; (800a1e4 <prvInitialiseTaskLists+0x58>)
 800a1be:	f7ff fb3d 	bl	800983c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800a1c2:	4809      	ldr	r0, [pc, #36]	; (800a1e8 <prvInitialiseTaskLists+0x5c>)
 800a1c4:	f7ff fb3a 	bl	800983c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1c8:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <prvInitialiseTaskLists+0x60>)
 800a1ca:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1cc:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <prvInitialiseTaskLists+0x64>)
 800a1ce:	601c      	str	r4, [r3, #0]
}
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
 800a1d2:	bf00      	nop
 800a1d4:	2000131c 	.word	0x2000131c
 800a1d8:	200013c0 	.word	0x200013c0
 800a1dc:	200013d4 	.word	0x200013d4
 800a1e0:	200013f0 	.word	0x200013f0
 800a1e4:	2000141c 	.word	0x2000141c
 800a1e8:	20001408 	.word	0x20001408
 800a1ec:	20001314 	.word	0x20001314
 800a1f0:	20001318 	.word	0x20001318

0800a1f4 <prvAddNewTaskToReadyList>:
{
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a1f8:	f000 fd6c 	bl	800acd4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a1fc:	4a20      	ldr	r2, [pc, #128]	; (800a280 <prvAddNewTaskToReadyList+0x8c>)
 800a1fe:	6813      	ldr	r3, [r2, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a204:	4b1f      	ldr	r3, [pc, #124]	; (800a284 <prvAddNewTaskToReadyList+0x90>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	b15b      	cbz	r3, 800a222 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800a20a:	4b1f      	ldr	r3, [pc, #124]	; (800a288 <prvAddNewTaskToReadyList+0x94>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	b96b      	cbnz	r3, 800a22c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a210:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <prvAddNewTaskToReadyList+0x90>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a216:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a218:	429a      	cmp	r2, r3
 800a21a:	d807      	bhi.n	800a22c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800a21c:	4b19      	ldr	r3, [pc, #100]	; (800a284 <prvAddNewTaskToReadyList+0x90>)
 800a21e:	601c      	str	r4, [r3, #0]
 800a220:	e004      	b.n	800a22c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800a222:	4b18      	ldr	r3, [pc, #96]	; (800a284 <prvAddNewTaskToReadyList+0x90>)
 800a224:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a226:	6813      	ldr	r3, [r2, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d026      	beq.n	800a27a <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 800a22c:	4a17      	ldr	r2, [pc, #92]	; (800a28c <prvAddNewTaskToReadyList+0x98>)
 800a22e:	6813      	ldr	r3, [r2, #0]
 800a230:	3301      	adds	r3, #1
 800a232:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a234:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a236:	2301      	movs	r3, #1
 800a238:	4083      	lsls	r3, r0
 800a23a:	4a15      	ldr	r2, [pc, #84]	; (800a290 <prvAddNewTaskToReadyList+0x9c>)
 800a23c:	6811      	ldr	r1, [r2, #0]
 800a23e:	430b      	orrs	r3, r1
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a246:	1d21      	adds	r1, r4, #4
 800a248:	4b12      	ldr	r3, [pc, #72]	; (800a294 <prvAddNewTaskToReadyList+0xa0>)
 800a24a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a24e:	f7ff fb03 	bl	8009858 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a252:	f000 fd61 	bl	800ad18 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <prvAddNewTaskToReadyList+0x94>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	b16b      	cbz	r3, 800a278 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a25c:	4b09      	ldr	r3, [pc, #36]	; (800a284 <prvAddNewTaskToReadyList+0x90>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a262:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a264:	429a      	cmp	r2, r3
 800a266:	d207      	bcs.n	800a278 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 800a268:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <prvAddNewTaskToReadyList+0xa4>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
}
 800a278:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800a27a:	f7ff ff87 	bl	800a18c <prvInitialiseTaskLists>
 800a27e:	e7d5      	b.n	800a22c <prvAddNewTaskToReadyList+0x38>
 800a280:	200013a8 	.word	0x200013a8
 800a284:	20001310 	.word	0x20001310
 800a288:	20001404 	.word	0x20001404
 800a28c:	200013b8 	.word	0x200013b8
 800a290:	200013bc 	.word	0x200013bc
 800a294:	2000131c 	.word	0x2000131c
 800a298:	e000ed04 	.word	0xe000ed04

0800a29c <prvDeleteTCB>:
	{
 800a29c:	b510      	push	{r4, lr}
 800a29e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2a0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800a2a4:	b163      	cbz	r3, 800a2c0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d011      	beq.n	800a2ce <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d00e      	beq.n	800a2cc <prvDeleteTCB+0x30>
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	e7fe      	b.n	800a2be <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800a2c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a2c2:	f000 ff37 	bl	800b134 <vPortFree>
				vPortFree( pxTCB );
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 ff34 	bl	800b134 <vPortFree>
	}
 800a2cc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800a2ce:	f000 ff31 	bl	800b134 <vPortFree>
 800a2d2:	e7fb      	b.n	800a2cc <prvDeleteTCB+0x30>

0800a2d4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2d4:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <prvCheckTasksWaitingTermination+0x40>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	b1d3      	cbz	r3, 800a310 <prvCheckTasksWaitingTermination+0x3c>
{
 800a2da:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800a2dc:	f000 fcfa 	bl	800acd4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e0:	4b0d      	ldr	r3, [pc, #52]	; (800a318 <prvCheckTasksWaitingTermination+0x44>)
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2e6:	1d20      	adds	r0, r4, #4
 800a2e8:	f7ff fada 	bl	80098a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2ec:	4a0b      	ldr	r2, [pc, #44]	; (800a31c <prvCheckTasksWaitingTermination+0x48>)
 800a2ee:	6813      	ldr	r3, [r2, #0]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2f4:	4a07      	ldr	r2, [pc, #28]	; (800a314 <prvCheckTasksWaitingTermination+0x40>)
 800a2f6:	6813      	ldr	r3, [r2, #0]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800a2fc:	f000 fd0c 	bl	800ad18 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a300:	4620      	mov	r0, r4
 800a302:	f7ff ffcb 	bl	800a29c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a306:	4b03      	ldr	r3, [pc, #12]	; (800a314 <prvCheckTasksWaitingTermination+0x40>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e6      	bne.n	800a2dc <prvCheckTasksWaitingTermination+0x8>
}
 800a30e:	bd10      	pop	{r4, pc}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	200013ac 	.word	0x200013ac
 800a318:	2000141c 	.word	0x2000141c
 800a31c:	200013a8 	.word	0x200013a8

0800a320 <prvIdleTask>:
{
 800a320:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800a322:	f7ff ffd7 	bl	800a2d4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a326:	4b06      	ldr	r3, [pc, #24]	; (800a340 <prvIdleTask+0x20>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d9f9      	bls.n	800a322 <prvIdleTask+0x2>
				taskYIELD();
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <prvIdleTask+0x24>)
 800a330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	e7f0      	b.n	800a322 <prvIdleTask+0x2>
 800a340:	2000131c 	.word	0x2000131c
 800a344:	e000ed04 	.word	0xe000ed04

0800a348 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	4604      	mov	r4, r0
 800a34c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a34e:	4b1d      	ldr	r3, [pc, #116]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800a350:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a352:	4b1d      	ldr	r3, [pc, #116]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x80>)
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	3004      	adds	r0, #4
 800a358:	f7ff faa2 	bl	80098a0 <uxListRemove>
 800a35c:	b950      	cbnz	r0, 800a374 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a35e:	4b1a      	ldr	r3, [pc, #104]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x80>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	2301      	movs	r3, #1
 800a366:	fa03 f202 	lsl.w	r2, r3, r2
 800a36a:	4918      	ldr	r1, [pc, #96]	; (800a3cc <prvAddCurrentTaskToDelayedList+0x84>)
 800a36c:	680b      	ldr	r3, [r1, #0]
 800a36e:	ea23 0302 	bic.w	r3, r3, r2
 800a372:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a374:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a378:	d00d      	beq.n	800a396 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a37a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a37c:	4b12      	ldr	r3, [pc, #72]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x80>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a382:	42a6      	cmp	r6, r4
 800a384:	d910      	bls.n	800a3a8 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a386:	4b12      	ldr	r3, [pc, #72]	; (800a3d0 <prvAddCurrentTaskToDelayedList+0x88>)
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	4b0f      	ldr	r3, [pc, #60]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x80>)
 800a38c:	6819      	ldr	r1, [r3, #0]
 800a38e:	3104      	adds	r1, #4
 800a390:	f7ff fa6d 	bl	800986e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a394:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a396:	2d00      	cmp	r5, #0
 800a398:	d0ef      	beq.n	800a37a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a39a:	4b0b      	ldr	r3, [pc, #44]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x80>)
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	3104      	adds	r1, #4
 800a3a0:	480c      	ldr	r0, [pc, #48]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0x8c>)
 800a3a2:	f7ff fa59 	bl	8009858 <vListInsertEnd>
 800a3a6:	e7f5      	b.n	800a394 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a8:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x80>)
 800a3ae:	6819      	ldr	r1, [r3, #0]
 800a3b0:	3104      	adds	r1, #4
 800a3b2:	f7ff fa5c 	bl	800986e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	d9ea      	bls.n	800a394 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 800a3be:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a3c0:	601c      	str	r4, [r3, #0]
}
 800a3c2:	e7e7      	b.n	800a394 <prvAddCurrentTaskToDelayedList+0x4c>
 800a3c4:	20001430 	.word	0x20001430
 800a3c8:	20001310 	.word	0x20001310
 800a3cc:	200013bc 	.word	0x200013bc
 800a3d0:	20001318 	.word	0x20001318
 800a3d4:	20001408 	.word	0x20001408
 800a3d8:	20001314 	.word	0x20001314
 800a3dc:	200013e8 	.word	0x200013e8

0800a3e0 <xTaskCreateStatic>:
	{
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a3e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800a3e8:	b175      	cbz	r5, 800a408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a3ea:	b1b4      	cbz	r4, 800a41a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3ec:	2654      	movs	r6, #84	; 0x54
 800a3ee:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3f0:	9e04      	ldr	r6, [sp, #16]
 800a3f2:	2e54      	cmp	r6, #84	; 0x54
 800a3f4:	d01a      	beq.n	800a42c <xTaskCreateStatic+0x4c>
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	e7fe      	b.n	800a406 <xTaskCreateStatic+0x26>
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800a418:	e7fe      	b.n	800a418 <xTaskCreateStatic+0x38>
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800a42a:	e7fe      	b.n	800a42a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a42c:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a42e:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a430:	2502      	movs	r5, #2
 800a432:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a436:	2500      	movs	r5, #0
 800a438:	9503      	str	r5, [sp, #12]
 800a43a:	9402      	str	r4, [sp, #8]
 800a43c:	ad05      	add	r5, sp, #20
 800a43e:	9501      	str	r5, [sp, #4]
 800a440:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a442:	9500      	str	r5, [sp, #0]
 800a444:	f7ff fe5a 	bl	800a0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a448:	4620      	mov	r0, r4
 800a44a:	f7ff fed3 	bl	800a1f4 <prvAddNewTaskToReadyList>
	}
 800a44e:	9805      	ldr	r0, [sp, #20]
 800a450:	b006      	add	sp, #24
 800a452:	bd70      	pop	{r4, r5, r6, pc}

0800a454 <xTaskCreate>:
	{
 800a454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a458:	b085      	sub	sp, #20
 800a45a:	4607      	mov	r7, r0
 800a45c:	4688      	mov	r8, r1
 800a45e:	4614      	mov	r4, r2
 800a460:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a462:	0090      	lsls	r0, r2, #2
 800a464:	f000 fdee 	bl	800b044 <pvPortMalloc>
			if( pxStack != NULL )
 800a468:	b300      	cbz	r0, 800a4ac <xTaskCreate+0x58>
 800a46a:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a46c:	2054      	movs	r0, #84	; 0x54
 800a46e:	f000 fde9 	bl	800b044 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a472:	4605      	mov	r5, r0
 800a474:	b1b0      	cbz	r0, 800a4a4 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800a476:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800a47a:	b1e5      	cbz	r5, 800a4b6 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a482:	9303      	str	r3, [sp, #12]
 800a484:	9502      	str	r5, [sp, #8]
 800a486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	4633      	mov	r3, r6
 800a490:	4622      	mov	r2, r4
 800a492:	4641      	mov	r1, r8
 800a494:	4638      	mov	r0, r7
 800a496:	f7ff fe31 	bl	800a0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a49a:	4628      	mov	r0, r5
 800a49c:	f7ff feaa 	bl	800a1f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	e005      	b.n	800a4b0 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800a4a4:	4648      	mov	r0, r9
 800a4a6:	f000 fe45 	bl	800b134 <vPortFree>
 800a4aa:	e7e6      	b.n	800a47a <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 800a4b0:	b005      	add	sp, #20
 800a4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800a4ba:	e7f9      	b.n	800a4b0 <xTaskCreate+0x5c>

0800a4bc <vTaskStartScheduler>:
{
 800a4bc:	b510      	push	{r4, lr}
 800a4be:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4c0:	2400      	movs	r4, #0
 800a4c2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4c4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4c6:	aa07      	add	r2, sp, #28
 800a4c8:	a906      	add	r1, sp, #24
 800a4ca:	a805      	add	r0, sp, #20
 800a4cc:	f7f8 fbcc 	bl	8002c68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4d0:	9b05      	ldr	r3, [sp, #20]
 800a4d2:	9302      	str	r3, [sp, #8]
 800a4d4:	9b06      	ldr	r3, [sp, #24]
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	9400      	str	r4, [sp, #0]
 800a4da:	4623      	mov	r3, r4
 800a4dc:	9a07      	ldr	r2, [sp, #28]
 800a4de:	490d      	ldr	r1, [pc, #52]	; (800a514 <vTaskStartScheduler+0x58>)
 800a4e0:	480d      	ldr	r0, [pc, #52]	; (800a518 <vTaskStartScheduler+0x5c>)
 800a4e2:	f7ff ff7d 	bl	800a3e0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a4e6:	b190      	cbz	r0, 800a50e <vTaskStartScheduler+0x52>
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4f8:	4b08      	ldr	r3, [pc, #32]	; (800a51c <vTaskStartScheduler+0x60>)
 800a4fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <vTaskStartScheduler+0x64>)
 800a502:	2201      	movs	r2, #1
 800a504:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a506:	4b07      	ldr	r3, [pc, #28]	; (800a524 <vTaskStartScheduler+0x68>)
 800a508:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a50a:	f000 fc85 	bl	800ae18 <xPortStartScheduler>
}
 800a50e:	b008      	add	sp, #32
 800a510:	bd10      	pop	{r4, pc}
 800a512:	bf00      	nop
 800a514:	0800e638 	.word	0x0800e638
 800a518:	0800a321 	.word	0x0800a321
 800a51c:	200013e8 	.word	0x200013e8
 800a520:	20001404 	.word	0x20001404
 800a524:	20001430 	.word	0x20001430

0800a528 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a528:	4a02      	ldr	r2, [pc, #8]	; (800a534 <vTaskSuspendAll+0xc>)
 800a52a:	6813      	ldr	r3, [r2, #0]
 800a52c:	3301      	adds	r3, #1
 800a52e:	6013      	str	r3, [r2, #0]
}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	200013b4 	.word	0x200013b4

0800a538 <xTaskIncrementTick>:
{
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a53a:	4b3a      	ldr	r3, [pc, #232]	; (800a624 <xTaskIncrementTick+0xec>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d164      	bne.n	800a60c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a542:	4b39      	ldr	r3, [pc, #228]	; (800a628 <xTaskIncrementTick+0xf0>)
 800a544:	681d      	ldr	r5, [r3, #0]
 800a546:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a548:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a54a:	b9c5      	cbnz	r5, 800a57e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a54c:	4b37      	ldr	r3, [pc, #220]	; (800a62c <xTaskIncrementTick+0xf4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	b143      	cbz	r3, 800a566 <xTaskIncrementTick+0x2e>
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	e7fe      	b.n	800a564 <xTaskIncrementTick+0x2c>
 800a566:	4a31      	ldr	r2, [pc, #196]	; (800a62c <xTaskIncrementTick+0xf4>)
 800a568:	6811      	ldr	r1, [r2, #0]
 800a56a:	4b31      	ldr	r3, [pc, #196]	; (800a630 <xTaskIncrementTick+0xf8>)
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	6010      	str	r0, [r2, #0]
 800a570:	6019      	str	r1, [r3, #0]
 800a572:	4a30      	ldr	r2, [pc, #192]	; (800a634 <xTaskIncrementTick+0xfc>)
 800a574:	6813      	ldr	r3, [r2, #0]
 800a576:	3301      	adds	r3, #1
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	f7ff fda9 	bl	800a0d0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a57e:	4b2e      	ldr	r3, [pc, #184]	; (800a638 <xTaskIncrementTick+0x100>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	42ab      	cmp	r3, r5
 800a584:	d938      	bls.n	800a5f8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800a586:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a588:	4b2c      	ldr	r3, [pc, #176]	; (800a63c <xTaskIncrementTick+0x104>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a592:	009a      	lsls	r2, r3, #2
 800a594:	4b2a      	ldr	r3, [pc, #168]	; (800a640 <xTaskIncrementTick+0x108>)
 800a596:	589b      	ldr	r3, [r3, r2]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d93c      	bls.n	800a616 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800a59c:	2401      	movs	r4, #1
 800a59e:	e03a      	b.n	800a616 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800a5a0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5a2:	4b22      	ldr	r3, [pc, #136]	; (800a62c <xTaskIncrementTick+0xf4>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	b343      	cbz	r3, 800a5fc <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5aa:	4b20      	ldr	r3, [pc, #128]	; (800a62c <xTaskIncrementTick+0xf4>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5b2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800a5b4:	429d      	cmp	r5, r3
 800a5b6:	d326      	bcc.n	800a606 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5b8:	1d37      	adds	r7, r6, #4
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f7ff f970 	bl	80098a0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5c0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800a5c2:	b11b      	cbz	r3, 800a5cc <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5c4:	f106 0018 	add.w	r0, r6, #24
 800a5c8:	f7ff f96a 	bl	80098a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5cc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	409a      	lsls	r2, r3
 800a5d2:	491c      	ldr	r1, [pc, #112]	; (800a644 <xTaskIncrementTick+0x10c>)
 800a5d4:	6808      	ldr	r0, [r1, #0]
 800a5d6:	4302      	orrs	r2, r0
 800a5d8:	600a      	str	r2, [r1, #0]
 800a5da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5de:	009a      	lsls	r2, r3, #2
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	4817      	ldr	r0, [pc, #92]	; (800a640 <xTaskIncrementTick+0x108>)
 800a5e4:	4410      	add	r0, r2
 800a5e6:	f7ff f937 	bl	8009858 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5ea:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800a5ec:	4b13      	ldr	r3, [pc, #76]	; (800a63c <xTaskIncrementTick+0x104>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d2d4      	bcs.n	800a5a0 <xTaskIncrementTick+0x68>
 800a5f6:	e7d4      	b.n	800a5a2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800a5f8:	2400      	movs	r4, #0
 800a5fa:	e7d2      	b.n	800a5a2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <xTaskIncrementTick+0x100>)
 800a5fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a602:	601a      	str	r2, [r3, #0]
					break;
 800a604:	e7c0      	b.n	800a588 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a606:	4a0c      	ldr	r2, [pc, #48]	; (800a638 <xTaskIncrementTick+0x100>)
 800a608:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a60a:	e7bd      	b.n	800a588 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800a60c:	4a0e      	ldr	r2, [pc, #56]	; (800a648 <xTaskIncrementTick+0x110>)
 800a60e:	6813      	ldr	r3, [r2, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a614:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <xTaskIncrementTick+0x114>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	b103      	cbz	r3, 800a61e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800a61c:	2401      	movs	r4, #1
}
 800a61e:	4620      	mov	r0, r4
 800a620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a622:	bf00      	nop
 800a624:	200013b4 	.word	0x200013b4
 800a628:	20001430 	.word	0x20001430
 800a62c:	20001314 	.word	0x20001314
 800a630:	20001318 	.word	0x20001318
 800a634:	200013ec 	.word	0x200013ec
 800a638:	200013e8 	.word	0x200013e8
 800a63c:	20001310 	.word	0x20001310
 800a640:	2000131c 	.word	0x2000131c
 800a644:	200013bc 	.word	0x200013bc
 800a648:	200013b0 	.word	0x200013b0
 800a64c:	20001434 	.word	0x20001434

0800a650 <xTaskResumeAll>:
{
 800a650:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a652:	4b34      	ldr	r3, [pc, #208]	; (800a724 <xTaskResumeAll+0xd4>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	b943      	cbnz	r3, 800a66a <xTaskResumeAll+0x1a>
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	e7fe      	b.n	800a668 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a66a:	f000 fb33 	bl	800acd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a66e:	4b2d      	ldr	r3, [pc, #180]	; (800a724 <xTaskResumeAll+0xd4>)
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	3a01      	subs	r2, #1
 800a674:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d14d      	bne.n	800a718 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a67c:	4b2a      	ldr	r3, [pc, #168]	; (800a728 <xTaskResumeAll+0xd8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	b90b      	cbnz	r3, 800a686 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a682:	2400      	movs	r4, #0
 800a684:	e049      	b.n	800a71a <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 800a686:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a688:	4b28      	ldr	r3, [pc, #160]	; (800a72c <xTaskResumeAll+0xdc>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	b31b      	cbz	r3, 800a6d6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68e:	4b27      	ldr	r3, [pc, #156]	; (800a72c <xTaskResumeAll+0xdc>)
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a694:	f104 0018 	add.w	r0, r4, #24
 800a698:	f7ff f902 	bl	80098a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a69c:	1d25      	adds	r5, r4, #4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f7ff f8fe 	bl	80098a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4083      	lsls	r3, r0
 800a6aa:	4a21      	ldr	r2, [pc, #132]	; (800a730 <xTaskResumeAll+0xe0>)
 800a6ac:	6811      	ldr	r1, [r2, #0]
 800a6ae:	430b      	orrs	r3, r1
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	; (800a734 <xTaskResumeAll+0xe4>)
 800a6ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6be:	f7ff f8cb 	bl	8009858 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6c4:	4b1c      	ldr	r3, [pc, #112]	; (800a738 <xTaskResumeAll+0xe8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d3dc      	bcc.n	800a688 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a6ce:	4b1b      	ldr	r3, [pc, #108]	; (800a73c <xTaskResumeAll+0xec>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	e7d8      	b.n	800a688 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a6d6:	b10c      	cbz	r4, 800a6dc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a6d8:	f7ff fcfa 	bl	800a0d0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a6dc:	4b18      	ldr	r3, [pc, #96]	; (800a740 <xTaskResumeAll+0xf0>)
 800a6de:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a6e0:	b974      	cbnz	r4, 800a700 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 800a6e2:	4b16      	ldr	r3, [pc, #88]	; (800a73c <xTaskResumeAll+0xec>)
 800a6e4:	681c      	ldr	r4, [r3, #0]
 800a6e6:	b1c4      	cbz	r4, 800a71a <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 800a6e8:	4b16      	ldr	r3, [pc, #88]	; (800a744 <xTaskResumeAll+0xf4>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a6f8:	2401      	movs	r4, #1
 800a6fa:	e00e      	b.n	800a71a <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a6fc:	3c01      	subs	r4, #1
 800a6fe:	d007      	beq.n	800a710 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 800a700:	f7ff ff1a 	bl	800a538 <xTaskIncrementTick>
 800a704:	2800      	cmp	r0, #0
 800a706:	d0f9      	beq.n	800a6fc <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <xTaskResumeAll+0xec>)
 800a70a:	2201      	movs	r2, #1
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e7f5      	b.n	800a6fc <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <xTaskResumeAll+0xf0>)
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	e7e4      	b.n	800a6e2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a718:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a71a:	f000 fafd 	bl	800ad18 <vPortExitCritical>
}
 800a71e:	4620      	mov	r0, r4
 800a720:	bd38      	pop	{r3, r4, r5, pc}
 800a722:	bf00      	nop
 800a724:	200013b4 	.word	0x200013b4
 800a728:	200013a8 	.word	0x200013a8
 800a72c:	200013f0 	.word	0x200013f0
 800a730:	200013bc 	.word	0x200013bc
 800a734:	2000131c 	.word	0x2000131c
 800a738:	20001310 	.word	0x20001310
 800a73c:	20001434 	.word	0x20001434
 800a740:	200013b0 	.word	0x200013b0
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <vTaskDelay>:
	{
 800a748:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a74a:	b1a8      	cbz	r0, 800a778 <vTaskDelay+0x30>
 800a74c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a74e:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <vTaskDelay+0x44>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	b143      	cbz	r3, 800a766 <vTaskDelay+0x1e>
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	e7fe      	b.n	800a764 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a766:	f7ff fedf 	bl	800a528 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a76a:	2100      	movs	r1, #0
 800a76c:	4620      	mov	r0, r4
 800a76e:	f7ff fdeb 	bl	800a348 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a772:	f7ff ff6d 	bl	800a650 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a776:	b938      	cbnz	r0, 800a788 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <vTaskDelay+0x48>)
 800a77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	f3bf 8f6f 	isb	sy
	}
 800a788:	bd10      	pop	{r4, pc}
 800a78a:	bf00      	nop
 800a78c:	200013b4 	.word	0x200013b4
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a794:	4b20      	ldr	r3, [pc, #128]	; (800a818 <vTaskSwitchContext+0x84>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	b11b      	cbz	r3, 800a7a2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a79a:	4b20      	ldr	r3, [pc, #128]	; (800a81c <vTaskSwitchContext+0x88>)
 800a79c:	2201      	movs	r2, #1
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800a7a2:	4b1e      	ldr	r3, [pc, #120]	; (800a81c <vTaskSwitchContext+0x88>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a8:	4b1d      	ldr	r3, [pc, #116]	; (800a820 <vTaskSwitchContext+0x8c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a7ac:	fab3 f383 	clz	r3, r3
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f1c3 031f 	rsb	r3, r3, #31
 800a7b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a7ba:	008a      	lsls	r2, r1, #2
 800a7bc:	4919      	ldr	r1, [pc, #100]	; (800a824 <vTaskSwitchContext+0x90>)
 800a7be:	588a      	ldr	r2, [r1, r2]
 800a7c0:	b942      	cbnz	r2, 800a7d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	e7fe      	b.n	800a7d2 <vTaskSwitchContext+0x3e>
{
 800a7d4:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d6:	4913      	ldr	r1, [pc, #76]	; (800a824 <vTaskSwitchContext+0x90>)
 800a7d8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a7dc:	0082      	lsls	r2, r0, #2
 800a7de:	440a      	add	r2, r1
 800a7e0:	6850      	ldr	r0, [r2, #4]
 800a7e2:	6840      	ldr	r0, [r0, #4]
 800a7e4:	6050      	str	r0, [r2, #4]
 800a7e6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800a7ea:	00a2      	lsls	r2, r4, #2
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	3208      	adds	r2, #8
 800a7f0:	4411      	add	r1, r2
 800a7f2:	4288      	cmp	r0, r1
 800a7f4:	d00b      	beq.n	800a80e <vTaskSwitchContext+0x7a>
 800a7f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a7fa:	009a      	lsls	r2, r3, #2
 800a7fc:	4b09      	ldr	r3, [pc, #36]	; (800a824 <vTaskSwitchContext+0x90>)
 800a7fe:	4413      	add	r3, r2
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	4b08      	ldr	r3, [pc, #32]	; (800a828 <vTaskSwitchContext+0x94>)
 800a806:	601a      	str	r2, [r3, #0]
}
 800a808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a80c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a80e:	6840      	ldr	r0, [r0, #4]
 800a810:	4a04      	ldr	r2, [pc, #16]	; (800a824 <vTaskSwitchContext+0x90>)
 800a812:	4422      	add	r2, r4
 800a814:	6050      	str	r0, [r2, #4]
 800a816:	e7ee      	b.n	800a7f6 <vTaskSwitchContext+0x62>
 800a818:	200013b4 	.word	0x200013b4
 800a81c:	20001434 	.word	0x20001434
 800a820:	200013bc 	.word	0x200013bc
 800a824:	2000131c 	.word	0x2000131c
 800a828:	20001310 	.word	0x20001310

0800a82c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a82c:	b158      	cbz	r0, 800a846 <vTaskPlaceOnEventList+0x1a>
{
 800a82e:	b510      	push	{r4, lr}
 800a830:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <vTaskPlaceOnEventList+0x2c>)
 800a834:	6819      	ldr	r1, [r3, #0]
 800a836:	3118      	adds	r1, #24
 800a838:	f7ff f819 	bl	800986e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a83c:	2101      	movs	r1, #1
 800a83e:	4620      	mov	r0, r4
 800a840:	f7ff fd82 	bl	800a348 <prvAddCurrentTaskToDelayedList>
}
 800a844:	bd10      	pop	{r4, pc}
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a856:	e7fe      	b.n	800a856 <vTaskPlaceOnEventList+0x2a>
 800a858:	20001310 	.word	0x20001310

0800a85c <xTaskRemoveFromEventList>:
{
 800a85c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a85e:	68c3      	ldr	r3, [r0, #12]
 800a860:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a862:	b324      	cbz	r4, 800a8ae <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a864:	f104 0518 	add.w	r5, r4, #24
 800a868:	4628      	mov	r0, r5
 800a86a:	f7ff f819 	bl	80098a0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a86e:	4b18      	ldr	r3, [pc, #96]	; (800a8d0 <xTaskRemoveFromEventList+0x74>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	bb2b      	cbnz	r3, 800a8c0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a874:	1d25      	adds	r5, r4, #4
 800a876:	4628      	mov	r0, r5
 800a878:	f7ff f812 	bl	80098a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a87c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a87e:	2301      	movs	r3, #1
 800a880:	4083      	lsls	r3, r0
 800a882:	4a14      	ldr	r2, [pc, #80]	; (800a8d4 <xTaskRemoveFromEventList+0x78>)
 800a884:	6811      	ldr	r1, [r2, #0]
 800a886:	430b      	orrs	r3, r1
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a88e:	4629      	mov	r1, r5
 800a890:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <xTaskRemoveFromEventList+0x7c>)
 800a892:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a896:	f7fe ffdf 	bl	8009858 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a89a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a89c:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <xTaskRemoveFromEventList+0x80>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d911      	bls.n	800a8ca <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <xTaskRemoveFromEventList+0x84>)
 800a8aa:	6018      	str	r0, [r3, #0]
 800a8ac:	e00e      	b.n	800a8cc <xTaskRemoveFromEventList+0x70>
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a8be:	e7fe      	b.n	800a8be <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4808      	ldr	r0, [pc, #32]	; (800a8e4 <xTaskRemoveFromEventList+0x88>)
 800a8c4:	f7fe ffc8 	bl	8009858 <vListInsertEnd>
 800a8c8:	e7e7      	b.n	800a89a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a8ca:	2000      	movs	r0, #0
}
 800a8cc:	bd38      	pop	{r3, r4, r5, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200013b4 	.word	0x200013b4
 800a8d4:	200013bc 	.word	0x200013bc
 800a8d8:	2000131c 	.word	0x2000131c
 800a8dc:	20001310 	.word	0x20001310
 800a8e0:	20001434 	.word	0x20001434
 800a8e4:	200013f0 	.word	0x200013f0

0800a8e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8e8:	4b03      	ldr	r3, [pc, #12]	; (800a8f8 <vTaskInternalSetTimeOutState+0x10>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8ee:	4b03      	ldr	r3, [pc, #12]	; (800a8fc <vTaskInternalSetTimeOutState+0x14>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6043      	str	r3, [r0, #4]
}
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	200013ec 	.word	0x200013ec
 800a8fc:	20001430 	.word	0x20001430

0800a900 <xTaskCheckForTimeOut>:
{
 800a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a902:	b1c8      	cbz	r0, 800a938 <xTaskCheckForTimeOut+0x38>
 800a904:	460c      	mov	r4, r1
 800a906:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a908:	b1f9      	cbz	r1, 800a94a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800a90a:	f000 f9e3 	bl	800acd4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a90e:	4b1b      	ldr	r3, [pc, #108]	; (800a97c <xTaskCheckForTimeOut+0x7c>)
 800a910:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a912:	686b      	ldr	r3, [r5, #4]
 800a914:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a916:	6822      	ldr	r2, [r4, #0]
 800a918:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a91c:	d026      	beq.n	800a96c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a91e:	682f      	ldr	r7, [r5, #0]
 800a920:	4e17      	ldr	r6, [pc, #92]	; (800a980 <xTaskCheckForTimeOut+0x80>)
 800a922:	6836      	ldr	r6, [r6, #0]
 800a924:	42b7      	cmp	r7, r6
 800a926:	d001      	beq.n	800a92c <xTaskCheckForTimeOut+0x2c>
 800a928:	428b      	cmp	r3, r1
 800a92a:	d924      	bls.n	800a976 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a92c:	4282      	cmp	r2, r0
 800a92e:	d815      	bhi.n	800a95c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a934:	2401      	movs	r4, #1
 800a936:	e01a      	b.n	800a96e <xTaskCheckForTimeOut+0x6e>
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a948:	e7fe      	b.n	800a948 <xTaskCheckForTimeOut+0x48>
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a95a:	e7fe      	b.n	800a95a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800a95c:	1a5b      	subs	r3, r3, r1
 800a95e:	4413      	add	r3, r2
 800a960:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a962:	4628      	mov	r0, r5
 800a964:	f7ff ffc0 	bl	800a8e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a968:	2400      	movs	r4, #0
 800a96a:	e000      	b.n	800a96e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800a96c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a96e:	f000 f9d3 	bl	800ad18 <vPortExitCritical>
}
 800a972:	4620      	mov	r0, r4
 800a974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800a976:	2401      	movs	r4, #1
 800a978:	e7f9      	b.n	800a96e <xTaskCheckForTimeOut+0x6e>
 800a97a:	bf00      	nop
 800a97c:	20001430 	.word	0x20001430
 800a980:	200013ec 	.word	0x200013ec

0800a984 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a984:	4b01      	ldr	r3, [pc, #4]	; (800a98c <vTaskMissedYield+0x8>)
 800a986:	2201      	movs	r2, #1
 800a988:	601a      	str	r2, [r3, #0]
}
 800a98a:	4770      	bx	lr
 800a98c:	20001434 	.word	0x20001434

0800a990 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <xTaskGetSchedulerState+0x18>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	b133      	cbz	r3, 800a9a4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <xTaskGetSchedulerState+0x1c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	b10b      	cbz	r3, 800a9a0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a99c:	2000      	movs	r0, #0
	}
 800a99e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a9a0:	2002      	movs	r0, #2
 800a9a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	4770      	bx	lr
 800a9a8:	20001404 	.word	0x20001404
 800a9ac:	200013b4 	.word	0x200013b4

0800a9b0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d04f      	beq.n	800aa54 <xTaskPriorityInherit+0xa4>
	{
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a9b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a9ba:	4a28      	ldr	r2, [pc, #160]	; (800aa5c <xTaskPriorityInherit+0xac>)
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d23f      	bcs.n	800aa44 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9c4:	6982      	ldr	r2, [r0, #24]
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	db05      	blt.n	800a9d6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ca:	4a24      	ldr	r2, [pc, #144]	; (800aa5c <xTaskPriorityInherit+0xac>)
 800a9cc:	6812      	ldr	r2, [r2, #0]
 800a9ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a9d0:	f1c2 0207 	rsb	r2, r2, #7
 800a9d4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9d6:	6961      	ldr	r1, [r4, #20]
 800a9d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9dc:	4a20      	ldr	r2, [pc, #128]	; (800aa60 <xTaskPriorityInherit+0xb0>)
 800a9de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9e2:	4299      	cmp	r1, r3
 800a9e4:	d005      	beq.n	800a9f2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9e6:	4b1d      	ldr	r3, [pc, #116]	; (800aa5c <xTaskPriorityInherit+0xac>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ec:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800a9ee:	2001      	movs	r0, #1
	}
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9f2:	1d25      	adds	r5, r4, #4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f7fe ff53 	bl	80098a0 <uxListRemove>
 800a9fa:	b970      	cbnz	r0, 800aa1a <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a9fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a9fe:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4916      	ldr	r1, [pc, #88]	; (800aa60 <xTaskPriorityInherit+0xb0>)
 800aa06:	58cb      	ldr	r3, [r1, r3]
 800aa08:	b93b      	cbnz	r3, 800aa1a <xTaskPriorityInherit+0x6a>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	fa03 f202 	lsl.w	r2, r3, r2
 800aa10:	4914      	ldr	r1, [pc, #80]	; (800aa64 <xTaskPriorityInherit+0xb4>)
 800aa12:	680b      	ldr	r3, [r1, #0]
 800aa14:	ea23 0302 	bic.w	r3, r3, r2
 800aa18:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa1a:	4b10      	ldr	r3, [pc, #64]	; (800aa5c <xTaskPriorityInherit+0xac>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800aa20:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aa22:	2401      	movs	r4, #1
 800aa24:	fa04 f300 	lsl.w	r3, r4, r0
 800aa28:	4a0e      	ldr	r2, [pc, #56]	; (800aa64 <xTaskPriorityInherit+0xb4>)
 800aa2a:	6811      	ldr	r1, [r2, #0]
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa34:	4629      	mov	r1, r5
 800aa36:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <xTaskPriorityInherit+0xb0>)
 800aa38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa3c:	f7fe ff0c 	bl	8009858 <vListInsertEnd>
				xReturn = pdTRUE;
 800aa40:	4620      	mov	r0, r4
 800aa42:	e7d5      	b.n	800a9f0 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa46:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <xTaskPriorityInherit+0xac>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d303      	bcc.n	800aa58 <xTaskPriorityInherit+0xa8>
	BaseType_t xReturn = pdFALSE;
 800aa50:	2000      	movs	r0, #0
 800aa52:	e7cd      	b.n	800a9f0 <xTaskPriorityInherit+0x40>
 800aa54:	2000      	movs	r0, #0
	}
 800aa56:	4770      	bx	lr
					xReturn = pdTRUE;
 800aa58:	2001      	movs	r0, #1
		return xReturn;
 800aa5a:	e7c9      	b.n	800a9f0 <xTaskPriorityInherit+0x40>
 800aa5c:	20001310 	.word	0x20001310
 800aa60:	2000131c 	.word	0x2000131c
 800aa64:	200013bc 	.word	0x200013bc

0800aa68 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d04c      	beq.n	800ab06 <xTaskPriorityDisinherit+0x9e>
	{
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800aa70:	4b27      	ldr	r3, [pc, #156]	; (800ab10 <xTaskPriorityDisinherit+0xa8>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4283      	cmp	r3, r0
 800aa76:	d008      	beq.n	800aa8a <xTaskPriorityDisinherit+0x22>
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	e7fe      	b.n	800aa88 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa8a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800aa8c:	b943      	cbnz	r3, 800aaa0 <xTaskPriorityDisinherit+0x38>
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	e7fe      	b.n	800aa9e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aaa4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800aaa6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aaa8:	4291      	cmp	r1, r2
 800aaaa:	d02e      	beq.n	800ab0a <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aaac:	b10b      	cbz	r3, 800aab2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800aaae:	2000      	movs	r0, #0
	}
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aab2:	1d05      	adds	r5, r0, #4
 800aab4:	4628      	mov	r0, r5
 800aab6:	f7fe fef3 	bl	80098a0 <uxListRemove>
 800aaba:	b970      	cbnz	r0, 800aada <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aabc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aabe:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4913      	ldr	r1, [pc, #76]	; (800ab14 <xTaskPriorityDisinherit+0xac>)
 800aac6:	58cb      	ldr	r3, [r1, r3]
 800aac8:	b93b      	cbnz	r3, 800aada <xTaskPriorityDisinherit+0x72>
 800aaca:	2301      	movs	r3, #1
 800aacc:	fa03 f202 	lsl.w	r2, r3, r2
 800aad0:	4911      	ldr	r1, [pc, #68]	; (800ab18 <xTaskPriorityDisinherit+0xb0>)
 800aad2:	680b      	ldr	r3, [r1, #0]
 800aad4:	ea23 0302 	bic.w	r3, r3, r2
 800aad8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aada:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800aadc:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aade:	f1c0 0307 	rsb	r3, r0, #7
 800aae2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800aae4:	2401      	movs	r4, #1
 800aae6:	fa04 f300 	lsl.w	r3, r4, r0
 800aaea:	4a0b      	ldr	r2, [pc, #44]	; (800ab18 <xTaskPriorityDisinherit+0xb0>)
 800aaec:	6811      	ldr	r1, [r2, #0]
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4b06      	ldr	r3, [pc, #24]	; (800ab14 <xTaskPriorityDisinherit+0xac>)
 800aafa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aafe:	f7fe feab 	bl	8009858 <vListInsertEnd>
					xReturn = pdTRUE;
 800ab02:	4620      	mov	r0, r4
 800ab04:	e7d4      	b.n	800aab0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800ab06:	2000      	movs	r0, #0
	}
 800ab08:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e7d0      	b.n	800aab0 <xTaskPriorityDisinherit+0x48>
 800ab0e:	bf00      	nop
 800ab10:	20001310 	.word	0x20001310
 800ab14:	2000131c 	.word	0x2000131c
 800ab18:	200013bc 	.word	0x200013bc

0800ab1c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d057      	beq.n	800abd0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
	{
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	460a      	mov	r2, r1
 800ab24:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800ab26:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800ab28:	b941      	cbnz	r1, 800ab3c <vTaskPriorityDisinheritAfterTimeout+0x20>
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	e7fe      	b.n	800ab3a <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d200      	bcs.n	800ab44 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab42:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d001      	beq.n	800ab4e <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab4a:	2901      	cmp	r1, #1
 800ab4c:	d000      	beq.n	800ab50 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800ab50:	4920      	ldr	r1, [pc, #128]	; (800abd4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800ab52:	6809      	ldr	r1, [r1, #0]
 800ab54:	42a1      	cmp	r1, r4
 800ab56:	d032      	beq.n	800abbe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					pxTCB->uxPriority = uxPriorityToUse;
 800ab58:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab5a:	69a1      	ldr	r1, [r4, #24]
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	db02      	blt.n	800ab66 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab60:	f1c3 0307 	rsb	r3, r3, #7
 800ab64:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab66:	6961      	ldr	r1, [r4, #20]
 800ab68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ab6c:	4b1a      	ldr	r3, [pc, #104]	; (800abd8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800ab6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ab72:	4291      	cmp	r1, r2
 800ab74:	d1eb      	bne.n	800ab4e <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab76:	1d25      	adds	r5, r4, #4
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f7fe fe91 	bl	80098a0 <uxListRemove>
 800ab7e:	b970      	cbnz	r0, 800ab9e <vTaskPriorityDisinheritAfterTimeout+0x82>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ab80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ab82:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4913      	ldr	r1, [pc, #76]	; (800abd8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800ab8a:	58cb      	ldr	r3, [r1, r3]
 800ab8c:	b93b      	cbnz	r3, 800ab9e <vTaskPriorityDisinheritAfterTimeout+0x82>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	fa03 f202 	lsl.w	r2, r3, r2
 800ab94:	4911      	ldr	r1, [pc, #68]	; (800abdc <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800ab96:	680b      	ldr	r3, [r1, #0]
 800ab98:	ea23 0302 	bic.w	r3, r3, r2
 800ab9c:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800ab9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800aba0:	2301      	movs	r3, #1
 800aba2:	4083      	lsls	r3, r0
 800aba4:	4a0d      	ldr	r2, [pc, #52]	; (800abdc <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800aba6:	6811      	ldr	r1, [r2, #0]
 800aba8:	430b      	orrs	r3, r1
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800abb0:	4629      	mov	r1, r5
 800abb2:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800abb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abb8:	f7fe fe4e 	bl	8009858 <vListInsertEnd>
	}
 800abbc:	e7c7      	b.n	800ab4e <vTaskPriorityDisinheritAfterTimeout+0x32>
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800abce:	e7fe      	b.n	800abce <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	20001310 	.word	0x20001310
 800abd8:	2000131c 	.word	0x2000131c
 800abdc:	200013bc 	.word	0x200013bc

0800abe0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <pvTaskIncrementMutexHeldCount+0x18>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	b123      	cbz	r3, 800abf0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800abe6:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <pvTaskIncrementMutexHeldCount+0x18>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800abec:	3301      	adds	r3, #1
 800abee:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 800abf0:	4b01      	ldr	r3, [pc, #4]	; (800abf8 <pvTaskIncrementMutexHeldCount+0x18>)
 800abf2:	6818      	ldr	r0, [r3, #0]
	}
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20001310 	.word	0x20001310

0800abfc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abfc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac02:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <prvTaskExitError+0x3c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac0a:	d008      	beq.n	800ac1e <prvTaskExitError+0x22>
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	e7fe      	b.n	800ac1c <prvTaskExitError+0x20>
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac2e:	9b01      	ldr	r3, [sp, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0fc      	beq.n	800ac2e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac34:	b002      	add	sp, #8
 800ac36:	4770      	bx	lr
 800ac38:	2000011c 	.word	0x2000011c

0800ac3c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac3c:	4808      	ldr	r0, [pc, #32]	; (800ac60 <prvPortStartFirstTask+0x24>)
 800ac3e:	6800      	ldr	r0, [r0, #0]
 800ac40:	6800      	ldr	r0, [r0, #0]
 800ac42:	f380 8808 	msr	MSP, r0
 800ac46:	f04f 0000 	mov.w	r0, #0
 800ac4a:	f380 8814 	msr	CONTROL, r0
 800ac4e:	b662      	cpsie	i
 800ac50:	b661      	cpsie	f
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	df00      	svc	0
 800ac5c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac5e:	0000      	.short	0x0000
 800ac60:	e000ed08 	.word	0xe000ed08

0800ac64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac74 <vPortEnableVFP+0x10>
 800ac68:	6801      	ldr	r1, [r0, #0]
 800ac6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac6e:	6001      	str	r1, [r0, #0]
 800ac70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac72:	0000      	.short	0x0000
 800ac74:	e000ed88 	.word	0xe000ed88

0800ac78 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac7c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac80:	f021 0101 	bic.w	r1, r1, #1
 800ac84:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac88:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <pxPortInitialiseStack+0x28>)
 800ac8a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac8e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac92:	f06f 0302 	mvn.w	r3, #2
 800ac96:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800ac9a:	3844      	subs	r0, #68	; 0x44
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	0800abfd 	.word	0x0800abfd
	...

0800acb0 <SVC_Handler>:
	__asm volatile (
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <pxCurrentTCBConst2>)
 800acb2:	6819      	ldr	r1, [r3, #0]
 800acb4:	6808      	ldr	r0, [r1, #0]
 800acb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acba:	f380 8809 	msr	PSP, r0
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f380 8811 	msr	BASEPRI, r0
 800acca:	4770      	bx	lr
 800accc:	f3af 8000 	nop.w

0800acd0 <pxCurrentTCBConst2>:
 800acd0:	20001310 	.word	0x20001310

0800acd4 <vPortEnterCritical>:
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ace4:	4a0a      	ldr	r2, [pc, #40]	; (800ad10 <vPortEnterCritical+0x3c>)
 800ace6:	6813      	ldr	r3, [r2, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800acec:	2b01      	cmp	r3, #1
 800acee:	d000      	beq.n	800acf2 <vPortEnterCritical+0x1e>
}
 800acf0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acf2:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <vPortEnterCritical+0x40>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acfa:	d0f9      	beq.n	800acf0 <vPortEnterCritical+0x1c>
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	e7fe      	b.n	800ad0c <vPortEnterCritical+0x38>
 800ad0e:	bf00      	nop
 800ad10:	2000011c 	.word	0x2000011c
 800ad14:	e000ed04 	.word	0xe000ed04

0800ad18 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ad18:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <vPortExitCritical+0x28>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	b943      	cbnz	r3, 800ad30 <vPortExitCritical+0x18>
 800ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	e7fe      	b.n	800ad2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ad30:	3b01      	subs	r3, #1
 800ad32:	4a03      	ldr	r2, [pc, #12]	; (800ad40 <vPortExitCritical+0x28>)
 800ad34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad36:	b90b      	cbnz	r3, 800ad3c <vPortExitCritical+0x24>
	__asm volatile
 800ad38:	f383 8811 	msr	BASEPRI, r3
}
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	2000011c 	.word	0x2000011c
	...

0800ad50 <PendSV_Handler>:
	__asm volatile
 800ad50:	f3ef 8009 	mrs	r0, PSP
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <pxCurrentTCBConst>)
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	f01e 0f10 	tst.w	lr, #16
 800ad60:	bf08      	it	eq
 800ad62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	6010      	str	r0, [r2, #0]
 800ad6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad74:	f380 8811 	msr	BASEPRI, r0
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f7ff fd08 	bl	800a794 <vTaskSwitchContext>
 800ad84:	f04f 0000 	mov.w	r0, #0
 800ad88:	f380 8811 	msr	BASEPRI, r0
 800ad8c:	bc09      	pop	{r0, r3}
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	6808      	ldr	r0, [r1, #0]
 800ad92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad96:	f01e 0f10 	tst.w	lr, #16
 800ad9a:	bf08      	it	eq
 800ad9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ada0:	f380 8809 	msr	PSP, r0
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	f3af 8000 	nop.w

0800adb0 <pxCurrentTCBConst>:
 800adb0:	20001310 	.word	0x20001310

0800adb4 <SysTick_Handler>:
{
 800adb4:	b508      	push	{r3, lr}
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800adc6:	f7ff fbb7 	bl	800a538 <xTaskIncrementTick>
 800adca:	b118      	cbz	r0, 800add4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adcc:	4b03      	ldr	r3, [pc, #12]	; (800addc <SysTick_Handler+0x28>)
 800adce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800add4:	2300      	movs	r3, #0
 800add6:	f383 8811 	msr	BASEPRI, r3
}
 800adda:	bd08      	pop	{r3, pc}
 800addc:	e000ed04 	.word	0xe000ed04

0800ade0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ade0:	4a08      	ldr	r2, [pc, #32]	; (800ae04 <vPortSetupTimerInterrupt+0x24>)
 800ade2:	2300      	movs	r3, #0
 800ade4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ade6:	4908      	ldr	r1, [pc, #32]	; (800ae08 <vPortSetupTimerInterrupt+0x28>)
 800ade8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adea:	4b08      	ldr	r3, [pc, #32]	; (800ae0c <vPortSetupTimerInterrupt+0x2c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4908      	ldr	r1, [pc, #32]	; (800ae10 <vPortSetupTimerInterrupt+0x30>)
 800adf0:	fba1 1303 	umull	r1, r3, r1, r3
 800adf4:	099b      	lsrs	r3, r3, #6
 800adf6:	3b01      	subs	r3, #1
 800adf8:	4906      	ldr	r1, [pc, #24]	; (800ae14 <vPortSetupTimerInterrupt+0x34>)
 800adfa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adfc:	2307      	movs	r3, #7
 800adfe:	6013      	str	r3, [r2, #0]
}
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	e000e010 	.word	0xe000e010
 800ae08:	e000e018 	.word	0xe000e018
 800ae0c:	20000000 	.word	0x20000000
 800ae10:	10624dd3 	.word	0x10624dd3
 800ae14:	e000e014 	.word	0xe000e014

0800ae18 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae18:	4b3a      	ldr	r3, [pc, #232]	; (800af04 <xPortStartScheduler+0xec>)
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	4b3a      	ldr	r3, [pc, #232]	; (800af08 <xPortStartScheduler+0xf0>)
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d029      	beq.n	800ae76 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae22:	4b38      	ldr	r3, [pc, #224]	; (800af04 <xPortStartScheduler+0xec>)
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	4b39      	ldr	r3, [pc, #228]	; (800af0c <xPortStartScheduler+0xf4>)
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d02d      	beq.n	800ae88 <xPortStartScheduler+0x70>
{
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae30:	4b37      	ldr	r3, [pc, #220]	; (800af10 <xPortStartScheduler+0xf8>)
 800ae32:	781a      	ldrb	r2, [r3, #0]
 800ae34:	b2d2      	uxtb	r2, r2
 800ae36:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae38:	22ff      	movs	r2, #255	; 0xff
 800ae3a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae44:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ae48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae4c:	4a31      	ldr	r2, [pc, #196]	; (800af14 <xPortStartScheduler+0xfc>)
 800ae4e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae50:	4b31      	ldr	r3, [pc, #196]	; (800af18 <xPortStartScheduler+0x100>)
 800ae52:	2207      	movs	r2, #7
 800ae54:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae56:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ae5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae5e:	d01c      	beq.n	800ae9a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800ae60:	4a2d      	ldr	r2, [pc, #180]	; (800af18 <xPortStartScheduler+0x100>)
 800ae62:	6813      	ldr	r3, [r2, #0]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	f88d 3003 	strb.w	r3, [sp, #3]
 800ae74:	e7ef      	b.n	800ae56 <xPortStartScheduler+0x3e>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae86:	e7fe      	b.n	800ae86 <xPortStartScheduler+0x6e>
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae98:	e7fe      	b.n	800ae98 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae9a:	4b1f      	ldr	r3, [pc, #124]	; (800af18 <xPortStartScheduler+0x100>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d008      	beq.n	800aeb4 <xPortStartScheduler+0x9c>
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	e7fe      	b.n	800aeb2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aeb4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aeb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeba:	4a17      	ldr	r2, [pc, #92]	; (800af18 <xPortStartScheduler+0x100>)
 800aebc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	4a13      	ldr	r2, [pc, #76]	; (800af10 <xPortStartScheduler+0xf8>)
 800aec4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aec6:	4b15      	ldr	r3, [pc, #84]	; (800af1c <xPortStartScheduler+0x104>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800aece:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800aed6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800aed8:	f7ff ff82 	bl	800ade0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800aedc:	2400      	movs	r4, #0
 800aede:	4b10      	ldr	r3, [pc, #64]	; (800af20 <xPortStartScheduler+0x108>)
 800aee0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800aee2:	f7ff febf 	bl	800ac64 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aee6:	4a0f      	ldr	r2, [pc, #60]	; (800af24 <xPortStartScheduler+0x10c>)
 800aee8:	6813      	ldr	r3, [r2, #0]
 800aeea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aeee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800aef0:	f7ff fea4 	bl	800ac3c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800aef4:	f7ff fc4e 	bl	800a794 <vTaskSwitchContext>
	prvTaskExitError();
 800aef8:	f7ff fe80 	bl	800abfc <prvTaskExitError>
}
 800aefc:	4620      	mov	r0, r4
 800aefe:	b002      	add	sp, #8
 800af00:	bd10      	pop	{r4, pc}
 800af02:	bf00      	nop
 800af04:	e000ed00 	.word	0xe000ed00
 800af08:	410fc271 	.word	0x410fc271
 800af0c:	410fc270 	.word	0x410fc270
 800af10:	e000e400 	.word	0xe000e400
 800af14:	20001438 	.word	0x20001438
 800af18:	2000143c 	.word	0x2000143c
 800af1c:	e000ed20 	.word	0xe000ed20
 800af20:	2000011c 	.word	0x2000011c
 800af24:	e000ef34 	.word	0xe000ef34

0800af28 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af28:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af2c:	2b0f      	cmp	r3, #15
 800af2e:	d90f      	bls.n	800af50 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af30:	4a10      	ldr	r2, [pc, #64]	; (800af74 <vPortValidateInterruptPriority+0x4c>)
 800af32:	5c9b      	ldrb	r3, [r3, r2]
 800af34:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af36:	4a10      	ldr	r2, [pc, #64]	; (800af78 <vPortValidateInterruptPriority+0x50>)
 800af38:	7812      	ldrb	r2, [r2, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d908      	bls.n	800af50 <vPortValidateInterruptPriority+0x28>
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	e7fe      	b.n	800af4e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af50:	4b0a      	ldr	r3, [pc, #40]	; (800af7c <vPortValidateInterruptPriority+0x54>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af58:	4a09      	ldr	r2, [pc, #36]	; (800af80 <vPortValidateInterruptPriority+0x58>)
 800af5a:	6812      	ldr	r2, [r2, #0]
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d908      	bls.n	800af72 <vPortValidateInterruptPriority+0x4a>
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	e7fe      	b.n	800af70 <vPortValidateInterruptPriority+0x48>
	}
 800af72:	4770      	bx	lr
 800af74:	e000e3f0 	.word	0xe000e3f0
 800af78:	20001438 	.word	0x20001438
 800af7c:	e000ed0c 	.word	0xe000ed0c
 800af80:	2000143c 	.word	0x2000143c

0800af84 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af84:	4a13      	ldr	r2, [pc, #76]	; (800afd4 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af86:	f012 0f07 	tst.w	r2, #7
 800af8a:	d01f      	beq.n	800afcc <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af8c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af8e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af92:	f5c1 531c 	rsb	r3, r1, #9984	; 0x2700
 800af96:	3310      	adds	r3, #16
 800af98:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af9a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af9c:	480e      	ldr	r0, [pc, #56]	; (800afd8 <prvHeapInit+0x54>)
 800af9e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afa0:	2100      	movs	r1, #0
 800afa2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afa4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800afa6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afa8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800afac:	480b      	ldr	r0, [pc, #44]	; (800afdc <prvHeapInit+0x58>)
 800afae:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800afb0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afb2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afb4:	1a99      	subs	r1, r3, r2
 800afb6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afb8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afba:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <prvHeapInit+0x5c>)
 800afbc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afbe:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <prvHeapInit+0x60>)
 800afc0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afc2:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <prvHeapInit+0x64>)
 800afc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afcc:	f242 7310 	movw	r3, #10000	; 0x2710
 800afd0:	e7e4      	b.n	800af9c <prvHeapInit+0x18>
 800afd2:	bf00      	nop
 800afd4:	20001444 	.word	0x20001444
 800afd8:	20003b60 	.word	0x20003b60
 800afdc:	20001440 	.word	0x20001440
 800afe0:	20003b5c 	.word	0x20003b5c
 800afe4:	20003b58 	.word	0x20003b58
 800afe8:	20003b54 	.word	0x20003b54

0800afec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afec:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afee:	4b13      	ldr	r3, [pc, #76]	; (800b03c <prvInsertBlockIntoFreeList+0x50>)
 800aff0:	461a      	mov	r2, r3
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4283      	cmp	r3, r0
 800aff6:	d3fb      	bcc.n	800aff0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aff8:	6851      	ldr	r1, [r2, #4]
 800affa:	1854      	adds	r4, r2, r1
 800affc:	4284      	cmp	r4, r0
 800affe:	d00a      	beq.n	800b016 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b000:	6841      	ldr	r1, [r0, #4]
 800b002:	1844      	adds	r4, r0, r1
 800b004:	42a3      	cmp	r3, r4
 800b006:	d00b      	beq.n	800b020 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b008:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b00a:	4290      	cmp	r0, r2
 800b00c:	d000      	beq.n	800b010 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b00e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b014:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b016:	6840      	ldr	r0, [r0, #4]
 800b018:	4401      	add	r1, r0
 800b01a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800b01c:	4610      	mov	r0, r2
 800b01e:	e7ef      	b.n	800b000 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b020:	4c07      	ldr	r4, [pc, #28]	; (800b040 <prvInsertBlockIntoFreeList+0x54>)
 800b022:	6824      	ldr	r4, [r4, #0]
 800b024:	42a3      	cmp	r3, r4
 800b026:	d006      	beq.n	800b036 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4419      	add	r1, r3
 800b02c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b02e:	6813      	ldr	r3, [r2, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6003      	str	r3, [r0, #0]
 800b034:	e7e9      	b.n	800b00a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b036:	6004      	str	r4, [r0, #0]
 800b038:	e7e7      	b.n	800b00a <prvInsertBlockIntoFreeList+0x1e>
 800b03a:	bf00      	nop
 800b03c:	20003b60 	.word	0x20003b60
 800b040:	20001440 	.word	0x20001440

0800b044 <pvPortMalloc>:
{
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b048:	f7ff fa6e 	bl	800a528 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b04c:	4b34      	ldr	r3, [pc, #208]	; (800b120 <pvPortMalloc+0xdc>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	b1a3      	cbz	r3, 800b07c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b052:	4b34      	ldr	r3, [pc, #208]	; (800b124 <pvPortMalloc+0xe0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	421c      	tst	r4, r3
 800b058:	d14a      	bne.n	800b0f0 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 800b05a:	b134      	cbz	r4, 800b06a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800b05c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b05e:	f014 0f07 	tst.w	r4, #7
 800b062:	d002      	beq.n	800b06a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b064:	f024 0407 	bic.w	r4, r4, #7
 800b068:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b06a:	2c00      	cmp	r4, #0
 800b06c:	d042      	beq.n	800b0f4 <pvPortMalloc+0xb0>
 800b06e:	4b2e      	ldr	r3, [pc, #184]	; (800b128 <pvPortMalloc+0xe4>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	42a3      	cmp	r3, r4
 800b074:	d34d      	bcc.n	800b112 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800b076:	4b2d      	ldr	r3, [pc, #180]	; (800b12c <pvPortMalloc+0xe8>)
 800b078:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b07a:	e004      	b.n	800b086 <pvPortMalloc+0x42>
			prvHeapInit();
 800b07c:	f7ff ff82 	bl	800af84 <prvHeapInit>
 800b080:	e7e7      	b.n	800b052 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800b082:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800b084:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b086:	686a      	ldr	r2, [r5, #4]
 800b088:	42a2      	cmp	r2, r4
 800b08a:	d202      	bcs.n	800b092 <pvPortMalloc+0x4e>
 800b08c:	682a      	ldr	r2, [r5, #0]
 800b08e:	2a00      	cmp	r2, #0
 800b090:	d1f7      	bne.n	800b082 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800b092:	4a23      	ldr	r2, [pc, #140]	; (800b120 <pvPortMalloc+0xdc>)
 800b094:	6812      	ldr	r2, [r2, #0]
 800b096:	42aa      	cmp	r2, r5
 800b098:	d03d      	beq.n	800b116 <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b09a:	681e      	ldr	r6, [r3, #0]
 800b09c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b09e:	682a      	ldr	r2, [r5, #0]
 800b0a0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0a2:	686b      	ldr	r3, [r5, #4]
 800b0a4:	1b1b      	subs	r3, r3, r4
 800b0a6:	2b10      	cmp	r3, #16
 800b0a8:	d910      	bls.n	800b0cc <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0aa:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0ac:	f010 0f07 	tst.w	r0, #7
 800b0b0:	d008      	beq.n	800b0c4 <pvPortMalloc+0x80>
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	e7fe      	b.n	800b0c2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0c4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0c6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0c8:	f7ff ff90 	bl	800afec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0cc:	686a      	ldr	r2, [r5, #4]
 800b0ce:	4916      	ldr	r1, [pc, #88]	; (800b128 <pvPortMalloc+0xe4>)
 800b0d0:	680b      	ldr	r3, [r1, #0]
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0d6:	4916      	ldr	r1, [pc, #88]	; (800b130 <pvPortMalloc+0xec>)
 800b0d8:	6809      	ldr	r1, [r1, #0]
 800b0da:	428b      	cmp	r3, r1
 800b0dc:	d201      	bcs.n	800b0e2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0de:	4914      	ldr	r1, [pc, #80]	; (800b130 <pvPortMalloc+0xec>)
 800b0e0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0e2:	4b10      	ldr	r3, [pc, #64]	; (800b124 <pvPortMalloc+0xe0>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	e002      	b.n	800b0f6 <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 800b0f0:	2600      	movs	r6, #0
 800b0f2:	e000      	b.n	800b0f6 <pvPortMalloc+0xb2>
 800b0f4:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800b0f6:	f7ff faab 	bl	800a650 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0fa:	f016 0f07 	tst.w	r6, #7
 800b0fe:	d00c      	beq.n	800b11a <pvPortMalloc+0xd6>
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	e7fe      	b.n	800b110 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800b112:	2600      	movs	r6, #0
 800b114:	e7ef      	b.n	800b0f6 <pvPortMalloc+0xb2>
 800b116:	2600      	movs	r6, #0
 800b118:	e7ed      	b.n	800b0f6 <pvPortMalloc+0xb2>
}
 800b11a:	4630      	mov	r0, r6
 800b11c:	bd70      	pop	{r4, r5, r6, pc}
 800b11e:	bf00      	nop
 800b120:	20001440 	.word	0x20001440
 800b124:	20003b54 	.word	0x20003b54
 800b128:	20003b58 	.word	0x20003b58
 800b12c:	20003b60 	.word	0x20003b60
 800b130:	20003b5c 	.word	0x20003b5c

0800b134 <vPortFree>:
	if( pv != NULL )
 800b134:	b380      	cbz	r0, 800b198 <vPortFree+0x64>
{
 800b136:	b538      	push	{r3, r4, r5, lr}
 800b138:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800b13a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b13e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b142:	4a16      	ldr	r2, [pc, #88]	; (800b19c <vPortFree+0x68>)
 800b144:	6812      	ldr	r2, [r2, #0]
 800b146:	4213      	tst	r3, r2
 800b148:	d108      	bne.n	800b15c <vPortFree+0x28>
 800b14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	e7fe      	b.n	800b15a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b15c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b160:	b141      	cbz	r1, 800b174 <vPortFree+0x40>
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	e7fe      	b.n	800b172 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b174:	ea23 0302 	bic.w	r3, r3, r2
 800b178:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b17c:	f7ff f9d4 	bl	800a528 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b180:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b184:	4a06      	ldr	r2, [pc, #24]	; (800b1a0 <vPortFree+0x6c>)
 800b186:	6813      	ldr	r3, [r2, #0]
 800b188:	440b      	add	r3, r1
 800b18a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b18c:	4628      	mov	r0, r5
 800b18e:	f7ff ff2d 	bl	800afec <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800b192:	f7ff fa5d 	bl	800a650 <xTaskResumeAll>
}
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	20003b54 	.word	0x20003b54
 800b1a0:	20003b58 	.word	0x20003b58

0800b1a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	490f      	ldr	r1, [pc, #60]	; (800b1e8 <MX_USB_DEVICE_Init+0x44>)
 800b1aa:	4810      	ldr	r0, [pc, #64]	; (800b1ec <MX_USB_DEVICE_Init+0x48>)
 800b1ac:	f7fd fdd9 	bl	8008d62 <USBD_Init>
 800b1b0:	b970      	cbnz	r0, 800b1d0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1b2:	490f      	ldr	r1, [pc, #60]	; (800b1f0 <MX_USB_DEVICE_Init+0x4c>)
 800b1b4:	480d      	ldr	r0, [pc, #52]	; (800b1ec <MX_USB_DEVICE_Init+0x48>)
 800b1b6:	f7fd fdeb 	bl	8008d90 <USBD_RegisterClass>
 800b1ba:	b960      	cbnz	r0, 800b1d6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1bc:	490d      	ldr	r1, [pc, #52]	; (800b1f4 <MX_USB_DEVICE_Init+0x50>)
 800b1be:	480b      	ldr	r0, [pc, #44]	; (800b1ec <MX_USB_DEVICE_Init+0x48>)
 800b1c0:	f7fd fd87 	bl	8008cd2 <USBD_CDC_RegisterInterface>
 800b1c4:	b950      	cbnz	r0, 800b1dc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1c6:	4809      	ldr	r0, [pc, #36]	; (800b1ec <MX_USB_DEVICE_Init+0x48>)
 800b1c8:	f7fd fdf9 	bl	8008dbe <USBD_Start>
 800b1cc:	b948      	cbnz	r0, 800b1e2 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b1d0:	f7f8 f818 	bl	8003204 <Error_Handler>
 800b1d4:	e7ed      	b.n	800b1b2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800b1d6:	f7f8 f815 	bl	8003204 <Error_Handler>
 800b1da:	e7ef      	b.n	800b1bc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800b1dc:	f7f8 f812 	bl	8003204 <Error_Handler>
 800b1e0:	e7f1      	b.n	800b1c6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800b1e2:	f7f8 f80f 	bl	8003204 <Error_Handler>
}
 800b1e6:	e7f2      	b.n	800b1ce <MX_USB_DEVICE_Init+0x2a>
 800b1e8:	20000134 	.word	0x20000134
 800b1ec:	20003e88 	.word	0x20003e88
 800b1f0:	2000000c 	.word	0x2000000c
 800b1f4:	20000120 	.word	0x20000120

0800b1f8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	4770      	bx	lr

0800b1fc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	4770      	bx	lr

0800b200 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800b200:	2000      	movs	r0, #0
 800b202:	4770      	bx	lr

0800b204 <CDC_Receive_FS>:
{
 800b204:	b510      	push	{r4, lr}
 800b206:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b208:	4c04      	ldr	r4, [pc, #16]	; (800b21c <CDC_Receive_FS+0x18>)
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7fd fd70 	bl	8008cf0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b210:	4620      	mov	r0, r4
 800b212:	f7fd fd8d 	bl	8008d30 <USBD_CDC_ReceivePacket>
}
 800b216:	2000      	movs	r0, #0
 800b218:	bd10      	pop	{r4, pc}
 800b21a:	bf00      	nop
 800b21c:	20003e88 	.word	0x20003e88

0800b220 <CDC_Init_FS>:
{
 800b220:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b222:	4c06      	ldr	r4, [pc, #24]	; (800b23c <CDC_Init_FS+0x1c>)
 800b224:	2200      	movs	r2, #0
 800b226:	4906      	ldr	r1, [pc, #24]	; (800b240 <CDC_Init_FS+0x20>)
 800b228:	4620      	mov	r0, r4
 800b22a:	f7fd fd59 	bl	8008ce0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b22e:	4905      	ldr	r1, [pc, #20]	; (800b244 <CDC_Init_FS+0x24>)
 800b230:	4620      	mov	r0, r4
 800b232:	f7fd fd5d 	bl	8008cf0 <USBD_CDC_SetRxBuffer>
}
 800b236:	2000      	movs	r0, #0
 800b238:	bd10      	pop	{r4, pc}
 800b23a:	bf00      	nop
 800b23c:	20003e88 	.word	0x20003e88
 800b240:	20004540 	.word	0x20004540
 800b244:	20004158 	.word	0x20004158

0800b248 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b248:	4b09      	ldr	r3, [pc, #36]	; (800b270 <CDC_Transmit_FS+0x28>)
 800b24a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800b24e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b252:	b10b      	cbz	r3, 800b258 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800b254:	2001      	movs	r0, #1
}
 800b256:	4770      	bx	lr
{
 800b258:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b25a:	4c05      	ldr	r4, [pc, #20]	; (800b270 <CDC_Transmit_FS+0x28>)
 800b25c:	460a      	mov	r2, r1
 800b25e:	4601      	mov	r1, r0
 800b260:	4620      	mov	r0, r4
 800b262:	f7fd fd3d 	bl	8008ce0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b266:	4620      	mov	r0, r4
 800b268:	f7fd fd48 	bl	8008cfc <USBD_CDC_TransmitPacket>
}
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	bf00      	nop
 800b270:	20003e88 	.word	0x20003e88

0800b274 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b274:	2312      	movs	r3, #18
 800b276:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800b278:	4800      	ldr	r0, [pc, #0]	; (800b27c <USBD_FS_DeviceDescriptor+0x8>)
 800b27a:	4770      	bx	lr
 800b27c:	20000160 	.word	0x20000160

0800b280 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b280:	2304      	movs	r3, #4
 800b282:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800b284:	4800      	ldr	r0, [pc, #0]	; (800b288 <USBD_FS_LangIDStrDescriptor+0x8>)
 800b286:	4770      	bx	lr
 800b288:	20000174 	.word	0x20000174

0800b28c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b28c:	230c      	movs	r3, #12
 800b28e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800b290:	4800      	ldr	r0, [pc, #0]	; (800b294 <USBD_FS_USR_BOSDescriptor+0x8>)
 800b292:	4770      	bx	lr
 800b294:	20000154 	.word	0x20000154

0800b298 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800b298:	2300      	movs	r3, #0
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d217      	bcs.n	800b2ce <IntToUnicode+0x36>
{
 800b29e:	b430      	push	{r4, r5}
 800b2a0:	e00b      	b.n	800b2ba <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2a2:	3437      	adds	r4, #55	; 0x37
 800b2a4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800b2a8:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800b2aa:	005c      	lsls	r4, r3, #1
 800b2ac:	3401      	adds	r4, #1
 800b2ae:	2500      	movs	r5, #0
 800b2b0:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d207      	bcs.n	800b2ca <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 800b2ba:	0f04      	lsrs	r4, r0, #28
 800b2bc:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800b2c0:	d2ef      	bcs.n	800b2a2 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2c2:	3430      	adds	r4, #48	; 0x30
 800b2c4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800b2c8:	e7ee      	b.n	800b2a8 <IntToUnicode+0x10>
  }
}
 800b2ca:	bc30      	pop	{r4, r5}
 800b2cc:	4770      	bx	lr
 800b2ce:	4770      	bx	lr

0800b2d0 <Get_SerialNum>:
{
 800b2d0:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2d2:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <Get_SerialNum+0x2c>)
 800b2d4:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2da:	3304      	adds	r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800b2de:	18c0      	adds	r0, r0, r3
 800b2e0:	d100      	bne.n	800b2e4 <Get_SerialNum+0x14>
}
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2e4:	4d06      	ldr	r5, [pc, #24]	; (800b300 <Get_SerialNum+0x30>)
 800b2e6:	2208      	movs	r2, #8
 800b2e8:	1ca9      	adds	r1, r5, #2
 800b2ea:	f7ff ffd5 	bl	800b298 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2ee:	2204      	movs	r2, #4
 800b2f0:	f105 0112 	add.w	r1, r5, #18
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f7ff ffcf 	bl	800b298 <IntToUnicode>
}
 800b2fa:	e7f2      	b.n	800b2e2 <Get_SerialNum+0x12>
 800b2fc:	1fff7590 	.word	0x1fff7590
 800b300:	20000178 	.word	0x20000178

0800b304 <USBD_FS_SerialStrDescriptor>:
{
 800b304:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b306:	231a      	movs	r3, #26
 800b308:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800b30a:	f7ff ffe1 	bl	800b2d0 <Get_SerialNum>
}
 800b30e:	4801      	ldr	r0, [pc, #4]	; (800b314 <USBD_FS_SerialStrDescriptor+0x10>)
 800b310:	bd08      	pop	{r3, pc}
 800b312:	bf00      	nop
 800b314:	20000178 	.word	0x20000178

0800b318 <USBD_FS_ProductStrDescriptor>:
{
 800b318:	b508      	push	{r3, lr}
 800b31a:	460a      	mov	r2, r1
  if(speed == 0)
 800b31c:	b928      	cbnz	r0, 800b32a <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b31e:	4905      	ldr	r1, [pc, #20]	; (800b334 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b320:	4805      	ldr	r0, [pc, #20]	; (800b338 <USBD_FS_ProductStrDescriptor+0x20>)
 800b322:	f7fe f9ae 	bl	8009682 <USBD_GetString>
}
 800b326:	4803      	ldr	r0, [pc, #12]	; (800b334 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b328:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b32a:	4902      	ldr	r1, [pc, #8]	; (800b334 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b32c:	4802      	ldr	r0, [pc, #8]	; (800b338 <USBD_FS_ProductStrDescriptor+0x20>)
 800b32e:	f7fe f9a8 	bl	8009682 <USBD_GetString>
 800b332:	e7f8      	b.n	800b326 <USBD_FS_ProductStrDescriptor+0xe>
 800b334:	20004928 	.word	0x20004928
 800b338:	0800e640 	.word	0x0800e640

0800b33c <USBD_FS_ManufacturerStrDescriptor>:
{
 800b33c:	b510      	push	{r4, lr}
 800b33e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b340:	4c03      	ldr	r4, [pc, #12]	; (800b350 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800b342:	4621      	mov	r1, r4
 800b344:	4803      	ldr	r0, [pc, #12]	; (800b354 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800b346:	f7fe f99c 	bl	8009682 <USBD_GetString>
}
 800b34a:	4620      	mov	r0, r4
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	bf00      	nop
 800b350:	20004928 	.word	0x20004928
 800b354:	0800e658 	.word	0x0800e658

0800b358 <USBD_FS_ConfigStrDescriptor>:
{
 800b358:	b508      	push	{r3, lr}
 800b35a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800b35c:	b928      	cbnz	r0, 800b36a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b35e:	4905      	ldr	r1, [pc, #20]	; (800b374 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800b360:	4805      	ldr	r0, [pc, #20]	; (800b378 <USBD_FS_ConfigStrDescriptor+0x20>)
 800b362:	f7fe f98e 	bl	8009682 <USBD_GetString>
}
 800b366:	4803      	ldr	r0, [pc, #12]	; (800b374 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800b368:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b36a:	4902      	ldr	r1, [pc, #8]	; (800b374 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800b36c:	4802      	ldr	r0, [pc, #8]	; (800b378 <USBD_FS_ConfigStrDescriptor+0x20>)
 800b36e:	f7fe f988 	bl	8009682 <USBD_GetString>
 800b372:	e7f8      	b.n	800b366 <USBD_FS_ConfigStrDescriptor+0xe>
 800b374:	20004928 	.word	0x20004928
 800b378:	0800e66c 	.word	0x0800e66c

0800b37c <USBD_FS_InterfaceStrDescriptor>:
{
 800b37c:	b508      	push	{r3, lr}
 800b37e:	460a      	mov	r2, r1
  if(speed == 0)
 800b380:	b928      	cbnz	r0, 800b38e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b382:	4905      	ldr	r1, [pc, #20]	; (800b398 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800b384:	4805      	ldr	r0, [pc, #20]	; (800b39c <USBD_FS_InterfaceStrDescriptor+0x20>)
 800b386:	f7fe f97c 	bl	8009682 <USBD_GetString>
}
 800b38a:	4803      	ldr	r0, [pc, #12]	; (800b398 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800b38c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b38e:	4902      	ldr	r1, [pc, #8]	; (800b398 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800b390:	4802      	ldr	r0, [pc, #8]	; (800b39c <USBD_FS_InterfaceStrDescriptor+0x20>)
 800b392:	f7fe f976 	bl	8009682 <USBD_GetString>
 800b396:	e7f8      	b.n	800b38a <USBD_FS_InterfaceStrDescriptor+0xe>
 800b398:	20004928 	.word	0x20004928
 800b39c:	0800e678 	.word	0x0800e678

0800b3a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b3a0:	b508      	push	{r3, lr}
  SystemClock_Config();
 800b3a2:	f7f7 fe06 	bl	8002fb2 <SystemClock_Config>
}
 800b3a6:	bd08      	pop	{r3, pc}

0800b3a8 <HAL_PCD_MspInit>:
{
 800b3a8:	b530      	push	{r4, r5, lr}
 800b3aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9303      	str	r3, [sp, #12]
 800b3b0:	9304      	str	r3, [sp, #16]
 800b3b2:	9305      	str	r3, [sp, #20]
 800b3b4:	9306      	str	r3, [sp, #24]
 800b3b6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB)
 800b3b8:	6802      	ldr	r2, [r0, #0]
 800b3ba:	4b18      	ldr	r3, [pc, #96]	; (800b41c <HAL_PCD_MspInit+0x74>)
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d001      	beq.n	800b3c4 <HAL_PCD_MspInit+0x1c>
}
 800b3c0:	b009      	add	sp, #36	; 0x24
 800b3c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3c4:	4c16      	ldr	r4, [pc, #88]	; (800b420 <HAL_PCD_MspInit+0x78>)
 800b3c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b3c8:	f043 0301 	orr.w	r3, r3, #1
 800b3cc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b3ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b3d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3de:	2302      	movs	r3, #2
 800b3e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3e2:	2500      	movs	r5, #0
 800b3e4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b3ea:	230a      	movs	r3, #10
 800b3ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3ee:	a903      	add	r1, sp, #12
 800b3f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b3f4:	f7f9 f8b6 	bl	8004564 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 800b3f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3fe:	65a3      	str	r3, [r4, #88]	; 0x58
 800b400:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b406:	9302      	str	r3, [sp, #8]
 800b408:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800b40a:	462a      	mov	r2, r5
 800b40c:	2105      	movs	r1, #5
 800b40e:	2043      	movs	r0, #67	; 0x43
 800b410:	f7f8 ff0c 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b414:	2043      	movs	r0, #67	; 0x43
 800b416:	f7f8 ff3d 	bl	8004294 <HAL_NVIC_EnableIRQ>
}
 800b41a:	e7d1      	b.n	800b3c0 <HAL_PCD_MspInit+0x18>
 800b41c:	40006800 	.word	0x40006800
 800b420:	40021000 	.word	0x40021000

0800b424 <HAL_PCD_SetupStageCallback>:
{
 800b424:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b426:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800b42a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b42e:	f7fd fcdb 	bl	8008de8 <USBD_LL_SetupStage>
}
 800b432:	bd08      	pop	{r3, pc}

0800b434 <HAL_PCD_DataOutStageCallback>:
{
 800b434:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b436:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b43a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b43e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b442:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b446:	f7fd fcfb 	bl	8008e40 <USBD_LL_DataOutStage>
}
 800b44a:	bd08      	pop	{r3, pc}

0800b44c <HAL_PCD_DataInStageCallback>:
{
 800b44c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b44e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b452:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b458:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b45c:	f7fd fd29 	bl	8008eb2 <USBD_LL_DataInStage>
}
 800b460:	bd08      	pop	{r3, pc}

0800b462 <HAL_PCD_SOFCallback>:
{
 800b462:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b464:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b468:	f7fd fdbf 	bl	8008fea <USBD_LL_SOF>
}
 800b46c:	bd08      	pop	{r3, pc}

0800b46e <HAL_PCD_ResetCallback>:
{
 800b46e:	b510      	push	{r4, lr}
 800b470:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b472:	6883      	ldr	r3, [r0, #8]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d109      	bne.n	800b48c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b478:	2101      	movs	r1, #1
 800b47a:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800b47e:	f7fd fd9d 	bl	8008fbc <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b482:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800b486:	f7fd fd70 	bl	8008f6a <USBD_LL_Reset>
}
 800b48a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800b48c:	f7f7 feba 	bl	8003204 <Error_Handler>
 800b490:	e7f2      	b.n	800b478 <HAL_PCD_ResetCallback+0xa>
	...

0800b494 <HAL_PCD_SuspendCallback>:
{
 800b494:	b510      	push	{r4, lr}
 800b496:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b498:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b49c:	f7fd fd91 	bl	8008fc2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800b4a0:	69a3      	ldr	r3, [r4, #24]
 800b4a2:	b123      	cbz	r3, 800b4ae <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4a4:	4a02      	ldr	r2, [pc, #8]	; (800b4b0 <HAL_PCD_SuspendCallback+0x1c>)
 800b4a6:	6913      	ldr	r3, [r2, #16]
 800b4a8:	f043 0306 	orr.w	r3, r3, #6
 800b4ac:	6113      	str	r3, [r2, #16]
}
 800b4ae:	bd10      	pop	{r4, pc}
 800b4b0:	e000ed00 	.word	0xe000ed00

0800b4b4 <HAL_PCD_ResumeCallback>:
{
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800b4b8:	6983      	ldr	r3, [r0, #24]
 800b4ba:	b923      	cbnz	r3, 800b4c6 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b4bc:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800b4c0:	f7fd fd88 	bl	8008fd4 <USBD_LL_Resume>
}
 800b4c4:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4c6:	4a04      	ldr	r2, [pc, #16]	; (800b4d8 <HAL_PCD_ResumeCallback+0x24>)
 800b4c8:	6913      	ldr	r3, [r2, #16]
 800b4ca:	f023 0306 	bic.w	r3, r3, #6
 800b4ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b4d0:	f7ff ff66 	bl	800b3a0 <SystemClockConfig_Resume>
 800b4d4:	e7f2      	b.n	800b4bc <HAL_PCD_ResumeCallback+0x8>
 800b4d6:	bf00      	nop
 800b4d8:	e000ed00 	.word	0xe000ed00

0800b4dc <USBD_LL_Init>:
{
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 800b4e0:	f7fa fc7c 	bl	8005ddc <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 800b4e4:	481e      	ldr	r0, [pc, #120]	; (800b560 <USBD_LL_Init+0x84>)
 800b4e6:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800b4ea:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800b4ee:	4b1d      	ldr	r3, [pc, #116]	; (800b564 <USBD_LL_Init+0x88>)
 800b4f0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4fa:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b500:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b502:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b504:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b506:	f7f9 fd9e 	bl	8005046 <HAL_PCD_Init>
 800b50a:	bb30      	cbnz	r0, 800b55a <USBD_LL_Init+0x7e>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b50c:	2318      	movs	r3, #24
 800b50e:	2200      	movs	r2, #0
 800b510:	4611      	mov	r1, r2
 800b512:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b516:	f7fa fbdf 	bl	8005cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b51a:	2358      	movs	r3, #88	; 0x58
 800b51c:	2200      	movs	r2, #0
 800b51e:	2180      	movs	r1, #128	; 0x80
 800b520:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b524:	f7fa fbd8 	bl	8005cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b528:	23c0      	movs	r3, #192	; 0xc0
 800b52a:	2200      	movs	r2, #0
 800b52c:	2181      	movs	r1, #129	; 0x81
 800b52e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b532:	f7fa fbd1 	bl	8005cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b536:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b53a:	2200      	movs	r2, #0
 800b53c:	2101      	movs	r1, #1
 800b53e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b542:	f7fa fbc9 	bl	8005cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b54a:	2200      	movs	r2, #0
 800b54c:	2182      	movs	r1, #130	; 0x82
 800b54e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b552:	f7fa fbc1 	bl	8005cd8 <HAL_PCDEx_PMAConfig>
}
 800b556:	2000      	movs	r0, #0
 800b558:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800b55a:	f7f7 fe53 	bl	8003204 <Error_Handler>
 800b55e:	e7d5      	b.n	800b50c <USBD_LL_Init+0x30>
 800b560:	20004b28 	.word	0x20004b28
 800b564:	40006800 	.word	0x40006800

0800b568 <USBD_LL_Start>:
{
 800b568:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b56a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b56e:	f7f9 fdf8 	bl	8005162 <HAL_PCD_Start>
  switch (hal_status) {
 800b572:	2803      	cmp	r0, #3
 800b574:	d805      	bhi.n	800b582 <USBD_LL_Start+0x1a>
 800b576:	e8df f000 	tbb	[pc, r0]
 800b57a:	0403      	.short	0x0403
 800b57c:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800b57e:	2001      	movs	r0, #1
}
 800b580:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800b582:	2003      	movs	r0, #3
 800b584:	e7fc      	b.n	800b580 <USBD_LL_Start+0x18>

0800b586 <USBD_LL_OpenEP>:
{
 800b586:	b510      	push	{r4, lr}
 800b588:	4614      	mov	r4, r2
 800b58a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b58c:	4623      	mov	r3, r4
 800b58e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b592:	f7fa fa6e 	bl	8005a72 <HAL_PCD_EP_Open>
  switch (hal_status) {
 800b596:	2803      	cmp	r0, #3
 800b598:	d805      	bhi.n	800b5a6 <USBD_LL_OpenEP+0x20>
 800b59a:	e8df f000 	tbb	[pc, r0]
 800b59e:	0403      	.short	0x0403
 800b5a0:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800b5a2:	2001      	movs	r0, #1
}
 800b5a4:	bd10      	pop	{r4, pc}
      usb_status = USBD_FAIL;
 800b5a6:	2003      	movs	r0, #3
 800b5a8:	e7fc      	b.n	800b5a4 <USBD_LL_OpenEP+0x1e>

0800b5aa <USBD_LL_CloseEP>:
{
 800b5aa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5ac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b5b0:	f7fa fa9b 	bl	8005aea <HAL_PCD_EP_Close>
  switch (hal_status) {
 800b5b4:	2803      	cmp	r0, #3
 800b5b6:	d805      	bhi.n	800b5c4 <USBD_LL_CloseEP+0x1a>
 800b5b8:	e8df f000 	tbb	[pc, r0]
 800b5bc:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800b5c0:	2001      	movs	r0, #1
}
 800b5c2:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800b5c4:	2003      	movs	r0, #3
 800b5c6:	e7fc      	b.n	800b5c2 <USBD_LL_CloseEP+0x18>

0800b5c8 <USBD_LL_StallEP>:
{
 800b5c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5ca:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b5ce:	f7fa fb0c 	bl	8005bea <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 800b5d2:	2803      	cmp	r0, #3
 800b5d4:	d805      	bhi.n	800b5e2 <USBD_LL_StallEP+0x1a>
 800b5d6:	e8df f000 	tbb	[pc, r0]
 800b5da:	0403      	.short	0x0403
 800b5dc:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800b5de:	2001      	movs	r0, #1
}
 800b5e0:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800b5e2:	2003      	movs	r0, #3
 800b5e4:	e7fc      	b.n	800b5e0 <USBD_LL_StallEP+0x18>

0800b5e6 <USBD_LL_ClearStallEP>:
{
 800b5e6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5e8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b5ec:	f7fa fb39 	bl	8005c62 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 800b5f0:	2803      	cmp	r0, #3
 800b5f2:	d805      	bhi.n	800b600 <USBD_LL_ClearStallEP+0x1a>
 800b5f4:	e8df f000 	tbb	[pc, r0]
 800b5f8:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800b5fc:	2001      	movs	r0, #1
}
 800b5fe:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800b600:	2003      	movs	r0, #3
 800b602:	e7fc      	b.n	800b5fe <USBD_LL_ClearStallEP+0x18>

0800b604 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b604:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800b608:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b60c:	d108      	bne.n	800b620 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b60e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b612:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b616:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b61a:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800b61e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b620:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b624:	3101      	adds	r1, #1
 800b626:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b62a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b62e:	7888      	ldrb	r0, [r1, #2]
 800b630:	4770      	bx	lr

0800b632 <USBD_LL_SetUSBAddress>:
{
 800b632:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b634:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b638:	f7fa f919 	bl	800586e <HAL_PCD_SetAddress>
  switch (hal_status) {
 800b63c:	2803      	cmp	r0, #3
 800b63e:	d805      	bhi.n	800b64c <USBD_LL_SetUSBAddress+0x1a>
 800b640:	e8df f000 	tbb	[pc, r0]
 800b644:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800b648:	2001      	movs	r0, #1
}
 800b64a:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800b64c:	2003      	movs	r0, #3
 800b64e:	e7fc      	b.n	800b64a <USBD_LL_SetUSBAddress+0x18>

0800b650 <USBD_LL_Transmit>:
{
 800b650:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b652:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b656:	f7fa faa5 	bl	8005ba4 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 800b65a:	2803      	cmp	r0, #3
 800b65c:	d805      	bhi.n	800b66a <USBD_LL_Transmit+0x1a>
 800b65e:	e8df f000 	tbb	[pc, r0]
 800b662:	0403      	.short	0x0403
 800b664:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800b666:	2001      	movs	r0, #1
}
 800b668:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800b66a:	2003      	movs	r0, #3
 800b66c:	e7fc      	b.n	800b668 <USBD_LL_Transmit+0x18>

0800b66e <USBD_LL_PrepareReceive>:
{
 800b66e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b670:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b674:	f7fa fa6b 	bl	8005b4e <HAL_PCD_EP_Receive>
  switch (hal_status) {
 800b678:	2803      	cmp	r0, #3
 800b67a:	d805      	bhi.n	800b688 <USBD_LL_PrepareReceive+0x1a>
 800b67c:	e8df f000 	tbb	[pc, r0]
 800b680:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800b684:	2001      	movs	r0, #1
}
 800b686:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800b688:	2003      	movs	r0, #3
 800b68a:	e7fc      	b.n	800b686 <USBD_LL_PrepareReceive+0x18>

0800b68c <USBD_LL_GetRxDataSize>:
{
 800b68c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b68e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b692:	f7fa fa7e 	bl	8005b92 <HAL_PCD_EP_GetRxCount>
}
 800b696:	bd08      	pop	{r3, pc}

0800b698 <HAL_PCDEx_LPM_Callback>:
{
 800b698:	b510      	push	{r4, lr}
 800b69a:	4604      	mov	r4, r0
  switch (msg)
 800b69c:	b111      	cbz	r1, 800b6a4 <HAL_PCDEx_LPM_Callback+0xc>
 800b69e:	2901      	cmp	r1, #1
 800b6a0:	d00f      	beq.n	800b6c2 <HAL_PCDEx_LPM_Callback+0x2a>
}
 800b6a2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800b6a4:	6983      	ldr	r3, [r0, #24]
 800b6a6:	b923      	cbnz	r3, 800b6b2 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800b6a8:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800b6ac:	f7fd fc92 	bl	8008fd4 <USBD_LL_Resume>
    break;
 800b6b0:	e7f7      	b.n	800b6a2 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800b6b2:	f7ff fe75 	bl	800b3a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6b6:	4a09      	ldr	r2, [pc, #36]	; (800b6dc <HAL_PCDEx_LPM_Callback+0x44>)
 800b6b8:	6913      	ldr	r3, [r2, #16]
 800b6ba:	f023 0306 	bic.w	r3, r3, #6
 800b6be:	6113      	str	r3, [r2, #16]
 800b6c0:	e7f2      	b.n	800b6a8 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800b6c2:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b6c6:	f7fd fc7c 	bl	8008fc2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b6ca:	69a3      	ldr	r3, [r4, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d0e8      	beq.n	800b6a2 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6d0:	4a02      	ldr	r2, [pc, #8]	; (800b6dc <HAL_PCDEx_LPM_Callback+0x44>)
 800b6d2:	6913      	ldr	r3, [r2, #16]
 800b6d4:	f043 0306 	orr.w	r3, r3, #6
 800b6d8:	6113      	str	r3, [r2, #16]
}
 800b6da:	e7e2      	b.n	800b6a2 <HAL_PCDEx_LPM_Callback+0xa>
 800b6dc:	e000ed00 	.word	0xe000ed00

0800b6e0 <__errno>:
 800b6e0:	4b01      	ldr	r3, [pc, #4]	; (800b6e8 <__errno+0x8>)
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	20000194 	.word	0x20000194

0800b6ec <__libc_init_array>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	4d0d      	ldr	r5, [pc, #52]	; (800b724 <__libc_init_array+0x38>)
 800b6f0:	4c0d      	ldr	r4, [pc, #52]	; (800b728 <__libc_init_array+0x3c>)
 800b6f2:	1b64      	subs	r4, r4, r5
 800b6f4:	10a4      	asrs	r4, r4, #2
 800b6f6:	2600      	movs	r6, #0
 800b6f8:	42a6      	cmp	r6, r4
 800b6fa:	d109      	bne.n	800b710 <__libc_init_array+0x24>
 800b6fc:	4d0b      	ldr	r5, [pc, #44]	; (800b72c <__libc_init_array+0x40>)
 800b6fe:	4c0c      	ldr	r4, [pc, #48]	; (800b730 <__libc_init_array+0x44>)
 800b700:	f002 feba 	bl	800e478 <_init>
 800b704:	1b64      	subs	r4, r4, r5
 800b706:	10a4      	asrs	r4, r4, #2
 800b708:	2600      	movs	r6, #0
 800b70a:	42a6      	cmp	r6, r4
 800b70c:	d105      	bne.n	800b71a <__libc_init_array+0x2e>
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	f855 3b04 	ldr.w	r3, [r5], #4
 800b714:	4798      	blx	r3
 800b716:	3601      	adds	r6, #1
 800b718:	e7ee      	b.n	800b6f8 <__libc_init_array+0xc>
 800b71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b71e:	4798      	blx	r3
 800b720:	3601      	adds	r6, #1
 800b722:	e7f2      	b.n	800b70a <__libc_init_array+0x1e>
 800b724:	0800ea74 	.word	0x0800ea74
 800b728:	0800ea74 	.word	0x0800ea74
 800b72c:	0800ea74 	.word	0x0800ea74
 800b730:	0800ea78 	.word	0x0800ea78

0800b734 <malloc>:
 800b734:	4b02      	ldr	r3, [pc, #8]	; (800b740 <malloc+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f000 b871 	b.w	800b820 <_malloc_r>
 800b73e:	bf00      	nop
 800b740:	20000194 	.word	0x20000194

0800b744 <free>:
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <free+0xc>)
 800b746:	4601      	mov	r1, r0
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f000 b819 	b.w	800b780 <_free_r>
 800b74e:	bf00      	nop
 800b750:	20000194 	.word	0x20000194

0800b754 <memcpy>:
 800b754:	440a      	add	r2, r1
 800b756:	4291      	cmp	r1, r2
 800b758:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b75c:	d100      	bne.n	800b760 <memcpy+0xc>
 800b75e:	4770      	bx	lr
 800b760:	b510      	push	{r4, lr}
 800b762:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b76a:	4291      	cmp	r1, r2
 800b76c:	d1f9      	bne.n	800b762 <memcpy+0xe>
 800b76e:	bd10      	pop	{r4, pc}

0800b770 <memset>:
 800b770:	4402      	add	r2, r0
 800b772:	4603      	mov	r3, r0
 800b774:	4293      	cmp	r3, r2
 800b776:	d100      	bne.n	800b77a <memset+0xa>
 800b778:	4770      	bx	lr
 800b77a:	f803 1b01 	strb.w	r1, [r3], #1
 800b77e:	e7f9      	b.n	800b774 <memset+0x4>

0800b780 <_free_r>:
 800b780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b782:	2900      	cmp	r1, #0
 800b784:	d048      	beq.n	800b818 <_free_r+0x98>
 800b786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b78a:	9001      	str	r0, [sp, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f1a1 0404 	sub.w	r4, r1, #4
 800b792:	bfb8      	it	lt
 800b794:	18e4      	addlt	r4, r4, r3
 800b796:	f001 fbb3 	bl	800cf00 <__malloc_lock>
 800b79a:	4a20      	ldr	r2, [pc, #128]	; (800b81c <_free_r+0x9c>)
 800b79c:	9801      	ldr	r0, [sp, #4]
 800b79e:	6813      	ldr	r3, [r2, #0]
 800b7a0:	4615      	mov	r5, r2
 800b7a2:	b933      	cbnz	r3, 800b7b2 <_free_r+0x32>
 800b7a4:	6063      	str	r3, [r4, #4]
 800b7a6:	6014      	str	r4, [r2, #0]
 800b7a8:	b003      	add	sp, #12
 800b7aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ae:	f001 bbad 	b.w	800cf0c <__malloc_unlock>
 800b7b2:	42a3      	cmp	r3, r4
 800b7b4:	d90b      	bls.n	800b7ce <_free_r+0x4e>
 800b7b6:	6821      	ldr	r1, [r4, #0]
 800b7b8:	1862      	adds	r2, r4, r1
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	bf04      	itt	eq
 800b7be:	681a      	ldreq	r2, [r3, #0]
 800b7c0:	685b      	ldreq	r3, [r3, #4]
 800b7c2:	6063      	str	r3, [r4, #4]
 800b7c4:	bf04      	itt	eq
 800b7c6:	1852      	addeq	r2, r2, r1
 800b7c8:	6022      	streq	r2, [r4, #0]
 800b7ca:	602c      	str	r4, [r5, #0]
 800b7cc:	e7ec      	b.n	800b7a8 <_free_r+0x28>
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	b10b      	cbz	r3, 800b7d8 <_free_r+0x58>
 800b7d4:	42a3      	cmp	r3, r4
 800b7d6:	d9fa      	bls.n	800b7ce <_free_r+0x4e>
 800b7d8:	6811      	ldr	r1, [r2, #0]
 800b7da:	1855      	adds	r5, r2, r1
 800b7dc:	42a5      	cmp	r5, r4
 800b7de:	d10b      	bne.n	800b7f8 <_free_r+0x78>
 800b7e0:	6824      	ldr	r4, [r4, #0]
 800b7e2:	4421      	add	r1, r4
 800b7e4:	1854      	adds	r4, r2, r1
 800b7e6:	42a3      	cmp	r3, r4
 800b7e8:	6011      	str	r1, [r2, #0]
 800b7ea:	d1dd      	bne.n	800b7a8 <_free_r+0x28>
 800b7ec:	681c      	ldr	r4, [r3, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	6053      	str	r3, [r2, #4]
 800b7f2:	4421      	add	r1, r4
 800b7f4:	6011      	str	r1, [r2, #0]
 800b7f6:	e7d7      	b.n	800b7a8 <_free_r+0x28>
 800b7f8:	d902      	bls.n	800b800 <_free_r+0x80>
 800b7fa:	230c      	movs	r3, #12
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	e7d3      	b.n	800b7a8 <_free_r+0x28>
 800b800:	6825      	ldr	r5, [r4, #0]
 800b802:	1961      	adds	r1, r4, r5
 800b804:	428b      	cmp	r3, r1
 800b806:	bf04      	itt	eq
 800b808:	6819      	ldreq	r1, [r3, #0]
 800b80a:	685b      	ldreq	r3, [r3, #4]
 800b80c:	6063      	str	r3, [r4, #4]
 800b80e:	bf04      	itt	eq
 800b810:	1949      	addeq	r1, r1, r5
 800b812:	6021      	streq	r1, [r4, #0]
 800b814:	6054      	str	r4, [r2, #4]
 800b816:	e7c7      	b.n	800b7a8 <_free_r+0x28>
 800b818:	b003      	add	sp, #12
 800b81a:	bd30      	pop	{r4, r5, pc}
 800b81c:	20003b68 	.word	0x20003b68

0800b820 <_malloc_r>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	1ccd      	adds	r5, r1, #3
 800b824:	f025 0503 	bic.w	r5, r5, #3
 800b828:	3508      	adds	r5, #8
 800b82a:	2d0c      	cmp	r5, #12
 800b82c:	bf38      	it	cc
 800b82e:	250c      	movcc	r5, #12
 800b830:	2d00      	cmp	r5, #0
 800b832:	4606      	mov	r6, r0
 800b834:	db01      	blt.n	800b83a <_malloc_r+0x1a>
 800b836:	42a9      	cmp	r1, r5
 800b838:	d903      	bls.n	800b842 <_malloc_r+0x22>
 800b83a:	230c      	movs	r3, #12
 800b83c:	6033      	str	r3, [r6, #0]
 800b83e:	2000      	movs	r0, #0
 800b840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b842:	f001 fb5d 	bl	800cf00 <__malloc_lock>
 800b846:	4921      	ldr	r1, [pc, #132]	; (800b8cc <_malloc_r+0xac>)
 800b848:	680a      	ldr	r2, [r1, #0]
 800b84a:	4614      	mov	r4, r2
 800b84c:	b99c      	cbnz	r4, 800b876 <_malloc_r+0x56>
 800b84e:	4f20      	ldr	r7, [pc, #128]	; (800b8d0 <_malloc_r+0xb0>)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	b923      	cbnz	r3, 800b85e <_malloc_r+0x3e>
 800b854:	4621      	mov	r1, r4
 800b856:	4630      	mov	r0, r6
 800b858:	f000 fca6 	bl	800c1a8 <_sbrk_r>
 800b85c:	6038      	str	r0, [r7, #0]
 800b85e:	4629      	mov	r1, r5
 800b860:	4630      	mov	r0, r6
 800b862:	f000 fca1 	bl	800c1a8 <_sbrk_r>
 800b866:	1c43      	adds	r3, r0, #1
 800b868:	d123      	bne.n	800b8b2 <_malloc_r+0x92>
 800b86a:	230c      	movs	r3, #12
 800b86c:	6033      	str	r3, [r6, #0]
 800b86e:	4630      	mov	r0, r6
 800b870:	f001 fb4c 	bl	800cf0c <__malloc_unlock>
 800b874:	e7e3      	b.n	800b83e <_malloc_r+0x1e>
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	1b5b      	subs	r3, r3, r5
 800b87a:	d417      	bmi.n	800b8ac <_malloc_r+0x8c>
 800b87c:	2b0b      	cmp	r3, #11
 800b87e:	d903      	bls.n	800b888 <_malloc_r+0x68>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	441c      	add	r4, r3
 800b884:	6025      	str	r5, [r4, #0]
 800b886:	e004      	b.n	800b892 <_malloc_r+0x72>
 800b888:	6863      	ldr	r3, [r4, #4]
 800b88a:	42a2      	cmp	r2, r4
 800b88c:	bf0c      	ite	eq
 800b88e:	600b      	streq	r3, [r1, #0]
 800b890:	6053      	strne	r3, [r2, #4]
 800b892:	4630      	mov	r0, r6
 800b894:	f001 fb3a 	bl	800cf0c <__malloc_unlock>
 800b898:	f104 000b 	add.w	r0, r4, #11
 800b89c:	1d23      	adds	r3, r4, #4
 800b89e:	f020 0007 	bic.w	r0, r0, #7
 800b8a2:	1ac2      	subs	r2, r0, r3
 800b8a4:	d0cc      	beq.n	800b840 <_malloc_r+0x20>
 800b8a6:	1a1b      	subs	r3, r3, r0
 800b8a8:	50a3      	str	r3, [r4, r2]
 800b8aa:	e7c9      	b.n	800b840 <_malloc_r+0x20>
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	6864      	ldr	r4, [r4, #4]
 800b8b0:	e7cc      	b.n	800b84c <_malloc_r+0x2c>
 800b8b2:	1cc4      	adds	r4, r0, #3
 800b8b4:	f024 0403 	bic.w	r4, r4, #3
 800b8b8:	42a0      	cmp	r0, r4
 800b8ba:	d0e3      	beq.n	800b884 <_malloc_r+0x64>
 800b8bc:	1a21      	subs	r1, r4, r0
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f000 fc72 	bl	800c1a8 <_sbrk_r>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d1dd      	bne.n	800b884 <_malloc_r+0x64>
 800b8c8:	e7cf      	b.n	800b86a <_malloc_r+0x4a>
 800b8ca:	bf00      	nop
 800b8cc:	20003b68 	.word	0x20003b68
 800b8d0:	20003b6c 	.word	0x20003b6c

0800b8d4 <__cvt>:
 800b8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d8:	ec55 4b10 	vmov	r4, r5, d0
 800b8dc:	2d00      	cmp	r5, #0
 800b8de:	460e      	mov	r6, r1
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	462b      	mov	r3, r5
 800b8e4:	bfbb      	ittet	lt
 800b8e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8ea:	461d      	movlt	r5, r3
 800b8ec:	2300      	movge	r3, #0
 800b8ee:	232d      	movlt	r3, #45	; 0x2d
 800b8f0:	700b      	strb	r3, [r1, #0]
 800b8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8f8:	4691      	mov	r9, r2
 800b8fa:	f023 0820 	bic.w	r8, r3, #32
 800b8fe:	bfbc      	itt	lt
 800b900:	4622      	movlt	r2, r4
 800b902:	4614      	movlt	r4, r2
 800b904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b908:	d005      	beq.n	800b916 <__cvt+0x42>
 800b90a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b90e:	d100      	bne.n	800b912 <__cvt+0x3e>
 800b910:	3601      	adds	r6, #1
 800b912:	2102      	movs	r1, #2
 800b914:	e000      	b.n	800b918 <__cvt+0x44>
 800b916:	2103      	movs	r1, #3
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	ab02      	add	r3, sp, #8
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	ec45 4b10 	vmov	d0, r4, r5
 800b924:	4653      	mov	r3, sl
 800b926:	4632      	mov	r2, r6
 800b928:	f000 fcfa 	bl	800c320 <_dtoa_r>
 800b92c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b930:	4607      	mov	r7, r0
 800b932:	d102      	bne.n	800b93a <__cvt+0x66>
 800b934:	f019 0f01 	tst.w	r9, #1
 800b938:	d022      	beq.n	800b980 <__cvt+0xac>
 800b93a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b93e:	eb07 0906 	add.w	r9, r7, r6
 800b942:	d110      	bne.n	800b966 <__cvt+0x92>
 800b944:	783b      	ldrb	r3, [r7, #0]
 800b946:	2b30      	cmp	r3, #48	; 0x30
 800b948:	d10a      	bne.n	800b960 <__cvt+0x8c>
 800b94a:	2200      	movs	r2, #0
 800b94c:	2300      	movs	r3, #0
 800b94e:	4620      	mov	r0, r4
 800b950:	4629      	mov	r1, r5
 800b952:	f7f5 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b956:	b918      	cbnz	r0, 800b960 <__cvt+0x8c>
 800b958:	f1c6 0601 	rsb	r6, r6, #1
 800b95c:	f8ca 6000 	str.w	r6, [sl]
 800b960:	f8da 3000 	ldr.w	r3, [sl]
 800b964:	4499      	add	r9, r3
 800b966:	2200      	movs	r2, #0
 800b968:	2300      	movs	r3, #0
 800b96a:	4620      	mov	r0, r4
 800b96c:	4629      	mov	r1, r5
 800b96e:	f7f5 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800b972:	b108      	cbz	r0, 800b978 <__cvt+0xa4>
 800b974:	f8cd 900c 	str.w	r9, [sp, #12]
 800b978:	2230      	movs	r2, #48	; 0x30
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	454b      	cmp	r3, r9
 800b97e:	d307      	bcc.n	800b990 <__cvt+0xbc>
 800b980:	9b03      	ldr	r3, [sp, #12]
 800b982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b984:	1bdb      	subs	r3, r3, r7
 800b986:	4638      	mov	r0, r7
 800b988:	6013      	str	r3, [r2, #0]
 800b98a:	b004      	add	sp, #16
 800b98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b990:	1c59      	adds	r1, r3, #1
 800b992:	9103      	str	r1, [sp, #12]
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	e7f0      	b.n	800b97a <__cvt+0xa6>

0800b998 <__exponent>:
 800b998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b99a:	4603      	mov	r3, r0
 800b99c:	2900      	cmp	r1, #0
 800b99e:	bfb8      	it	lt
 800b9a0:	4249      	neglt	r1, r1
 800b9a2:	f803 2b02 	strb.w	r2, [r3], #2
 800b9a6:	bfb4      	ite	lt
 800b9a8:	222d      	movlt	r2, #45	; 0x2d
 800b9aa:	222b      	movge	r2, #43	; 0x2b
 800b9ac:	2909      	cmp	r1, #9
 800b9ae:	7042      	strb	r2, [r0, #1]
 800b9b0:	dd2a      	ble.n	800ba08 <__exponent+0x70>
 800b9b2:	f10d 0407 	add.w	r4, sp, #7
 800b9b6:	46a4      	mov	ip, r4
 800b9b8:	270a      	movs	r7, #10
 800b9ba:	46a6      	mov	lr, r4
 800b9bc:	460a      	mov	r2, r1
 800b9be:	fb91 f6f7 	sdiv	r6, r1, r7
 800b9c2:	fb07 1516 	mls	r5, r7, r6, r1
 800b9c6:	3530      	adds	r5, #48	; 0x30
 800b9c8:	2a63      	cmp	r2, #99	; 0x63
 800b9ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b9ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	dcf1      	bgt.n	800b9ba <__exponent+0x22>
 800b9d6:	3130      	adds	r1, #48	; 0x30
 800b9d8:	f1ae 0502 	sub.w	r5, lr, #2
 800b9dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b9e0:	1c44      	adds	r4, r0, #1
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	4561      	cmp	r1, ip
 800b9e6:	d30a      	bcc.n	800b9fe <__exponent+0x66>
 800b9e8:	f10d 0209 	add.w	r2, sp, #9
 800b9ec:	eba2 020e 	sub.w	r2, r2, lr
 800b9f0:	4565      	cmp	r5, ip
 800b9f2:	bf88      	it	hi
 800b9f4:	2200      	movhi	r2, #0
 800b9f6:	4413      	add	r3, r2
 800b9f8:	1a18      	subs	r0, r3, r0
 800b9fa:	b003      	add	sp, #12
 800b9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba02:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ba06:	e7ed      	b.n	800b9e4 <__exponent+0x4c>
 800ba08:	2330      	movs	r3, #48	; 0x30
 800ba0a:	3130      	adds	r1, #48	; 0x30
 800ba0c:	7083      	strb	r3, [r0, #2]
 800ba0e:	70c1      	strb	r1, [r0, #3]
 800ba10:	1d03      	adds	r3, r0, #4
 800ba12:	e7f1      	b.n	800b9f8 <__exponent+0x60>

0800ba14 <_printf_float>:
 800ba14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba18:	ed2d 8b02 	vpush	{d8}
 800ba1c:	b08d      	sub	sp, #52	; 0x34
 800ba1e:	460c      	mov	r4, r1
 800ba20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba24:	4616      	mov	r6, r2
 800ba26:	461f      	mov	r7, r3
 800ba28:	4605      	mov	r5, r0
 800ba2a:	f001 fa65 	bl	800cef8 <_localeconv_r>
 800ba2e:	f8d0 a000 	ldr.w	sl, [r0]
 800ba32:	4650      	mov	r0, sl
 800ba34:	f7f4 fbcc 	bl	80001d0 <strlen>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	9305      	str	r3, [sp, #20]
 800ba40:	f8d8 3000 	ldr.w	r3, [r8]
 800ba44:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba48:	3307      	adds	r3, #7
 800ba4a:	f023 0307 	bic.w	r3, r3, #7
 800ba4e:	f103 0208 	add.w	r2, r3, #8
 800ba52:	f8c8 2000 	str.w	r2, [r8]
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba6c:	ee08 0a10 	vmov	s16, r0
 800ba70:	4b9f      	ldr	r3, [pc, #636]	; (800bcf0 <_printf_float+0x2dc>)
 800ba72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba7a:	f7f5 f857 	bl	8000b2c <__aeabi_dcmpun>
 800ba7e:	bb88      	cbnz	r0, 800bae4 <_printf_float+0xd0>
 800ba80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba84:	4b9a      	ldr	r3, [pc, #616]	; (800bcf0 <_printf_float+0x2dc>)
 800ba86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba8a:	f7f5 f831 	bl	8000af0 <__aeabi_dcmple>
 800ba8e:	bb48      	cbnz	r0, 800bae4 <_printf_float+0xd0>
 800ba90:	2200      	movs	r2, #0
 800ba92:	2300      	movs	r3, #0
 800ba94:	4640      	mov	r0, r8
 800ba96:	4649      	mov	r1, r9
 800ba98:	f7f5 f820 	bl	8000adc <__aeabi_dcmplt>
 800ba9c:	b110      	cbz	r0, 800baa4 <_printf_float+0x90>
 800ba9e:	232d      	movs	r3, #45	; 0x2d
 800baa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa4:	4b93      	ldr	r3, [pc, #588]	; (800bcf4 <_printf_float+0x2e0>)
 800baa6:	4894      	ldr	r0, [pc, #592]	; (800bcf8 <_printf_float+0x2e4>)
 800baa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800baac:	bf94      	ite	ls
 800baae:	4698      	movls	r8, r3
 800bab0:	4680      	movhi	r8, r0
 800bab2:	2303      	movs	r3, #3
 800bab4:	6123      	str	r3, [r4, #16]
 800bab6:	9b05      	ldr	r3, [sp, #20]
 800bab8:	f023 0204 	bic.w	r2, r3, #4
 800babc:	6022      	str	r2, [r4, #0]
 800babe:	f04f 0900 	mov.w	r9, #0
 800bac2:	9700      	str	r7, [sp, #0]
 800bac4:	4633      	mov	r3, r6
 800bac6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bac8:	4621      	mov	r1, r4
 800baca:	4628      	mov	r0, r5
 800bacc:	f000 f9d8 	bl	800be80 <_printf_common>
 800bad0:	3001      	adds	r0, #1
 800bad2:	f040 8090 	bne.w	800bbf6 <_printf_float+0x1e2>
 800bad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bada:	b00d      	add	sp, #52	; 0x34
 800badc:	ecbd 8b02 	vpop	{d8}
 800bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae4:	4642      	mov	r2, r8
 800bae6:	464b      	mov	r3, r9
 800bae8:	4640      	mov	r0, r8
 800baea:	4649      	mov	r1, r9
 800baec:	f7f5 f81e 	bl	8000b2c <__aeabi_dcmpun>
 800baf0:	b140      	cbz	r0, 800bb04 <_printf_float+0xf0>
 800baf2:	464b      	mov	r3, r9
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	bfbc      	itt	lt
 800baf8:	232d      	movlt	r3, #45	; 0x2d
 800bafa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bafe:	487f      	ldr	r0, [pc, #508]	; (800bcfc <_printf_float+0x2e8>)
 800bb00:	4b7f      	ldr	r3, [pc, #508]	; (800bd00 <_printf_float+0x2ec>)
 800bb02:	e7d1      	b.n	800baa8 <_printf_float+0x94>
 800bb04:	6863      	ldr	r3, [r4, #4]
 800bb06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bb0a:	9206      	str	r2, [sp, #24]
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	d13f      	bne.n	800bb90 <_printf_float+0x17c>
 800bb10:	2306      	movs	r3, #6
 800bb12:	6063      	str	r3, [r4, #4]
 800bb14:	9b05      	ldr	r3, [sp, #20]
 800bb16:	6861      	ldr	r1, [r4, #4]
 800bb18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9303      	str	r3, [sp, #12]
 800bb20:	ab0a      	add	r3, sp, #40	; 0x28
 800bb22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb26:	ab09      	add	r3, sp, #36	; 0x24
 800bb28:	ec49 8b10 	vmov	d0, r8, r9
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	6022      	str	r2, [r4, #0]
 800bb30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb34:	4628      	mov	r0, r5
 800bb36:	f7ff fecd 	bl	800b8d4 <__cvt>
 800bb3a:	9b06      	ldr	r3, [sp, #24]
 800bb3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb3e:	2b47      	cmp	r3, #71	; 0x47
 800bb40:	4680      	mov	r8, r0
 800bb42:	d108      	bne.n	800bb56 <_printf_float+0x142>
 800bb44:	1cc8      	adds	r0, r1, #3
 800bb46:	db02      	blt.n	800bb4e <_printf_float+0x13a>
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	4299      	cmp	r1, r3
 800bb4c:	dd41      	ble.n	800bbd2 <_printf_float+0x1be>
 800bb4e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb52:	fa5f fb8b 	uxtb.w	fp, fp
 800bb56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb5a:	d820      	bhi.n	800bb9e <_printf_float+0x18a>
 800bb5c:	3901      	subs	r1, #1
 800bb5e:	465a      	mov	r2, fp
 800bb60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb64:	9109      	str	r1, [sp, #36]	; 0x24
 800bb66:	f7ff ff17 	bl	800b998 <__exponent>
 800bb6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb6c:	1813      	adds	r3, r2, r0
 800bb6e:	2a01      	cmp	r2, #1
 800bb70:	4681      	mov	r9, r0
 800bb72:	6123      	str	r3, [r4, #16]
 800bb74:	dc02      	bgt.n	800bb7c <_printf_float+0x168>
 800bb76:	6822      	ldr	r2, [r4, #0]
 800bb78:	07d2      	lsls	r2, r2, #31
 800bb7a:	d501      	bpl.n	800bb80 <_printf_float+0x16c>
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d09c      	beq.n	800bac2 <_printf_float+0xae>
 800bb88:	232d      	movs	r3, #45	; 0x2d
 800bb8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb8e:	e798      	b.n	800bac2 <_printf_float+0xae>
 800bb90:	9a06      	ldr	r2, [sp, #24]
 800bb92:	2a47      	cmp	r2, #71	; 0x47
 800bb94:	d1be      	bne.n	800bb14 <_printf_float+0x100>
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1bc      	bne.n	800bb14 <_printf_float+0x100>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e7b9      	b.n	800bb12 <_printf_float+0xfe>
 800bb9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bba2:	d118      	bne.n	800bbd6 <_printf_float+0x1c2>
 800bba4:	2900      	cmp	r1, #0
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	dd0b      	ble.n	800bbc2 <_printf_float+0x1ae>
 800bbaa:	6121      	str	r1, [r4, #16]
 800bbac:	b913      	cbnz	r3, 800bbb4 <_printf_float+0x1a0>
 800bbae:	6822      	ldr	r2, [r4, #0]
 800bbb0:	07d0      	lsls	r0, r2, #31
 800bbb2:	d502      	bpl.n	800bbba <_printf_float+0x1a6>
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	440b      	add	r3, r1
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	65a1      	str	r1, [r4, #88]	; 0x58
 800bbbc:	f04f 0900 	mov.w	r9, #0
 800bbc0:	e7de      	b.n	800bb80 <_printf_float+0x16c>
 800bbc2:	b913      	cbnz	r3, 800bbca <_printf_float+0x1b6>
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	07d2      	lsls	r2, r2, #31
 800bbc8:	d501      	bpl.n	800bbce <_printf_float+0x1ba>
 800bbca:	3302      	adds	r3, #2
 800bbcc:	e7f4      	b.n	800bbb8 <_printf_float+0x1a4>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e7f2      	b.n	800bbb8 <_printf_float+0x1a4>
 800bbd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd8:	4299      	cmp	r1, r3
 800bbda:	db05      	blt.n	800bbe8 <_printf_float+0x1d4>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	6121      	str	r1, [r4, #16]
 800bbe0:	07d8      	lsls	r0, r3, #31
 800bbe2:	d5ea      	bpl.n	800bbba <_printf_float+0x1a6>
 800bbe4:	1c4b      	adds	r3, r1, #1
 800bbe6:	e7e7      	b.n	800bbb8 <_printf_float+0x1a4>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	bfd4      	ite	le
 800bbec:	f1c1 0202 	rsble	r2, r1, #2
 800bbf0:	2201      	movgt	r2, #1
 800bbf2:	4413      	add	r3, r2
 800bbf4:	e7e0      	b.n	800bbb8 <_printf_float+0x1a4>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	055a      	lsls	r2, r3, #21
 800bbfa:	d407      	bmi.n	800bc0c <_printf_float+0x1f8>
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	4642      	mov	r2, r8
 800bc00:	4631      	mov	r1, r6
 800bc02:	4628      	mov	r0, r5
 800bc04:	47b8      	blx	r7
 800bc06:	3001      	adds	r0, #1
 800bc08:	d12c      	bne.n	800bc64 <_printf_float+0x250>
 800bc0a:	e764      	b.n	800bad6 <_printf_float+0xc2>
 800bc0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc10:	f240 80e0 	bls.w	800bdd4 <_printf_float+0x3c0>
 800bc14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f7f4 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d034      	beq.n	800bc8e <_printf_float+0x27a>
 800bc24:	4a37      	ldr	r2, [pc, #220]	; (800bd04 <_printf_float+0x2f0>)
 800bc26:	2301      	movs	r3, #1
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	47b8      	blx	r7
 800bc2e:	3001      	adds	r0, #1
 800bc30:	f43f af51 	beq.w	800bad6 <_printf_float+0xc2>
 800bc34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	db02      	blt.n	800bc42 <_printf_float+0x22e>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	07d8      	lsls	r0, r3, #31
 800bc40:	d510      	bpl.n	800bc64 <_printf_float+0x250>
 800bc42:	ee18 3a10 	vmov	r3, s16
 800bc46:	4652      	mov	r2, sl
 800bc48:	4631      	mov	r1, r6
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	47b8      	blx	r7
 800bc4e:	3001      	adds	r0, #1
 800bc50:	f43f af41 	beq.w	800bad6 <_printf_float+0xc2>
 800bc54:	f04f 0800 	mov.w	r8, #0
 800bc58:	f104 091a 	add.w	r9, r4, #26
 800bc5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	4543      	cmp	r3, r8
 800bc62:	dc09      	bgt.n	800bc78 <_printf_float+0x264>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	079b      	lsls	r3, r3, #30
 800bc68:	f100 8105 	bmi.w	800be76 <_printf_float+0x462>
 800bc6c:	68e0      	ldr	r0, [r4, #12]
 800bc6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc70:	4298      	cmp	r0, r3
 800bc72:	bfb8      	it	lt
 800bc74:	4618      	movlt	r0, r3
 800bc76:	e730      	b.n	800bada <_printf_float+0xc6>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	464a      	mov	r2, r9
 800bc7c:	4631      	mov	r1, r6
 800bc7e:	4628      	mov	r0, r5
 800bc80:	47b8      	blx	r7
 800bc82:	3001      	adds	r0, #1
 800bc84:	f43f af27 	beq.w	800bad6 <_printf_float+0xc2>
 800bc88:	f108 0801 	add.w	r8, r8, #1
 800bc8c:	e7e6      	b.n	800bc5c <_printf_float+0x248>
 800bc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	dc39      	bgt.n	800bd08 <_printf_float+0x2f4>
 800bc94:	4a1b      	ldr	r2, [pc, #108]	; (800bd04 <_printf_float+0x2f0>)
 800bc96:	2301      	movs	r3, #1
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	47b8      	blx	r7
 800bc9e:	3001      	adds	r0, #1
 800bca0:	f43f af19 	beq.w	800bad6 <_printf_float+0xc2>
 800bca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	d102      	bne.n	800bcb2 <_printf_float+0x29e>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	07d9      	lsls	r1, r3, #31
 800bcb0:	d5d8      	bpl.n	800bc64 <_printf_float+0x250>
 800bcb2:	ee18 3a10 	vmov	r3, s16
 800bcb6:	4652      	mov	r2, sl
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b8      	blx	r7
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f43f af09 	beq.w	800bad6 <_printf_float+0xc2>
 800bcc4:	f04f 0900 	mov.w	r9, #0
 800bcc8:	f104 0a1a 	add.w	sl, r4, #26
 800bccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcce:	425b      	negs	r3, r3
 800bcd0:	454b      	cmp	r3, r9
 800bcd2:	dc01      	bgt.n	800bcd8 <_printf_float+0x2c4>
 800bcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd6:	e792      	b.n	800bbfe <_printf_float+0x1ea>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	4652      	mov	r2, sl
 800bcdc:	4631      	mov	r1, r6
 800bcde:	4628      	mov	r0, r5
 800bce0:	47b8      	blx	r7
 800bce2:	3001      	adds	r0, #1
 800bce4:	f43f aef7 	beq.w	800bad6 <_printf_float+0xc2>
 800bce8:	f109 0901 	add.w	r9, r9, #1
 800bcec:	e7ee      	b.n	800bccc <_printf_float+0x2b8>
 800bcee:	bf00      	nop
 800bcf0:	7fefffff 	.word	0x7fefffff
 800bcf4:	0800e68c 	.word	0x0800e68c
 800bcf8:	0800e690 	.word	0x0800e690
 800bcfc:	0800e698 	.word	0x0800e698
 800bd00:	0800e694 	.word	0x0800e694
 800bd04:	0800e69c 	.word	0x0800e69c
 800bd08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	bfa8      	it	ge
 800bd10:	461a      	movge	r2, r3
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	4691      	mov	r9, r2
 800bd16:	dc37      	bgt.n	800bd88 <_printf_float+0x374>
 800bd18:	f04f 0b00 	mov.w	fp, #0
 800bd1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd20:	f104 021a 	add.w	r2, r4, #26
 800bd24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd26:	9305      	str	r3, [sp, #20]
 800bd28:	eba3 0309 	sub.w	r3, r3, r9
 800bd2c:	455b      	cmp	r3, fp
 800bd2e:	dc33      	bgt.n	800bd98 <_printf_float+0x384>
 800bd30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd34:	429a      	cmp	r2, r3
 800bd36:	db3b      	blt.n	800bdb0 <_printf_float+0x39c>
 800bd38:	6823      	ldr	r3, [r4, #0]
 800bd3a:	07da      	lsls	r2, r3, #31
 800bd3c:	d438      	bmi.n	800bdb0 <_printf_float+0x39c>
 800bd3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd40:	9b05      	ldr	r3, [sp, #20]
 800bd42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	eba2 0901 	sub.w	r9, r2, r1
 800bd4a:	4599      	cmp	r9, r3
 800bd4c:	bfa8      	it	ge
 800bd4e:	4699      	movge	r9, r3
 800bd50:	f1b9 0f00 	cmp.w	r9, #0
 800bd54:	dc35      	bgt.n	800bdc2 <_printf_float+0x3ae>
 800bd56:	f04f 0800 	mov.w	r8, #0
 800bd5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd5e:	f104 0a1a 	add.w	sl, r4, #26
 800bd62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd66:	1a9b      	subs	r3, r3, r2
 800bd68:	eba3 0309 	sub.w	r3, r3, r9
 800bd6c:	4543      	cmp	r3, r8
 800bd6e:	f77f af79 	ble.w	800bc64 <_printf_float+0x250>
 800bd72:	2301      	movs	r3, #1
 800bd74:	4652      	mov	r2, sl
 800bd76:	4631      	mov	r1, r6
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b8      	blx	r7
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	f43f aeaa 	beq.w	800bad6 <_printf_float+0xc2>
 800bd82:	f108 0801 	add.w	r8, r8, #1
 800bd86:	e7ec      	b.n	800bd62 <_printf_float+0x34e>
 800bd88:	4613      	mov	r3, r2
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	4628      	mov	r0, r5
 800bd90:	47b8      	blx	r7
 800bd92:	3001      	adds	r0, #1
 800bd94:	d1c0      	bne.n	800bd18 <_printf_float+0x304>
 800bd96:	e69e      	b.n	800bad6 <_printf_float+0xc2>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	9205      	str	r2, [sp, #20]
 800bda0:	47b8      	blx	r7
 800bda2:	3001      	adds	r0, #1
 800bda4:	f43f ae97 	beq.w	800bad6 <_printf_float+0xc2>
 800bda8:	9a05      	ldr	r2, [sp, #20]
 800bdaa:	f10b 0b01 	add.w	fp, fp, #1
 800bdae:	e7b9      	b.n	800bd24 <_printf_float+0x310>
 800bdb0:	ee18 3a10 	vmov	r3, s16
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b8      	blx	r7
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d1be      	bne.n	800bd3e <_printf_float+0x32a>
 800bdc0:	e689      	b.n	800bad6 <_printf_float+0xc2>
 800bdc2:	9a05      	ldr	r2, [sp, #20]
 800bdc4:	464b      	mov	r3, r9
 800bdc6:	4442      	add	r2, r8
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4628      	mov	r0, r5
 800bdcc:	47b8      	blx	r7
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d1c1      	bne.n	800bd56 <_printf_float+0x342>
 800bdd2:	e680      	b.n	800bad6 <_printf_float+0xc2>
 800bdd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdd6:	2a01      	cmp	r2, #1
 800bdd8:	dc01      	bgt.n	800bdde <_printf_float+0x3ca>
 800bdda:	07db      	lsls	r3, r3, #31
 800bddc:	d538      	bpl.n	800be50 <_printf_float+0x43c>
 800bdde:	2301      	movs	r3, #1
 800bde0:	4642      	mov	r2, r8
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	f43f ae74 	beq.w	800bad6 <_printf_float+0xc2>
 800bdee:	ee18 3a10 	vmov	r3, s16
 800bdf2:	4652      	mov	r2, sl
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	f43f ae6b 	beq.w	800bad6 <_printf_float+0xc2>
 800be00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be04:	2200      	movs	r2, #0
 800be06:	2300      	movs	r3, #0
 800be08:	f7f4 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800be0c:	b9d8      	cbnz	r0, 800be46 <_printf_float+0x432>
 800be0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be10:	f108 0201 	add.w	r2, r8, #1
 800be14:	3b01      	subs	r3, #1
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	d10e      	bne.n	800be3e <_printf_float+0x42a>
 800be20:	e659      	b.n	800bad6 <_printf_float+0xc2>
 800be22:	2301      	movs	r3, #1
 800be24:	4652      	mov	r2, sl
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae52 	beq.w	800bad6 <_printf_float+0xc2>
 800be32:	f108 0801 	add.w	r8, r8, #1
 800be36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be38:	3b01      	subs	r3, #1
 800be3a:	4543      	cmp	r3, r8
 800be3c:	dcf1      	bgt.n	800be22 <_printf_float+0x40e>
 800be3e:	464b      	mov	r3, r9
 800be40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be44:	e6dc      	b.n	800bc00 <_printf_float+0x1ec>
 800be46:	f04f 0800 	mov.w	r8, #0
 800be4a:	f104 0a1a 	add.w	sl, r4, #26
 800be4e:	e7f2      	b.n	800be36 <_printf_float+0x422>
 800be50:	2301      	movs	r3, #1
 800be52:	4642      	mov	r2, r8
 800be54:	e7df      	b.n	800be16 <_printf_float+0x402>
 800be56:	2301      	movs	r3, #1
 800be58:	464a      	mov	r2, r9
 800be5a:	4631      	mov	r1, r6
 800be5c:	4628      	mov	r0, r5
 800be5e:	47b8      	blx	r7
 800be60:	3001      	adds	r0, #1
 800be62:	f43f ae38 	beq.w	800bad6 <_printf_float+0xc2>
 800be66:	f108 0801 	add.w	r8, r8, #1
 800be6a:	68e3      	ldr	r3, [r4, #12]
 800be6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be6e:	1a5b      	subs	r3, r3, r1
 800be70:	4543      	cmp	r3, r8
 800be72:	dcf0      	bgt.n	800be56 <_printf_float+0x442>
 800be74:	e6fa      	b.n	800bc6c <_printf_float+0x258>
 800be76:	f04f 0800 	mov.w	r8, #0
 800be7a:	f104 0919 	add.w	r9, r4, #25
 800be7e:	e7f4      	b.n	800be6a <_printf_float+0x456>

0800be80 <_printf_common>:
 800be80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be84:	4616      	mov	r6, r2
 800be86:	4699      	mov	r9, r3
 800be88:	688a      	ldr	r2, [r1, #8]
 800be8a:	690b      	ldr	r3, [r1, #16]
 800be8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be90:	4293      	cmp	r3, r2
 800be92:	bfb8      	it	lt
 800be94:	4613      	movlt	r3, r2
 800be96:	6033      	str	r3, [r6, #0]
 800be98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be9c:	4607      	mov	r7, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	b10a      	cbz	r2, 800bea6 <_printf_common+0x26>
 800bea2:	3301      	adds	r3, #1
 800bea4:	6033      	str	r3, [r6, #0]
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	0699      	lsls	r1, r3, #26
 800beaa:	bf42      	ittt	mi
 800beac:	6833      	ldrmi	r3, [r6, #0]
 800beae:	3302      	addmi	r3, #2
 800beb0:	6033      	strmi	r3, [r6, #0]
 800beb2:	6825      	ldr	r5, [r4, #0]
 800beb4:	f015 0506 	ands.w	r5, r5, #6
 800beb8:	d106      	bne.n	800bec8 <_printf_common+0x48>
 800beba:	f104 0a19 	add.w	sl, r4, #25
 800bebe:	68e3      	ldr	r3, [r4, #12]
 800bec0:	6832      	ldr	r2, [r6, #0]
 800bec2:	1a9b      	subs	r3, r3, r2
 800bec4:	42ab      	cmp	r3, r5
 800bec6:	dc26      	bgt.n	800bf16 <_printf_common+0x96>
 800bec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800becc:	1e13      	subs	r3, r2, #0
 800bece:	6822      	ldr	r2, [r4, #0]
 800bed0:	bf18      	it	ne
 800bed2:	2301      	movne	r3, #1
 800bed4:	0692      	lsls	r2, r2, #26
 800bed6:	d42b      	bmi.n	800bf30 <_printf_common+0xb0>
 800bed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bedc:	4649      	mov	r1, r9
 800bede:	4638      	mov	r0, r7
 800bee0:	47c0      	blx	r8
 800bee2:	3001      	adds	r0, #1
 800bee4:	d01e      	beq.n	800bf24 <_printf_common+0xa4>
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	68e5      	ldr	r5, [r4, #12]
 800beea:	6832      	ldr	r2, [r6, #0]
 800beec:	f003 0306 	and.w	r3, r3, #6
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	bf08      	it	eq
 800bef4:	1aad      	subeq	r5, r5, r2
 800bef6:	68a3      	ldr	r3, [r4, #8]
 800bef8:	6922      	ldr	r2, [r4, #16]
 800befa:	bf0c      	ite	eq
 800befc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf00:	2500      	movne	r5, #0
 800bf02:	4293      	cmp	r3, r2
 800bf04:	bfc4      	itt	gt
 800bf06:	1a9b      	subgt	r3, r3, r2
 800bf08:	18ed      	addgt	r5, r5, r3
 800bf0a:	2600      	movs	r6, #0
 800bf0c:	341a      	adds	r4, #26
 800bf0e:	42b5      	cmp	r5, r6
 800bf10:	d11a      	bne.n	800bf48 <_printf_common+0xc8>
 800bf12:	2000      	movs	r0, #0
 800bf14:	e008      	b.n	800bf28 <_printf_common+0xa8>
 800bf16:	2301      	movs	r3, #1
 800bf18:	4652      	mov	r2, sl
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	47c0      	blx	r8
 800bf20:	3001      	adds	r0, #1
 800bf22:	d103      	bne.n	800bf2c <_printf_common+0xac>
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	e7c6      	b.n	800bebe <_printf_common+0x3e>
 800bf30:	18e1      	adds	r1, r4, r3
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	2030      	movs	r0, #48	; 0x30
 800bf36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf3a:	4422      	add	r2, r4
 800bf3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf44:	3302      	adds	r3, #2
 800bf46:	e7c7      	b.n	800bed8 <_printf_common+0x58>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	4638      	mov	r0, r7
 800bf50:	47c0      	blx	r8
 800bf52:	3001      	adds	r0, #1
 800bf54:	d0e6      	beq.n	800bf24 <_printf_common+0xa4>
 800bf56:	3601      	adds	r6, #1
 800bf58:	e7d9      	b.n	800bf0e <_printf_common+0x8e>
	...

0800bf5c <_printf_i>:
 800bf5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf60:	460c      	mov	r4, r1
 800bf62:	4691      	mov	r9, r2
 800bf64:	7e27      	ldrb	r7, [r4, #24]
 800bf66:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf68:	2f78      	cmp	r7, #120	; 0x78
 800bf6a:	4680      	mov	r8, r0
 800bf6c:	469a      	mov	sl, r3
 800bf6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf72:	d807      	bhi.n	800bf84 <_printf_i+0x28>
 800bf74:	2f62      	cmp	r7, #98	; 0x62
 800bf76:	d80a      	bhi.n	800bf8e <_printf_i+0x32>
 800bf78:	2f00      	cmp	r7, #0
 800bf7a:	f000 80d8 	beq.w	800c12e <_printf_i+0x1d2>
 800bf7e:	2f58      	cmp	r7, #88	; 0x58
 800bf80:	f000 80a3 	beq.w	800c0ca <_printf_i+0x16e>
 800bf84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf8c:	e03a      	b.n	800c004 <_printf_i+0xa8>
 800bf8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf92:	2b15      	cmp	r3, #21
 800bf94:	d8f6      	bhi.n	800bf84 <_printf_i+0x28>
 800bf96:	a001      	add	r0, pc, #4	; (adr r0, 800bf9c <_printf_i+0x40>)
 800bf98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf9c:	0800bff5 	.word	0x0800bff5
 800bfa0:	0800c009 	.word	0x0800c009
 800bfa4:	0800bf85 	.word	0x0800bf85
 800bfa8:	0800bf85 	.word	0x0800bf85
 800bfac:	0800bf85 	.word	0x0800bf85
 800bfb0:	0800bf85 	.word	0x0800bf85
 800bfb4:	0800c009 	.word	0x0800c009
 800bfb8:	0800bf85 	.word	0x0800bf85
 800bfbc:	0800bf85 	.word	0x0800bf85
 800bfc0:	0800bf85 	.word	0x0800bf85
 800bfc4:	0800bf85 	.word	0x0800bf85
 800bfc8:	0800c115 	.word	0x0800c115
 800bfcc:	0800c039 	.word	0x0800c039
 800bfd0:	0800c0f7 	.word	0x0800c0f7
 800bfd4:	0800bf85 	.word	0x0800bf85
 800bfd8:	0800bf85 	.word	0x0800bf85
 800bfdc:	0800c137 	.word	0x0800c137
 800bfe0:	0800bf85 	.word	0x0800bf85
 800bfe4:	0800c039 	.word	0x0800c039
 800bfe8:	0800bf85 	.word	0x0800bf85
 800bfec:	0800bf85 	.word	0x0800bf85
 800bff0:	0800c0ff 	.word	0x0800c0ff
 800bff4:	680b      	ldr	r3, [r1, #0]
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	600a      	str	r2, [r1, #0]
 800bffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c004:	2301      	movs	r3, #1
 800c006:	e0a3      	b.n	800c150 <_printf_i+0x1f4>
 800c008:	6825      	ldr	r5, [r4, #0]
 800c00a:	6808      	ldr	r0, [r1, #0]
 800c00c:	062e      	lsls	r6, r5, #24
 800c00e:	f100 0304 	add.w	r3, r0, #4
 800c012:	d50a      	bpl.n	800c02a <_printf_i+0xce>
 800c014:	6805      	ldr	r5, [r0, #0]
 800c016:	600b      	str	r3, [r1, #0]
 800c018:	2d00      	cmp	r5, #0
 800c01a:	da03      	bge.n	800c024 <_printf_i+0xc8>
 800c01c:	232d      	movs	r3, #45	; 0x2d
 800c01e:	426d      	negs	r5, r5
 800c020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c024:	485e      	ldr	r0, [pc, #376]	; (800c1a0 <_printf_i+0x244>)
 800c026:	230a      	movs	r3, #10
 800c028:	e019      	b.n	800c05e <_printf_i+0x102>
 800c02a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c02e:	6805      	ldr	r5, [r0, #0]
 800c030:	600b      	str	r3, [r1, #0]
 800c032:	bf18      	it	ne
 800c034:	b22d      	sxthne	r5, r5
 800c036:	e7ef      	b.n	800c018 <_printf_i+0xbc>
 800c038:	680b      	ldr	r3, [r1, #0]
 800c03a:	6825      	ldr	r5, [r4, #0]
 800c03c:	1d18      	adds	r0, r3, #4
 800c03e:	6008      	str	r0, [r1, #0]
 800c040:	0628      	lsls	r0, r5, #24
 800c042:	d501      	bpl.n	800c048 <_printf_i+0xec>
 800c044:	681d      	ldr	r5, [r3, #0]
 800c046:	e002      	b.n	800c04e <_printf_i+0xf2>
 800c048:	0669      	lsls	r1, r5, #25
 800c04a:	d5fb      	bpl.n	800c044 <_printf_i+0xe8>
 800c04c:	881d      	ldrh	r5, [r3, #0]
 800c04e:	4854      	ldr	r0, [pc, #336]	; (800c1a0 <_printf_i+0x244>)
 800c050:	2f6f      	cmp	r7, #111	; 0x6f
 800c052:	bf0c      	ite	eq
 800c054:	2308      	moveq	r3, #8
 800c056:	230a      	movne	r3, #10
 800c058:	2100      	movs	r1, #0
 800c05a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c05e:	6866      	ldr	r6, [r4, #4]
 800c060:	60a6      	str	r6, [r4, #8]
 800c062:	2e00      	cmp	r6, #0
 800c064:	bfa2      	ittt	ge
 800c066:	6821      	ldrge	r1, [r4, #0]
 800c068:	f021 0104 	bicge.w	r1, r1, #4
 800c06c:	6021      	strge	r1, [r4, #0]
 800c06e:	b90d      	cbnz	r5, 800c074 <_printf_i+0x118>
 800c070:	2e00      	cmp	r6, #0
 800c072:	d04d      	beq.n	800c110 <_printf_i+0x1b4>
 800c074:	4616      	mov	r6, r2
 800c076:	fbb5 f1f3 	udiv	r1, r5, r3
 800c07a:	fb03 5711 	mls	r7, r3, r1, r5
 800c07e:	5dc7      	ldrb	r7, [r0, r7]
 800c080:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c084:	462f      	mov	r7, r5
 800c086:	42bb      	cmp	r3, r7
 800c088:	460d      	mov	r5, r1
 800c08a:	d9f4      	bls.n	800c076 <_printf_i+0x11a>
 800c08c:	2b08      	cmp	r3, #8
 800c08e:	d10b      	bne.n	800c0a8 <_printf_i+0x14c>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	07df      	lsls	r7, r3, #31
 800c094:	d508      	bpl.n	800c0a8 <_printf_i+0x14c>
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	6861      	ldr	r1, [r4, #4]
 800c09a:	4299      	cmp	r1, r3
 800c09c:	bfde      	ittt	le
 800c09e:	2330      	movle	r3, #48	; 0x30
 800c0a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c0a8:	1b92      	subs	r2, r2, r6
 800c0aa:	6122      	str	r2, [r4, #16]
 800c0ac:	f8cd a000 	str.w	sl, [sp]
 800c0b0:	464b      	mov	r3, r9
 800c0b2:	aa03      	add	r2, sp, #12
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	f7ff fee2 	bl	800be80 <_printf_common>
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d14c      	bne.n	800c15a <_printf_i+0x1fe>
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0c4:	b004      	add	sp, #16
 800c0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ca:	4835      	ldr	r0, [pc, #212]	; (800c1a0 <_printf_i+0x244>)
 800c0cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	680e      	ldr	r6, [r1, #0]
 800c0d4:	061f      	lsls	r7, r3, #24
 800c0d6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c0da:	600e      	str	r6, [r1, #0]
 800c0dc:	d514      	bpl.n	800c108 <_printf_i+0x1ac>
 800c0de:	07d9      	lsls	r1, r3, #31
 800c0e0:	bf44      	itt	mi
 800c0e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c0e6:	6023      	strmi	r3, [r4, #0]
 800c0e8:	b91d      	cbnz	r5, 800c0f2 <_printf_i+0x196>
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	f023 0320 	bic.w	r3, r3, #32
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	2310      	movs	r3, #16
 800c0f4:	e7b0      	b.n	800c058 <_printf_i+0xfc>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	f043 0320 	orr.w	r3, r3, #32
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	2378      	movs	r3, #120	; 0x78
 800c100:	4828      	ldr	r0, [pc, #160]	; (800c1a4 <_printf_i+0x248>)
 800c102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c106:	e7e3      	b.n	800c0d0 <_printf_i+0x174>
 800c108:	065e      	lsls	r6, r3, #25
 800c10a:	bf48      	it	mi
 800c10c:	b2ad      	uxthmi	r5, r5
 800c10e:	e7e6      	b.n	800c0de <_printf_i+0x182>
 800c110:	4616      	mov	r6, r2
 800c112:	e7bb      	b.n	800c08c <_printf_i+0x130>
 800c114:	680b      	ldr	r3, [r1, #0]
 800c116:	6826      	ldr	r6, [r4, #0]
 800c118:	6960      	ldr	r0, [r4, #20]
 800c11a:	1d1d      	adds	r5, r3, #4
 800c11c:	600d      	str	r5, [r1, #0]
 800c11e:	0635      	lsls	r5, r6, #24
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	d501      	bpl.n	800c128 <_printf_i+0x1cc>
 800c124:	6018      	str	r0, [r3, #0]
 800c126:	e002      	b.n	800c12e <_printf_i+0x1d2>
 800c128:	0671      	lsls	r1, r6, #25
 800c12a:	d5fb      	bpl.n	800c124 <_printf_i+0x1c8>
 800c12c:	8018      	strh	r0, [r3, #0]
 800c12e:	2300      	movs	r3, #0
 800c130:	6123      	str	r3, [r4, #16]
 800c132:	4616      	mov	r6, r2
 800c134:	e7ba      	b.n	800c0ac <_printf_i+0x150>
 800c136:	680b      	ldr	r3, [r1, #0]
 800c138:	1d1a      	adds	r2, r3, #4
 800c13a:	600a      	str	r2, [r1, #0]
 800c13c:	681e      	ldr	r6, [r3, #0]
 800c13e:	6862      	ldr	r2, [r4, #4]
 800c140:	2100      	movs	r1, #0
 800c142:	4630      	mov	r0, r6
 800c144:	f7f4 f84c 	bl	80001e0 <memchr>
 800c148:	b108      	cbz	r0, 800c14e <_printf_i+0x1f2>
 800c14a:	1b80      	subs	r0, r0, r6
 800c14c:	6060      	str	r0, [r4, #4]
 800c14e:	6863      	ldr	r3, [r4, #4]
 800c150:	6123      	str	r3, [r4, #16]
 800c152:	2300      	movs	r3, #0
 800c154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c158:	e7a8      	b.n	800c0ac <_printf_i+0x150>
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	4632      	mov	r2, r6
 800c15e:	4649      	mov	r1, r9
 800c160:	4640      	mov	r0, r8
 800c162:	47d0      	blx	sl
 800c164:	3001      	adds	r0, #1
 800c166:	d0ab      	beq.n	800c0c0 <_printf_i+0x164>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	079b      	lsls	r3, r3, #30
 800c16c:	d413      	bmi.n	800c196 <_printf_i+0x23a>
 800c16e:	68e0      	ldr	r0, [r4, #12]
 800c170:	9b03      	ldr	r3, [sp, #12]
 800c172:	4298      	cmp	r0, r3
 800c174:	bfb8      	it	lt
 800c176:	4618      	movlt	r0, r3
 800c178:	e7a4      	b.n	800c0c4 <_printf_i+0x168>
 800c17a:	2301      	movs	r3, #1
 800c17c:	4632      	mov	r2, r6
 800c17e:	4649      	mov	r1, r9
 800c180:	4640      	mov	r0, r8
 800c182:	47d0      	blx	sl
 800c184:	3001      	adds	r0, #1
 800c186:	d09b      	beq.n	800c0c0 <_printf_i+0x164>
 800c188:	3501      	adds	r5, #1
 800c18a:	68e3      	ldr	r3, [r4, #12]
 800c18c:	9903      	ldr	r1, [sp, #12]
 800c18e:	1a5b      	subs	r3, r3, r1
 800c190:	42ab      	cmp	r3, r5
 800c192:	dcf2      	bgt.n	800c17a <_printf_i+0x21e>
 800c194:	e7eb      	b.n	800c16e <_printf_i+0x212>
 800c196:	2500      	movs	r5, #0
 800c198:	f104 0619 	add.w	r6, r4, #25
 800c19c:	e7f5      	b.n	800c18a <_printf_i+0x22e>
 800c19e:	bf00      	nop
 800c1a0:	0800e69e 	.word	0x0800e69e
 800c1a4:	0800e6af 	.word	0x0800e6af

0800c1a8 <_sbrk_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d06      	ldr	r5, [pc, #24]	; (800c1c4 <_sbrk_r+0x1c>)
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	602b      	str	r3, [r5, #0]
 800c1b4:	f7f7 f94c 	bl	8003450 <_sbrk>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d102      	bne.n	800c1c2 <_sbrk_r+0x1a>
 800c1bc:	682b      	ldr	r3, [r5, #0]
 800c1be:	b103      	cbz	r3, 800c1c2 <_sbrk_r+0x1a>
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	20004e1c 	.word	0x20004e1c

0800c1c8 <siprintf>:
 800c1c8:	b40e      	push	{r1, r2, r3}
 800c1ca:	b500      	push	{lr}
 800c1cc:	b09c      	sub	sp, #112	; 0x70
 800c1ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c1d0:	9002      	str	r0, [sp, #8]
 800c1d2:	9006      	str	r0, [sp, #24]
 800c1d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1d8:	4809      	ldr	r0, [pc, #36]	; (800c200 <siprintf+0x38>)
 800c1da:	9107      	str	r1, [sp, #28]
 800c1dc:	9104      	str	r1, [sp, #16]
 800c1de:	4909      	ldr	r1, [pc, #36]	; (800c204 <siprintf+0x3c>)
 800c1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e4:	9105      	str	r1, [sp, #20]
 800c1e6:	6800      	ldr	r0, [r0, #0]
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	a902      	add	r1, sp, #8
 800c1ec:	f001 fa7c 	bl	800d6e8 <_svfiprintf_r>
 800c1f0:	9b02      	ldr	r3, [sp, #8]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	701a      	strb	r2, [r3, #0]
 800c1f6:	b01c      	add	sp, #112	; 0x70
 800c1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1fc:	b003      	add	sp, #12
 800c1fe:	4770      	bx	lr
 800c200:	20000194 	.word	0x20000194
 800c204:	ffff0208 	.word	0xffff0208

0800c208 <quorem>:
 800c208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20c:	6903      	ldr	r3, [r0, #16]
 800c20e:	690c      	ldr	r4, [r1, #16]
 800c210:	42a3      	cmp	r3, r4
 800c212:	4607      	mov	r7, r0
 800c214:	f2c0 8081 	blt.w	800c31a <quorem+0x112>
 800c218:	3c01      	subs	r4, #1
 800c21a:	f101 0814 	add.w	r8, r1, #20
 800c21e:	f100 0514 	add.w	r5, r0, #20
 800c222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c22c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c230:	3301      	adds	r3, #1
 800c232:	429a      	cmp	r2, r3
 800c234:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c23c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c240:	d331      	bcc.n	800c2a6 <quorem+0x9e>
 800c242:	f04f 0e00 	mov.w	lr, #0
 800c246:	4640      	mov	r0, r8
 800c248:	46ac      	mov	ip, r5
 800c24a:	46f2      	mov	sl, lr
 800c24c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c250:	b293      	uxth	r3, r2
 800c252:	fb06 e303 	mla	r3, r6, r3, lr
 800c256:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	ebaa 0303 	sub.w	r3, sl, r3
 800c260:	0c12      	lsrs	r2, r2, #16
 800c262:	f8dc a000 	ldr.w	sl, [ip]
 800c266:	fb06 e202 	mla	r2, r6, r2, lr
 800c26a:	fa13 f38a 	uxtah	r3, r3, sl
 800c26e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c272:	fa1f fa82 	uxth.w	sl, r2
 800c276:	f8dc 2000 	ldr.w	r2, [ip]
 800c27a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c27e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c282:	b29b      	uxth	r3, r3
 800c284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c288:	4581      	cmp	r9, r0
 800c28a:	f84c 3b04 	str.w	r3, [ip], #4
 800c28e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c292:	d2db      	bcs.n	800c24c <quorem+0x44>
 800c294:	f855 300b 	ldr.w	r3, [r5, fp]
 800c298:	b92b      	cbnz	r3, 800c2a6 <quorem+0x9e>
 800c29a:	9b01      	ldr	r3, [sp, #4]
 800c29c:	3b04      	subs	r3, #4
 800c29e:	429d      	cmp	r5, r3
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	d32e      	bcc.n	800c302 <quorem+0xfa>
 800c2a4:	613c      	str	r4, [r7, #16]
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	f001 f8b4 	bl	800d414 <__mcmp>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	db24      	blt.n	800c2fa <quorem+0xf2>
 800c2b0:	3601      	adds	r6, #1
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f04f 0c00 	mov.w	ip, #0
 800c2b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2bc:	f8d0 e000 	ldr.w	lr, [r0]
 800c2c0:	b293      	uxth	r3, r2
 800c2c2:	ebac 0303 	sub.w	r3, ip, r3
 800c2c6:	0c12      	lsrs	r2, r2, #16
 800c2c8:	fa13 f38e 	uxtah	r3, r3, lr
 800c2cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c2d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2da:	45c1      	cmp	r9, r8
 800c2dc:	f840 3b04 	str.w	r3, [r0], #4
 800c2e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c2e4:	d2e8      	bcs.n	800c2b8 <quorem+0xb0>
 800c2e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2ee:	b922      	cbnz	r2, 800c2fa <quorem+0xf2>
 800c2f0:	3b04      	subs	r3, #4
 800c2f2:	429d      	cmp	r5, r3
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	d30a      	bcc.n	800c30e <quorem+0x106>
 800c2f8:	613c      	str	r4, [r7, #16]
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	b003      	add	sp, #12
 800c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c302:	6812      	ldr	r2, [r2, #0]
 800c304:	3b04      	subs	r3, #4
 800c306:	2a00      	cmp	r2, #0
 800c308:	d1cc      	bne.n	800c2a4 <quorem+0x9c>
 800c30a:	3c01      	subs	r4, #1
 800c30c:	e7c7      	b.n	800c29e <quorem+0x96>
 800c30e:	6812      	ldr	r2, [r2, #0]
 800c310:	3b04      	subs	r3, #4
 800c312:	2a00      	cmp	r2, #0
 800c314:	d1f0      	bne.n	800c2f8 <quorem+0xf0>
 800c316:	3c01      	subs	r4, #1
 800c318:	e7eb      	b.n	800c2f2 <quorem+0xea>
 800c31a:	2000      	movs	r0, #0
 800c31c:	e7ee      	b.n	800c2fc <quorem+0xf4>
	...

0800c320 <_dtoa_r>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	ed2d 8b02 	vpush	{d8}
 800c328:	ec57 6b10 	vmov	r6, r7, d0
 800c32c:	b095      	sub	sp, #84	; 0x54
 800c32e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c334:	9105      	str	r1, [sp, #20]
 800c336:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c33a:	4604      	mov	r4, r0
 800c33c:	9209      	str	r2, [sp, #36]	; 0x24
 800c33e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c340:	b975      	cbnz	r5, 800c360 <_dtoa_r+0x40>
 800c342:	2010      	movs	r0, #16
 800c344:	f7ff f9f6 	bl	800b734 <malloc>
 800c348:	4602      	mov	r2, r0
 800c34a:	6260      	str	r0, [r4, #36]	; 0x24
 800c34c:	b920      	cbnz	r0, 800c358 <_dtoa_r+0x38>
 800c34e:	4bb2      	ldr	r3, [pc, #712]	; (800c618 <_dtoa_r+0x2f8>)
 800c350:	21ea      	movs	r1, #234	; 0xea
 800c352:	48b2      	ldr	r0, [pc, #712]	; (800c61c <_dtoa_r+0x2fc>)
 800c354:	f001 fac8 	bl	800d8e8 <__assert_func>
 800c358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c35c:	6005      	str	r5, [r0, #0]
 800c35e:	60c5      	str	r5, [r0, #12]
 800c360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c362:	6819      	ldr	r1, [r3, #0]
 800c364:	b151      	cbz	r1, 800c37c <_dtoa_r+0x5c>
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	604a      	str	r2, [r1, #4]
 800c36a:	2301      	movs	r3, #1
 800c36c:	4093      	lsls	r3, r2
 800c36e:	608b      	str	r3, [r1, #8]
 800c370:	4620      	mov	r0, r4
 800c372:	f000 fe11 	bl	800cf98 <_Bfree>
 800c376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c378:	2200      	movs	r2, #0
 800c37a:	601a      	str	r2, [r3, #0]
 800c37c:	1e3b      	subs	r3, r7, #0
 800c37e:	bfb9      	ittee	lt
 800c380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c384:	9303      	strlt	r3, [sp, #12]
 800c386:	2300      	movge	r3, #0
 800c388:	f8c8 3000 	strge.w	r3, [r8]
 800c38c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c390:	4ba3      	ldr	r3, [pc, #652]	; (800c620 <_dtoa_r+0x300>)
 800c392:	bfbc      	itt	lt
 800c394:	2201      	movlt	r2, #1
 800c396:	f8c8 2000 	strlt.w	r2, [r8]
 800c39a:	ea33 0309 	bics.w	r3, r3, r9
 800c39e:	d11b      	bne.n	800c3d8 <_dtoa_r+0xb8>
 800c3a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3ac:	4333      	orrs	r3, r6
 800c3ae:	f000 857a 	beq.w	800cea6 <_dtoa_r+0xb86>
 800c3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3b4:	b963      	cbnz	r3, 800c3d0 <_dtoa_r+0xb0>
 800c3b6:	4b9b      	ldr	r3, [pc, #620]	; (800c624 <_dtoa_r+0x304>)
 800c3b8:	e024      	b.n	800c404 <_dtoa_r+0xe4>
 800c3ba:	4b9b      	ldr	r3, [pc, #620]	; (800c628 <_dtoa_r+0x308>)
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	9800      	ldr	r0, [sp, #0]
 800c3c6:	b015      	add	sp, #84	; 0x54
 800c3c8:	ecbd 8b02 	vpop	{d8}
 800c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	4b94      	ldr	r3, [pc, #592]	; (800c624 <_dtoa_r+0x304>)
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	3303      	adds	r3, #3
 800c3d6:	e7f3      	b.n	800c3c0 <_dtoa_r+0xa0>
 800c3d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	ec51 0b17 	vmov	r0, r1, d7
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c3e8:	f7f4 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	b158      	cbz	r0, 800c408 <_dtoa_r+0xe8>
 800c3f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	6013      	str	r3, [r2, #0]
 800c3f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 8551 	beq.w	800cea0 <_dtoa_r+0xb80>
 800c3fe:	488b      	ldr	r0, [pc, #556]	; (800c62c <_dtoa_r+0x30c>)
 800c400:	6018      	str	r0, [r3, #0]
 800c402:	1e43      	subs	r3, r0, #1
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	e7dd      	b.n	800c3c4 <_dtoa_r+0xa4>
 800c408:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c40c:	aa12      	add	r2, sp, #72	; 0x48
 800c40e:	a913      	add	r1, sp, #76	; 0x4c
 800c410:	4620      	mov	r0, r4
 800c412:	f001 f8a3 	bl	800d55c <__d2b>
 800c416:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c41a:	4683      	mov	fp, r0
 800c41c:	2d00      	cmp	r5, #0
 800c41e:	d07c      	beq.n	800c51a <_dtoa_r+0x1fa>
 800c420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c422:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c42a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c42e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c43a:	4b7d      	ldr	r3, [pc, #500]	; (800c630 <_dtoa_r+0x310>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	4630      	mov	r0, r6
 800c440:	4639      	mov	r1, r7
 800c442:	f7f3 ff21 	bl	8000288 <__aeabi_dsub>
 800c446:	a36e      	add	r3, pc, #440	; (adr r3, 800c600 <_dtoa_r+0x2e0>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f7f4 f8d4 	bl	80005f8 <__aeabi_dmul>
 800c450:	a36d      	add	r3, pc, #436	; (adr r3, 800c608 <_dtoa_r+0x2e8>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	f7f3 ff19 	bl	800028c <__adddf3>
 800c45a:	4606      	mov	r6, r0
 800c45c:	4628      	mov	r0, r5
 800c45e:	460f      	mov	r7, r1
 800c460:	f7f4 f860 	bl	8000524 <__aeabi_i2d>
 800c464:	a36a      	add	r3, pc, #424	; (adr r3, 800c610 <_dtoa_r+0x2f0>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7f4 f8c5 	bl	80005f8 <__aeabi_dmul>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4630      	mov	r0, r6
 800c474:	4639      	mov	r1, r7
 800c476:	f7f3 ff09 	bl	800028c <__adddf3>
 800c47a:	4606      	mov	r6, r0
 800c47c:	460f      	mov	r7, r1
 800c47e:	f7f4 fb6b 	bl	8000b58 <__aeabi_d2iz>
 800c482:	2200      	movs	r2, #0
 800c484:	4682      	mov	sl, r0
 800c486:	2300      	movs	r3, #0
 800c488:	4630      	mov	r0, r6
 800c48a:	4639      	mov	r1, r7
 800c48c:	f7f4 fb26 	bl	8000adc <__aeabi_dcmplt>
 800c490:	b148      	cbz	r0, 800c4a6 <_dtoa_r+0x186>
 800c492:	4650      	mov	r0, sl
 800c494:	f7f4 f846 	bl	8000524 <__aeabi_i2d>
 800c498:	4632      	mov	r2, r6
 800c49a:	463b      	mov	r3, r7
 800c49c:	f7f4 fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4a0:	b908      	cbnz	r0, 800c4a6 <_dtoa_r+0x186>
 800c4a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c4a6:	f1ba 0f16 	cmp.w	sl, #22
 800c4aa:	d854      	bhi.n	800c556 <_dtoa_r+0x236>
 800c4ac:	4b61      	ldr	r3, [pc, #388]	; (800c634 <_dtoa_r+0x314>)
 800c4ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4ba:	f7f4 fb0f 	bl	8000adc <__aeabi_dcmplt>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d04b      	beq.n	800c55a <_dtoa_r+0x23a>
 800c4c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c4ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4cc:	1b5d      	subs	r5, r3, r5
 800c4ce:	1e6b      	subs	r3, r5, #1
 800c4d0:	9304      	str	r3, [sp, #16]
 800c4d2:	bf43      	ittte	mi
 800c4d4:	2300      	movmi	r3, #0
 800c4d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c4da:	9304      	strmi	r3, [sp, #16]
 800c4dc:	f04f 0800 	movpl.w	r8, #0
 800c4e0:	f1ba 0f00 	cmp.w	sl, #0
 800c4e4:	db3b      	blt.n	800c55e <_dtoa_r+0x23e>
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c4ec:	4453      	add	r3, sl
 800c4ee:	9304      	str	r3, [sp, #16]
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	9306      	str	r3, [sp, #24]
 800c4f4:	9b05      	ldr	r3, [sp, #20]
 800c4f6:	2b09      	cmp	r3, #9
 800c4f8:	d869      	bhi.n	800c5ce <_dtoa_r+0x2ae>
 800c4fa:	2b05      	cmp	r3, #5
 800c4fc:	bfc4      	itt	gt
 800c4fe:	3b04      	subgt	r3, #4
 800c500:	9305      	strgt	r3, [sp, #20]
 800c502:	9b05      	ldr	r3, [sp, #20]
 800c504:	f1a3 0302 	sub.w	r3, r3, #2
 800c508:	bfcc      	ite	gt
 800c50a:	2500      	movgt	r5, #0
 800c50c:	2501      	movle	r5, #1
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d869      	bhi.n	800c5e6 <_dtoa_r+0x2c6>
 800c512:	e8df f003 	tbb	[pc, r3]
 800c516:	4e2c      	.short	0x4e2c
 800c518:	5a4c      	.short	0x5a4c
 800c51a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c51e:	441d      	add	r5, r3
 800c520:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c524:	2b20      	cmp	r3, #32
 800c526:	bfc1      	itttt	gt
 800c528:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c52c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c530:	fa09 f303 	lslgt.w	r3, r9, r3
 800c534:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c538:	bfda      	itte	le
 800c53a:	f1c3 0320 	rsble	r3, r3, #32
 800c53e:	fa06 f003 	lslle.w	r0, r6, r3
 800c542:	4318      	orrgt	r0, r3
 800c544:	f7f3 ffde 	bl	8000504 <__aeabi_ui2d>
 800c548:	2301      	movs	r3, #1
 800c54a:	4606      	mov	r6, r0
 800c54c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c550:	3d01      	subs	r5, #1
 800c552:	9310      	str	r3, [sp, #64]	; 0x40
 800c554:	e771      	b.n	800c43a <_dtoa_r+0x11a>
 800c556:	2301      	movs	r3, #1
 800c558:	e7b6      	b.n	800c4c8 <_dtoa_r+0x1a8>
 800c55a:	900e      	str	r0, [sp, #56]	; 0x38
 800c55c:	e7b5      	b.n	800c4ca <_dtoa_r+0x1aa>
 800c55e:	f1ca 0300 	rsb	r3, sl, #0
 800c562:	9306      	str	r3, [sp, #24]
 800c564:	2300      	movs	r3, #0
 800c566:	eba8 080a 	sub.w	r8, r8, sl
 800c56a:	930d      	str	r3, [sp, #52]	; 0x34
 800c56c:	e7c2      	b.n	800c4f4 <_dtoa_r+0x1d4>
 800c56e:	2300      	movs	r3, #0
 800c570:	9308      	str	r3, [sp, #32]
 800c572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c574:	2b00      	cmp	r3, #0
 800c576:	dc39      	bgt.n	800c5ec <_dtoa_r+0x2cc>
 800c578:	f04f 0901 	mov.w	r9, #1
 800c57c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c580:	464b      	mov	r3, r9
 800c582:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c586:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c588:	2200      	movs	r2, #0
 800c58a:	6042      	str	r2, [r0, #4]
 800c58c:	2204      	movs	r2, #4
 800c58e:	f102 0614 	add.w	r6, r2, #20
 800c592:	429e      	cmp	r6, r3
 800c594:	6841      	ldr	r1, [r0, #4]
 800c596:	d92f      	bls.n	800c5f8 <_dtoa_r+0x2d8>
 800c598:	4620      	mov	r0, r4
 800c59a:	f000 fcbd 	bl	800cf18 <_Balloc>
 800c59e:	9000      	str	r0, [sp, #0]
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d14b      	bne.n	800c63c <_dtoa_r+0x31c>
 800c5a4:	4b24      	ldr	r3, [pc, #144]	; (800c638 <_dtoa_r+0x318>)
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c5ac:	e6d1      	b.n	800c352 <_dtoa_r+0x32>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e7de      	b.n	800c570 <_dtoa_r+0x250>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	9308      	str	r3, [sp, #32]
 800c5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b8:	eb0a 0903 	add.w	r9, sl, r3
 800c5bc:	f109 0301 	add.w	r3, r9, #1
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	bfb8      	it	lt
 800c5c6:	2301      	movlt	r3, #1
 800c5c8:	e7dd      	b.n	800c586 <_dtoa_r+0x266>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e7f2      	b.n	800c5b4 <_dtoa_r+0x294>
 800c5ce:	2501      	movs	r5, #1
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	9305      	str	r3, [sp, #20]
 800c5d4:	9508      	str	r5, [sp, #32]
 800c5d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c5e0:	2312      	movs	r3, #18
 800c5e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e4:	e7cf      	b.n	800c586 <_dtoa_r+0x266>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	9308      	str	r3, [sp, #32]
 800c5ea:	e7f4      	b.n	800c5d6 <_dtoa_r+0x2b6>
 800c5ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c5f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	e7c6      	b.n	800c586 <_dtoa_r+0x266>
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	6041      	str	r1, [r0, #4]
 800c5fc:	0052      	lsls	r2, r2, #1
 800c5fe:	e7c6      	b.n	800c58e <_dtoa_r+0x26e>
 800c600:	636f4361 	.word	0x636f4361
 800c604:	3fd287a7 	.word	0x3fd287a7
 800c608:	8b60c8b3 	.word	0x8b60c8b3
 800c60c:	3fc68a28 	.word	0x3fc68a28
 800c610:	509f79fb 	.word	0x509f79fb
 800c614:	3fd34413 	.word	0x3fd34413
 800c618:	0800e6cd 	.word	0x0800e6cd
 800c61c:	0800e6e4 	.word	0x0800e6e4
 800c620:	7ff00000 	.word	0x7ff00000
 800c624:	0800e6c9 	.word	0x0800e6c9
 800c628:	0800e6c0 	.word	0x0800e6c0
 800c62c:	0800e69d 	.word	0x0800e69d
 800c630:	3ff80000 	.word	0x3ff80000
 800c634:	0800e7e0 	.word	0x0800e7e0
 800c638:	0800e743 	.word	0x0800e743
 800c63c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c63e:	9a00      	ldr	r2, [sp, #0]
 800c640:	601a      	str	r2, [r3, #0]
 800c642:	9b01      	ldr	r3, [sp, #4]
 800c644:	2b0e      	cmp	r3, #14
 800c646:	f200 80ad 	bhi.w	800c7a4 <_dtoa_r+0x484>
 800c64a:	2d00      	cmp	r5, #0
 800c64c:	f000 80aa 	beq.w	800c7a4 <_dtoa_r+0x484>
 800c650:	f1ba 0f00 	cmp.w	sl, #0
 800c654:	dd36      	ble.n	800c6c4 <_dtoa_r+0x3a4>
 800c656:	4ac3      	ldr	r2, [pc, #780]	; (800c964 <_dtoa_r+0x644>)
 800c658:	f00a 030f 	and.w	r3, sl, #15
 800c65c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c660:	ed93 7b00 	vldr	d7, [r3]
 800c664:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c668:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c66c:	eeb0 8a47 	vmov.f32	s16, s14
 800c670:	eef0 8a67 	vmov.f32	s17, s15
 800c674:	d016      	beq.n	800c6a4 <_dtoa_r+0x384>
 800c676:	4bbc      	ldr	r3, [pc, #752]	; (800c968 <_dtoa_r+0x648>)
 800c678:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c67c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c680:	f7f4 f8e4 	bl	800084c <__aeabi_ddiv>
 800c684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c688:	f007 070f 	and.w	r7, r7, #15
 800c68c:	2503      	movs	r5, #3
 800c68e:	4eb6      	ldr	r6, [pc, #728]	; (800c968 <_dtoa_r+0x648>)
 800c690:	b957      	cbnz	r7, 800c6a8 <_dtoa_r+0x388>
 800c692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c696:	ec53 2b18 	vmov	r2, r3, d8
 800c69a:	f7f4 f8d7 	bl	800084c <__aeabi_ddiv>
 800c69e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6a2:	e029      	b.n	800c6f8 <_dtoa_r+0x3d8>
 800c6a4:	2502      	movs	r5, #2
 800c6a6:	e7f2      	b.n	800c68e <_dtoa_r+0x36e>
 800c6a8:	07f9      	lsls	r1, r7, #31
 800c6aa:	d508      	bpl.n	800c6be <_dtoa_r+0x39e>
 800c6ac:	ec51 0b18 	vmov	r0, r1, d8
 800c6b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6b4:	f7f3 ffa0 	bl	80005f8 <__aeabi_dmul>
 800c6b8:	ec41 0b18 	vmov	d8, r0, r1
 800c6bc:	3501      	adds	r5, #1
 800c6be:	107f      	asrs	r7, r7, #1
 800c6c0:	3608      	adds	r6, #8
 800c6c2:	e7e5      	b.n	800c690 <_dtoa_r+0x370>
 800c6c4:	f000 80a6 	beq.w	800c814 <_dtoa_r+0x4f4>
 800c6c8:	f1ca 0600 	rsb	r6, sl, #0
 800c6cc:	4ba5      	ldr	r3, [pc, #660]	; (800c964 <_dtoa_r+0x644>)
 800c6ce:	4fa6      	ldr	r7, [pc, #664]	; (800c968 <_dtoa_r+0x648>)
 800c6d0:	f006 020f 	and.w	r2, r6, #15
 800c6d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c6e0:	f7f3 ff8a 	bl	80005f8 <__aeabi_dmul>
 800c6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6e8:	1136      	asrs	r6, r6, #4
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	2502      	movs	r5, #2
 800c6ee:	2e00      	cmp	r6, #0
 800c6f0:	f040 8085 	bne.w	800c7fe <_dtoa_r+0x4de>
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1d2      	bne.n	800c69e <_dtoa_r+0x37e>
 800c6f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 808c 	beq.w	800c818 <_dtoa_r+0x4f8>
 800c700:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c704:	4b99      	ldr	r3, [pc, #612]	; (800c96c <_dtoa_r+0x64c>)
 800c706:	2200      	movs	r2, #0
 800c708:	4630      	mov	r0, r6
 800c70a:	4639      	mov	r1, r7
 800c70c:	f7f4 f9e6 	bl	8000adc <__aeabi_dcmplt>
 800c710:	2800      	cmp	r0, #0
 800c712:	f000 8081 	beq.w	800c818 <_dtoa_r+0x4f8>
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d07d      	beq.n	800c818 <_dtoa_r+0x4f8>
 800c71c:	f1b9 0f00 	cmp.w	r9, #0
 800c720:	dd3c      	ble.n	800c79c <_dtoa_r+0x47c>
 800c722:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c726:	9307      	str	r3, [sp, #28]
 800c728:	2200      	movs	r2, #0
 800c72a:	4b91      	ldr	r3, [pc, #580]	; (800c970 <_dtoa_r+0x650>)
 800c72c:	4630      	mov	r0, r6
 800c72e:	4639      	mov	r1, r7
 800c730:	f7f3 ff62 	bl	80005f8 <__aeabi_dmul>
 800c734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c738:	3501      	adds	r5, #1
 800c73a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c73e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c742:	4628      	mov	r0, r5
 800c744:	f7f3 feee 	bl	8000524 <__aeabi_i2d>
 800c748:	4632      	mov	r2, r6
 800c74a:	463b      	mov	r3, r7
 800c74c:	f7f3 ff54 	bl	80005f8 <__aeabi_dmul>
 800c750:	4b88      	ldr	r3, [pc, #544]	; (800c974 <_dtoa_r+0x654>)
 800c752:	2200      	movs	r2, #0
 800c754:	f7f3 fd9a 	bl	800028c <__adddf3>
 800c758:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c760:	9303      	str	r3, [sp, #12]
 800c762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c764:	2b00      	cmp	r3, #0
 800c766:	d15c      	bne.n	800c822 <_dtoa_r+0x502>
 800c768:	4b83      	ldr	r3, [pc, #524]	; (800c978 <_dtoa_r+0x658>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	4630      	mov	r0, r6
 800c76e:	4639      	mov	r1, r7
 800c770:	f7f3 fd8a 	bl	8000288 <__aeabi_dsub>
 800c774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c778:	4606      	mov	r6, r0
 800c77a:	460f      	mov	r7, r1
 800c77c:	f7f4 f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 800c780:	2800      	cmp	r0, #0
 800c782:	f040 8296 	bne.w	800ccb2 <_dtoa_r+0x992>
 800c786:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c78a:	4630      	mov	r0, r6
 800c78c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c790:	4639      	mov	r1, r7
 800c792:	f7f4 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800c796:	2800      	cmp	r0, #0
 800c798:	f040 8288 	bne.w	800ccac <_dtoa_r+0x98c>
 800c79c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c7a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f2c0 8158 	blt.w	800ca5c <_dtoa_r+0x73c>
 800c7ac:	f1ba 0f0e 	cmp.w	sl, #14
 800c7b0:	f300 8154 	bgt.w	800ca5c <_dtoa_r+0x73c>
 800c7b4:	4b6b      	ldr	r3, [pc, #428]	; (800c964 <_dtoa_r+0x644>)
 800c7b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c7ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f280 80e3 	bge.w	800c98c <_dtoa_r+0x66c>
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f300 80df 	bgt.w	800c98c <_dtoa_r+0x66c>
 800c7ce:	f040 826d 	bne.w	800ccac <_dtoa_r+0x98c>
 800c7d2:	4b69      	ldr	r3, [pc, #420]	; (800c978 <_dtoa_r+0x658>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4640      	mov	r0, r8
 800c7d8:	4649      	mov	r1, r9
 800c7da:	f7f3 ff0d 	bl	80005f8 <__aeabi_dmul>
 800c7de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7e2:	f7f4 f98f 	bl	8000b04 <__aeabi_dcmpge>
 800c7e6:	9e01      	ldr	r6, [sp, #4]
 800c7e8:	4637      	mov	r7, r6
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	f040 8243 	bne.w	800cc76 <_dtoa_r+0x956>
 800c7f0:	9d00      	ldr	r5, [sp, #0]
 800c7f2:	2331      	movs	r3, #49	; 0x31
 800c7f4:	f805 3b01 	strb.w	r3, [r5], #1
 800c7f8:	f10a 0a01 	add.w	sl, sl, #1
 800c7fc:	e23f      	b.n	800cc7e <_dtoa_r+0x95e>
 800c7fe:	07f2      	lsls	r2, r6, #31
 800c800:	d505      	bpl.n	800c80e <_dtoa_r+0x4ee>
 800c802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c806:	f7f3 fef7 	bl	80005f8 <__aeabi_dmul>
 800c80a:	3501      	adds	r5, #1
 800c80c:	2301      	movs	r3, #1
 800c80e:	1076      	asrs	r6, r6, #1
 800c810:	3708      	adds	r7, #8
 800c812:	e76c      	b.n	800c6ee <_dtoa_r+0x3ce>
 800c814:	2502      	movs	r5, #2
 800c816:	e76f      	b.n	800c6f8 <_dtoa_r+0x3d8>
 800c818:	9b01      	ldr	r3, [sp, #4]
 800c81a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c81e:	930c      	str	r3, [sp, #48]	; 0x30
 800c820:	e78d      	b.n	800c73e <_dtoa_r+0x41e>
 800c822:	9900      	ldr	r1, [sp, #0]
 800c824:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c828:	4b4e      	ldr	r3, [pc, #312]	; (800c964 <_dtoa_r+0x644>)
 800c82a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c82e:	4401      	add	r1, r0
 800c830:	9102      	str	r1, [sp, #8]
 800c832:	9908      	ldr	r1, [sp, #32]
 800c834:	eeb0 8a47 	vmov.f32	s16, s14
 800c838:	eef0 8a67 	vmov.f32	s17, s15
 800c83c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c840:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c844:	2900      	cmp	r1, #0
 800c846:	d045      	beq.n	800c8d4 <_dtoa_r+0x5b4>
 800c848:	494c      	ldr	r1, [pc, #304]	; (800c97c <_dtoa_r+0x65c>)
 800c84a:	2000      	movs	r0, #0
 800c84c:	f7f3 fffe 	bl	800084c <__aeabi_ddiv>
 800c850:	ec53 2b18 	vmov	r2, r3, d8
 800c854:	f7f3 fd18 	bl	8000288 <__aeabi_dsub>
 800c858:	9d00      	ldr	r5, [sp, #0]
 800c85a:	ec41 0b18 	vmov	d8, r0, r1
 800c85e:	4639      	mov	r1, r7
 800c860:	4630      	mov	r0, r6
 800c862:	f7f4 f979 	bl	8000b58 <__aeabi_d2iz>
 800c866:	900c      	str	r0, [sp, #48]	; 0x30
 800c868:	f7f3 fe5c 	bl	8000524 <__aeabi_i2d>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	4630      	mov	r0, r6
 800c872:	4639      	mov	r1, r7
 800c874:	f7f3 fd08 	bl	8000288 <__aeabi_dsub>
 800c878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c87a:	3330      	adds	r3, #48	; 0x30
 800c87c:	f805 3b01 	strb.w	r3, [r5], #1
 800c880:	ec53 2b18 	vmov	r2, r3, d8
 800c884:	4606      	mov	r6, r0
 800c886:	460f      	mov	r7, r1
 800c888:	f7f4 f928 	bl	8000adc <__aeabi_dcmplt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d165      	bne.n	800c95c <_dtoa_r+0x63c>
 800c890:	4632      	mov	r2, r6
 800c892:	463b      	mov	r3, r7
 800c894:	4935      	ldr	r1, [pc, #212]	; (800c96c <_dtoa_r+0x64c>)
 800c896:	2000      	movs	r0, #0
 800c898:	f7f3 fcf6 	bl	8000288 <__aeabi_dsub>
 800c89c:	ec53 2b18 	vmov	r2, r3, d8
 800c8a0:	f7f4 f91c 	bl	8000adc <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f040 80b9 	bne.w	800ca1c <_dtoa_r+0x6fc>
 800c8aa:	9b02      	ldr	r3, [sp, #8]
 800c8ac:	429d      	cmp	r5, r3
 800c8ae:	f43f af75 	beq.w	800c79c <_dtoa_r+0x47c>
 800c8b2:	4b2f      	ldr	r3, [pc, #188]	; (800c970 <_dtoa_r+0x650>)
 800c8b4:	ec51 0b18 	vmov	r0, r1, d8
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f7f3 fe9d 	bl	80005f8 <__aeabi_dmul>
 800c8be:	4b2c      	ldr	r3, [pc, #176]	; (800c970 <_dtoa_r+0x650>)
 800c8c0:	ec41 0b18 	vmov	d8, r0, r1
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	f7f3 fe95 	bl	80005f8 <__aeabi_dmul>
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	460f      	mov	r7, r1
 800c8d2:	e7c4      	b.n	800c85e <_dtoa_r+0x53e>
 800c8d4:	ec51 0b17 	vmov	r0, r1, d7
 800c8d8:	f7f3 fe8e 	bl	80005f8 <__aeabi_dmul>
 800c8dc:	9b02      	ldr	r3, [sp, #8]
 800c8de:	9d00      	ldr	r5, [sp, #0]
 800c8e0:	930c      	str	r3, [sp, #48]	; 0x30
 800c8e2:	ec41 0b18 	vmov	d8, r0, r1
 800c8e6:	4639      	mov	r1, r7
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7f4 f935 	bl	8000b58 <__aeabi_d2iz>
 800c8ee:	9011      	str	r0, [sp, #68]	; 0x44
 800c8f0:	f7f3 fe18 	bl	8000524 <__aeabi_i2d>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	4639      	mov	r1, r7
 800c8fc:	f7f3 fcc4 	bl	8000288 <__aeabi_dsub>
 800c900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c902:	3330      	adds	r3, #48	; 0x30
 800c904:	f805 3b01 	strb.w	r3, [r5], #1
 800c908:	9b02      	ldr	r3, [sp, #8]
 800c90a:	429d      	cmp	r5, r3
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	f04f 0200 	mov.w	r2, #0
 800c914:	d134      	bne.n	800c980 <_dtoa_r+0x660>
 800c916:	4b19      	ldr	r3, [pc, #100]	; (800c97c <_dtoa_r+0x65c>)
 800c918:	ec51 0b18 	vmov	r0, r1, d8
 800c91c:	f7f3 fcb6 	bl	800028c <__adddf3>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4630      	mov	r0, r6
 800c926:	4639      	mov	r1, r7
 800c928:	f7f4 f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d175      	bne.n	800ca1c <_dtoa_r+0x6fc>
 800c930:	ec53 2b18 	vmov	r2, r3, d8
 800c934:	4911      	ldr	r1, [pc, #68]	; (800c97c <_dtoa_r+0x65c>)
 800c936:	2000      	movs	r0, #0
 800c938:	f7f3 fca6 	bl	8000288 <__aeabi_dsub>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4630      	mov	r0, r6
 800c942:	4639      	mov	r1, r7
 800c944:	f7f4 f8ca 	bl	8000adc <__aeabi_dcmplt>
 800c948:	2800      	cmp	r0, #0
 800c94a:	f43f af27 	beq.w	800c79c <_dtoa_r+0x47c>
 800c94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c950:	1e6b      	subs	r3, r5, #1
 800c952:	930c      	str	r3, [sp, #48]	; 0x30
 800c954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c958:	2b30      	cmp	r3, #48	; 0x30
 800c95a:	d0f8      	beq.n	800c94e <_dtoa_r+0x62e>
 800c95c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c960:	e04a      	b.n	800c9f8 <_dtoa_r+0x6d8>
 800c962:	bf00      	nop
 800c964:	0800e7e0 	.word	0x0800e7e0
 800c968:	0800e7b8 	.word	0x0800e7b8
 800c96c:	3ff00000 	.word	0x3ff00000
 800c970:	40240000 	.word	0x40240000
 800c974:	401c0000 	.word	0x401c0000
 800c978:	40140000 	.word	0x40140000
 800c97c:	3fe00000 	.word	0x3fe00000
 800c980:	4baf      	ldr	r3, [pc, #700]	; (800cc40 <_dtoa_r+0x920>)
 800c982:	f7f3 fe39 	bl	80005f8 <__aeabi_dmul>
 800c986:	4606      	mov	r6, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	e7ac      	b.n	800c8e6 <_dtoa_r+0x5c6>
 800c98c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c990:	9d00      	ldr	r5, [sp, #0]
 800c992:	4642      	mov	r2, r8
 800c994:	464b      	mov	r3, r9
 800c996:	4630      	mov	r0, r6
 800c998:	4639      	mov	r1, r7
 800c99a:	f7f3 ff57 	bl	800084c <__aeabi_ddiv>
 800c99e:	f7f4 f8db 	bl	8000b58 <__aeabi_d2iz>
 800c9a2:	9002      	str	r0, [sp, #8]
 800c9a4:	f7f3 fdbe 	bl	8000524 <__aeabi_i2d>
 800c9a8:	4642      	mov	r2, r8
 800c9aa:	464b      	mov	r3, r9
 800c9ac:	f7f3 fe24 	bl	80005f8 <__aeabi_dmul>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	f7f3 fc66 	bl	8000288 <__aeabi_dsub>
 800c9bc:	9e02      	ldr	r6, [sp, #8]
 800c9be:	9f01      	ldr	r7, [sp, #4]
 800c9c0:	3630      	adds	r6, #48	; 0x30
 800c9c2:	f805 6b01 	strb.w	r6, [r5], #1
 800c9c6:	9e00      	ldr	r6, [sp, #0]
 800c9c8:	1bae      	subs	r6, r5, r6
 800c9ca:	42b7      	cmp	r7, r6
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	d137      	bne.n	800ca42 <_dtoa_r+0x722>
 800c9d2:	f7f3 fc5b 	bl	800028c <__adddf3>
 800c9d6:	4642      	mov	r2, r8
 800c9d8:	464b      	mov	r3, r9
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460f      	mov	r7, r1
 800c9de:	f7f4 f89b 	bl	8000b18 <__aeabi_dcmpgt>
 800c9e2:	b9c8      	cbnz	r0, 800ca18 <_dtoa_r+0x6f8>
 800c9e4:	4642      	mov	r2, r8
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	f7f4 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9f0:	b110      	cbz	r0, 800c9f8 <_dtoa_r+0x6d8>
 800c9f2:	9b02      	ldr	r3, [sp, #8]
 800c9f4:	07d9      	lsls	r1, r3, #31
 800c9f6:	d40f      	bmi.n	800ca18 <_dtoa_r+0x6f8>
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	4659      	mov	r1, fp
 800c9fc:	f000 facc 	bl	800cf98 <_Bfree>
 800ca00:	2300      	movs	r3, #0
 800ca02:	702b      	strb	r3, [r5, #0]
 800ca04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca06:	f10a 0001 	add.w	r0, sl, #1
 800ca0a:	6018      	str	r0, [r3, #0]
 800ca0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f43f acd8 	beq.w	800c3c4 <_dtoa_r+0xa4>
 800ca14:	601d      	str	r5, [r3, #0]
 800ca16:	e4d5      	b.n	800c3c4 <_dtoa_r+0xa4>
 800ca18:	f8cd a01c 	str.w	sl, [sp, #28]
 800ca1c:	462b      	mov	r3, r5
 800ca1e:	461d      	mov	r5, r3
 800ca20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca24:	2a39      	cmp	r2, #57	; 0x39
 800ca26:	d108      	bne.n	800ca3a <_dtoa_r+0x71a>
 800ca28:	9a00      	ldr	r2, [sp, #0]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d1f7      	bne.n	800ca1e <_dtoa_r+0x6fe>
 800ca2e:	9a07      	ldr	r2, [sp, #28]
 800ca30:	9900      	ldr	r1, [sp, #0]
 800ca32:	3201      	adds	r2, #1
 800ca34:	9207      	str	r2, [sp, #28]
 800ca36:	2230      	movs	r2, #48	; 0x30
 800ca38:	700a      	strb	r2, [r1, #0]
 800ca3a:	781a      	ldrb	r2, [r3, #0]
 800ca3c:	3201      	adds	r2, #1
 800ca3e:	701a      	strb	r2, [r3, #0]
 800ca40:	e78c      	b.n	800c95c <_dtoa_r+0x63c>
 800ca42:	4b7f      	ldr	r3, [pc, #508]	; (800cc40 <_dtoa_r+0x920>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	f7f3 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4606      	mov	r6, r0
 800ca50:	460f      	mov	r7, r1
 800ca52:	f7f4 f839 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d09b      	beq.n	800c992 <_dtoa_r+0x672>
 800ca5a:	e7cd      	b.n	800c9f8 <_dtoa_r+0x6d8>
 800ca5c:	9a08      	ldr	r2, [sp, #32]
 800ca5e:	2a00      	cmp	r2, #0
 800ca60:	f000 80c4 	beq.w	800cbec <_dtoa_r+0x8cc>
 800ca64:	9a05      	ldr	r2, [sp, #20]
 800ca66:	2a01      	cmp	r2, #1
 800ca68:	f300 80a8 	bgt.w	800cbbc <_dtoa_r+0x89c>
 800ca6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca6e:	2a00      	cmp	r2, #0
 800ca70:	f000 80a0 	beq.w	800cbb4 <_dtoa_r+0x894>
 800ca74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca78:	9e06      	ldr	r6, [sp, #24]
 800ca7a:	4645      	mov	r5, r8
 800ca7c:	9a04      	ldr	r2, [sp, #16]
 800ca7e:	2101      	movs	r1, #1
 800ca80:	441a      	add	r2, r3
 800ca82:	4620      	mov	r0, r4
 800ca84:	4498      	add	r8, r3
 800ca86:	9204      	str	r2, [sp, #16]
 800ca88:	f000 fb42 	bl	800d110 <__i2b>
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	2d00      	cmp	r5, #0
 800ca90:	dd0b      	ble.n	800caaa <_dtoa_r+0x78a>
 800ca92:	9b04      	ldr	r3, [sp, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dd08      	ble.n	800caaa <_dtoa_r+0x78a>
 800ca98:	42ab      	cmp	r3, r5
 800ca9a:	9a04      	ldr	r2, [sp, #16]
 800ca9c:	bfa8      	it	ge
 800ca9e:	462b      	movge	r3, r5
 800caa0:	eba8 0803 	sub.w	r8, r8, r3
 800caa4:	1aed      	subs	r5, r5, r3
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	9304      	str	r3, [sp, #16]
 800caaa:	9b06      	ldr	r3, [sp, #24]
 800caac:	b1fb      	cbz	r3, 800caee <_dtoa_r+0x7ce>
 800caae:	9b08      	ldr	r3, [sp, #32]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f000 809f 	beq.w	800cbf4 <_dtoa_r+0x8d4>
 800cab6:	2e00      	cmp	r6, #0
 800cab8:	dd11      	ble.n	800cade <_dtoa_r+0x7be>
 800caba:	4639      	mov	r1, r7
 800cabc:	4632      	mov	r2, r6
 800cabe:	4620      	mov	r0, r4
 800cac0:	f000 fbe2 	bl	800d288 <__pow5mult>
 800cac4:	465a      	mov	r2, fp
 800cac6:	4601      	mov	r1, r0
 800cac8:	4607      	mov	r7, r0
 800caca:	4620      	mov	r0, r4
 800cacc:	f000 fb36 	bl	800d13c <__multiply>
 800cad0:	4659      	mov	r1, fp
 800cad2:	9007      	str	r0, [sp, #28]
 800cad4:	4620      	mov	r0, r4
 800cad6:	f000 fa5f 	bl	800cf98 <_Bfree>
 800cada:	9b07      	ldr	r3, [sp, #28]
 800cadc:	469b      	mov	fp, r3
 800cade:	9b06      	ldr	r3, [sp, #24]
 800cae0:	1b9a      	subs	r2, r3, r6
 800cae2:	d004      	beq.n	800caee <_dtoa_r+0x7ce>
 800cae4:	4659      	mov	r1, fp
 800cae6:	4620      	mov	r0, r4
 800cae8:	f000 fbce 	bl	800d288 <__pow5mult>
 800caec:	4683      	mov	fp, r0
 800caee:	2101      	movs	r1, #1
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 fb0d 	bl	800d110 <__i2b>
 800caf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	4606      	mov	r6, r0
 800cafc:	dd7c      	ble.n	800cbf8 <_dtoa_r+0x8d8>
 800cafe:	461a      	mov	r2, r3
 800cb00:	4601      	mov	r1, r0
 800cb02:	4620      	mov	r0, r4
 800cb04:	f000 fbc0 	bl	800d288 <__pow5mult>
 800cb08:	9b05      	ldr	r3, [sp, #20]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	dd76      	ble.n	800cbfe <_dtoa_r+0x8de>
 800cb10:	2300      	movs	r3, #0
 800cb12:	9306      	str	r3, [sp, #24]
 800cb14:	6933      	ldr	r3, [r6, #16]
 800cb16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb1a:	6918      	ldr	r0, [r3, #16]
 800cb1c:	f000 faa8 	bl	800d070 <__hi0bits>
 800cb20:	f1c0 0020 	rsb	r0, r0, #32
 800cb24:	9b04      	ldr	r3, [sp, #16]
 800cb26:	4418      	add	r0, r3
 800cb28:	f010 001f 	ands.w	r0, r0, #31
 800cb2c:	f000 8086 	beq.w	800cc3c <_dtoa_r+0x91c>
 800cb30:	f1c0 0320 	rsb	r3, r0, #32
 800cb34:	2b04      	cmp	r3, #4
 800cb36:	dd7f      	ble.n	800cc38 <_dtoa_r+0x918>
 800cb38:	f1c0 001c 	rsb	r0, r0, #28
 800cb3c:	9b04      	ldr	r3, [sp, #16]
 800cb3e:	4403      	add	r3, r0
 800cb40:	4480      	add	r8, r0
 800cb42:	4405      	add	r5, r0
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	f1b8 0f00 	cmp.w	r8, #0
 800cb4a:	dd05      	ble.n	800cb58 <_dtoa_r+0x838>
 800cb4c:	4659      	mov	r1, fp
 800cb4e:	4642      	mov	r2, r8
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fbf3 	bl	800d33c <__lshift>
 800cb56:	4683      	mov	fp, r0
 800cb58:	9b04      	ldr	r3, [sp, #16]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	dd05      	ble.n	800cb6a <_dtoa_r+0x84a>
 800cb5e:	4631      	mov	r1, r6
 800cb60:	461a      	mov	r2, r3
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 fbea 	bl	800d33c <__lshift>
 800cb68:	4606      	mov	r6, r0
 800cb6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d069      	beq.n	800cc44 <_dtoa_r+0x924>
 800cb70:	4631      	mov	r1, r6
 800cb72:	4658      	mov	r0, fp
 800cb74:	f000 fc4e 	bl	800d414 <__mcmp>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	da63      	bge.n	800cc44 <_dtoa_r+0x924>
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4659      	mov	r1, fp
 800cb80:	220a      	movs	r2, #10
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 fa2a 	bl	800cfdc <__multadd>
 800cb88:	9b08      	ldr	r3, [sp, #32]
 800cb8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cb8e:	4683      	mov	fp, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f000 818f 	beq.w	800ceb4 <_dtoa_r+0xb94>
 800cb96:	4639      	mov	r1, r7
 800cb98:	2300      	movs	r3, #0
 800cb9a:	220a      	movs	r2, #10
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fa1d 	bl	800cfdc <__multadd>
 800cba2:	f1b9 0f00 	cmp.w	r9, #0
 800cba6:	4607      	mov	r7, r0
 800cba8:	f300 808e 	bgt.w	800ccc8 <_dtoa_r+0x9a8>
 800cbac:	9b05      	ldr	r3, [sp, #20]
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	dc50      	bgt.n	800cc54 <_dtoa_r+0x934>
 800cbb2:	e089      	b.n	800ccc8 <_dtoa_r+0x9a8>
 800cbb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbba:	e75d      	b.n	800ca78 <_dtoa_r+0x758>
 800cbbc:	9b01      	ldr	r3, [sp, #4]
 800cbbe:	1e5e      	subs	r6, r3, #1
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	42b3      	cmp	r3, r6
 800cbc4:	bfbf      	itttt	lt
 800cbc6:	9b06      	ldrlt	r3, [sp, #24]
 800cbc8:	9606      	strlt	r6, [sp, #24]
 800cbca:	1af2      	sublt	r2, r6, r3
 800cbcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cbce:	bfb6      	itet	lt
 800cbd0:	189b      	addlt	r3, r3, r2
 800cbd2:	1b9e      	subge	r6, r3, r6
 800cbd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cbd6:	9b01      	ldr	r3, [sp, #4]
 800cbd8:	bfb8      	it	lt
 800cbda:	2600      	movlt	r6, #0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	bfb5      	itete	lt
 800cbe0:	eba8 0503 	sublt.w	r5, r8, r3
 800cbe4:	9b01      	ldrge	r3, [sp, #4]
 800cbe6:	2300      	movlt	r3, #0
 800cbe8:	4645      	movge	r5, r8
 800cbea:	e747      	b.n	800ca7c <_dtoa_r+0x75c>
 800cbec:	9e06      	ldr	r6, [sp, #24]
 800cbee:	9f08      	ldr	r7, [sp, #32]
 800cbf0:	4645      	mov	r5, r8
 800cbf2:	e74c      	b.n	800ca8e <_dtoa_r+0x76e>
 800cbf4:	9a06      	ldr	r2, [sp, #24]
 800cbf6:	e775      	b.n	800cae4 <_dtoa_r+0x7c4>
 800cbf8:	9b05      	ldr	r3, [sp, #20]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	dc18      	bgt.n	800cc30 <_dtoa_r+0x910>
 800cbfe:	9b02      	ldr	r3, [sp, #8]
 800cc00:	b9b3      	cbnz	r3, 800cc30 <_dtoa_r+0x910>
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc08:	b9a3      	cbnz	r3, 800cc34 <_dtoa_r+0x914>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc10:	0d1b      	lsrs	r3, r3, #20
 800cc12:	051b      	lsls	r3, r3, #20
 800cc14:	b12b      	cbz	r3, 800cc22 <_dtoa_r+0x902>
 800cc16:	9b04      	ldr	r3, [sp, #16]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	9304      	str	r3, [sp, #16]
 800cc1c:	f108 0801 	add.w	r8, r8, #1
 800cc20:	2301      	movs	r3, #1
 800cc22:	9306      	str	r3, [sp, #24]
 800cc24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f47f af74 	bne.w	800cb14 <_dtoa_r+0x7f4>
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	e779      	b.n	800cb24 <_dtoa_r+0x804>
 800cc30:	2300      	movs	r3, #0
 800cc32:	e7f6      	b.n	800cc22 <_dtoa_r+0x902>
 800cc34:	9b02      	ldr	r3, [sp, #8]
 800cc36:	e7f4      	b.n	800cc22 <_dtoa_r+0x902>
 800cc38:	d085      	beq.n	800cb46 <_dtoa_r+0x826>
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	301c      	adds	r0, #28
 800cc3e:	e77d      	b.n	800cb3c <_dtoa_r+0x81c>
 800cc40:	40240000 	.word	0x40240000
 800cc44:	9b01      	ldr	r3, [sp, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	dc38      	bgt.n	800ccbc <_dtoa_r+0x99c>
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	dd35      	ble.n	800ccbc <_dtoa_r+0x99c>
 800cc50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cc54:	f1b9 0f00 	cmp.w	r9, #0
 800cc58:	d10d      	bne.n	800cc76 <_dtoa_r+0x956>
 800cc5a:	4631      	mov	r1, r6
 800cc5c:	464b      	mov	r3, r9
 800cc5e:	2205      	movs	r2, #5
 800cc60:	4620      	mov	r0, r4
 800cc62:	f000 f9bb 	bl	800cfdc <__multadd>
 800cc66:	4601      	mov	r1, r0
 800cc68:	4606      	mov	r6, r0
 800cc6a:	4658      	mov	r0, fp
 800cc6c:	f000 fbd2 	bl	800d414 <__mcmp>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	f73f adbd 	bgt.w	800c7f0 <_dtoa_r+0x4d0>
 800cc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc78:	9d00      	ldr	r5, [sp, #0]
 800cc7a:	ea6f 0a03 	mvn.w	sl, r3
 800cc7e:	f04f 0800 	mov.w	r8, #0
 800cc82:	4631      	mov	r1, r6
 800cc84:	4620      	mov	r0, r4
 800cc86:	f000 f987 	bl	800cf98 <_Bfree>
 800cc8a:	2f00      	cmp	r7, #0
 800cc8c:	f43f aeb4 	beq.w	800c9f8 <_dtoa_r+0x6d8>
 800cc90:	f1b8 0f00 	cmp.w	r8, #0
 800cc94:	d005      	beq.n	800cca2 <_dtoa_r+0x982>
 800cc96:	45b8      	cmp	r8, r7
 800cc98:	d003      	beq.n	800cca2 <_dtoa_r+0x982>
 800cc9a:	4641      	mov	r1, r8
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f000 f97b 	bl	800cf98 <_Bfree>
 800cca2:	4639      	mov	r1, r7
 800cca4:	4620      	mov	r0, r4
 800cca6:	f000 f977 	bl	800cf98 <_Bfree>
 800ccaa:	e6a5      	b.n	800c9f8 <_dtoa_r+0x6d8>
 800ccac:	2600      	movs	r6, #0
 800ccae:	4637      	mov	r7, r6
 800ccb0:	e7e1      	b.n	800cc76 <_dtoa_r+0x956>
 800ccb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ccb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ccb8:	4637      	mov	r7, r6
 800ccba:	e599      	b.n	800c7f0 <_dtoa_r+0x4d0>
 800ccbc:	9b08      	ldr	r3, [sp, #32]
 800ccbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f000 80fd 	beq.w	800cec2 <_dtoa_r+0xba2>
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	dd05      	ble.n	800ccd8 <_dtoa_r+0x9b8>
 800cccc:	4639      	mov	r1, r7
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f000 fb33 	bl	800d33c <__lshift>
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	9b06      	ldr	r3, [sp, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d05c      	beq.n	800cd98 <_dtoa_r+0xa78>
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	4620      	mov	r0, r4
 800cce2:	f000 f919 	bl	800cf18 <_Balloc>
 800cce6:	4605      	mov	r5, r0
 800cce8:	b928      	cbnz	r0, 800ccf6 <_dtoa_r+0x9d6>
 800ccea:	4b80      	ldr	r3, [pc, #512]	; (800ceec <_dtoa_r+0xbcc>)
 800ccec:	4602      	mov	r2, r0
 800ccee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ccf2:	f7ff bb2e 	b.w	800c352 <_dtoa_r+0x32>
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	3202      	adds	r2, #2
 800ccfa:	0092      	lsls	r2, r2, #2
 800ccfc:	f107 010c 	add.w	r1, r7, #12
 800cd00:	300c      	adds	r0, #12
 800cd02:	f7fe fd27 	bl	800b754 <memcpy>
 800cd06:	2201      	movs	r2, #1
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f000 fb16 	bl	800d33c <__lshift>
 800cd10:	9b00      	ldr	r3, [sp, #0]
 800cd12:	3301      	adds	r3, #1
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	9b00      	ldr	r3, [sp, #0]
 800cd18:	444b      	add	r3, r9
 800cd1a:	9307      	str	r3, [sp, #28]
 800cd1c:	9b02      	ldr	r3, [sp, #8]
 800cd1e:	f003 0301 	and.w	r3, r3, #1
 800cd22:	46b8      	mov	r8, r7
 800cd24:	9306      	str	r3, [sp, #24]
 800cd26:	4607      	mov	r7, r0
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	4658      	mov	r0, fp
 800cd30:	9302      	str	r3, [sp, #8]
 800cd32:	f7ff fa69 	bl	800c208 <quorem>
 800cd36:	4603      	mov	r3, r0
 800cd38:	3330      	adds	r3, #48	; 0x30
 800cd3a:	9004      	str	r0, [sp, #16]
 800cd3c:	4641      	mov	r1, r8
 800cd3e:	4658      	mov	r0, fp
 800cd40:	9308      	str	r3, [sp, #32]
 800cd42:	f000 fb67 	bl	800d414 <__mcmp>
 800cd46:	463a      	mov	r2, r7
 800cd48:	4681      	mov	r9, r0
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f000 fb7d 	bl	800d44c <__mdiff>
 800cd52:	68c2      	ldr	r2, [r0, #12]
 800cd54:	9b08      	ldr	r3, [sp, #32]
 800cd56:	4605      	mov	r5, r0
 800cd58:	bb02      	cbnz	r2, 800cd9c <_dtoa_r+0xa7c>
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	4658      	mov	r0, fp
 800cd5e:	f000 fb59 	bl	800d414 <__mcmp>
 800cd62:	9b08      	ldr	r3, [sp, #32]
 800cd64:	4602      	mov	r2, r0
 800cd66:	4629      	mov	r1, r5
 800cd68:	4620      	mov	r0, r4
 800cd6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cd6e:	f000 f913 	bl	800cf98 <_Bfree>
 800cd72:	9b05      	ldr	r3, [sp, #20]
 800cd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd76:	9d01      	ldr	r5, [sp, #4]
 800cd78:	ea43 0102 	orr.w	r1, r3, r2
 800cd7c:	9b06      	ldr	r3, [sp, #24]
 800cd7e:	430b      	orrs	r3, r1
 800cd80:	9b08      	ldr	r3, [sp, #32]
 800cd82:	d10d      	bne.n	800cda0 <_dtoa_r+0xa80>
 800cd84:	2b39      	cmp	r3, #57	; 0x39
 800cd86:	d029      	beq.n	800cddc <_dtoa_r+0xabc>
 800cd88:	f1b9 0f00 	cmp.w	r9, #0
 800cd8c:	dd01      	ble.n	800cd92 <_dtoa_r+0xa72>
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	3331      	adds	r3, #49	; 0x31
 800cd92:	9a02      	ldr	r2, [sp, #8]
 800cd94:	7013      	strb	r3, [r2, #0]
 800cd96:	e774      	b.n	800cc82 <_dtoa_r+0x962>
 800cd98:	4638      	mov	r0, r7
 800cd9a:	e7b9      	b.n	800cd10 <_dtoa_r+0x9f0>
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	e7e2      	b.n	800cd66 <_dtoa_r+0xa46>
 800cda0:	f1b9 0f00 	cmp.w	r9, #0
 800cda4:	db06      	blt.n	800cdb4 <_dtoa_r+0xa94>
 800cda6:	9905      	ldr	r1, [sp, #20]
 800cda8:	ea41 0909 	orr.w	r9, r1, r9
 800cdac:	9906      	ldr	r1, [sp, #24]
 800cdae:	ea59 0101 	orrs.w	r1, r9, r1
 800cdb2:	d120      	bne.n	800cdf6 <_dtoa_r+0xad6>
 800cdb4:	2a00      	cmp	r2, #0
 800cdb6:	ddec      	ble.n	800cd92 <_dtoa_r+0xa72>
 800cdb8:	4659      	mov	r1, fp
 800cdba:	2201      	movs	r2, #1
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	f000 fabc 	bl	800d33c <__lshift>
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	4683      	mov	fp, r0
 800cdc8:	f000 fb24 	bl	800d414 <__mcmp>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	dc02      	bgt.n	800cdd8 <_dtoa_r+0xab8>
 800cdd2:	d1de      	bne.n	800cd92 <_dtoa_r+0xa72>
 800cdd4:	07da      	lsls	r2, r3, #31
 800cdd6:	d5dc      	bpl.n	800cd92 <_dtoa_r+0xa72>
 800cdd8:	2b39      	cmp	r3, #57	; 0x39
 800cdda:	d1d8      	bne.n	800cd8e <_dtoa_r+0xa6e>
 800cddc:	9a02      	ldr	r2, [sp, #8]
 800cdde:	2339      	movs	r3, #57	; 0x39
 800cde0:	7013      	strb	r3, [r2, #0]
 800cde2:	462b      	mov	r3, r5
 800cde4:	461d      	mov	r5, r3
 800cde6:	3b01      	subs	r3, #1
 800cde8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cdec:	2a39      	cmp	r2, #57	; 0x39
 800cdee:	d050      	beq.n	800ce92 <_dtoa_r+0xb72>
 800cdf0:	3201      	adds	r2, #1
 800cdf2:	701a      	strb	r2, [r3, #0]
 800cdf4:	e745      	b.n	800cc82 <_dtoa_r+0x962>
 800cdf6:	2a00      	cmp	r2, #0
 800cdf8:	dd03      	ble.n	800ce02 <_dtoa_r+0xae2>
 800cdfa:	2b39      	cmp	r3, #57	; 0x39
 800cdfc:	d0ee      	beq.n	800cddc <_dtoa_r+0xabc>
 800cdfe:	3301      	adds	r3, #1
 800ce00:	e7c7      	b.n	800cd92 <_dtoa_r+0xa72>
 800ce02:	9a01      	ldr	r2, [sp, #4]
 800ce04:	9907      	ldr	r1, [sp, #28]
 800ce06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce0a:	428a      	cmp	r2, r1
 800ce0c:	d02a      	beq.n	800ce64 <_dtoa_r+0xb44>
 800ce0e:	4659      	mov	r1, fp
 800ce10:	2300      	movs	r3, #0
 800ce12:	220a      	movs	r2, #10
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 f8e1 	bl	800cfdc <__multadd>
 800ce1a:	45b8      	cmp	r8, r7
 800ce1c:	4683      	mov	fp, r0
 800ce1e:	f04f 0300 	mov.w	r3, #0
 800ce22:	f04f 020a 	mov.w	r2, #10
 800ce26:	4641      	mov	r1, r8
 800ce28:	4620      	mov	r0, r4
 800ce2a:	d107      	bne.n	800ce3c <_dtoa_r+0xb1c>
 800ce2c:	f000 f8d6 	bl	800cfdc <__multadd>
 800ce30:	4680      	mov	r8, r0
 800ce32:	4607      	mov	r7, r0
 800ce34:	9b01      	ldr	r3, [sp, #4]
 800ce36:	3301      	adds	r3, #1
 800ce38:	9301      	str	r3, [sp, #4]
 800ce3a:	e775      	b.n	800cd28 <_dtoa_r+0xa08>
 800ce3c:	f000 f8ce 	bl	800cfdc <__multadd>
 800ce40:	4639      	mov	r1, r7
 800ce42:	4680      	mov	r8, r0
 800ce44:	2300      	movs	r3, #0
 800ce46:	220a      	movs	r2, #10
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f000 f8c7 	bl	800cfdc <__multadd>
 800ce4e:	4607      	mov	r7, r0
 800ce50:	e7f0      	b.n	800ce34 <_dtoa_r+0xb14>
 800ce52:	f1b9 0f00 	cmp.w	r9, #0
 800ce56:	9a00      	ldr	r2, [sp, #0]
 800ce58:	bfcc      	ite	gt
 800ce5a:	464d      	movgt	r5, r9
 800ce5c:	2501      	movle	r5, #1
 800ce5e:	4415      	add	r5, r2
 800ce60:	f04f 0800 	mov.w	r8, #0
 800ce64:	4659      	mov	r1, fp
 800ce66:	2201      	movs	r2, #1
 800ce68:	4620      	mov	r0, r4
 800ce6a:	9301      	str	r3, [sp, #4]
 800ce6c:	f000 fa66 	bl	800d33c <__lshift>
 800ce70:	4631      	mov	r1, r6
 800ce72:	4683      	mov	fp, r0
 800ce74:	f000 face 	bl	800d414 <__mcmp>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	dcb2      	bgt.n	800cde2 <_dtoa_r+0xac2>
 800ce7c:	d102      	bne.n	800ce84 <_dtoa_r+0xb64>
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	07db      	lsls	r3, r3, #31
 800ce82:	d4ae      	bmi.n	800cde2 <_dtoa_r+0xac2>
 800ce84:	462b      	mov	r3, r5
 800ce86:	461d      	mov	r5, r3
 800ce88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce8c:	2a30      	cmp	r2, #48	; 0x30
 800ce8e:	d0fa      	beq.n	800ce86 <_dtoa_r+0xb66>
 800ce90:	e6f7      	b.n	800cc82 <_dtoa_r+0x962>
 800ce92:	9a00      	ldr	r2, [sp, #0]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d1a5      	bne.n	800cde4 <_dtoa_r+0xac4>
 800ce98:	f10a 0a01 	add.w	sl, sl, #1
 800ce9c:	2331      	movs	r3, #49	; 0x31
 800ce9e:	e779      	b.n	800cd94 <_dtoa_r+0xa74>
 800cea0:	4b13      	ldr	r3, [pc, #76]	; (800cef0 <_dtoa_r+0xbd0>)
 800cea2:	f7ff baaf 	b.w	800c404 <_dtoa_r+0xe4>
 800cea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f47f aa86 	bne.w	800c3ba <_dtoa_r+0x9a>
 800ceae:	4b11      	ldr	r3, [pc, #68]	; (800cef4 <_dtoa_r+0xbd4>)
 800ceb0:	f7ff baa8 	b.w	800c404 <_dtoa_r+0xe4>
 800ceb4:	f1b9 0f00 	cmp.w	r9, #0
 800ceb8:	dc03      	bgt.n	800cec2 <_dtoa_r+0xba2>
 800ceba:	9b05      	ldr	r3, [sp, #20]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	f73f aec9 	bgt.w	800cc54 <_dtoa_r+0x934>
 800cec2:	9d00      	ldr	r5, [sp, #0]
 800cec4:	4631      	mov	r1, r6
 800cec6:	4658      	mov	r0, fp
 800cec8:	f7ff f99e 	bl	800c208 <quorem>
 800cecc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ced0:	f805 3b01 	strb.w	r3, [r5], #1
 800ced4:	9a00      	ldr	r2, [sp, #0]
 800ced6:	1aaa      	subs	r2, r5, r2
 800ced8:	4591      	cmp	r9, r2
 800ceda:	ddba      	ble.n	800ce52 <_dtoa_r+0xb32>
 800cedc:	4659      	mov	r1, fp
 800cede:	2300      	movs	r3, #0
 800cee0:	220a      	movs	r2, #10
 800cee2:	4620      	mov	r0, r4
 800cee4:	f000 f87a 	bl	800cfdc <__multadd>
 800cee8:	4683      	mov	fp, r0
 800ceea:	e7eb      	b.n	800cec4 <_dtoa_r+0xba4>
 800ceec:	0800e743 	.word	0x0800e743
 800cef0:	0800e69c 	.word	0x0800e69c
 800cef4:	0800e6c0 	.word	0x0800e6c0

0800cef8 <_localeconv_r>:
 800cef8:	4800      	ldr	r0, [pc, #0]	; (800cefc <_localeconv_r+0x4>)
 800cefa:	4770      	bx	lr
 800cefc:	200002e8 	.word	0x200002e8

0800cf00 <__malloc_lock>:
 800cf00:	4801      	ldr	r0, [pc, #4]	; (800cf08 <__malloc_lock+0x8>)
 800cf02:	f000 bd22 	b.w	800d94a <__retarget_lock_acquire_recursive>
 800cf06:	bf00      	nop
 800cf08:	20004e24 	.word	0x20004e24

0800cf0c <__malloc_unlock>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	; (800cf14 <__malloc_unlock+0x8>)
 800cf0e:	f000 bd1d 	b.w	800d94c <__retarget_lock_release_recursive>
 800cf12:	bf00      	nop
 800cf14:	20004e24 	.word	0x20004e24

0800cf18 <_Balloc>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	460d      	mov	r5, r1
 800cf20:	b976      	cbnz	r6, 800cf40 <_Balloc+0x28>
 800cf22:	2010      	movs	r0, #16
 800cf24:	f7fe fc06 	bl	800b734 <malloc>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	6260      	str	r0, [r4, #36]	; 0x24
 800cf2c:	b920      	cbnz	r0, 800cf38 <_Balloc+0x20>
 800cf2e:	4b18      	ldr	r3, [pc, #96]	; (800cf90 <_Balloc+0x78>)
 800cf30:	4818      	ldr	r0, [pc, #96]	; (800cf94 <_Balloc+0x7c>)
 800cf32:	2166      	movs	r1, #102	; 0x66
 800cf34:	f000 fcd8 	bl	800d8e8 <__assert_func>
 800cf38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf3c:	6006      	str	r6, [r0, #0]
 800cf3e:	60c6      	str	r6, [r0, #12]
 800cf40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf42:	68f3      	ldr	r3, [r6, #12]
 800cf44:	b183      	cbz	r3, 800cf68 <_Balloc+0x50>
 800cf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf4e:	b9b8      	cbnz	r0, 800cf80 <_Balloc+0x68>
 800cf50:	2101      	movs	r1, #1
 800cf52:	fa01 f605 	lsl.w	r6, r1, r5
 800cf56:	1d72      	adds	r2, r6, #5
 800cf58:	0092      	lsls	r2, r2, #2
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 fb5a 	bl	800d614 <_calloc_r>
 800cf60:	b160      	cbz	r0, 800cf7c <_Balloc+0x64>
 800cf62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf66:	e00e      	b.n	800cf86 <_Balloc+0x6e>
 800cf68:	2221      	movs	r2, #33	; 0x21
 800cf6a:	2104      	movs	r1, #4
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 fb51 	bl	800d614 <_calloc_r>
 800cf72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf74:	60f0      	str	r0, [r6, #12]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1e4      	bne.n	800cf46 <_Balloc+0x2e>
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}
 800cf80:	6802      	ldr	r2, [r0, #0]
 800cf82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf86:	2300      	movs	r3, #0
 800cf88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf8c:	e7f7      	b.n	800cf7e <_Balloc+0x66>
 800cf8e:	bf00      	nop
 800cf90:	0800e6cd 	.word	0x0800e6cd
 800cf94:	0800e754 	.word	0x0800e754

0800cf98 <_Bfree>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	b976      	cbnz	r6, 800cfc0 <_Bfree+0x28>
 800cfa2:	2010      	movs	r0, #16
 800cfa4:	f7fe fbc6 	bl	800b734 <malloc>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	6268      	str	r0, [r5, #36]	; 0x24
 800cfac:	b920      	cbnz	r0, 800cfb8 <_Bfree+0x20>
 800cfae:	4b09      	ldr	r3, [pc, #36]	; (800cfd4 <_Bfree+0x3c>)
 800cfb0:	4809      	ldr	r0, [pc, #36]	; (800cfd8 <_Bfree+0x40>)
 800cfb2:	218a      	movs	r1, #138	; 0x8a
 800cfb4:	f000 fc98 	bl	800d8e8 <__assert_func>
 800cfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfbc:	6006      	str	r6, [r0, #0]
 800cfbe:	60c6      	str	r6, [r0, #12]
 800cfc0:	b13c      	cbz	r4, 800cfd2 <_Bfree+0x3a>
 800cfc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfc4:	6862      	ldr	r2, [r4, #4]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfcc:	6021      	str	r1, [r4, #0]
 800cfce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfd2:	bd70      	pop	{r4, r5, r6, pc}
 800cfd4:	0800e6cd 	.word	0x0800e6cd
 800cfd8:	0800e754 	.word	0x0800e754

0800cfdc <__multadd>:
 800cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe0:	690e      	ldr	r6, [r1, #16]
 800cfe2:	4607      	mov	r7, r0
 800cfe4:	4698      	mov	r8, r3
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	f101 0014 	add.w	r0, r1, #20
 800cfec:	2300      	movs	r3, #0
 800cfee:	6805      	ldr	r5, [r0, #0]
 800cff0:	b2a9      	uxth	r1, r5
 800cff2:	fb02 8101 	mla	r1, r2, r1, r8
 800cff6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cffa:	0c2d      	lsrs	r5, r5, #16
 800cffc:	fb02 c505 	mla	r5, r2, r5, ip
 800d000:	b289      	uxth	r1, r1
 800d002:	3301      	adds	r3, #1
 800d004:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d008:	429e      	cmp	r6, r3
 800d00a:	f840 1b04 	str.w	r1, [r0], #4
 800d00e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d012:	dcec      	bgt.n	800cfee <__multadd+0x12>
 800d014:	f1b8 0f00 	cmp.w	r8, #0
 800d018:	d022      	beq.n	800d060 <__multadd+0x84>
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	42b3      	cmp	r3, r6
 800d01e:	dc19      	bgt.n	800d054 <__multadd+0x78>
 800d020:	6861      	ldr	r1, [r4, #4]
 800d022:	4638      	mov	r0, r7
 800d024:	3101      	adds	r1, #1
 800d026:	f7ff ff77 	bl	800cf18 <_Balloc>
 800d02a:	4605      	mov	r5, r0
 800d02c:	b928      	cbnz	r0, 800d03a <__multadd+0x5e>
 800d02e:	4602      	mov	r2, r0
 800d030:	4b0d      	ldr	r3, [pc, #52]	; (800d068 <__multadd+0x8c>)
 800d032:	480e      	ldr	r0, [pc, #56]	; (800d06c <__multadd+0x90>)
 800d034:	21b5      	movs	r1, #181	; 0xb5
 800d036:	f000 fc57 	bl	800d8e8 <__assert_func>
 800d03a:	6922      	ldr	r2, [r4, #16]
 800d03c:	3202      	adds	r2, #2
 800d03e:	f104 010c 	add.w	r1, r4, #12
 800d042:	0092      	lsls	r2, r2, #2
 800d044:	300c      	adds	r0, #12
 800d046:	f7fe fb85 	bl	800b754 <memcpy>
 800d04a:	4621      	mov	r1, r4
 800d04c:	4638      	mov	r0, r7
 800d04e:	f7ff ffa3 	bl	800cf98 <_Bfree>
 800d052:	462c      	mov	r4, r5
 800d054:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d058:	3601      	adds	r6, #1
 800d05a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d05e:	6126      	str	r6, [r4, #16]
 800d060:	4620      	mov	r0, r4
 800d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d066:	bf00      	nop
 800d068:	0800e743 	.word	0x0800e743
 800d06c:	0800e754 	.word	0x0800e754

0800d070 <__hi0bits>:
 800d070:	0c03      	lsrs	r3, r0, #16
 800d072:	041b      	lsls	r3, r3, #16
 800d074:	b9d3      	cbnz	r3, 800d0ac <__hi0bits+0x3c>
 800d076:	0400      	lsls	r0, r0, #16
 800d078:	2310      	movs	r3, #16
 800d07a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d07e:	bf04      	itt	eq
 800d080:	0200      	lsleq	r0, r0, #8
 800d082:	3308      	addeq	r3, #8
 800d084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d088:	bf04      	itt	eq
 800d08a:	0100      	lsleq	r0, r0, #4
 800d08c:	3304      	addeq	r3, #4
 800d08e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d092:	bf04      	itt	eq
 800d094:	0080      	lsleq	r0, r0, #2
 800d096:	3302      	addeq	r3, #2
 800d098:	2800      	cmp	r0, #0
 800d09a:	db05      	blt.n	800d0a8 <__hi0bits+0x38>
 800d09c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0a0:	f103 0301 	add.w	r3, r3, #1
 800d0a4:	bf08      	it	eq
 800d0a6:	2320      	moveq	r3, #32
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	4770      	bx	lr
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	e7e4      	b.n	800d07a <__hi0bits+0xa>

0800d0b0 <__lo0bits>:
 800d0b0:	6803      	ldr	r3, [r0, #0]
 800d0b2:	f013 0207 	ands.w	r2, r3, #7
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	d00b      	beq.n	800d0d2 <__lo0bits+0x22>
 800d0ba:	07da      	lsls	r2, r3, #31
 800d0bc:	d424      	bmi.n	800d108 <__lo0bits+0x58>
 800d0be:	0798      	lsls	r0, r3, #30
 800d0c0:	bf49      	itett	mi
 800d0c2:	085b      	lsrmi	r3, r3, #1
 800d0c4:	089b      	lsrpl	r3, r3, #2
 800d0c6:	2001      	movmi	r0, #1
 800d0c8:	600b      	strmi	r3, [r1, #0]
 800d0ca:	bf5c      	itt	pl
 800d0cc:	600b      	strpl	r3, [r1, #0]
 800d0ce:	2002      	movpl	r0, #2
 800d0d0:	4770      	bx	lr
 800d0d2:	b298      	uxth	r0, r3
 800d0d4:	b9b0      	cbnz	r0, 800d104 <__lo0bits+0x54>
 800d0d6:	0c1b      	lsrs	r3, r3, #16
 800d0d8:	2010      	movs	r0, #16
 800d0da:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d0de:	bf04      	itt	eq
 800d0e0:	0a1b      	lsreq	r3, r3, #8
 800d0e2:	3008      	addeq	r0, #8
 800d0e4:	071a      	lsls	r2, r3, #28
 800d0e6:	bf04      	itt	eq
 800d0e8:	091b      	lsreq	r3, r3, #4
 800d0ea:	3004      	addeq	r0, #4
 800d0ec:	079a      	lsls	r2, r3, #30
 800d0ee:	bf04      	itt	eq
 800d0f0:	089b      	lsreq	r3, r3, #2
 800d0f2:	3002      	addeq	r0, #2
 800d0f4:	07da      	lsls	r2, r3, #31
 800d0f6:	d403      	bmi.n	800d100 <__lo0bits+0x50>
 800d0f8:	085b      	lsrs	r3, r3, #1
 800d0fa:	f100 0001 	add.w	r0, r0, #1
 800d0fe:	d005      	beq.n	800d10c <__lo0bits+0x5c>
 800d100:	600b      	str	r3, [r1, #0]
 800d102:	4770      	bx	lr
 800d104:	4610      	mov	r0, r2
 800d106:	e7e8      	b.n	800d0da <__lo0bits+0x2a>
 800d108:	2000      	movs	r0, #0
 800d10a:	4770      	bx	lr
 800d10c:	2020      	movs	r0, #32
 800d10e:	4770      	bx	lr

0800d110 <__i2b>:
 800d110:	b510      	push	{r4, lr}
 800d112:	460c      	mov	r4, r1
 800d114:	2101      	movs	r1, #1
 800d116:	f7ff feff 	bl	800cf18 <_Balloc>
 800d11a:	4602      	mov	r2, r0
 800d11c:	b928      	cbnz	r0, 800d12a <__i2b+0x1a>
 800d11e:	4b05      	ldr	r3, [pc, #20]	; (800d134 <__i2b+0x24>)
 800d120:	4805      	ldr	r0, [pc, #20]	; (800d138 <__i2b+0x28>)
 800d122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d126:	f000 fbdf 	bl	800d8e8 <__assert_func>
 800d12a:	2301      	movs	r3, #1
 800d12c:	6144      	str	r4, [r0, #20]
 800d12e:	6103      	str	r3, [r0, #16]
 800d130:	bd10      	pop	{r4, pc}
 800d132:	bf00      	nop
 800d134:	0800e743 	.word	0x0800e743
 800d138:	0800e754 	.word	0x0800e754

0800d13c <__multiply>:
 800d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	4614      	mov	r4, r2
 800d142:	690a      	ldr	r2, [r1, #16]
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	429a      	cmp	r2, r3
 800d148:	bfb8      	it	lt
 800d14a:	460b      	movlt	r3, r1
 800d14c:	460d      	mov	r5, r1
 800d14e:	bfbc      	itt	lt
 800d150:	4625      	movlt	r5, r4
 800d152:	461c      	movlt	r4, r3
 800d154:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d158:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d15c:	68ab      	ldr	r3, [r5, #8]
 800d15e:	6869      	ldr	r1, [r5, #4]
 800d160:	eb0a 0709 	add.w	r7, sl, r9
 800d164:	42bb      	cmp	r3, r7
 800d166:	b085      	sub	sp, #20
 800d168:	bfb8      	it	lt
 800d16a:	3101      	addlt	r1, #1
 800d16c:	f7ff fed4 	bl	800cf18 <_Balloc>
 800d170:	b930      	cbnz	r0, 800d180 <__multiply+0x44>
 800d172:	4602      	mov	r2, r0
 800d174:	4b42      	ldr	r3, [pc, #264]	; (800d280 <__multiply+0x144>)
 800d176:	4843      	ldr	r0, [pc, #268]	; (800d284 <__multiply+0x148>)
 800d178:	f240 115d 	movw	r1, #349	; 0x15d
 800d17c:	f000 fbb4 	bl	800d8e8 <__assert_func>
 800d180:	f100 0614 	add.w	r6, r0, #20
 800d184:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d188:	4633      	mov	r3, r6
 800d18a:	2200      	movs	r2, #0
 800d18c:	4543      	cmp	r3, r8
 800d18e:	d31e      	bcc.n	800d1ce <__multiply+0x92>
 800d190:	f105 0c14 	add.w	ip, r5, #20
 800d194:	f104 0314 	add.w	r3, r4, #20
 800d198:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d19c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d1a0:	9202      	str	r2, [sp, #8]
 800d1a2:	ebac 0205 	sub.w	r2, ip, r5
 800d1a6:	3a15      	subs	r2, #21
 800d1a8:	f022 0203 	bic.w	r2, r2, #3
 800d1ac:	3204      	adds	r2, #4
 800d1ae:	f105 0115 	add.w	r1, r5, #21
 800d1b2:	458c      	cmp	ip, r1
 800d1b4:	bf38      	it	cc
 800d1b6:	2204      	movcc	r2, #4
 800d1b8:	9201      	str	r2, [sp, #4]
 800d1ba:	9a02      	ldr	r2, [sp, #8]
 800d1bc:	9303      	str	r3, [sp, #12]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d808      	bhi.n	800d1d4 <__multiply+0x98>
 800d1c2:	2f00      	cmp	r7, #0
 800d1c4:	dc55      	bgt.n	800d272 <__multiply+0x136>
 800d1c6:	6107      	str	r7, [r0, #16]
 800d1c8:	b005      	add	sp, #20
 800d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ce:	f843 2b04 	str.w	r2, [r3], #4
 800d1d2:	e7db      	b.n	800d18c <__multiply+0x50>
 800d1d4:	f8b3 a000 	ldrh.w	sl, [r3]
 800d1d8:	f1ba 0f00 	cmp.w	sl, #0
 800d1dc:	d020      	beq.n	800d220 <__multiply+0xe4>
 800d1de:	f105 0e14 	add.w	lr, r5, #20
 800d1e2:	46b1      	mov	r9, r6
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d1ea:	f8d9 b000 	ldr.w	fp, [r9]
 800d1ee:	b2a1      	uxth	r1, r4
 800d1f0:	fa1f fb8b 	uxth.w	fp, fp
 800d1f4:	fb0a b101 	mla	r1, sl, r1, fp
 800d1f8:	4411      	add	r1, r2
 800d1fa:	f8d9 2000 	ldr.w	r2, [r9]
 800d1fe:	0c24      	lsrs	r4, r4, #16
 800d200:	0c12      	lsrs	r2, r2, #16
 800d202:	fb0a 2404 	mla	r4, sl, r4, r2
 800d206:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d20a:	b289      	uxth	r1, r1
 800d20c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d210:	45f4      	cmp	ip, lr
 800d212:	f849 1b04 	str.w	r1, [r9], #4
 800d216:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d21a:	d8e4      	bhi.n	800d1e6 <__multiply+0xaa>
 800d21c:	9901      	ldr	r1, [sp, #4]
 800d21e:	5072      	str	r2, [r6, r1]
 800d220:	9a03      	ldr	r2, [sp, #12]
 800d222:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d226:	3304      	adds	r3, #4
 800d228:	f1b9 0f00 	cmp.w	r9, #0
 800d22c:	d01f      	beq.n	800d26e <__multiply+0x132>
 800d22e:	6834      	ldr	r4, [r6, #0]
 800d230:	f105 0114 	add.w	r1, r5, #20
 800d234:	46b6      	mov	lr, r6
 800d236:	f04f 0a00 	mov.w	sl, #0
 800d23a:	880a      	ldrh	r2, [r1, #0]
 800d23c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d240:	fb09 b202 	mla	r2, r9, r2, fp
 800d244:	4492      	add	sl, r2
 800d246:	b2a4      	uxth	r4, r4
 800d248:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d24c:	f84e 4b04 	str.w	r4, [lr], #4
 800d250:	f851 4b04 	ldr.w	r4, [r1], #4
 800d254:	f8be 2000 	ldrh.w	r2, [lr]
 800d258:	0c24      	lsrs	r4, r4, #16
 800d25a:	fb09 2404 	mla	r4, r9, r4, r2
 800d25e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d262:	458c      	cmp	ip, r1
 800d264:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d268:	d8e7      	bhi.n	800d23a <__multiply+0xfe>
 800d26a:	9a01      	ldr	r2, [sp, #4]
 800d26c:	50b4      	str	r4, [r6, r2]
 800d26e:	3604      	adds	r6, #4
 800d270:	e7a3      	b.n	800d1ba <__multiply+0x7e>
 800d272:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1a5      	bne.n	800d1c6 <__multiply+0x8a>
 800d27a:	3f01      	subs	r7, #1
 800d27c:	e7a1      	b.n	800d1c2 <__multiply+0x86>
 800d27e:	bf00      	nop
 800d280:	0800e743 	.word	0x0800e743
 800d284:	0800e754 	.word	0x0800e754

0800d288 <__pow5mult>:
 800d288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d28c:	4615      	mov	r5, r2
 800d28e:	f012 0203 	ands.w	r2, r2, #3
 800d292:	4606      	mov	r6, r0
 800d294:	460f      	mov	r7, r1
 800d296:	d007      	beq.n	800d2a8 <__pow5mult+0x20>
 800d298:	4c25      	ldr	r4, [pc, #148]	; (800d330 <__pow5mult+0xa8>)
 800d29a:	3a01      	subs	r2, #1
 800d29c:	2300      	movs	r3, #0
 800d29e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2a2:	f7ff fe9b 	bl	800cfdc <__multadd>
 800d2a6:	4607      	mov	r7, r0
 800d2a8:	10ad      	asrs	r5, r5, #2
 800d2aa:	d03d      	beq.n	800d328 <__pow5mult+0xa0>
 800d2ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2ae:	b97c      	cbnz	r4, 800d2d0 <__pow5mult+0x48>
 800d2b0:	2010      	movs	r0, #16
 800d2b2:	f7fe fa3f 	bl	800b734 <malloc>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	6270      	str	r0, [r6, #36]	; 0x24
 800d2ba:	b928      	cbnz	r0, 800d2c8 <__pow5mult+0x40>
 800d2bc:	4b1d      	ldr	r3, [pc, #116]	; (800d334 <__pow5mult+0xac>)
 800d2be:	481e      	ldr	r0, [pc, #120]	; (800d338 <__pow5mult+0xb0>)
 800d2c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d2c4:	f000 fb10 	bl	800d8e8 <__assert_func>
 800d2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2cc:	6004      	str	r4, [r0, #0]
 800d2ce:	60c4      	str	r4, [r0, #12]
 800d2d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d2d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2d8:	b94c      	cbnz	r4, 800d2ee <__pow5mult+0x66>
 800d2da:	f240 2171 	movw	r1, #625	; 0x271
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f7ff ff16 	bl	800d110 <__i2b>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	f04f 0900 	mov.w	r9, #0
 800d2f2:	07eb      	lsls	r3, r5, #31
 800d2f4:	d50a      	bpl.n	800d30c <__pow5mult+0x84>
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	4622      	mov	r2, r4
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f7ff ff1e 	bl	800d13c <__multiply>
 800d300:	4639      	mov	r1, r7
 800d302:	4680      	mov	r8, r0
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff fe47 	bl	800cf98 <_Bfree>
 800d30a:	4647      	mov	r7, r8
 800d30c:	106d      	asrs	r5, r5, #1
 800d30e:	d00b      	beq.n	800d328 <__pow5mult+0xa0>
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	b938      	cbnz	r0, 800d324 <__pow5mult+0x9c>
 800d314:	4622      	mov	r2, r4
 800d316:	4621      	mov	r1, r4
 800d318:	4630      	mov	r0, r6
 800d31a:	f7ff ff0f 	bl	800d13c <__multiply>
 800d31e:	6020      	str	r0, [r4, #0]
 800d320:	f8c0 9000 	str.w	r9, [r0]
 800d324:	4604      	mov	r4, r0
 800d326:	e7e4      	b.n	800d2f2 <__pow5mult+0x6a>
 800d328:	4638      	mov	r0, r7
 800d32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32e:	bf00      	nop
 800d330:	0800e8a8 	.word	0x0800e8a8
 800d334:	0800e6cd 	.word	0x0800e6cd
 800d338:	0800e754 	.word	0x0800e754

0800d33c <__lshift>:
 800d33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	460c      	mov	r4, r1
 800d342:	6849      	ldr	r1, [r1, #4]
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d34a:	68a3      	ldr	r3, [r4, #8]
 800d34c:	4607      	mov	r7, r0
 800d34e:	4691      	mov	r9, r2
 800d350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d354:	f108 0601 	add.w	r6, r8, #1
 800d358:	42b3      	cmp	r3, r6
 800d35a:	db0b      	blt.n	800d374 <__lshift+0x38>
 800d35c:	4638      	mov	r0, r7
 800d35e:	f7ff fddb 	bl	800cf18 <_Balloc>
 800d362:	4605      	mov	r5, r0
 800d364:	b948      	cbnz	r0, 800d37a <__lshift+0x3e>
 800d366:	4602      	mov	r2, r0
 800d368:	4b28      	ldr	r3, [pc, #160]	; (800d40c <__lshift+0xd0>)
 800d36a:	4829      	ldr	r0, [pc, #164]	; (800d410 <__lshift+0xd4>)
 800d36c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d370:	f000 faba 	bl	800d8e8 <__assert_func>
 800d374:	3101      	adds	r1, #1
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	e7ee      	b.n	800d358 <__lshift+0x1c>
 800d37a:	2300      	movs	r3, #0
 800d37c:	f100 0114 	add.w	r1, r0, #20
 800d380:	f100 0210 	add.w	r2, r0, #16
 800d384:	4618      	mov	r0, r3
 800d386:	4553      	cmp	r3, sl
 800d388:	db33      	blt.n	800d3f2 <__lshift+0xb6>
 800d38a:	6920      	ldr	r0, [r4, #16]
 800d38c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d390:	f104 0314 	add.w	r3, r4, #20
 800d394:	f019 091f 	ands.w	r9, r9, #31
 800d398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d39c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3a0:	d02b      	beq.n	800d3fa <__lshift+0xbe>
 800d3a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d3a6:	468a      	mov	sl, r1
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	6818      	ldr	r0, [r3, #0]
 800d3ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d3b0:	4302      	orrs	r2, r0
 800d3b2:	f84a 2b04 	str.w	r2, [sl], #4
 800d3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ba:	459c      	cmp	ip, r3
 800d3bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3c0:	d8f3      	bhi.n	800d3aa <__lshift+0x6e>
 800d3c2:	ebac 0304 	sub.w	r3, ip, r4
 800d3c6:	3b15      	subs	r3, #21
 800d3c8:	f023 0303 	bic.w	r3, r3, #3
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	f104 0015 	add.w	r0, r4, #21
 800d3d2:	4584      	cmp	ip, r0
 800d3d4:	bf38      	it	cc
 800d3d6:	2304      	movcc	r3, #4
 800d3d8:	50ca      	str	r2, [r1, r3]
 800d3da:	b10a      	cbz	r2, 800d3e0 <__lshift+0xa4>
 800d3dc:	f108 0602 	add.w	r6, r8, #2
 800d3e0:	3e01      	subs	r6, #1
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	612e      	str	r6, [r5, #16]
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	f7ff fdd6 	bl	800cf98 <_Bfree>
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	e7c5      	b.n	800d386 <__lshift+0x4a>
 800d3fa:	3904      	subs	r1, #4
 800d3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d400:	f841 2f04 	str.w	r2, [r1, #4]!
 800d404:	459c      	cmp	ip, r3
 800d406:	d8f9      	bhi.n	800d3fc <__lshift+0xc0>
 800d408:	e7ea      	b.n	800d3e0 <__lshift+0xa4>
 800d40a:	bf00      	nop
 800d40c:	0800e743 	.word	0x0800e743
 800d410:	0800e754 	.word	0x0800e754

0800d414 <__mcmp>:
 800d414:	b530      	push	{r4, r5, lr}
 800d416:	6902      	ldr	r2, [r0, #16]
 800d418:	690c      	ldr	r4, [r1, #16]
 800d41a:	1b12      	subs	r2, r2, r4
 800d41c:	d10e      	bne.n	800d43c <__mcmp+0x28>
 800d41e:	f100 0314 	add.w	r3, r0, #20
 800d422:	3114      	adds	r1, #20
 800d424:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d428:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d42c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d430:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d434:	42a5      	cmp	r5, r4
 800d436:	d003      	beq.n	800d440 <__mcmp+0x2c>
 800d438:	d305      	bcc.n	800d446 <__mcmp+0x32>
 800d43a:	2201      	movs	r2, #1
 800d43c:	4610      	mov	r0, r2
 800d43e:	bd30      	pop	{r4, r5, pc}
 800d440:	4283      	cmp	r3, r0
 800d442:	d3f3      	bcc.n	800d42c <__mcmp+0x18>
 800d444:	e7fa      	b.n	800d43c <__mcmp+0x28>
 800d446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d44a:	e7f7      	b.n	800d43c <__mcmp+0x28>

0800d44c <__mdiff>:
 800d44c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	460c      	mov	r4, r1
 800d452:	4606      	mov	r6, r0
 800d454:	4611      	mov	r1, r2
 800d456:	4620      	mov	r0, r4
 800d458:	4617      	mov	r7, r2
 800d45a:	f7ff ffdb 	bl	800d414 <__mcmp>
 800d45e:	1e05      	subs	r5, r0, #0
 800d460:	d110      	bne.n	800d484 <__mdiff+0x38>
 800d462:	4629      	mov	r1, r5
 800d464:	4630      	mov	r0, r6
 800d466:	f7ff fd57 	bl	800cf18 <_Balloc>
 800d46a:	b930      	cbnz	r0, 800d47a <__mdiff+0x2e>
 800d46c:	4b39      	ldr	r3, [pc, #228]	; (800d554 <__mdiff+0x108>)
 800d46e:	4602      	mov	r2, r0
 800d470:	f240 2132 	movw	r1, #562	; 0x232
 800d474:	4838      	ldr	r0, [pc, #224]	; (800d558 <__mdiff+0x10c>)
 800d476:	f000 fa37 	bl	800d8e8 <__assert_func>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d484:	bfa4      	itt	ge
 800d486:	463b      	movge	r3, r7
 800d488:	4627      	movge	r7, r4
 800d48a:	4630      	mov	r0, r6
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	bfa6      	itte	ge
 800d490:	461c      	movge	r4, r3
 800d492:	2500      	movge	r5, #0
 800d494:	2501      	movlt	r5, #1
 800d496:	f7ff fd3f 	bl	800cf18 <_Balloc>
 800d49a:	b920      	cbnz	r0, 800d4a6 <__mdiff+0x5a>
 800d49c:	4b2d      	ldr	r3, [pc, #180]	; (800d554 <__mdiff+0x108>)
 800d49e:	4602      	mov	r2, r0
 800d4a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d4a4:	e7e6      	b.n	800d474 <__mdiff+0x28>
 800d4a6:	693e      	ldr	r6, [r7, #16]
 800d4a8:	60c5      	str	r5, [r0, #12]
 800d4aa:	6925      	ldr	r5, [r4, #16]
 800d4ac:	f107 0114 	add.w	r1, r7, #20
 800d4b0:	f104 0914 	add.w	r9, r4, #20
 800d4b4:	f100 0e14 	add.w	lr, r0, #20
 800d4b8:	f107 0210 	add.w	r2, r7, #16
 800d4bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d4c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d4c4:	46f2      	mov	sl, lr
 800d4c6:	2700      	movs	r7, #0
 800d4c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d4cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d4d0:	fa1f f883 	uxth.w	r8, r3
 800d4d4:	fa17 f78b 	uxtah	r7, r7, fp
 800d4d8:	0c1b      	lsrs	r3, r3, #16
 800d4da:	eba7 0808 	sub.w	r8, r7, r8
 800d4de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d4e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d4e6:	fa1f f888 	uxth.w	r8, r8
 800d4ea:	141f      	asrs	r7, r3, #16
 800d4ec:	454d      	cmp	r5, r9
 800d4ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d4f2:	f84a 3b04 	str.w	r3, [sl], #4
 800d4f6:	d8e7      	bhi.n	800d4c8 <__mdiff+0x7c>
 800d4f8:	1b2b      	subs	r3, r5, r4
 800d4fa:	3b15      	subs	r3, #21
 800d4fc:	f023 0303 	bic.w	r3, r3, #3
 800d500:	3304      	adds	r3, #4
 800d502:	3415      	adds	r4, #21
 800d504:	42a5      	cmp	r5, r4
 800d506:	bf38      	it	cc
 800d508:	2304      	movcc	r3, #4
 800d50a:	4419      	add	r1, r3
 800d50c:	4473      	add	r3, lr
 800d50e:	469e      	mov	lr, r3
 800d510:	460d      	mov	r5, r1
 800d512:	4565      	cmp	r5, ip
 800d514:	d30e      	bcc.n	800d534 <__mdiff+0xe8>
 800d516:	f10c 0203 	add.w	r2, ip, #3
 800d51a:	1a52      	subs	r2, r2, r1
 800d51c:	f022 0203 	bic.w	r2, r2, #3
 800d520:	3903      	subs	r1, #3
 800d522:	458c      	cmp	ip, r1
 800d524:	bf38      	it	cc
 800d526:	2200      	movcc	r2, #0
 800d528:	441a      	add	r2, r3
 800d52a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d52e:	b17b      	cbz	r3, 800d550 <__mdiff+0x104>
 800d530:	6106      	str	r6, [r0, #16]
 800d532:	e7a5      	b.n	800d480 <__mdiff+0x34>
 800d534:	f855 8b04 	ldr.w	r8, [r5], #4
 800d538:	fa17 f488 	uxtah	r4, r7, r8
 800d53c:	1422      	asrs	r2, r4, #16
 800d53e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d542:	b2a4      	uxth	r4, r4
 800d544:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d548:	f84e 4b04 	str.w	r4, [lr], #4
 800d54c:	1417      	asrs	r7, r2, #16
 800d54e:	e7e0      	b.n	800d512 <__mdiff+0xc6>
 800d550:	3e01      	subs	r6, #1
 800d552:	e7ea      	b.n	800d52a <__mdiff+0xde>
 800d554:	0800e743 	.word	0x0800e743
 800d558:	0800e754 	.word	0x0800e754

0800d55c <__d2b>:
 800d55c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d560:	4689      	mov	r9, r1
 800d562:	2101      	movs	r1, #1
 800d564:	ec57 6b10 	vmov	r6, r7, d0
 800d568:	4690      	mov	r8, r2
 800d56a:	f7ff fcd5 	bl	800cf18 <_Balloc>
 800d56e:	4604      	mov	r4, r0
 800d570:	b930      	cbnz	r0, 800d580 <__d2b+0x24>
 800d572:	4602      	mov	r2, r0
 800d574:	4b25      	ldr	r3, [pc, #148]	; (800d60c <__d2b+0xb0>)
 800d576:	4826      	ldr	r0, [pc, #152]	; (800d610 <__d2b+0xb4>)
 800d578:	f240 310a 	movw	r1, #778	; 0x30a
 800d57c:	f000 f9b4 	bl	800d8e8 <__assert_func>
 800d580:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d584:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d588:	bb35      	cbnz	r5, 800d5d8 <__d2b+0x7c>
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	d028      	beq.n	800d5e2 <__d2b+0x86>
 800d590:	4668      	mov	r0, sp
 800d592:	9600      	str	r6, [sp, #0]
 800d594:	f7ff fd8c 	bl	800d0b0 <__lo0bits>
 800d598:	9900      	ldr	r1, [sp, #0]
 800d59a:	b300      	cbz	r0, 800d5de <__d2b+0x82>
 800d59c:	9a01      	ldr	r2, [sp, #4]
 800d59e:	f1c0 0320 	rsb	r3, r0, #32
 800d5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5a6:	430b      	orrs	r3, r1
 800d5a8:	40c2      	lsrs	r2, r0
 800d5aa:	6163      	str	r3, [r4, #20]
 800d5ac:	9201      	str	r2, [sp, #4]
 800d5ae:	9b01      	ldr	r3, [sp, #4]
 800d5b0:	61a3      	str	r3, [r4, #24]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	bf14      	ite	ne
 800d5b6:	2202      	movne	r2, #2
 800d5b8:	2201      	moveq	r2, #1
 800d5ba:	6122      	str	r2, [r4, #16]
 800d5bc:	b1d5      	cbz	r5, 800d5f4 <__d2b+0x98>
 800d5be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d5c2:	4405      	add	r5, r0
 800d5c4:	f8c9 5000 	str.w	r5, [r9]
 800d5c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d5cc:	f8c8 0000 	str.w	r0, [r8]
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	b003      	add	sp, #12
 800d5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5dc:	e7d5      	b.n	800d58a <__d2b+0x2e>
 800d5de:	6161      	str	r1, [r4, #20]
 800d5e0:	e7e5      	b.n	800d5ae <__d2b+0x52>
 800d5e2:	a801      	add	r0, sp, #4
 800d5e4:	f7ff fd64 	bl	800d0b0 <__lo0bits>
 800d5e8:	9b01      	ldr	r3, [sp, #4]
 800d5ea:	6163      	str	r3, [r4, #20]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	6122      	str	r2, [r4, #16]
 800d5f0:	3020      	adds	r0, #32
 800d5f2:	e7e3      	b.n	800d5bc <__d2b+0x60>
 800d5f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d5fc:	f8c9 0000 	str.w	r0, [r9]
 800d600:	6918      	ldr	r0, [r3, #16]
 800d602:	f7ff fd35 	bl	800d070 <__hi0bits>
 800d606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d60a:	e7df      	b.n	800d5cc <__d2b+0x70>
 800d60c:	0800e743 	.word	0x0800e743
 800d610:	0800e754 	.word	0x0800e754

0800d614 <_calloc_r>:
 800d614:	b513      	push	{r0, r1, r4, lr}
 800d616:	434a      	muls	r2, r1
 800d618:	4611      	mov	r1, r2
 800d61a:	9201      	str	r2, [sp, #4]
 800d61c:	f7fe f900 	bl	800b820 <_malloc_r>
 800d620:	4604      	mov	r4, r0
 800d622:	b118      	cbz	r0, 800d62c <_calloc_r+0x18>
 800d624:	9a01      	ldr	r2, [sp, #4]
 800d626:	2100      	movs	r1, #0
 800d628:	f7fe f8a2 	bl	800b770 <memset>
 800d62c:	4620      	mov	r0, r4
 800d62e:	b002      	add	sp, #8
 800d630:	bd10      	pop	{r4, pc}

0800d632 <__ssputs_r>:
 800d632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d636:	688e      	ldr	r6, [r1, #8]
 800d638:	429e      	cmp	r6, r3
 800d63a:	4682      	mov	sl, r0
 800d63c:	460c      	mov	r4, r1
 800d63e:	4690      	mov	r8, r2
 800d640:	461f      	mov	r7, r3
 800d642:	d838      	bhi.n	800d6b6 <__ssputs_r+0x84>
 800d644:	898a      	ldrh	r2, [r1, #12]
 800d646:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d64a:	d032      	beq.n	800d6b2 <__ssputs_r+0x80>
 800d64c:	6825      	ldr	r5, [r4, #0]
 800d64e:	6909      	ldr	r1, [r1, #16]
 800d650:	eba5 0901 	sub.w	r9, r5, r1
 800d654:	6965      	ldr	r5, [r4, #20]
 800d656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d65a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d65e:	3301      	adds	r3, #1
 800d660:	444b      	add	r3, r9
 800d662:	106d      	asrs	r5, r5, #1
 800d664:	429d      	cmp	r5, r3
 800d666:	bf38      	it	cc
 800d668:	461d      	movcc	r5, r3
 800d66a:	0553      	lsls	r3, r2, #21
 800d66c:	d531      	bpl.n	800d6d2 <__ssputs_r+0xa0>
 800d66e:	4629      	mov	r1, r5
 800d670:	f7fe f8d6 	bl	800b820 <_malloc_r>
 800d674:	4606      	mov	r6, r0
 800d676:	b950      	cbnz	r0, 800d68e <__ssputs_r+0x5c>
 800d678:	230c      	movs	r3, #12
 800d67a:	f8ca 3000 	str.w	r3, [sl]
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d684:	81a3      	strh	r3, [r4, #12]
 800d686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68e:	6921      	ldr	r1, [r4, #16]
 800d690:	464a      	mov	r2, r9
 800d692:	f7fe f85f 	bl	800b754 <memcpy>
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d69c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6a0:	81a3      	strh	r3, [r4, #12]
 800d6a2:	6126      	str	r6, [r4, #16]
 800d6a4:	6165      	str	r5, [r4, #20]
 800d6a6:	444e      	add	r6, r9
 800d6a8:	eba5 0509 	sub.w	r5, r5, r9
 800d6ac:	6026      	str	r6, [r4, #0]
 800d6ae:	60a5      	str	r5, [r4, #8]
 800d6b0:	463e      	mov	r6, r7
 800d6b2:	42be      	cmp	r6, r7
 800d6b4:	d900      	bls.n	800d6b8 <__ssputs_r+0x86>
 800d6b6:	463e      	mov	r6, r7
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	6820      	ldr	r0, [r4, #0]
 800d6bc:	4641      	mov	r1, r8
 800d6be:	f000 f958 	bl	800d972 <memmove>
 800d6c2:	68a3      	ldr	r3, [r4, #8]
 800d6c4:	6822      	ldr	r2, [r4, #0]
 800d6c6:	1b9b      	subs	r3, r3, r6
 800d6c8:	4432      	add	r2, r6
 800d6ca:	60a3      	str	r3, [r4, #8]
 800d6cc:	6022      	str	r2, [r4, #0]
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	e7db      	b.n	800d68a <__ssputs_r+0x58>
 800d6d2:	462a      	mov	r2, r5
 800d6d4:	f000 f967 	bl	800d9a6 <_realloc_r>
 800d6d8:	4606      	mov	r6, r0
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d1e1      	bne.n	800d6a2 <__ssputs_r+0x70>
 800d6de:	6921      	ldr	r1, [r4, #16]
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	f7fe f84d 	bl	800b780 <_free_r>
 800d6e6:	e7c7      	b.n	800d678 <__ssputs_r+0x46>

0800d6e8 <_svfiprintf_r>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	4698      	mov	r8, r3
 800d6ee:	898b      	ldrh	r3, [r1, #12]
 800d6f0:	061b      	lsls	r3, r3, #24
 800d6f2:	b09d      	sub	sp, #116	; 0x74
 800d6f4:	4607      	mov	r7, r0
 800d6f6:	460d      	mov	r5, r1
 800d6f8:	4614      	mov	r4, r2
 800d6fa:	d50e      	bpl.n	800d71a <_svfiprintf_r+0x32>
 800d6fc:	690b      	ldr	r3, [r1, #16]
 800d6fe:	b963      	cbnz	r3, 800d71a <_svfiprintf_r+0x32>
 800d700:	2140      	movs	r1, #64	; 0x40
 800d702:	f7fe f88d 	bl	800b820 <_malloc_r>
 800d706:	6028      	str	r0, [r5, #0]
 800d708:	6128      	str	r0, [r5, #16]
 800d70a:	b920      	cbnz	r0, 800d716 <_svfiprintf_r+0x2e>
 800d70c:	230c      	movs	r3, #12
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d714:	e0d1      	b.n	800d8ba <_svfiprintf_r+0x1d2>
 800d716:	2340      	movs	r3, #64	; 0x40
 800d718:	616b      	str	r3, [r5, #20]
 800d71a:	2300      	movs	r3, #0
 800d71c:	9309      	str	r3, [sp, #36]	; 0x24
 800d71e:	2320      	movs	r3, #32
 800d720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d724:	f8cd 800c 	str.w	r8, [sp, #12]
 800d728:	2330      	movs	r3, #48	; 0x30
 800d72a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8d4 <_svfiprintf_r+0x1ec>
 800d72e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d732:	f04f 0901 	mov.w	r9, #1
 800d736:	4623      	mov	r3, r4
 800d738:	469a      	mov	sl, r3
 800d73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d73e:	b10a      	cbz	r2, 800d744 <_svfiprintf_r+0x5c>
 800d740:	2a25      	cmp	r2, #37	; 0x25
 800d742:	d1f9      	bne.n	800d738 <_svfiprintf_r+0x50>
 800d744:	ebba 0b04 	subs.w	fp, sl, r4
 800d748:	d00b      	beq.n	800d762 <_svfiprintf_r+0x7a>
 800d74a:	465b      	mov	r3, fp
 800d74c:	4622      	mov	r2, r4
 800d74e:	4629      	mov	r1, r5
 800d750:	4638      	mov	r0, r7
 800d752:	f7ff ff6e 	bl	800d632 <__ssputs_r>
 800d756:	3001      	adds	r0, #1
 800d758:	f000 80aa 	beq.w	800d8b0 <_svfiprintf_r+0x1c8>
 800d75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d75e:	445a      	add	r2, fp
 800d760:	9209      	str	r2, [sp, #36]	; 0x24
 800d762:	f89a 3000 	ldrb.w	r3, [sl]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 80a2 	beq.w	800d8b0 <_svfiprintf_r+0x1c8>
 800d76c:	2300      	movs	r3, #0
 800d76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d776:	f10a 0a01 	add.w	sl, sl, #1
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	9307      	str	r3, [sp, #28]
 800d77e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d782:	931a      	str	r3, [sp, #104]	; 0x68
 800d784:	4654      	mov	r4, sl
 800d786:	2205      	movs	r2, #5
 800d788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78c:	4851      	ldr	r0, [pc, #324]	; (800d8d4 <_svfiprintf_r+0x1ec>)
 800d78e:	f7f2 fd27 	bl	80001e0 <memchr>
 800d792:	9a04      	ldr	r2, [sp, #16]
 800d794:	b9d8      	cbnz	r0, 800d7ce <_svfiprintf_r+0xe6>
 800d796:	06d0      	lsls	r0, r2, #27
 800d798:	bf44      	itt	mi
 800d79a:	2320      	movmi	r3, #32
 800d79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7a0:	0711      	lsls	r1, r2, #28
 800d7a2:	bf44      	itt	mi
 800d7a4:	232b      	movmi	r3, #43	; 0x2b
 800d7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b0:	d015      	beq.n	800d7de <_svfiprintf_r+0xf6>
 800d7b2:	9a07      	ldr	r2, [sp, #28]
 800d7b4:	4654      	mov	r4, sl
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	f04f 0c0a 	mov.w	ip, #10
 800d7bc:	4621      	mov	r1, r4
 800d7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7c2:	3b30      	subs	r3, #48	; 0x30
 800d7c4:	2b09      	cmp	r3, #9
 800d7c6:	d94e      	bls.n	800d866 <_svfiprintf_r+0x17e>
 800d7c8:	b1b0      	cbz	r0, 800d7f8 <_svfiprintf_r+0x110>
 800d7ca:	9207      	str	r2, [sp, #28]
 800d7cc:	e014      	b.n	800d7f8 <_svfiprintf_r+0x110>
 800d7ce:	eba0 0308 	sub.w	r3, r0, r8
 800d7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	46a2      	mov	sl, r4
 800d7dc:	e7d2      	b.n	800d784 <_svfiprintf_r+0x9c>
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	1d19      	adds	r1, r3, #4
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	9103      	str	r1, [sp, #12]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	bfbb      	ittet	lt
 800d7ea:	425b      	neglt	r3, r3
 800d7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d7f0:	9307      	strge	r3, [sp, #28]
 800d7f2:	9307      	strlt	r3, [sp, #28]
 800d7f4:	bfb8      	it	lt
 800d7f6:	9204      	strlt	r2, [sp, #16]
 800d7f8:	7823      	ldrb	r3, [r4, #0]
 800d7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d7fc:	d10c      	bne.n	800d818 <_svfiprintf_r+0x130>
 800d7fe:	7863      	ldrb	r3, [r4, #1]
 800d800:	2b2a      	cmp	r3, #42	; 0x2a
 800d802:	d135      	bne.n	800d870 <_svfiprintf_r+0x188>
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	1d1a      	adds	r2, r3, #4
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	9203      	str	r2, [sp, #12]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	bfb8      	it	lt
 800d810:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d814:	3402      	adds	r4, #2
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d8e4 <_svfiprintf_r+0x1fc>
 800d81c:	7821      	ldrb	r1, [r4, #0]
 800d81e:	2203      	movs	r2, #3
 800d820:	4650      	mov	r0, sl
 800d822:	f7f2 fcdd 	bl	80001e0 <memchr>
 800d826:	b140      	cbz	r0, 800d83a <_svfiprintf_r+0x152>
 800d828:	2340      	movs	r3, #64	; 0x40
 800d82a:	eba0 000a 	sub.w	r0, r0, sl
 800d82e:	fa03 f000 	lsl.w	r0, r3, r0
 800d832:	9b04      	ldr	r3, [sp, #16]
 800d834:	4303      	orrs	r3, r0
 800d836:	3401      	adds	r4, #1
 800d838:	9304      	str	r3, [sp, #16]
 800d83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83e:	4826      	ldr	r0, [pc, #152]	; (800d8d8 <_svfiprintf_r+0x1f0>)
 800d840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d844:	2206      	movs	r2, #6
 800d846:	f7f2 fccb 	bl	80001e0 <memchr>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d038      	beq.n	800d8c0 <_svfiprintf_r+0x1d8>
 800d84e:	4b23      	ldr	r3, [pc, #140]	; (800d8dc <_svfiprintf_r+0x1f4>)
 800d850:	bb1b      	cbnz	r3, 800d89a <_svfiprintf_r+0x1b2>
 800d852:	9b03      	ldr	r3, [sp, #12]
 800d854:	3307      	adds	r3, #7
 800d856:	f023 0307 	bic.w	r3, r3, #7
 800d85a:	3308      	adds	r3, #8
 800d85c:	9303      	str	r3, [sp, #12]
 800d85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d860:	4433      	add	r3, r6
 800d862:	9309      	str	r3, [sp, #36]	; 0x24
 800d864:	e767      	b.n	800d736 <_svfiprintf_r+0x4e>
 800d866:	fb0c 3202 	mla	r2, ip, r2, r3
 800d86a:	460c      	mov	r4, r1
 800d86c:	2001      	movs	r0, #1
 800d86e:	e7a5      	b.n	800d7bc <_svfiprintf_r+0xd4>
 800d870:	2300      	movs	r3, #0
 800d872:	3401      	adds	r4, #1
 800d874:	9305      	str	r3, [sp, #20]
 800d876:	4619      	mov	r1, r3
 800d878:	f04f 0c0a 	mov.w	ip, #10
 800d87c:	4620      	mov	r0, r4
 800d87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d882:	3a30      	subs	r2, #48	; 0x30
 800d884:	2a09      	cmp	r2, #9
 800d886:	d903      	bls.n	800d890 <_svfiprintf_r+0x1a8>
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0c5      	beq.n	800d818 <_svfiprintf_r+0x130>
 800d88c:	9105      	str	r1, [sp, #20]
 800d88e:	e7c3      	b.n	800d818 <_svfiprintf_r+0x130>
 800d890:	fb0c 2101 	mla	r1, ip, r1, r2
 800d894:	4604      	mov	r4, r0
 800d896:	2301      	movs	r3, #1
 800d898:	e7f0      	b.n	800d87c <_svfiprintf_r+0x194>
 800d89a:	ab03      	add	r3, sp, #12
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	462a      	mov	r2, r5
 800d8a0:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <_svfiprintf_r+0x1f8>)
 800d8a2:	a904      	add	r1, sp, #16
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	f7fe f8b5 	bl	800ba14 <_printf_float>
 800d8aa:	1c42      	adds	r2, r0, #1
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	d1d6      	bne.n	800d85e <_svfiprintf_r+0x176>
 800d8b0:	89ab      	ldrh	r3, [r5, #12]
 800d8b2:	065b      	lsls	r3, r3, #25
 800d8b4:	f53f af2c 	bmi.w	800d710 <_svfiprintf_r+0x28>
 800d8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8ba:	b01d      	add	sp, #116	; 0x74
 800d8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c0:	ab03      	add	r3, sp, #12
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	462a      	mov	r2, r5
 800d8c6:	4b06      	ldr	r3, [pc, #24]	; (800d8e0 <_svfiprintf_r+0x1f8>)
 800d8c8:	a904      	add	r1, sp, #16
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	f7fe fb46 	bl	800bf5c <_printf_i>
 800d8d0:	e7eb      	b.n	800d8aa <_svfiprintf_r+0x1c2>
 800d8d2:	bf00      	nop
 800d8d4:	0800e8b4 	.word	0x0800e8b4
 800d8d8:	0800e8be 	.word	0x0800e8be
 800d8dc:	0800ba15 	.word	0x0800ba15
 800d8e0:	0800d633 	.word	0x0800d633
 800d8e4:	0800e8ba 	.word	0x0800e8ba

0800d8e8 <__assert_func>:
 800d8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ea:	4614      	mov	r4, r2
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	4b09      	ldr	r3, [pc, #36]	; (800d914 <__assert_func+0x2c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	68d8      	ldr	r0, [r3, #12]
 800d8f6:	b14c      	cbz	r4, 800d90c <__assert_func+0x24>
 800d8f8:	4b07      	ldr	r3, [pc, #28]	; (800d918 <__assert_func+0x30>)
 800d8fa:	9100      	str	r1, [sp, #0]
 800d8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d900:	4906      	ldr	r1, [pc, #24]	; (800d91c <__assert_func+0x34>)
 800d902:	462b      	mov	r3, r5
 800d904:	f000 f80e 	bl	800d924 <fiprintf>
 800d908:	f000 fa9a 	bl	800de40 <abort>
 800d90c:	4b04      	ldr	r3, [pc, #16]	; (800d920 <__assert_func+0x38>)
 800d90e:	461c      	mov	r4, r3
 800d910:	e7f3      	b.n	800d8fa <__assert_func+0x12>
 800d912:	bf00      	nop
 800d914:	20000194 	.word	0x20000194
 800d918:	0800e8c5 	.word	0x0800e8c5
 800d91c:	0800e8d2 	.word	0x0800e8d2
 800d920:	0800e900 	.word	0x0800e900

0800d924 <fiprintf>:
 800d924:	b40e      	push	{r1, r2, r3}
 800d926:	b503      	push	{r0, r1, lr}
 800d928:	4601      	mov	r1, r0
 800d92a:	ab03      	add	r3, sp, #12
 800d92c:	4805      	ldr	r0, [pc, #20]	; (800d944 <fiprintf+0x20>)
 800d92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d932:	6800      	ldr	r0, [r0, #0]
 800d934:	9301      	str	r3, [sp, #4]
 800d936:	f000 f885 	bl	800da44 <_vfiprintf_r>
 800d93a:	b002      	add	sp, #8
 800d93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d940:	b003      	add	sp, #12
 800d942:	4770      	bx	lr
 800d944:	20000194 	.word	0x20000194

0800d948 <__retarget_lock_init_recursive>:
 800d948:	4770      	bx	lr

0800d94a <__retarget_lock_acquire_recursive>:
 800d94a:	4770      	bx	lr

0800d94c <__retarget_lock_release_recursive>:
 800d94c:	4770      	bx	lr

0800d94e <__ascii_mbtowc>:
 800d94e:	b082      	sub	sp, #8
 800d950:	b901      	cbnz	r1, 800d954 <__ascii_mbtowc+0x6>
 800d952:	a901      	add	r1, sp, #4
 800d954:	b142      	cbz	r2, 800d968 <__ascii_mbtowc+0x1a>
 800d956:	b14b      	cbz	r3, 800d96c <__ascii_mbtowc+0x1e>
 800d958:	7813      	ldrb	r3, [r2, #0]
 800d95a:	600b      	str	r3, [r1, #0]
 800d95c:	7812      	ldrb	r2, [r2, #0]
 800d95e:	1e10      	subs	r0, r2, #0
 800d960:	bf18      	it	ne
 800d962:	2001      	movne	r0, #1
 800d964:	b002      	add	sp, #8
 800d966:	4770      	bx	lr
 800d968:	4610      	mov	r0, r2
 800d96a:	e7fb      	b.n	800d964 <__ascii_mbtowc+0x16>
 800d96c:	f06f 0001 	mvn.w	r0, #1
 800d970:	e7f8      	b.n	800d964 <__ascii_mbtowc+0x16>

0800d972 <memmove>:
 800d972:	4288      	cmp	r0, r1
 800d974:	b510      	push	{r4, lr}
 800d976:	eb01 0402 	add.w	r4, r1, r2
 800d97a:	d902      	bls.n	800d982 <memmove+0x10>
 800d97c:	4284      	cmp	r4, r0
 800d97e:	4623      	mov	r3, r4
 800d980:	d807      	bhi.n	800d992 <memmove+0x20>
 800d982:	1e43      	subs	r3, r0, #1
 800d984:	42a1      	cmp	r1, r4
 800d986:	d008      	beq.n	800d99a <memmove+0x28>
 800d988:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d98c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d990:	e7f8      	b.n	800d984 <memmove+0x12>
 800d992:	4402      	add	r2, r0
 800d994:	4601      	mov	r1, r0
 800d996:	428a      	cmp	r2, r1
 800d998:	d100      	bne.n	800d99c <memmove+0x2a>
 800d99a:	bd10      	pop	{r4, pc}
 800d99c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9a4:	e7f7      	b.n	800d996 <memmove+0x24>

0800d9a6 <_realloc_r>:
 800d9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	4614      	mov	r4, r2
 800d9ac:	460e      	mov	r6, r1
 800d9ae:	b921      	cbnz	r1, 800d9ba <_realloc_r+0x14>
 800d9b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	f7fd bf33 	b.w	800b820 <_malloc_r>
 800d9ba:	b922      	cbnz	r2, 800d9c6 <_realloc_r+0x20>
 800d9bc:	f7fd fee0 	bl	800b780 <_free_r>
 800d9c0:	4625      	mov	r5, r4
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c6:	f000 fc5f 	bl	800e288 <_malloc_usable_size_r>
 800d9ca:	42a0      	cmp	r0, r4
 800d9cc:	d20f      	bcs.n	800d9ee <_realloc_r+0x48>
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	4638      	mov	r0, r7
 800d9d2:	f7fd ff25 	bl	800b820 <_malloc_r>
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d0f2      	beq.n	800d9c2 <_realloc_r+0x1c>
 800d9dc:	4631      	mov	r1, r6
 800d9de:	4622      	mov	r2, r4
 800d9e0:	f7fd feb8 	bl	800b754 <memcpy>
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	f7fd feca 	bl	800b780 <_free_r>
 800d9ec:	e7e9      	b.n	800d9c2 <_realloc_r+0x1c>
 800d9ee:	4635      	mov	r5, r6
 800d9f0:	e7e7      	b.n	800d9c2 <_realloc_r+0x1c>

0800d9f2 <__sfputc_r>:
 800d9f2:	6893      	ldr	r3, [r2, #8]
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	b410      	push	{r4}
 800d9fa:	6093      	str	r3, [r2, #8]
 800d9fc:	da08      	bge.n	800da10 <__sfputc_r+0x1e>
 800d9fe:	6994      	ldr	r4, [r2, #24]
 800da00:	42a3      	cmp	r3, r4
 800da02:	db01      	blt.n	800da08 <__sfputc_r+0x16>
 800da04:	290a      	cmp	r1, #10
 800da06:	d103      	bne.n	800da10 <__sfputc_r+0x1e>
 800da08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da0c:	f000 b94a 	b.w	800dca4 <__swbuf_r>
 800da10:	6813      	ldr	r3, [r2, #0]
 800da12:	1c58      	adds	r0, r3, #1
 800da14:	6010      	str	r0, [r2, #0]
 800da16:	7019      	strb	r1, [r3, #0]
 800da18:	4608      	mov	r0, r1
 800da1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <__sfputs_r>:
 800da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da22:	4606      	mov	r6, r0
 800da24:	460f      	mov	r7, r1
 800da26:	4614      	mov	r4, r2
 800da28:	18d5      	adds	r5, r2, r3
 800da2a:	42ac      	cmp	r4, r5
 800da2c:	d101      	bne.n	800da32 <__sfputs_r+0x12>
 800da2e:	2000      	movs	r0, #0
 800da30:	e007      	b.n	800da42 <__sfputs_r+0x22>
 800da32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da36:	463a      	mov	r2, r7
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff ffda 	bl	800d9f2 <__sfputc_r>
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	d1f3      	bne.n	800da2a <__sfputs_r+0xa>
 800da42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da44 <_vfiprintf_r>:
 800da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da48:	460d      	mov	r5, r1
 800da4a:	b09d      	sub	sp, #116	; 0x74
 800da4c:	4614      	mov	r4, r2
 800da4e:	4698      	mov	r8, r3
 800da50:	4606      	mov	r6, r0
 800da52:	b118      	cbz	r0, 800da5c <_vfiprintf_r+0x18>
 800da54:	6983      	ldr	r3, [r0, #24]
 800da56:	b90b      	cbnz	r3, 800da5c <_vfiprintf_r+0x18>
 800da58:	f000 fb14 	bl	800e084 <__sinit>
 800da5c:	4b89      	ldr	r3, [pc, #548]	; (800dc84 <_vfiprintf_r+0x240>)
 800da5e:	429d      	cmp	r5, r3
 800da60:	d11b      	bne.n	800da9a <_vfiprintf_r+0x56>
 800da62:	6875      	ldr	r5, [r6, #4]
 800da64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da66:	07d9      	lsls	r1, r3, #31
 800da68:	d405      	bmi.n	800da76 <_vfiprintf_r+0x32>
 800da6a:	89ab      	ldrh	r3, [r5, #12]
 800da6c:	059a      	lsls	r2, r3, #22
 800da6e:	d402      	bmi.n	800da76 <_vfiprintf_r+0x32>
 800da70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da72:	f7ff ff6a 	bl	800d94a <__retarget_lock_acquire_recursive>
 800da76:	89ab      	ldrh	r3, [r5, #12]
 800da78:	071b      	lsls	r3, r3, #28
 800da7a:	d501      	bpl.n	800da80 <_vfiprintf_r+0x3c>
 800da7c:	692b      	ldr	r3, [r5, #16]
 800da7e:	b9eb      	cbnz	r3, 800dabc <_vfiprintf_r+0x78>
 800da80:	4629      	mov	r1, r5
 800da82:	4630      	mov	r0, r6
 800da84:	f000 f96e 	bl	800dd64 <__swsetup_r>
 800da88:	b1c0      	cbz	r0, 800dabc <_vfiprintf_r+0x78>
 800da8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da8c:	07dc      	lsls	r4, r3, #31
 800da8e:	d50e      	bpl.n	800daae <_vfiprintf_r+0x6a>
 800da90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da94:	b01d      	add	sp, #116	; 0x74
 800da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9a:	4b7b      	ldr	r3, [pc, #492]	; (800dc88 <_vfiprintf_r+0x244>)
 800da9c:	429d      	cmp	r5, r3
 800da9e:	d101      	bne.n	800daa4 <_vfiprintf_r+0x60>
 800daa0:	68b5      	ldr	r5, [r6, #8]
 800daa2:	e7df      	b.n	800da64 <_vfiprintf_r+0x20>
 800daa4:	4b79      	ldr	r3, [pc, #484]	; (800dc8c <_vfiprintf_r+0x248>)
 800daa6:	429d      	cmp	r5, r3
 800daa8:	bf08      	it	eq
 800daaa:	68f5      	ldreq	r5, [r6, #12]
 800daac:	e7da      	b.n	800da64 <_vfiprintf_r+0x20>
 800daae:	89ab      	ldrh	r3, [r5, #12]
 800dab0:	0598      	lsls	r0, r3, #22
 800dab2:	d4ed      	bmi.n	800da90 <_vfiprintf_r+0x4c>
 800dab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dab6:	f7ff ff49 	bl	800d94c <__retarget_lock_release_recursive>
 800daba:	e7e9      	b.n	800da90 <_vfiprintf_r+0x4c>
 800dabc:	2300      	movs	r3, #0
 800dabe:	9309      	str	r3, [sp, #36]	; 0x24
 800dac0:	2320      	movs	r3, #32
 800dac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800daca:	2330      	movs	r3, #48	; 0x30
 800dacc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc90 <_vfiprintf_r+0x24c>
 800dad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dad4:	f04f 0901 	mov.w	r9, #1
 800dad8:	4623      	mov	r3, r4
 800dada:	469a      	mov	sl, r3
 800dadc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dae0:	b10a      	cbz	r2, 800dae6 <_vfiprintf_r+0xa2>
 800dae2:	2a25      	cmp	r2, #37	; 0x25
 800dae4:	d1f9      	bne.n	800dada <_vfiprintf_r+0x96>
 800dae6:	ebba 0b04 	subs.w	fp, sl, r4
 800daea:	d00b      	beq.n	800db04 <_vfiprintf_r+0xc0>
 800daec:	465b      	mov	r3, fp
 800daee:	4622      	mov	r2, r4
 800daf0:	4629      	mov	r1, r5
 800daf2:	4630      	mov	r0, r6
 800daf4:	f7ff ff94 	bl	800da20 <__sfputs_r>
 800daf8:	3001      	adds	r0, #1
 800dafa:	f000 80aa 	beq.w	800dc52 <_vfiprintf_r+0x20e>
 800dafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db00:	445a      	add	r2, fp
 800db02:	9209      	str	r2, [sp, #36]	; 0x24
 800db04:	f89a 3000 	ldrb.w	r3, [sl]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f000 80a2 	beq.w	800dc52 <_vfiprintf_r+0x20e>
 800db0e:	2300      	movs	r3, #0
 800db10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db18:	f10a 0a01 	add.w	sl, sl, #1
 800db1c:	9304      	str	r3, [sp, #16]
 800db1e:	9307      	str	r3, [sp, #28]
 800db20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db24:	931a      	str	r3, [sp, #104]	; 0x68
 800db26:	4654      	mov	r4, sl
 800db28:	2205      	movs	r2, #5
 800db2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db2e:	4858      	ldr	r0, [pc, #352]	; (800dc90 <_vfiprintf_r+0x24c>)
 800db30:	f7f2 fb56 	bl	80001e0 <memchr>
 800db34:	9a04      	ldr	r2, [sp, #16]
 800db36:	b9d8      	cbnz	r0, 800db70 <_vfiprintf_r+0x12c>
 800db38:	06d1      	lsls	r1, r2, #27
 800db3a:	bf44      	itt	mi
 800db3c:	2320      	movmi	r3, #32
 800db3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db42:	0713      	lsls	r3, r2, #28
 800db44:	bf44      	itt	mi
 800db46:	232b      	movmi	r3, #43	; 0x2b
 800db48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db4c:	f89a 3000 	ldrb.w	r3, [sl]
 800db50:	2b2a      	cmp	r3, #42	; 0x2a
 800db52:	d015      	beq.n	800db80 <_vfiprintf_r+0x13c>
 800db54:	9a07      	ldr	r2, [sp, #28]
 800db56:	4654      	mov	r4, sl
 800db58:	2000      	movs	r0, #0
 800db5a:	f04f 0c0a 	mov.w	ip, #10
 800db5e:	4621      	mov	r1, r4
 800db60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db64:	3b30      	subs	r3, #48	; 0x30
 800db66:	2b09      	cmp	r3, #9
 800db68:	d94e      	bls.n	800dc08 <_vfiprintf_r+0x1c4>
 800db6a:	b1b0      	cbz	r0, 800db9a <_vfiprintf_r+0x156>
 800db6c:	9207      	str	r2, [sp, #28]
 800db6e:	e014      	b.n	800db9a <_vfiprintf_r+0x156>
 800db70:	eba0 0308 	sub.w	r3, r0, r8
 800db74:	fa09 f303 	lsl.w	r3, r9, r3
 800db78:	4313      	orrs	r3, r2
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	46a2      	mov	sl, r4
 800db7e:	e7d2      	b.n	800db26 <_vfiprintf_r+0xe2>
 800db80:	9b03      	ldr	r3, [sp, #12]
 800db82:	1d19      	adds	r1, r3, #4
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	9103      	str	r1, [sp, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	bfbb      	ittet	lt
 800db8c:	425b      	neglt	r3, r3
 800db8e:	f042 0202 	orrlt.w	r2, r2, #2
 800db92:	9307      	strge	r3, [sp, #28]
 800db94:	9307      	strlt	r3, [sp, #28]
 800db96:	bfb8      	it	lt
 800db98:	9204      	strlt	r2, [sp, #16]
 800db9a:	7823      	ldrb	r3, [r4, #0]
 800db9c:	2b2e      	cmp	r3, #46	; 0x2e
 800db9e:	d10c      	bne.n	800dbba <_vfiprintf_r+0x176>
 800dba0:	7863      	ldrb	r3, [r4, #1]
 800dba2:	2b2a      	cmp	r3, #42	; 0x2a
 800dba4:	d135      	bne.n	800dc12 <_vfiprintf_r+0x1ce>
 800dba6:	9b03      	ldr	r3, [sp, #12]
 800dba8:	1d1a      	adds	r2, r3, #4
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	9203      	str	r2, [sp, #12]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	bfb8      	it	lt
 800dbb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dbb6:	3402      	adds	r4, #2
 800dbb8:	9305      	str	r3, [sp, #20]
 800dbba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dca0 <_vfiprintf_r+0x25c>
 800dbbe:	7821      	ldrb	r1, [r4, #0]
 800dbc0:	2203      	movs	r2, #3
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	f7f2 fb0c 	bl	80001e0 <memchr>
 800dbc8:	b140      	cbz	r0, 800dbdc <_vfiprintf_r+0x198>
 800dbca:	2340      	movs	r3, #64	; 0x40
 800dbcc:	eba0 000a 	sub.w	r0, r0, sl
 800dbd0:	fa03 f000 	lsl.w	r0, r3, r0
 800dbd4:	9b04      	ldr	r3, [sp, #16]
 800dbd6:	4303      	orrs	r3, r0
 800dbd8:	3401      	adds	r4, #1
 800dbda:	9304      	str	r3, [sp, #16]
 800dbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe0:	482c      	ldr	r0, [pc, #176]	; (800dc94 <_vfiprintf_r+0x250>)
 800dbe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbe6:	2206      	movs	r2, #6
 800dbe8:	f7f2 fafa 	bl	80001e0 <memchr>
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d03f      	beq.n	800dc70 <_vfiprintf_r+0x22c>
 800dbf0:	4b29      	ldr	r3, [pc, #164]	; (800dc98 <_vfiprintf_r+0x254>)
 800dbf2:	bb1b      	cbnz	r3, 800dc3c <_vfiprintf_r+0x1f8>
 800dbf4:	9b03      	ldr	r3, [sp, #12]
 800dbf6:	3307      	adds	r3, #7
 800dbf8:	f023 0307 	bic.w	r3, r3, #7
 800dbfc:	3308      	adds	r3, #8
 800dbfe:	9303      	str	r3, [sp, #12]
 800dc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc02:	443b      	add	r3, r7
 800dc04:	9309      	str	r3, [sp, #36]	; 0x24
 800dc06:	e767      	b.n	800dad8 <_vfiprintf_r+0x94>
 800dc08:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	2001      	movs	r0, #1
 800dc10:	e7a5      	b.n	800db5e <_vfiprintf_r+0x11a>
 800dc12:	2300      	movs	r3, #0
 800dc14:	3401      	adds	r4, #1
 800dc16:	9305      	str	r3, [sp, #20]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	f04f 0c0a 	mov.w	ip, #10
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc24:	3a30      	subs	r2, #48	; 0x30
 800dc26:	2a09      	cmp	r2, #9
 800dc28:	d903      	bls.n	800dc32 <_vfiprintf_r+0x1ee>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0c5      	beq.n	800dbba <_vfiprintf_r+0x176>
 800dc2e:	9105      	str	r1, [sp, #20]
 800dc30:	e7c3      	b.n	800dbba <_vfiprintf_r+0x176>
 800dc32:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc36:	4604      	mov	r4, r0
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e7f0      	b.n	800dc1e <_vfiprintf_r+0x1da>
 800dc3c:	ab03      	add	r3, sp, #12
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	462a      	mov	r2, r5
 800dc42:	4b16      	ldr	r3, [pc, #88]	; (800dc9c <_vfiprintf_r+0x258>)
 800dc44:	a904      	add	r1, sp, #16
 800dc46:	4630      	mov	r0, r6
 800dc48:	f7fd fee4 	bl	800ba14 <_printf_float>
 800dc4c:	4607      	mov	r7, r0
 800dc4e:	1c78      	adds	r0, r7, #1
 800dc50:	d1d6      	bne.n	800dc00 <_vfiprintf_r+0x1bc>
 800dc52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc54:	07d9      	lsls	r1, r3, #31
 800dc56:	d405      	bmi.n	800dc64 <_vfiprintf_r+0x220>
 800dc58:	89ab      	ldrh	r3, [r5, #12]
 800dc5a:	059a      	lsls	r2, r3, #22
 800dc5c:	d402      	bmi.n	800dc64 <_vfiprintf_r+0x220>
 800dc5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc60:	f7ff fe74 	bl	800d94c <__retarget_lock_release_recursive>
 800dc64:	89ab      	ldrh	r3, [r5, #12]
 800dc66:	065b      	lsls	r3, r3, #25
 800dc68:	f53f af12 	bmi.w	800da90 <_vfiprintf_r+0x4c>
 800dc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc6e:	e711      	b.n	800da94 <_vfiprintf_r+0x50>
 800dc70:	ab03      	add	r3, sp, #12
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	462a      	mov	r2, r5
 800dc76:	4b09      	ldr	r3, [pc, #36]	; (800dc9c <_vfiprintf_r+0x258>)
 800dc78:	a904      	add	r1, sp, #16
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7fe f96e 	bl	800bf5c <_printf_i>
 800dc80:	e7e4      	b.n	800dc4c <_vfiprintf_r+0x208>
 800dc82:	bf00      	nop
 800dc84:	0800ea2c 	.word	0x0800ea2c
 800dc88:	0800ea4c 	.word	0x0800ea4c
 800dc8c:	0800ea0c 	.word	0x0800ea0c
 800dc90:	0800e8b4 	.word	0x0800e8b4
 800dc94:	0800e8be 	.word	0x0800e8be
 800dc98:	0800ba15 	.word	0x0800ba15
 800dc9c:	0800da21 	.word	0x0800da21
 800dca0:	0800e8ba 	.word	0x0800e8ba

0800dca4 <__swbuf_r>:
 800dca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca6:	460e      	mov	r6, r1
 800dca8:	4614      	mov	r4, r2
 800dcaa:	4605      	mov	r5, r0
 800dcac:	b118      	cbz	r0, 800dcb6 <__swbuf_r+0x12>
 800dcae:	6983      	ldr	r3, [r0, #24]
 800dcb0:	b90b      	cbnz	r3, 800dcb6 <__swbuf_r+0x12>
 800dcb2:	f000 f9e7 	bl	800e084 <__sinit>
 800dcb6:	4b21      	ldr	r3, [pc, #132]	; (800dd3c <__swbuf_r+0x98>)
 800dcb8:	429c      	cmp	r4, r3
 800dcba:	d12b      	bne.n	800dd14 <__swbuf_r+0x70>
 800dcbc:	686c      	ldr	r4, [r5, #4]
 800dcbe:	69a3      	ldr	r3, [r4, #24]
 800dcc0:	60a3      	str	r3, [r4, #8]
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	071a      	lsls	r2, r3, #28
 800dcc6:	d52f      	bpl.n	800dd28 <__swbuf_r+0x84>
 800dcc8:	6923      	ldr	r3, [r4, #16]
 800dcca:	b36b      	cbz	r3, 800dd28 <__swbuf_r+0x84>
 800dccc:	6923      	ldr	r3, [r4, #16]
 800dcce:	6820      	ldr	r0, [r4, #0]
 800dcd0:	1ac0      	subs	r0, r0, r3
 800dcd2:	6963      	ldr	r3, [r4, #20]
 800dcd4:	b2f6      	uxtb	r6, r6
 800dcd6:	4283      	cmp	r3, r0
 800dcd8:	4637      	mov	r7, r6
 800dcda:	dc04      	bgt.n	800dce6 <__swbuf_r+0x42>
 800dcdc:	4621      	mov	r1, r4
 800dcde:	4628      	mov	r0, r5
 800dce0:	f000 f93c 	bl	800df5c <_fflush_r>
 800dce4:	bb30      	cbnz	r0, 800dd34 <__swbuf_r+0x90>
 800dce6:	68a3      	ldr	r3, [r4, #8]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	60a3      	str	r3, [r4, #8]
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	6022      	str	r2, [r4, #0]
 800dcf2:	701e      	strb	r6, [r3, #0]
 800dcf4:	6963      	ldr	r3, [r4, #20]
 800dcf6:	3001      	adds	r0, #1
 800dcf8:	4283      	cmp	r3, r0
 800dcfa:	d004      	beq.n	800dd06 <__swbuf_r+0x62>
 800dcfc:	89a3      	ldrh	r3, [r4, #12]
 800dcfe:	07db      	lsls	r3, r3, #31
 800dd00:	d506      	bpl.n	800dd10 <__swbuf_r+0x6c>
 800dd02:	2e0a      	cmp	r6, #10
 800dd04:	d104      	bne.n	800dd10 <__swbuf_r+0x6c>
 800dd06:	4621      	mov	r1, r4
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f000 f927 	bl	800df5c <_fflush_r>
 800dd0e:	b988      	cbnz	r0, 800dd34 <__swbuf_r+0x90>
 800dd10:	4638      	mov	r0, r7
 800dd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd14:	4b0a      	ldr	r3, [pc, #40]	; (800dd40 <__swbuf_r+0x9c>)
 800dd16:	429c      	cmp	r4, r3
 800dd18:	d101      	bne.n	800dd1e <__swbuf_r+0x7a>
 800dd1a:	68ac      	ldr	r4, [r5, #8]
 800dd1c:	e7cf      	b.n	800dcbe <__swbuf_r+0x1a>
 800dd1e:	4b09      	ldr	r3, [pc, #36]	; (800dd44 <__swbuf_r+0xa0>)
 800dd20:	429c      	cmp	r4, r3
 800dd22:	bf08      	it	eq
 800dd24:	68ec      	ldreq	r4, [r5, #12]
 800dd26:	e7ca      	b.n	800dcbe <__swbuf_r+0x1a>
 800dd28:	4621      	mov	r1, r4
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	f000 f81a 	bl	800dd64 <__swsetup_r>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d0cb      	beq.n	800dccc <__swbuf_r+0x28>
 800dd34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dd38:	e7ea      	b.n	800dd10 <__swbuf_r+0x6c>
 800dd3a:	bf00      	nop
 800dd3c:	0800ea2c 	.word	0x0800ea2c
 800dd40:	0800ea4c 	.word	0x0800ea4c
 800dd44:	0800ea0c 	.word	0x0800ea0c

0800dd48 <__ascii_wctomb>:
 800dd48:	b149      	cbz	r1, 800dd5e <__ascii_wctomb+0x16>
 800dd4a:	2aff      	cmp	r2, #255	; 0xff
 800dd4c:	bf85      	ittet	hi
 800dd4e:	238a      	movhi	r3, #138	; 0x8a
 800dd50:	6003      	strhi	r3, [r0, #0]
 800dd52:	700a      	strbls	r2, [r1, #0]
 800dd54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dd58:	bf98      	it	ls
 800dd5a:	2001      	movls	r0, #1
 800dd5c:	4770      	bx	lr
 800dd5e:	4608      	mov	r0, r1
 800dd60:	4770      	bx	lr
	...

0800dd64 <__swsetup_r>:
 800dd64:	4b32      	ldr	r3, [pc, #200]	; (800de30 <__swsetup_r+0xcc>)
 800dd66:	b570      	push	{r4, r5, r6, lr}
 800dd68:	681d      	ldr	r5, [r3, #0]
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	460c      	mov	r4, r1
 800dd6e:	b125      	cbz	r5, 800dd7a <__swsetup_r+0x16>
 800dd70:	69ab      	ldr	r3, [r5, #24]
 800dd72:	b913      	cbnz	r3, 800dd7a <__swsetup_r+0x16>
 800dd74:	4628      	mov	r0, r5
 800dd76:	f000 f985 	bl	800e084 <__sinit>
 800dd7a:	4b2e      	ldr	r3, [pc, #184]	; (800de34 <__swsetup_r+0xd0>)
 800dd7c:	429c      	cmp	r4, r3
 800dd7e:	d10f      	bne.n	800dda0 <__swsetup_r+0x3c>
 800dd80:	686c      	ldr	r4, [r5, #4]
 800dd82:	89a3      	ldrh	r3, [r4, #12]
 800dd84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd88:	0719      	lsls	r1, r3, #28
 800dd8a:	d42c      	bmi.n	800dde6 <__swsetup_r+0x82>
 800dd8c:	06dd      	lsls	r5, r3, #27
 800dd8e:	d411      	bmi.n	800ddb4 <__swsetup_r+0x50>
 800dd90:	2309      	movs	r3, #9
 800dd92:	6033      	str	r3, [r6, #0]
 800dd94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd98:	81a3      	strh	r3, [r4, #12]
 800dd9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd9e:	e03e      	b.n	800de1e <__swsetup_r+0xba>
 800dda0:	4b25      	ldr	r3, [pc, #148]	; (800de38 <__swsetup_r+0xd4>)
 800dda2:	429c      	cmp	r4, r3
 800dda4:	d101      	bne.n	800ddaa <__swsetup_r+0x46>
 800dda6:	68ac      	ldr	r4, [r5, #8]
 800dda8:	e7eb      	b.n	800dd82 <__swsetup_r+0x1e>
 800ddaa:	4b24      	ldr	r3, [pc, #144]	; (800de3c <__swsetup_r+0xd8>)
 800ddac:	429c      	cmp	r4, r3
 800ddae:	bf08      	it	eq
 800ddb0:	68ec      	ldreq	r4, [r5, #12]
 800ddb2:	e7e6      	b.n	800dd82 <__swsetup_r+0x1e>
 800ddb4:	0758      	lsls	r0, r3, #29
 800ddb6:	d512      	bpl.n	800ddde <__swsetup_r+0x7a>
 800ddb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddba:	b141      	cbz	r1, 800ddce <__swsetup_r+0x6a>
 800ddbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddc0:	4299      	cmp	r1, r3
 800ddc2:	d002      	beq.n	800ddca <__swsetup_r+0x66>
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	f7fd fcdb 	bl	800b780 <_free_r>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	6363      	str	r3, [r4, #52]	; 0x34
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddd4:	81a3      	strh	r3, [r4, #12]
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	6063      	str	r3, [r4, #4]
 800ddda:	6923      	ldr	r3, [r4, #16]
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	f043 0308 	orr.w	r3, r3, #8
 800dde4:	81a3      	strh	r3, [r4, #12]
 800dde6:	6923      	ldr	r3, [r4, #16]
 800dde8:	b94b      	cbnz	r3, 800ddfe <__swsetup_r+0x9a>
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddf4:	d003      	beq.n	800ddfe <__swsetup_r+0x9a>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f000 fa05 	bl	800e208 <__smakebuf_r>
 800ddfe:	89a0      	ldrh	r0, [r4, #12]
 800de00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de04:	f010 0301 	ands.w	r3, r0, #1
 800de08:	d00a      	beq.n	800de20 <__swsetup_r+0xbc>
 800de0a:	2300      	movs	r3, #0
 800de0c:	60a3      	str	r3, [r4, #8]
 800de0e:	6963      	ldr	r3, [r4, #20]
 800de10:	425b      	negs	r3, r3
 800de12:	61a3      	str	r3, [r4, #24]
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	b943      	cbnz	r3, 800de2a <__swsetup_r+0xc6>
 800de18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de1c:	d1ba      	bne.n	800dd94 <__swsetup_r+0x30>
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	0781      	lsls	r1, r0, #30
 800de22:	bf58      	it	pl
 800de24:	6963      	ldrpl	r3, [r4, #20]
 800de26:	60a3      	str	r3, [r4, #8]
 800de28:	e7f4      	b.n	800de14 <__swsetup_r+0xb0>
 800de2a:	2000      	movs	r0, #0
 800de2c:	e7f7      	b.n	800de1e <__swsetup_r+0xba>
 800de2e:	bf00      	nop
 800de30:	20000194 	.word	0x20000194
 800de34:	0800ea2c 	.word	0x0800ea2c
 800de38:	0800ea4c 	.word	0x0800ea4c
 800de3c:	0800ea0c 	.word	0x0800ea0c

0800de40 <abort>:
 800de40:	b508      	push	{r3, lr}
 800de42:	2006      	movs	r0, #6
 800de44:	f000 fa50 	bl	800e2e8 <raise>
 800de48:	2001      	movs	r0, #1
 800de4a:	f7f5 fad1 	bl	80033f0 <_exit>
	...

0800de50 <__sflush_r>:
 800de50:	898a      	ldrh	r2, [r1, #12]
 800de52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de56:	4605      	mov	r5, r0
 800de58:	0710      	lsls	r0, r2, #28
 800de5a:	460c      	mov	r4, r1
 800de5c:	d458      	bmi.n	800df10 <__sflush_r+0xc0>
 800de5e:	684b      	ldr	r3, [r1, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	dc05      	bgt.n	800de70 <__sflush_r+0x20>
 800de64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de66:	2b00      	cmp	r3, #0
 800de68:	dc02      	bgt.n	800de70 <__sflush_r+0x20>
 800de6a:	2000      	movs	r0, #0
 800de6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de72:	2e00      	cmp	r6, #0
 800de74:	d0f9      	beq.n	800de6a <__sflush_r+0x1a>
 800de76:	2300      	movs	r3, #0
 800de78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de7c:	682f      	ldr	r7, [r5, #0]
 800de7e:	602b      	str	r3, [r5, #0]
 800de80:	d032      	beq.n	800dee8 <__sflush_r+0x98>
 800de82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	075a      	lsls	r2, r3, #29
 800de88:	d505      	bpl.n	800de96 <__sflush_r+0x46>
 800de8a:	6863      	ldr	r3, [r4, #4]
 800de8c:	1ac0      	subs	r0, r0, r3
 800de8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de90:	b10b      	cbz	r3, 800de96 <__sflush_r+0x46>
 800de92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de94:	1ac0      	subs	r0, r0, r3
 800de96:	2300      	movs	r3, #0
 800de98:	4602      	mov	r2, r0
 800de9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de9c:	6a21      	ldr	r1, [r4, #32]
 800de9e:	4628      	mov	r0, r5
 800dea0:	47b0      	blx	r6
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	d106      	bne.n	800deb6 <__sflush_r+0x66>
 800dea8:	6829      	ldr	r1, [r5, #0]
 800deaa:	291d      	cmp	r1, #29
 800deac:	d82c      	bhi.n	800df08 <__sflush_r+0xb8>
 800deae:	4a2a      	ldr	r2, [pc, #168]	; (800df58 <__sflush_r+0x108>)
 800deb0:	40ca      	lsrs	r2, r1
 800deb2:	07d6      	lsls	r6, r2, #31
 800deb4:	d528      	bpl.n	800df08 <__sflush_r+0xb8>
 800deb6:	2200      	movs	r2, #0
 800deb8:	6062      	str	r2, [r4, #4]
 800deba:	04d9      	lsls	r1, r3, #19
 800debc:	6922      	ldr	r2, [r4, #16]
 800debe:	6022      	str	r2, [r4, #0]
 800dec0:	d504      	bpl.n	800decc <__sflush_r+0x7c>
 800dec2:	1c42      	adds	r2, r0, #1
 800dec4:	d101      	bne.n	800deca <__sflush_r+0x7a>
 800dec6:	682b      	ldr	r3, [r5, #0]
 800dec8:	b903      	cbnz	r3, 800decc <__sflush_r+0x7c>
 800deca:	6560      	str	r0, [r4, #84]	; 0x54
 800decc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dece:	602f      	str	r7, [r5, #0]
 800ded0:	2900      	cmp	r1, #0
 800ded2:	d0ca      	beq.n	800de6a <__sflush_r+0x1a>
 800ded4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ded8:	4299      	cmp	r1, r3
 800deda:	d002      	beq.n	800dee2 <__sflush_r+0x92>
 800dedc:	4628      	mov	r0, r5
 800dede:	f7fd fc4f 	bl	800b780 <_free_r>
 800dee2:	2000      	movs	r0, #0
 800dee4:	6360      	str	r0, [r4, #52]	; 0x34
 800dee6:	e7c1      	b.n	800de6c <__sflush_r+0x1c>
 800dee8:	6a21      	ldr	r1, [r4, #32]
 800deea:	2301      	movs	r3, #1
 800deec:	4628      	mov	r0, r5
 800deee:	47b0      	blx	r6
 800def0:	1c41      	adds	r1, r0, #1
 800def2:	d1c7      	bne.n	800de84 <__sflush_r+0x34>
 800def4:	682b      	ldr	r3, [r5, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d0c4      	beq.n	800de84 <__sflush_r+0x34>
 800defa:	2b1d      	cmp	r3, #29
 800defc:	d001      	beq.n	800df02 <__sflush_r+0xb2>
 800defe:	2b16      	cmp	r3, #22
 800df00:	d101      	bne.n	800df06 <__sflush_r+0xb6>
 800df02:	602f      	str	r7, [r5, #0]
 800df04:	e7b1      	b.n	800de6a <__sflush_r+0x1a>
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df0c:	81a3      	strh	r3, [r4, #12]
 800df0e:	e7ad      	b.n	800de6c <__sflush_r+0x1c>
 800df10:	690f      	ldr	r7, [r1, #16]
 800df12:	2f00      	cmp	r7, #0
 800df14:	d0a9      	beq.n	800de6a <__sflush_r+0x1a>
 800df16:	0793      	lsls	r3, r2, #30
 800df18:	680e      	ldr	r6, [r1, #0]
 800df1a:	bf08      	it	eq
 800df1c:	694b      	ldreq	r3, [r1, #20]
 800df1e:	600f      	str	r7, [r1, #0]
 800df20:	bf18      	it	ne
 800df22:	2300      	movne	r3, #0
 800df24:	eba6 0807 	sub.w	r8, r6, r7
 800df28:	608b      	str	r3, [r1, #8]
 800df2a:	f1b8 0f00 	cmp.w	r8, #0
 800df2e:	dd9c      	ble.n	800de6a <__sflush_r+0x1a>
 800df30:	6a21      	ldr	r1, [r4, #32]
 800df32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df34:	4643      	mov	r3, r8
 800df36:	463a      	mov	r2, r7
 800df38:	4628      	mov	r0, r5
 800df3a:	47b0      	blx	r6
 800df3c:	2800      	cmp	r0, #0
 800df3e:	dc06      	bgt.n	800df4e <__sflush_r+0xfe>
 800df40:	89a3      	ldrh	r3, [r4, #12]
 800df42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df46:	81a3      	strh	r3, [r4, #12]
 800df48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df4c:	e78e      	b.n	800de6c <__sflush_r+0x1c>
 800df4e:	4407      	add	r7, r0
 800df50:	eba8 0800 	sub.w	r8, r8, r0
 800df54:	e7e9      	b.n	800df2a <__sflush_r+0xda>
 800df56:	bf00      	nop
 800df58:	20400001 	.word	0x20400001

0800df5c <_fflush_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	690b      	ldr	r3, [r1, #16]
 800df60:	4605      	mov	r5, r0
 800df62:	460c      	mov	r4, r1
 800df64:	b913      	cbnz	r3, 800df6c <_fflush_r+0x10>
 800df66:	2500      	movs	r5, #0
 800df68:	4628      	mov	r0, r5
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	b118      	cbz	r0, 800df76 <_fflush_r+0x1a>
 800df6e:	6983      	ldr	r3, [r0, #24]
 800df70:	b90b      	cbnz	r3, 800df76 <_fflush_r+0x1a>
 800df72:	f000 f887 	bl	800e084 <__sinit>
 800df76:	4b14      	ldr	r3, [pc, #80]	; (800dfc8 <_fflush_r+0x6c>)
 800df78:	429c      	cmp	r4, r3
 800df7a:	d11b      	bne.n	800dfb4 <_fflush_r+0x58>
 800df7c:	686c      	ldr	r4, [r5, #4]
 800df7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0ef      	beq.n	800df66 <_fflush_r+0xa>
 800df86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df88:	07d0      	lsls	r0, r2, #31
 800df8a:	d404      	bmi.n	800df96 <_fflush_r+0x3a>
 800df8c:	0599      	lsls	r1, r3, #22
 800df8e:	d402      	bmi.n	800df96 <_fflush_r+0x3a>
 800df90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df92:	f7ff fcda 	bl	800d94a <__retarget_lock_acquire_recursive>
 800df96:	4628      	mov	r0, r5
 800df98:	4621      	mov	r1, r4
 800df9a:	f7ff ff59 	bl	800de50 <__sflush_r>
 800df9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfa0:	07da      	lsls	r2, r3, #31
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	d4e0      	bmi.n	800df68 <_fflush_r+0xc>
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	059b      	lsls	r3, r3, #22
 800dfaa:	d4dd      	bmi.n	800df68 <_fflush_r+0xc>
 800dfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfae:	f7ff fccd 	bl	800d94c <__retarget_lock_release_recursive>
 800dfb2:	e7d9      	b.n	800df68 <_fflush_r+0xc>
 800dfb4:	4b05      	ldr	r3, [pc, #20]	; (800dfcc <_fflush_r+0x70>)
 800dfb6:	429c      	cmp	r4, r3
 800dfb8:	d101      	bne.n	800dfbe <_fflush_r+0x62>
 800dfba:	68ac      	ldr	r4, [r5, #8]
 800dfbc:	e7df      	b.n	800df7e <_fflush_r+0x22>
 800dfbe:	4b04      	ldr	r3, [pc, #16]	; (800dfd0 <_fflush_r+0x74>)
 800dfc0:	429c      	cmp	r4, r3
 800dfc2:	bf08      	it	eq
 800dfc4:	68ec      	ldreq	r4, [r5, #12]
 800dfc6:	e7da      	b.n	800df7e <_fflush_r+0x22>
 800dfc8:	0800ea2c 	.word	0x0800ea2c
 800dfcc:	0800ea4c 	.word	0x0800ea4c
 800dfd0:	0800ea0c 	.word	0x0800ea0c

0800dfd4 <std>:
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	b510      	push	{r4, lr}
 800dfd8:	4604      	mov	r4, r0
 800dfda:	e9c0 3300 	strd	r3, r3, [r0]
 800dfde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfe2:	6083      	str	r3, [r0, #8]
 800dfe4:	8181      	strh	r1, [r0, #12]
 800dfe6:	6643      	str	r3, [r0, #100]	; 0x64
 800dfe8:	81c2      	strh	r2, [r0, #14]
 800dfea:	6183      	str	r3, [r0, #24]
 800dfec:	4619      	mov	r1, r3
 800dfee:	2208      	movs	r2, #8
 800dff0:	305c      	adds	r0, #92	; 0x5c
 800dff2:	f7fd fbbd 	bl	800b770 <memset>
 800dff6:	4b05      	ldr	r3, [pc, #20]	; (800e00c <std+0x38>)
 800dff8:	6263      	str	r3, [r4, #36]	; 0x24
 800dffa:	4b05      	ldr	r3, [pc, #20]	; (800e010 <std+0x3c>)
 800dffc:	62a3      	str	r3, [r4, #40]	; 0x28
 800dffe:	4b05      	ldr	r3, [pc, #20]	; (800e014 <std+0x40>)
 800e000:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e002:	4b05      	ldr	r3, [pc, #20]	; (800e018 <std+0x44>)
 800e004:	6224      	str	r4, [r4, #32]
 800e006:	6323      	str	r3, [r4, #48]	; 0x30
 800e008:	bd10      	pop	{r4, pc}
 800e00a:	bf00      	nop
 800e00c:	0800e321 	.word	0x0800e321
 800e010:	0800e343 	.word	0x0800e343
 800e014:	0800e37b 	.word	0x0800e37b
 800e018:	0800e39f 	.word	0x0800e39f

0800e01c <_cleanup_r>:
 800e01c:	4901      	ldr	r1, [pc, #4]	; (800e024 <_cleanup_r+0x8>)
 800e01e:	f000 b8af 	b.w	800e180 <_fwalk_reent>
 800e022:	bf00      	nop
 800e024:	0800df5d 	.word	0x0800df5d

0800e028 <__sfmoreglue>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	1e4a      	subs	r2, r1, #1
 800e02c:	2568      	movs	r5, #104	; 0x68
 800e02e:	4355      	muls	r5, r2
 800e030:	460e      	mov	r6, r1
 800e032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e036:	f7fd fbf3 	bl	800b820 <_malloc_r>
 800e03a:	4604      	mov	r4, r0
 800e03c:	b140      	cbz	r0, 800e050 <__sfmoreglue+0x28>
 800e03e:	2100      	movs	r1, #0
 800e040:	e9c0 1600 	strd	r1, r6, [r0]
 800e044:	300c      	adds	r0, #12
 800e046:	60a0      	str	r0, [r4, #8]
 800e048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e04c:	f7fd fb90 	bl	800b770 <memset>
 800e050:	4620      	mov	r0, r4
 800e052:	bd70      	pop	{r4, r5, r6, pc}

0800e054 <__sfp_lock_acquire>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__sfp_lock_acquire+0x8>)
 800e056:	f7ff bc78 	b.w	800d94a <__retarget_lock_acquire_recursive>
 800e05a:	bf00      	nop
 800e05c:	20004e28 	.word	0x20004e28

0800e060 <__sfp_lock_release>:
 800e060:	4801      	ldr	r0, [pc, #4]	; (800e068 <__sfp_lock_release+0x8>)
 800e062:	f7ff bc73 	b.w	800d94c <__retarget_lock_release_recursive>
 800e066:	bf00      	nop
 800e068:	20004e28 	.word	0x20004e28

0800e06c <__sinit_lock_acquire>:
 800e06c:	4801      	ldr	r0, [pc, #4]	; (800e074 <__sinit_lock_acquire+0x8>)
 800e06e:	f7ff bc6c 	b.w	800d94a <__retarget_lock_acquire_recursive>
 800e072:	bf00      	nop
 800e074:	20004e23 	.word	0x20004e23

0800e078 <__sinit_lock_release>:
 800e078:	4801      	ldr	r0, [pc, #4]	; (800e080 <__sinit_lock_release+0x8>)
 800e07a:	f7ff bc67 	b.w	800d94c <__retarget_lock_release_recursive>
 800e07e:	bf00      	nop
 800e080:	20004e23 	.word	0x20004e23

0800e084 <__sinit>:
 800e084:	b510      	push	{r4, lr}
 800e086:	4604      	mov	r4, r0
 800e088:	f7ff fff0 	bl	800e06c <__sinit_lock_acquire>
 800e08c:	69a3      	ldr	r3, [r4, #24]
 800e08e:	b11b      	cbz	r3, 800e098 <__sinit+0x14>
 800e090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e094:	f7ff bff0 	b.w	800e078 <__sinit_lock_release>
 800e098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e09c:	6523      	str	r3, [r4, #80]	; 0x50
 800e09e:	4b13      	ldr	r3, [pc, #76]	; (800e0ec <__sinit+0x68>)
 800e0a0:	4a13      	ldr	r2, [pc, #76]	; (800e0f0 <__sinit+0x6c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	bf04      	itt	eq
 800e0aa:	2301      	moveq	r3, #1
 800e0ac:	61a3      	streq	r3, [r4, #24]
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f000 f820 	bl	800e0f4 <__sfp>
 800e0b4:	6060      	str	r0, [r4, #4]
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f000 f81c 	bl	800e0f4 <__sfp>
 800e0bc:	60a0      	str	r0, [r4, #8]
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f000 f818 	bl	800e0f4 <__sfp>
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	60e0      	str	r0, [r4, #12]
 800e0c8:	2104      	movs	r1, #4
 800e0ca:	6860      	ldr	r0, [r4, #4]
 800e0cc:	f7ff ff82 	bl	800dfd4 <std>
 800e0d0:	68a0      	ldr	r0, [r4, #8]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	2109      	movs	r1, #9
 800e0d6:	f7ff ff7d 	bl	800dfd4 <std>
 800e0da:	68e0      	ldr	r0, [r4, #12]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	2112      	movs	r1, #18
 800e0e0:	f7ff ff78 	bl	800dfd4 <std>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	61a3      	str	r3, [r4, #24]
 800e0e8:	e7d2      	b.n	800e090 <__sinit+0xc>
 800e0ea:	bf00      	nop
 800e0ec:	0800e688 	.word	0x0800e688
 800e0f0:	0800e01d 	.word	0x0800e01d

0800e0f4 <__sfp>:
 800e0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f6:	4607      	mov	r7, r0
 800e0f8:	f7ff ffac 	bl	800e054 <__sfp_lock_acquire>
 800e0fc:	4b1e      	ldr	r3, [pc, #120]	; (800e178 <__sfp+0x84>)
 800e0fe:	681e      	ldr	r6, [r3, #0]
 800e100:	69b3      	ldr	r3, [r6, #24]
 800e102:	b913      	cbnz	r3, 800e10a <__sfp+0x16>
 800e104:	4630      	mov	r0, r6
 800e106:	f7ff ffbd 	bl	800e084 <__sinit>
 800e10a:	3648      	adds	r6, #72	; 0x48
 800e10c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e110:	3b01      	subs	r3, #1
 800e112:	d503      	bpl.n	800e11c <__sfp+0x28>
 800e114:	6833      	ldr	r3, [r6, #0]
 800e116:	b30b      	cbz	r3, 800e15c <__sfp+0x68>
 800e118:	6836      	ldr	r6, [r6, #0]
 800e11a:	e7f7      	b.n	800e10c <__sfp+0x18>
 800e11c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e120:	b9d5      	cbnz	r5, 800e158 <__sfp+0x64>
 800e122:	4b16      	ldr	r3, [pc, #88]	; (800e17c <__sfp+0x88>)
 800e124:	60e3      	str	r3, [r4, #12]
 800e126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e12a:	6665      	str	r5, [r4, #100]	; 0x64
 800e12c:	f7ff fc0c 	bl	800d948 <__retarget_lock_init_recursive>
 800e130:	f7ff ff96 	bl	800e060 <__sfp_lock_release>
 800e134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e13c:	6025      	str	r5, [r4, #0]
 800e13e:	61a5      	str	r5, [r4, #24]
 800e140:	2208      	movs	r2, #8
 800e142:	4629      	mov	r1, r5
 800e144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e148:	f7fd fb12 	bl	800b770 <memset>
 800e14c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e154:	4620      	mov	r0, r4
 800e156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e158:	3468      	adds	r4, #104	; 0x68
 800e15a:	e7d9      	b.n	800e110 <__sfp+0x1c>
 800e15c:	2104      	movs	r1, #4
 800e15e:	4638      	mov	r0, r7
 800e160:	f7ff ff62 	bl	800e028 <__sfmoreglue>
 800e164:	4604      	mov	r4, r0
 800e166:	6030      	str	r0, [r6, #0]
 800e168:	2800      	cmp	r0, #0
 800e16a:	d1d5      	bne.n	800e118 <__sfp+0x24>
 800e16c:	f7ff ff78 	bl	800e060 <__sfp_lock_release>
 800e170:	230c      	movs	r3, #12
 800e172:	603b      	str	r3, [r7, #0]
 800e174:	e7ee      	b.n	800e154 <__sfp+0x60>
 800e176:	bf00      	nop
 800e178:	0800e688 	.word	0x0800e688
 800e17c:	ffff0001 	.word	0xffff0001

0800e180 <_fwalk_reent>:
 800e180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e184:	4606      	mov	r6, r0
 800e186:	4688      	mov	r8, r1
 800e188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e18c:	2700      	movs	r7, #0
 800e18e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e192:	f1b9 0901 	subs.w	r9, r9, #1
 800e196:	d505      	bpl.n	800e1a4 <_fwalk_reent+0x24>
 800e198:	6824      	ldr	r4, [r4, #0]
 800e19a:	2c00      	cmp	r4, #0
 800e19c:	d1f7      	bne.n	800e18e <_fwalk_reent+0xe>
 800e19e:	4638      	mov	r0, r7
 800e1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1a4:	89ab      	ldrh	r3, [r5, #12]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d907      	bls.n	800e1ba <_fwalk_reent+0x3a>
 800e1aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	d003      	beq.n	800e1ba <_fwalk_reent+0x3a>
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	47c0      	blx	r8
 800e1b8:	4307      	orrs	r7, r0
 800e1ba:	3568      	adds	r5, #104	; 0x68
 800e1bc:	e7e9      	b.n	800e192 <_fwalk_reent+0x12>

0800e1be <__swhatbuf_r>:
 800e1be:	b570      	push	{r4, r5, r6, lr}
 800e1c0:	460e      	mov	r6, r1
 800e1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	b096      	sub	sp, #88	; 0x58
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	461d      	mov	r5, r3
 800e1ce:	da07      	bge.n	800e1e0 <__swhatbuf_r+0x22>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	602b      	str	r3, [r5, #0]
 800e1d4:	89b3      	ldrh	r3, [r6, #12]
 800e1d6:	061a      	lsls	r2, r3, #24
 800e1d8:	d410      	bmi.n	800e1fc <__swhatbuf_r+0x3e>
 800e1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1de:	e00e      	b.n	800e1fe <__swhatbuf_r+0x40>
 800e1e0:	466a      	mov	r2, sp
 800e1e2:	f000 f903 	bl	800e3ec <_fstat_r>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	dbf2      	blt.n	800e1d0 <__swhatbuf_r+0x12>
 800e1ea:	9a01      	ldr	r2, [sp, #4]
 800e1ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1f4:	425a      	negs	r2, r3
 800e1f6:	415a      	adcs	r2, r3
 800e1f8:	602a      	str	r2, [r5, #0]
 800e1fa:	e7ee      	b.n	800e1da <__swhatbuf_r+0x1c>
 800e1fc:	2340      	movs	r3, #64	; 0x40
 800e1fe:	2000      	movs	r0, #0
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	b016      	add	sp, #88	; 0x58
 800e204:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e208 <__smakebuf_r>:
 800e208:	898b      	ldrh	r3, [r1, #12]
 800e20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e20c:	079d      	lsls	r5, r3, #30
 800e20e:	4606      	mov	r6, r0
 800e210:	460c      	mov	r4, r1
 800e212:	d507      	bpl.n	800e224 <__smakebuf_r+0x1c>
 800e214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	6123      	str	r3, [r4, #16]
 800e21c:	2301      	movs	r3, #1
 800e21e:	6163      	str	r3, [r4, #20]
 800e220:	b002      	add	sp, #8
 800e222:	bd70      	pop	{r4, r5, r6, pc}
 800e224:	ab01      	add	r3, sp, #4
 800e226:	466a      	mov	r2, sp
 800e228:	f7ff ffc9 	bl	800e1be <__swhatbuf_r>
 800e22c:	9900      	ldr	r1, [sp, #0]
 800e22e:	4605      	mov	r5, r0
 800e230:	4630      	mov	r0, r6
 800e232:	f7fd faf5 	bl	800b820 <_malloc_r>
 800e236:	b948      	cbnz	r0, 800e24c <__smakebuf_r+0x44>
 800e238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e23c:	059a      	lsls	r2, r3, #22
 800e23e:	d4ef      	bmi.n	800e220 <__smakebuf_r+0x18>
 800e240:	f023 0303 	bic.w	r3, r3, #3
 800e244:	f043 0302 	orr.w	r3, r3, #2
 800e248:	81a3      	strh	r3, [r4, #12]
 800e24a:	e7e3      	b.n	800e214 <__smakebuf_r+0xc>
 800e24c:	4b0d      	ldr	r3, [pc, #52]	; (800e284 <__smakebuf_r+0x7c>)
 800e24e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e250:	89a3      	ldrh	r3, [r4, #12]
 800e252:	6020      	str	r0, [r4, #0]
 800e254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e258:	81a3      	strh	r3, [r4, #12]
 800e25a:	9b00      	ldr	r3, [sp, #0]
 800e25c:	6163      	str	r3, [r4, #20]
 800e25e:	9b01      	ldr	r3, [sp, #4]
 800e260:	6120      	str	r0, [r4, #16]
 800e262:	b15b      	cbz	r3, 800e27c <__smakebuf_r+0x74>
 800e264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e268:	4630      	mov	r0, r6
 800e26a:	f000 f8d1 	bl	800e410 <_isatty_r>
 800e26e:	b128      	cbz	r0, 800e27c <__smakebuf_r+0x74>
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	f023 0303 	bic.w	r3, r3, #3
 800e276:	f043 0301 	orr.w	r3, r3, #1
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	89a0      	ldrh	r0, [r4, #12]
 800e27e:	4305      	orrs	r5, r0
 800e280:	81a5      	strh	r5, [r4, #12]
 800e282:	e7cd      	b.n	800e220 <__smakebuf_r+0x18>
 800e284:	0800e01d 	.word	0x0800e01d

0800e288 <_malloc_usable_size_r>:
 800e288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e28c:	1f18      	subs	r0, r3, #4
 800e28e:	2b00      	cmp	r3, #0
 800e290:	bfbc      	itt	lt
 800e292:	580b      	ldrlt	r3, [r1, r0]
 800e294:	18c0      	addlt	r0, r0, r3
 800e296:	4770      	bx	lr

0800e298 <_raise_r>:
 800e298:	291f      	cmp	r1, #31
 800e29a:	b538      	push	{r3, r4, r5, lr}
 800e29c:	4604      	mov	r4, r0
 800e29e:	460d      	mov	r5, r1
 800e2a0:	d904      	bls.n	800e2ac <_raise_r+0x14>
 800e2a2:	2316      	movs	r3, #22
 800e2a4:	6003      	str	r3, [r0, #0]
 800e2a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2aa:	bd38      	pop	{r3, r4, r5, pc}
 800e2ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2ae:	b112      	cbz	r2, 800e2b6 <_raise_r+0x1e>
 800e2b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2b4:	b94b      	cbnz	r3, 800e2ca <_raise_r+0x32>
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f000 f830 	bl	800e31c <_getpid_r>
 800e2bc:	462a      	mov	r2, r5
 800e2be:	4601      	mov	r1, r0
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2c6:	f000 b817 	b.w	800e2f8 <_kill_r>
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d00a      	beq.n	800e2e4 <_raise_r+0x4c>
 800e2ce:	1c59      	adds	r1, r3, #1
 800e2d0:	d103      	bne.n	800e2da <_raise_r+0x42>
 800e2d2:	2316      	movs	r3, #22
 800e2d4:	6003      	str	r3, [r0, #0]
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	e7e7      	b.n	800e2aa <_raise_r+0x12>
 800e2da:	2400      	movs	r4, #0
 800e2dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	4798      	blx	r3
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	e7e0      	b.n	800e2aa <_raise_r+0x12>

0800e2e8 <raise>:
 800e2e8:	4b02      	ldr	r3, [pc, #8]	; (800e2f4 <raise+0xc>)
 800e2ea:	4601      	mov	r1, r0
 800e2ec:	6818      	ldr	r0, [r3, #0]
 800e2ee:	f7ff bfd3 	b.w	800e298 <_raise_r>
 800e2f2:	bf00      	nop
 800e2f4:	20000194 	.word	0x20000194

0800e2f8 <_kill_r>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	4d07      	ldr	r5, [pc, #28]	; (800e318 <_kill_r+0x20>)
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	4604      	mov	r4, r0
 800e300:	4608      	mov	r0, r1
 800e302:	4611      	mov	r1, r2
 800e304:	602b      	str	r3, [r5, #0]
 800e306:	f7f5 f86b 	bl	80033e0 <_kill>
 800e30a:	1c43      	adds	r3, r0, #1
 800e30c:	d102      	bne.n	800e314 <_kill_r+0x1c>
 800e30e:	682b      	ldr	r3, [r5, #0]
 800e310:	b103      	cbz	r3, 800e314 <_kill_r+0x1c>
 800e312:	6023      	str	r3, [r4, #0]
 800e314:	bd38      	pop	{r3, r4, r5, pc}
 800e316:	bf00      	nop
 800e318:	20004e1c 	.word	0x20004e1c

0800e31c <_getpid_r>:
 800e31c:	f7f5 b85e 	b.w	80033dc <_getpid>

0800e320 <__sread>:
 800e320:	b510      	push	{r4, lr}
 800e322:	460c      	mov	r4, r1
 800e324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e328:	f000 f894 	bl	800e454 <_read_r>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	bfab      	itete	ge
 800e330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e332:	89a3      	ldrhlt	r3, [r4, #12]
 800e334:	181b      	addge	r3, r3, r0
 800e336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e33a:	bfac      	ite	ge
 800e33c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e33e:	81a3      	strhlt	r3, [r4, #12]
 800e340:	bd10      	pop	{r4, pc}

0800e342 <__swrite>:
 800e342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e346:	461f      	mov	r7, r3
 800e348:	898b      	ldrh	r3, [r1, #12]
 800e34a:	05db      	lsls	r3, r3, #23
 800e34c:	4605      	mov	r5, r0
 800e34e:	460c      	mov	r4, r1
 800e350:	4616      	mov	r6, r2
 800e352:	d505      	bpl.n	800e360 <__swrite+0x1e>
 800e354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e358:	2302      	movs	r3, #2
 800e35a:	2200      	movs	r2, #0
 800e35c:	f000 f868 	bl	800e430 <_lseek_r>
 800e360:	89a3      	ldrh	r3, [r4, #12]
 800e362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e36a:	81a3      	strh	r3, [r4, #12]
 800e36c:	4632      	mov	r2, r6
 800e36e:	463b      	mov	r3, r7
 800e370:	4628      	mov	r0, r5
 800e372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e376:	f000 b817 	b.w	800e3a8 <_write_r>

0800e37a <__sseek>:
 800e37a:	b510      	push	{r4, lr}
 800e37c:	460c      	mov	r4, r1
 800e37e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e382:	f000 f855 	bl	800e430 <_lseek_r>
 800e386:	1c43      	adds	r3, r0, #1
 800e388:	89a3      	ldrh	r3, [r4, #12]
 800e38a:	bf15      	itete	ne
 800e38c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e38e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e396:	81a3      	strheq	r3, [r4, #12]
 800e398:	bf18      	it	ne
 800e39a:	81a3      	strhne	r3, [r4, #12]
 800e39c:	bd10      	pop	{r4, pc}

0800e39e <__sclose>:
 800e39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a2:	f000 b813 	b.w	800e3cc <_close_r>
	...

0800e3a8 <_write_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4d07      	ldr	r5, [pc, #28]	; (800e3c8 <_write_r+0x20>)
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	4608      	mov	r0, r1
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	602a      	str	r2, [r5, #0]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f7f5 f830 	bl	800341c <_write>
 800e3bc:	1c43      	adds	r3, r0, #1
 800e3be:	d102      	bne.n	800e3c6 <_write_r+0x1e>
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	b103      	cbz	r3, 800e3c6 <_write_r+0x1e>
 800e3c4:	6023      	str	r3, [r4, #0]
 800e3c6:	bd38      	pop	{r3, r4, r5, pc}
 800e3c8:	20004e1c 	.word	0x20004e1c

0800e3cc <_close_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d06      	ldr	r5, [pc, #24]	; (800e3e8 <_close_r+0x1c>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	602b      	str	r3, [r5, #0]
 800e3d8:	f7f5 f82e 	bl	8003438 <_close>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_close_r+0x1a>
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_close_r+0x1a>
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20004e1c 	.word	0x20004e1c

0800e3ec <_fstat_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4d07      	ldr	r5, [pc, #28]	; (800e40c <_fstat_r+0x20>)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	f7f5 f820 	bl	800343e <_fstat>
 800e3fe:	1c43      	adds	r3, r0, #1
 800e400:	d102      	bne.n	800e408 <_fstat_r+0x1c>
 800e402:	682b      	ldr	r3, [r5, #0]
 800e404:	b103      	cbz	r3, 800e408 <_fstat_r+0x1c>
 800e406:	6023      	str	r3, [r4, #0]
 800e408:	bd38      	pop	{r3, r4, r5, pc}
 800e40a:	bf00      	nop
 800e40c:	20004e1c 	.word	0x20004e1c

0800e410 <_isatty_r>:
 800e410:	b538      	push	{r3, r4, r5, lr}
 800e412:	4d06      	ldr	r5, [pc, #24]	; (800e42c <_isatty_r+0x1c>)
 800e414:	2300      	movs	r3, #0
 800e416:	4604      	mov	r4, r0
 800e418:	4608      	mov	r0, r1
 800e41a:	602b      	str	r3, [r5, #0]
 800e41c:	f7f5 f814 	bl	8003448 <_isatty>
 800e420:	1c43      	adds	r3, r0, #1
 800e422:	d102      	bne.n	800e42a <_isatty_r+0x1a>
 800e424:	682b      	ldr	r3, [r5, #0]
 800e426:	b103      	cbz	r3, 800e42a <_isatty_r+0x1a>
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	bd38      	pop	{r3, r4, r5, pc}
 800e42c:	20004e1c 	.word	0x20004e1c

0800e430 <_lseek_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4d07      	ldr	r5, [pc, #28]	; (800e450 <_lseek_r+0x20>)
 800e434:	4604      	mov	r4, r0
 800e436:	4608      	mov	r0, r1
 800e438:	4611      	mov	r1, r2
 800e43a:	2200      	movs	r2, #0
 800e43c:	602a      	str	r2, [r5, #0]
 800e43e:	461a      	mov	r2, r3
 800e440:	f7f5 f804 	bl	800344c <_lseek>
 800e444:	1c43      	adds	r3, r0, #1
 800e446:	d102      	bne.n	800e44e <_lseek_r+0x1e>
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	b103      	cbz	r3, 800e44e <_lseek_r+0x1e>
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
 800e450:	20004e1c 	.word	0x20004e1c

0800e454 <_read_r>:
 800e454:	b538      	push	{r3, r4, r5, lr}
 800e456:	4d07      	ldr	r5, [pc, #28]	; (800e474 <_read_r+0x20>)
 800e458:	4604      	mov	r4, r0
 800e45a:	4608      	mov	r0, r1
 800e45c:	4611      	mov	r1, r2
 800e45e:	2200      	movs	r2, #0
 800e460:	602a      	str	r2, [r5, #0]
 800e462:	461a      	mov	r2, r3
 800e464:	f7f4 ffca 	bl	80033fc <_read>
 800e468:	1c43      	adds	r3, r0, #1
 800e46a:	d102      	bne.n	800e472 <_read_r+0x1e>
 800e46c:	682b      	ldr	r3, [r5, #0]
 800e46e:	b103      	cbz	r3, 800e472 <_read_r+0x1e>
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	bd38      	pop	{r3, r4, r5, pc}
 800e474:	20004e1c 	.word	0x20004e1c

0800e478 <_init>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	bf00      	nop
 800e47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e47e:	bc08      	pop	{r3}
 800e480:	469e      	mov	lr, r3
 800e482:	4770      	bx	lr

0800e484 <_fini>:
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	bf00      	nop
 800e488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e48a:	bc08      	pop	{r3}
 800e48c:	469e      	mov	lr, r3
 800e48e:	4770      	bx	lr
