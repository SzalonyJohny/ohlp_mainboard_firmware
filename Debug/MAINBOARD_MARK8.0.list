
MAINBOARD_MARK8.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af90  0800af90  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800af90  0800af90  0001af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af98  0800af98  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af98  0800af98  0001af98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af9c  0800af9c  0001af9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800afa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048c8  200001f8  0800b198  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ac0  0800b198  00024ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008d073  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b003  00000000  00000000  000ad29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002598  00000000  00000000  000b82a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a28  00000000  00000000  000ba838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c8c  00000000  00000000  000bd260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045206  00000000  00000000  000e6eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8dde  00000000  00000000  0012c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00214ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da4  00000000  00000000  00214f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00021506  00000000  00000000  0021bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adc4 	.word	0x0800adc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800adc4 	.word	0x0800adc4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN3cBQ16set_inputcurrentEh>:
#include <BQ25895.hpp>


void cBQ::set_inputcurrent(uint8_t icn_mA){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	REG[0x00] = static_cast<uint8_t>(icn_mA | (EN_HIZ<<7) | (EN_ILIM<<6));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	7c1b      	ldrb	r3, [r3, #16]
 80004d8:	01db      	lsls	r3, r3, #7
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7c5b      	ldrb	r3, [r3, #17]
 80004e8:	019b      	lsls	r3, r3, #6
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	701a      	strb	r2, [r3, #0]
	updateREG(0x00);
 80004f6:	2100      	movs	r1, #0
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f97f 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_ZN3cBQ26set_inputvoltagelimitofsetEh>:

void cBQ::set_inputvoltagelimitofset(uint8_t ivlo_mV){
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
	REG[0x01] = static_cast<uint8_t>( ivlo_mV | (BCOLD<<5) | (BHOT[0]<<6) | (BHOT[1]<<7) );
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7c9b      	ldrb	r3, [r3, #18]
 8000516:	015b      	lsls	r3, r3, #5
 8000518:	b25a      	sxtb	r2, r3
 800051a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800051e:	4313      	orrs	r3, r2
 8000520:	b25a      	sxtb	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7cdb      	ldrb	r3, [r3, #19]
 8000526:	019b      	lsls	r3, r3, #6
 8000528:	b25b      	sxtb	r3, r3
 800052a:	4313      	orrs	r3, r2
 800052c:	b25a      	sxtb	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7d1b      	ldrb	r3, [r3, #20]
 8000532:	01db      	lsls	r3, r3, #7
 8000534:	b25b      	sxtb	r3, r3
 8000536:	4313      	orrs	r3, r2
 8000538:	b25b      	sxtb	r3, r3
 800053a:	b2da      	uxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	705a      	strb	r2, [r3, #1]
	updateREG(0x01);
 8000540:	2101      	movs	r1, #1
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f95a 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <_ZN3cBQ16set_startADCconvEv>:

void cBQ::set_startADCconv(){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	REG[0x02] = 0b10011101;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	229d      	movs	r2, #157	; 0x9d
 800055c:	709a      	strb	r2, [r3, #2]
	updateREG(0x02);
 800055e:	2102      	movs	r1, #2
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f94b 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <_ZN3cBQ14set_boost_modeEb>:
	battload = on;
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | battsysmin);
	updateREG(0x03);
}

void cBQ::set_boost_mode(bool on){
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	70fb      	strb	r3, [r7, #3]
	boostmode = on;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	78fa      	ldrb	r2, [r7, #3]
 800057e:	75da      	strb	r2, [r3, #23]
	REG[0x03] = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	70da      	strb	r2, [r3, #3]
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | (battsysmin));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7d5b      	ldrb	r3, [r3, #21]
 800058a:	01db      	lsls	r3, r3, #7
 800058c:	b25a      	sxtb	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7ddb      	ldrb	r3, [r3, #23]
 8000592:	015b      	lsls	r3, r3, #5
 8000594:	b25b      	sxtb	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b25a      	sxtb	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7d9b      	ldrb	r3, [r3, #22]
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7e1b      	ldrb	r3, [r3, #24]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	70da      	strb	r2, [r3, #3]
	updateREG(0x03);
 80005b6:	2103      	movs	r1, #3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f91f 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <_ZN3cBQ14set_battchargeEb>:

void cBQ::set_battcharge(bool on){
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	70fb      	strb	r3, [r7, #3]
	battcharge = on;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	759a      	strb	r2, [r3, #22]
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | battsysmin);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7d5b      	ldrb	r3, [r3, #21]
 80005dc:	01db      	lsls	r3, r3, #7
 80005de:	b25a      	sxtb	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7ddb      	ldrb	r3, [r3, #23]
 80005e4:	015b      	lsls	r3, r3, #5
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b25a      	sxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7d9b      	ldrb	r3, [r3, #22]
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b25a      	sxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7e1b      	ldrb	r3, [r3, #24]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25b      	sxtb	r3, r3
 8000602:	b2da      	uxtb	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	70da      	strb	r2, [r3, #3]
	updateREG(0x03);
 8000608:	2103      	movs	r1, #3
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f8f6 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN3cBQ14set_battsysminEh>:

void cBQ::set_battsysmin(uint8_t sysmin){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	battsysmin = sysmin;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	78fa      	ldrb	r2, [r7, #3]
 8000628:	761a      	strb	r2, [r3, #24]
	REG[0x03] = static_cast<uint8_t>((battload<<7) | (boostmode<<5) | (battcharge<<4) | battsysmin);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7d5b      	ldrb	r3, [r3, #21]
 800062e:	01db      	lsls	r3, r3, #7
 8000630:	b25a      	sxtb	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7ddb      	ldrb	r3, [r3, #23]
 8000636:	015b      	lsls	r3, r3, #5
 8000638:	b25b      	sxtb	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b25a      	sxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	7d9b      	ldrb	r3, [r3, #22]
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	b25b      	sxtb	r3, r3
 8000646:	4313      	orrs	r3, r2
 8000648:	b25a      	sxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7e1b      	ldrb	r3, [r3, #24]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	70da      	strb	r2, [r3, #3]
	updateREG(0x03);
 800065a:	2103      	movs	r1, #3
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f8cd 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_ZN3cBQ17set_chargecurrentEh>:

void cBQ::set_chargecurrent(uint8_t ichg){
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	70fb      	strb	r3, [r7, #3]
	REG[0x04] = static_cast<uint8_t>(ichg | (EN_PUMPX<<7));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7e5b      	ldrb	r3, [r3, #25]
 800067a:	01db      	lsls	r3, r3, #7
 800067c:	b25a      	sxtb	r2, r3
 800067e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000682:	4313      	orrs	r3, r2
 8000684:	b25b      	sxtb	r3, r3
 8000686:	b2da      	uxtb	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	711a      	strb	r2, [r3, #4]
	updateREG(0x04);
 800068c:	2104      	movs	r1, #4
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f8b4 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN3cBQ21set_precharge_currentEh>:

void cBQ::set_precharge_current(uint8_t ipregchg){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
	precharge_current = ipregchg;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	78fa      	ldrb	r2, [r7, #3]
 80006ac:	769a      	strb	r2, [r3, #26]
	REG[0x05] = (ipregchg) | termination_current;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7eda      	ldrb	r2, [r3, #27]
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	715a      	strb	r2, [r3, #5]
	updateREG(0x05);
 80006bc:	2105      	movs	r1, #5
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f89c 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_ZN3cBQ23set_termination_currentEh>:

void cBQ::set_termination_current(uint8_t iterm){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
	termination_current = iterm;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	78fa      	ldrb	r2, [r7, #3]
 80006dc:	76da      	strb	r2, [r3, #27]
	REG[0x05] = (precharge_current) | iterm;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7e9a      	ldrb	r2, [r3, #26]
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	715a      	strb	r2, [r3, #5]
	updateREG(0x05);
 80006ec:	2105      	movs	r1, #5
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f884 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_ZN3cBQ17set_chargevoltageEh>:


void cBQ::set_chargevoltage(uint8_t uchg){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
    REG[0x06] = static_cast<uint8_t>(uchg | BATLOWV<<1 | 0<<0);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7f1b      	ldrb	r3, [r3, #28]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b25a      	sxtb	r2, r3
 8000710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000714:	4313      	orrs	r3, r2
 8000716:	b25b      	sxtb	r3, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	719a      	strb	r2, [r3, #6]
    updateREG(0x06);
 800071e:	2106      	movs	r1, #6
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f86b 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_ZN3cBQ17set_boost_voltageEh>:

void cBQ:: set_boost_voltage(uint8_t bmvr){
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	460b      	mov	r3, r1
 8000738:	70fb      	strb	r3, [r7, #3]
	REG[0x0A] = bmvr;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	78fa      	ldrb	r2, [r7, #3]
 800073e:	729a      	strb	r2, [r3, #10]
	updateREG(0x0A);
 8000740:	210a      	movs	r1, #10
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f85a 	bl	80007fc <_ZN3cBQ9updateREGEh>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN3cBQ8shipmodeEv>:
uint8_t cBQ::read_charge_adapter(){
    uint8_t charge_status = BQRead_VALUE(0x0B);
    return static_cast<uint8_t>(charge_status>>5);
}

void cBQ::shipmode(){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	REGset(0x09,0b01100100);
 8000758:	2264      	movs	r2, #100	; 0x64
 800075a:	2109      	movs	r1, #9
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f8af 	bl	80008c0 <_ZN3cBQ6REGsetEhh>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_ZN3cBQ23set_input_voltage_limitEh>:

void cBQ::set_input_voltage_limit(uint8_t ivdpm){
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
    REGset(0x0D,(1<<7) | ivdpm);
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800077c:	b2db      	uxtb	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	210d      	movs	r1, #13
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f89c 	bl	80008c0 <_ZN3cBQ6REGsetEhh>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN3cBQ16read_battvoltageEv>:

uint16_t cBQ::read_battvoltage(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	set_startADCconv();
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff fed9 	bl	8000550 <_ZN3cBQ16set_startADCconvEv>
	uint16_t reg_value = BQRead_VALUE(0x0E);
 800079e:	210e      	movs	r1, #14
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f80f 	bl	80007c4 <_ZN3cBQ12BQRead_VALUEEh>
 80007a6:	4603      	mov	r3, r0
 80007a8:	81fb      	strh	r3, [r7, #14]
	return static_cast<uint16_t>(reg_value*20+2304);
 80007aa:	89fb      	ldrh	r3, [r7, #14]
 80007ac:	461a      	mov	r2, r3
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80007ba:	b29b      	uxth	r3, r3
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <_ZN3cBQ12BQRead_VALUEEh>:
	set_startADCconv();
	uint16_t reg_value = BQRead_VALUE(0x12);
	return static_cast<uint16_t>(reg_value*50);
}

uint8_t cBQ::BQRead_VALUE(unsigned char Reg){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	uint8_t reciveBuffer = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, BQaddress, Reg, 1, &reciveBuffer, 1, 10);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6a18      	ldr	r0, [r3, #32]
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	230a      	movs	r3, #10
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	2301      	movs	r3, #1
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	f107 030f 	add.w	r3, r7, #15
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	21d4      	movs	r1, #212	; 0xd4
 80007ee:	f003 fccb 	bl	8004188 <HAL_I2C_Mem_Read>
	return (reciveBuffer);
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN3cBQ9updateREGEh>:

void cBQ::updateREG(uint8_t REGx){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	REGset(REGx,REG[REGx]);
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	5cd2      	ldrb	r2, [r2, r3]
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	4619      	mov	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 f854 	bl	80008c0 <_ZN3cBQ6REGsetEhh>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_ZN3cBQC1Ev>:

cBQ::cBQ(){
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	REG[0x00] = 0b00001000;// HIZmode & ilim & Imput Current LIMIT;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2208      	movs	r2, #8
 800082c:	701a      	strb	r2, [r3, #0]
	REG[0x01] = 0b00001110;// boost temp mode monitor & imput voltage limit offset
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	220e      	movs	r2, #14
 8000832:	705a      	strb	r2, [r3, #1]
	REG[0x02] = 0b00111101;// ADCconv settings & DCP & D+/D- & Boost f mode
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	223d      	movs	r2, #61	; 0x3d
 8000838:	709a      	strb	r2, [r3, #2]
	REG[0x03] = 0b00110000;//  boost_on & charge &
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2230      	movs	r2, #48	; 0x30
 800083e:	70da      	strb	r2, [r3, #3]
	REG[0x04] = 0b00001100;//charge current setting
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	220c      	movs	r2, #12
 8000844:	711a      	strb	r2, [r3, #4]
	REG[0x05] = 0b00010011;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2213      	movs	r2, #19
 800084a:	715a      	strb	r2, [r3, #5]
	REG[0x06] = 0b01011110;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	225e      	movs	r2, #94	; 0x5e
 8000850:	719a      	strb	r2, [r3, #6]
	REG[0x07] = 0b10011101;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	229d      	movs	r2, #157	; 0x9d
 8000856:	71da      	strb	r2, [r3, #7]

    EN_HIZ = 0;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	741a      	strb	r2, [r3, #16]
    EN_ILIM = 0;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	745a      	strb	r2, [r3, #17]
	BCOLD = 1;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	749a      	strb	r2, [r3, #18]
    BHOT[0]=1;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	74da      	strb	r2, [r3, #19]
    BHOT[1]=1;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	751a      	strb	r2, [r3, #20]
	battload=0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	755a      	strb	r2, [r3, #21]
    battcharge=1;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	759a      	strb	r2, [r3, #22]
    boostmode=1;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	75da      	strb	r2, [r3, #23]
	battsysmin=0;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
	EN_PUMPX = 1;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2201      	movs	r2, #1
 8000892:	765a      	strb	r2, [r3, #25]
    statusVBUS = 7;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2207      	movs	r2, #7
 8000898:	775a      	strb	r2, [r3, #29]
    BATLOWV = 1; //Precharge
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2201      	movs	r2, #1
 800089e:	771a      	strb	r2, [r3, #28]
    termination_current = 0;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	76da      	strb	r2, [r3, #27]
    precharge_current = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	769a      	strb	r2, [r3, #26]
    hi2c = nullptr;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
}
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_ZN3cBQ6REGsetEhh>:
//	for(int i=0;i<7;i++)tempbuff[i+1]=REG[i];
//	TWI_MasterWriteRead(&twiMaster,BQaddress,&tempbuff[0],2,0);
//	while (twiMaster.status != TWIM_STATUS_READY) {}
}

void cBQ::REGset(uint8_t reg_number, uint8_t value){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
 80008cc:	4613      	mov	r3, r2
 80008ce:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[2] = {value, 0};
 80008d0:	2300      	movs	r3, #0
 80008d2:	81bb      	strh	r3, [r7, #12]
 80008d4:	78bb      	ldrb	r3, [r7, #2]
 80008d6:	733b      	strb	r3, [r7, #12]
	if(reg_number<16)REG[reg_number] = value;
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d803      	bhi.n	80008e6 <_ZN3cBQ6REGsetEhh+0x26>
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	78b9      	ldrb	r1, [r7, #2]
 80008e4:	54d1      	strb	r1, [r2, r3]
	HAL_I2C_Mem_Write(hi2c, BQaddress, reg_number, 1, &temp[0], 1, 10);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6a18      	ldr	r0, [r3, #32]
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	230a      	movs	r3, #10
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2301      	movs	r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	21d4      	movs	r1, #212	; 0xd4
 8000900:	f003 fb6e 	bl	8003fe0 <HAL_I2C_Mem_Write>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <_ZN3cBQ7init_BQEP19__I2C_HandleTypeDef>:



void cBQ::init_BQ(I2C_HandleTypeDef *phic){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	hi2c = phic;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	621a      	str	r2, [r3, #32]
    REGset(0x14,0b10111001);
 800091c:	22b9      	movs	r2, #185	; 0xb9
 800091e:	2114      	movs	r1, #20
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ffcd 	bl	80008c0 <_ZN3cBQ6REGsetEhh>
	set_inputcurrent(inc_1600mA | inc_800mA | inc_400mA | inc_200mA | inc_100mA | inc_50mA); //3.25A max input current
 8000926:	213f      	movs	r1, #63	; 0x3f
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fdcd 	bl	80004c8 <_ZN3cBQ16set_inputcurrentEh>
	set_battsysmin(sysmin_3000mV);
 800092e:	2100      	movs	r1, #0
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe71 	bl	8000618 <_ZN3cBQ14set_battsysminEh>
    set_inputvoltagelimitofset(ivlo_1600mV | ivlo_800mV | ivlo_400mV | ivlo_200mV | ivlo_100mV);
 8000936:	211f      	movs	r1, #31
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fde4 	bl	8000506 <_ZN3cBQ26set_inputvoltagelimitofsetEh>

    set_chargecurrent(ichg_2048mA | ichg_1024mA);              //charge current safe 2560mA
 800093e:	2130      	movs	r1, #48	; 0x30
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fe92 	bl	800066a <_ZN3cBQ17set_chargecurrentEh>

	set_chargevoltage(uchg_3840mV | uchg_256mV | uchg_64mV | uchg_32mV); // charge voltage = 4192mV
 8000946:	2158      	movs	r1, #88	; 0x58
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fed7 	bl	80006fc <_ZN3cBQ17set_chargevoltageEh>
    set_boost_voltage(bmvr_4550mV | bmvr_256mV);		// measured at 4.84V
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff feec 	bl	800072e <_ZN3cBQ17set_boost_voltageEh>

    set_precharge_current(iprechg_512mA | Iprechg_offset_64mA);
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fe9f 	bl	800069c <_ZN3cBQ21set_precharge_currentEh>
    set_termination_current(iterm_64mA | iterm_offset_64mA);
 800095e:	2102      	movs	r1, #2
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff feb3 	bl	80006cc <_ZN3cBQ23set_termination_currentEh>

    set_input_voltage_limit(vinpm_6400mV | vinpm_3200mV | vinpm_1600mV | vinpm_800mV |vinpm_400mV | vinpm_200mV | vinpm_100mV);
 8000966:	217f      	movs	r1, #127	; 0x7f
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fefe 	bl	800076a <_ZN3cBQ23set_input_voltage_limitEh>

    REGset(0x0D,0b01100000);
 800096e:	2260      	movs	r2, #96	; 0x60
 8000970:	210d      	movs	r1, #13
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffa4 	bl	80008c0 <_ZN3cBQ6REGsetEhh>

	REGset(0x07,0b11000001);
 8000978:	22c1      	movs	r2, #193	; 0xc1
 800097a:	2107      	movs	r1, #7
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff9f 	bl	80008c0 <_ZN3cBQ6REGsetEhh>
	REGset(0x08,0b00000011);
 8000982:	2203      	movs	r2, #3
 8000984:	2108      	movs	r1, #8
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ff9a 	bl	80008c0 <_ZN3cBQ6REGsetEhh>
    REGset(0x09,0b01000100);
 800098c:	2244      	movs	r2, #68	; 0x44
 800098e:	2109      	movs	r1, #9
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff95 	bl	80008c0 <_ZN3cBQ6REGsetEhh>
    set_startADCconv(); // to setup REG 0x02;
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fdda 	bl	8000550 <_ZN3cBQ16set_startADCconvEv>
    update_VBUS(1,400); // update status
 800099c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009a0:	2101      	movs	r1, #1
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 f804 	bl	80009b0 <_ZN3cBQ11update_VBUSEbt>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_ZN3cBQ11update_VBUSEbt>:


bool cBQ::update_VBUS(bool bq_int_flag, uint16_t max_count = 500){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
 80009bc:	4613      	mov	r3, r2
 80009be:	803b      	strh	r3, [r7, #0]

    static uint8_t iterator = 0;

    if(bq_int_flag)iterator = 1;
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <_ZN3cBQ11update_VBUSEbt+0x1c>
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
    if(iterator!=0){
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d018      	beq.n	8000a06 <_ZN3cBQ11update_VBUSEbt+0x56>
        iterator++;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80009de:	701a      	strb	r2, [r3, #0]
        if(iterator<max_count){
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <_ZN3cBQ11update_VBUSEbt+0x6c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	883b      	ldrh	r3, [r7, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	da09      	bge.n	8000a00 <_ZN3cBQ11update_VBUSEbt+0x50>
            statusVBUS = static_cast<uint8_t>(BQRead_VALUE(0x0B) >> 5);
 80009ec:	210b      	movs	r1, #11
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fee8 	bl	80007c4 <_ZN3cBQ12BQRead_VALUEEh>
 80009f4:	4603      	mov	r3, r0
 80009f6:	115b      	asrs	r3, r3, #5
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	775a      	strb	r2, [r3, #29]
 80009fe:	e002      	b.n	8000a06 <_ZN3cBQ11update_VBUSEbt+0x56>
        }
        else {
            iterator=0;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <_ZN3cBQ11update_VBUSEbt+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
        }
    }
    return iterator;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <_ZN3cBQ11update_VBUSEbt+0x6c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000214 	.word	0x20000214

08000a20 <_ZN17mainboard_form_hbC1Ev>:
 */

#include <Data_form_HB.h>
#include <algorithm>

mainboard_form_hb::mainboard_form_hb(){
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    _data.ALS = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	809a      	strh	r2, [r3, #4]
    _data.IR = 0;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	80da      	strh	r2, [r3, #6]
    _recive_data_ptr = nullptr;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
    std::fill(_data.TEMP.begin(),_data.TEMP.end(), 0);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3308      	adds	r3, #8
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f87f 	bl	8000b42 <_ZNSt5arrayIsLj3EE5beginEv>
 8000a44:	4604      	mov	r4, r0
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3308      	adds	r3, #8
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f885 	bl	8000b5a <_ZNSt5arrayIsLj3EE3endEv>
 8000a50:	4601      	mov	r1, r0
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f000 f889 	bl	8000b74 <_ZSt4fillIPsiEvT_S1_RKT0_>
}
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <_ZN17mainboard_form_hb6updateEv>:


void mainboard_form_hb::update(){
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	const uint8_t offset = 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
    _data.ALS = static_cast<uint16_t>((_recive_data_ptr[1+offset]<<8) | _recive_data_ptr[0+offset]);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	809a      	strh	r2, [r3, #4]
    _data.IR = static_cast<uint16_t>((_recive_data_ptr[3+offset]<<8) | _recive_data_ptr[2+offset]);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3303      	adds	r3, #3
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	80da      	strh	r2, [r3, #6]
    _data.TEMP[D1] = static_cast<int16_t>(static_cast<uint16_t>((_recive_data_ptr[5+offset]<<8) | _recive_data_ptr[4+offset]));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3306      	adds	r3, #6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3305      	adds	r3, #5
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b21c      	sxth	r4, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f862 	bl	8000ba2 <_ZNSt5arrayIsLj3EEixEj>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4622      	mov	r2, r4
 8000ae2:	801a      	strh	r2, [r3, #0]
    _data.TEMP[D2] = static_cast<int16_t>(static_cast<uint16_t>((_recive_data_ptr[7+offset]<<8) | _recive_data_ptr[6+offset]));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3308      	adds	r3, #8
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3307      	adds	r3, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21c      	sxth	r4, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3308      	adds	r3, #8
 8000b02:	2101      	movs	r1, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f84c 	bl	8000ba2 <_ZNSt5arrayIsLj3EEixEj>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4622      	mov	r2, r4
 8000b0e:	801a      	strh	r2, [r3, #0]
    _data.TEMP[D3] = static_cast<int16_t>(static_cast<uint16_t>((_recive_data_ptr[0]<<8) | _recive_data_ptr[8+offset]));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3309      	adds	r3, #9
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21c      	sxth	r4, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f837 	bl	8000ba2 <_ZNSt5arrayIsLj3EEixEj>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4622      	mov	r2, r4
 8000b38:	801a      	strh	r2, [r3, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}

08000b42 <_ZNSt5arrayIsLj3EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f838 	bl	8000bc0 <_ZNSt5arrayIsLj3EE4dataEv>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_ZNSt5arrayIsLj3EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f82c 	bl	8000bc0 <_ZNSt5arrayIsLj3EE4dataEv>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	3306      	adds	r3, #6
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZSt4fillIPsiEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 f82a 	bl	8000bda <_ZSt12__niter_baseIPsET_S1_>
 8000b86:	4604      	mov	r4, r0
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f000 f826 	bl	8000bda <_ZSt12__niter_baseIPsET_S1_>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4620      	mov	r0, r4
 8000b96:	f000 f82b 	bl	8000bf0 <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}

08000ba2 <_ZNSt5arrayIsLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f838 	bl	8000c26 <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_ZNSt5arrayIsLj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f83a 	bl	8000c44 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_ZSt12__niter_baseIPsET_S1_>:
    __niter_base(_Iterator __it)
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d007      	beq.n	8000c1a <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x2a>
	*__first = __tmp;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	801a      	strh	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3302      	adds	r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e7f3      	b.n	8000c02 <_ZSt8__fill_aIPsiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_ZNSt14__array_traitsIsLj3EE6_S_refERA3_Ksj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_Z15MPU6050_SetDlpfh>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af04      	add	r7, sp, #16
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <_Z15MPU6050_SetDlpfh+0x64>)
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	f107 030f 	add.w	r3, r7, #15
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	221a      	movs	r2, #26
 8000c7c:	21d0      	movs	r1, #208	; 0xd0
 8000c7e:	f003 fa83 	bl	8004188 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f023 0307 	bic.w	r3, r3, #7
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_Z15MPU6050_SetDlpfh+0x64>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	2314      	movs	r3, #20
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	f107 030f 	add.w	r3, r7, #15
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	221a      	movs	r2, #26
 8000cb2:	21d0      	movs	r1, #208	; 0xd0
 8000cb4:	f003 f994 	bl	8003fe0 <HAL_I2C_Mem_Write>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000218 	.word	0x20000218

08000cc4 <_Z19MPU6050_DeviceReseth>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <_Z19MPU6050_DeviceReseth+0x68>)
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	2314      	movs	r3, #20
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	f107 030f 	add.w	r3, r7, #15
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	226b      	movs	r2, #107	; 0x6b
 8000ce4:	21d0      	movs	r1, #208	; 0xd0
 8000ce6:	f003 fa4f 	bl	8004188 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	01db      	lsls	r3, r3, #7
 8000cf8:	b25a      	sxtb	r2, r3
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <_Z19MPU6050_DeviceReseth+0x68>)
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	2314      	movs	r3, #20
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	f107 030f 	add.w	r3, r7, #15
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	226b      	movs	r2, #107	; 0x6b
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	f003 f95f 	bl	8003fe0 <HAL_I2C_Mem_Write>
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000218 	.word	0x20000218

08000d30 <_Z23MPU6050_SetSleepEnabledh>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af04      	add	r7, sp, #16
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <_Z23MPU6050_SetSleepEnabledh+0x6c>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	2314      	movs	r3, #20
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	2301      	movs	r3, #1
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	f107 030f 	add.w	r3, r7, #15
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	226b      	movs	r2, #107	; 0x6b
 8000d50:	21d0      	movs	r1, #208	; 0xd0
 8000d52:	f003 fa19 	bl	8004188 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	019b      	lsls	r3, r3, #6
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6a:	b25a      	sxtb	r2, r3
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_Z23MPU6050_SetSleepEnabledh+0x6c>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	2314      	movs	r3, #20
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	2301      	movs	r3, #1
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	f107 030f 	add.w	r3, r7, #15
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	226b      	movs	r2, #107	; 0x6b
 8000d8e:	21d0      	movs	r1, #208	; 0xd0
 8000d90:	f003 f926 	bl	8003fe0 <HAL_I2C_Mem_Write>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000218 	.word	0x20000218

08000da0 <_Z22MPU6050_SetClockSourceh>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <_Z22MPU6050_SetClockSourceh+0x64>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	2314      	movs	r3, #20
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	2301      	movs	r3, #1
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	f107 030f 	add.w	r3, r7, #15
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	226b      	movs	r2, #107	; 0x6b
 8000dc0:	21d0      	movs	r1, #208	; 0xd0
 8000dc2:	f003 f9e1 	bl	8004188 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f023 0307 	bic.w	r3, r3, #7
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_Z22MPU6050_SetClockSourceh+0x64>)
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	2314      	movs	r3, #20
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	f107 030f 	add.w	r3, r7, #15
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	226b      	movs	r2, #107	; 0x6b
 8000df6:	21d0      	movs	r1, #208	; 0xd0
 8000df8:	f003 f8f2 	bl	8003fe0 <HAL_I2C_Mem_Write>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000218 	.word	0x20000218

08000e08 <_Z29MPU6050_SetFullScaleGyroRangeh>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af04      	add	r7, sp, #16
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <_Z29MPU6050_SetFullScaleGyroRangeh+0xac>)
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	2314      	movs	r3, #20
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	f107 030f 	add.w	r3, r7, #15
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	221b      	movs	r2, #27
 8000e28:	21d0      	movs	r1, #208	; 0xd0
 8000e2a:	f003 f9ad 	bl	8004188 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f023 0318 	bic.w	r3, r3, #24
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <_Z29MPU6050_SetFullScaleGyroRangeh+0xac>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	2314      	movs	r3, #20
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f107 030f 	add.w	r3, r7, #15
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	221b      	movs	r2, #27
 8000e66:	21d0      	movs	r1, #208	; 0xd0
 8000e68:	f003 f8ba 	bl	8003fe0 <HAL_I2C_Mem_Write>

	switch(Range)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d81a      	bhi.n	8000ea8 <_Z29MPU6050_SetFullScaleGyroRangeh+0xa0>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <_Z29MPU6050_SetFullScaleGyroRangeh+0x70>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000e89 	.word	0x08000e89
 8000e7c:	08000e91 	.word	0x08000e91
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000ea1 	.word	0x08000ea1
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <_Z29MPU6050_SetFullScaleGyroRangeh+0xb4>)
 8000e8c:	601a      	str	r2, [r3, #0]
			break;
 8000e8e:	e00c      	b.n	8000eaa <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb8>)
 8000e94:	601a      	str	r2, [r3, #0]
			break;
 8000e96:	e008      	b.n	8000eaa <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <_Z29MPU6050_SetFullScaleGyroRangeh+0xbc>)
 8000e9c:	601a      	str	r2, [r3, #0]
			break;
 8000e9e:	e004      	b.n	8000eaa <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <_Z29MPU6050_SetFullScaleGyroRangeh+0xb0>)
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <_Z29MPU6050_SetFullScaleGyroRangeh+0xc0>)
 8000ea4:	601a      	str	r2, [r3, #0]
			break;
 8000ea6:	e000      	b.n	8000eaa <_Z29MPU6050_SetFullScaleGyroRangeh+0xa2>
		default:
			break;
 8000ea8:	bf00      	nop
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000218 	.word	0x20000218
 8000eb8:	20000220 	.word	0x20000220
 8000ebc:	3bfa1e3f 	.word	0x3bfa1e3f
 8000ec0:	3c7a2270 	.word	0x3c7a2270
 8000ec4:	3cf9bfdf 	.word	0x3cf9bfdf
 8000ec8:	3d79c0ec 	.word	0x3d79c0ec

08000ecc <_Z30MPU6050_SetFullScaleAccelRangeh>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <_Z30MPU6050_SetFullScaleAccelRangeh+0xac>)
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	2314      	movs	r3, #20
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	f107 030f 	add.w	r3, r7, #15
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	221c      	movs	r2, #28
 8000eec:	21d0      	movs	r1, #208	; 0xd0
 8000eee:	f003 f94b 	bl	8004188 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f023 0318 	bic.w	r3, r3, #24
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <_Z30MPU6050_SetFullScaleAccelRangeh+0xac>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	2314      	movs	r3, #20
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f107 030f 	add.w	r3, r7, #15
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	221c      	movs	r2, #28
 8000f2a:	21d0      	movs	r1, #208	; 0xd0
 8000f2c:	f003 f858 	bl	8003fe0 <HAL_I2C_Mem_Write>

	switch(Range)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d81a      	bhi.n	8000f6c <_Z30MPU6050_SetFullScaleAccelRangeh+0xa0>
 8000f36:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <_Z30MPU6050_SetFullScaleAccelRangeh+0x70>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f55 	.word	0x08000f55
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f65 	.word	0x08000f65
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <_Z30MPU6050_SetFullScaleAccelRangeh+0xb4>)
 8000f50:	601a      	str	r2, [r3, #0]
			break;
 8000f52:	e00c      	b.n	8000f6e <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <_Z30MPU6050_SetFullScaleAccelRangeh+0xb8>)
 8000f58:	601a      	str	r2, [r3, #0]
			break;
 8000f5a:	e008      	b.n	8000f6e <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <_Z30MPU6050_SetFullScaleAccelRangeh+0xbc>)
 8000f60:	601a      	str	r2, [r3, #0]
			break;
 8000f62:	e004      	b.n	8000f6e <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <_Z30MPU6050_SetFullScaleAccelRangeh+0xb0>)
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <_Z30MPU6050_SetFullScaleAccelRangeh+0xc0>)
 8000f68:	601a      	str	r2, [r3, #0]
			break;
 8000f6a:	e000      	b.n	8000f6e <_Z30MPU6050_SetFullScaleAccelRangeh+0xa2>
		default:
			break;
 8000f6c:	bf00      	nop
	}
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000218 	.word	0x20000218
 8000f7c:	2000021c 	.word	0x2000021c
 8000f80:	387fda40 	.word	0x387fda40
 8000f84:	38ffda40 	.word	0x38ffda40
 8000f88:	397fda40 	.word	0x397fda40
 8000f8c:	39fff518 	.word	0x39fff518

08000f90 <_Z27MPU6050_GetAccelerometerRAWPsS_S_>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <_Z27MPU6050_GetAccelerometerRAWPsS_S_+0x68>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	2314      	movs	r3, #20
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	223b      	movs	r2, #59	; 0x3b
 8000fb2:	21d0      	movs	r1, #208	; 0xd0
 8000fb4:	f003 f8e8 	bl	8004188 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8000fb8:	7c3b      	ldrb	r3, [r7, #16]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7c7b      	ldrb	r3, [r7, #17]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 8000fca:	7cbb      	ldrb	r3, [r7, #18]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7cfb      	ldrb	r3, [r7, #19]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 8000fdc:	7d3b      	ldrb	r3, [r7, #20]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	801a      	strh	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000218 	.word	0x20000218

08000ffc <_Z30MPU6050_GetAccelerometerScaledPfS_S_>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	int16_t tmp_x;
	int16_t tmp_y;
	int16_t tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 8001008:	f107 0212 	add.w	r2, r7, #18
 800100c:	f107 0114 	add.w	r1, r7, #20
 8001010:	f107 0316 	add.w	r3, r7, #22
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffbb 	bl	8000f90 <_Z27MPU6050_GetAccelerometerRAWPsS_S_>

	*x = (float)tmp_x * Acc_Scale;
 800101a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <_Z30MPU6050_GetAccelerometerScaledPfS_S_+0x7c>)
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 8001036:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <_Z30MPU6050_GetAccelerometerScaledPfS_S_+0x7c>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 8001052:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <_Z30MPU6050_GetAccelerometerScaledPfS_S_+0x7c>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	edc3 7a00 	vstr	s15, [r3]
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000021c 	.word	0x2000021c

0800107c <_Z23MPU6050_GetGyroscopeRAWPsS_S_>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af04      	add	r7, sp, #16
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <_Z23MPU6050_GetGyroscopeRAWPsS_S_+0x68>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	2314      	movs	r3, #20
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2306      	movs	r3, #6
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2243      	movs	r2, #67	; 0x43
 800109e:	21d0      	movs	r1, #208	; 0xd0
 80010a0:	f003 f872 	bl	8004188 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 80010a4:	7c3b      	ldrb	r3, [r7, #16]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	7c7b      	ldrb	r3, [r7, #17]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 80010b6:	7cbb      	ldrb	r3, [r7, #18]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 80010c8:	7d3b      	ldrb	r3, [r7, #20]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7d7b      	ldrb	r3, [r7, #21]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	801a      	strh	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000218 	.word	0x20000218

080010e8 <_Z26MPU6050_GetGyroscopeScaledPfS_S_>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	int16_t tmp_x;
	int16_t tmp_y;
	int16_t tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 80010f4:	f107 0212 	add.w	r2, r7, #18
 80010f8:	f107 0114 	add.w	r1, r7, #20
 80010fc:	f107 0316 	add.w	r3, r7, #22
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffbb 	bl	800107c <_Z23MPU6050_GetGyroscopeRAWPsS_S_>

	*x = (float)tmp_x * Gyr_Scale;
 8001106:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <_Z26MPU6050_GetGyroscopeScaledPfS_S_+0x7c>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 8001122:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <_Z26MPU6050_GetGyroscopeScaledPfS_S_+0x7c>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 800113e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <_Z26MPU6050_GetGyroscopeScaledPfS_S_+0x7c>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edc3 7a00 	vstr	s15, [r3]
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000220 	.word	0x20000220

08001168 <_Z12MPU6050_InitP19__I2C_HandleTypeDef>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 8001170:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <_Z12MPU6050_InitP19__I2C_HandleTypeDef+0x3c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fda4 	bl	8000cc4 <_Z19MPU6050_DeviceReseth>
    MPU6050_SetSleepEnabled(0);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fdd7 	bl	8000d30 <_Z23MPU6050_SetSleepEnabledh>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fe0c 	bl	8000da0 <_Z22MPU6050_SetClockSourceh>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8001188:	2004      	movs	r0, #4
 800118a:	f7ff fd67 	bl	8000c5c <_Z15MPU6050_SetDlpfh>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fe3a 	bl	8000e08 <_Z29MPU6050_SetFullScaleGyroRangeh>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fe99 	bl	8000ecc <_Z30MPU6050_SetFullScaleAccelRangeh>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000218 	.word	0x20000218

080011a8 <_Z22Start_IMU_Gesture_TaskPKv>:
float gyr_x;
float gyr_y;
float gyr_z;


void Start_IMU_Gesture_Task([[maybe_unused]] void const * argument){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]


	MPU6050_Init(&hi2c1);
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <_Z22Start_IMU_Gesture_TaskPKv+0x90>)
 80011b2:	f7ff ffd9 	bl	8001168 <_Z12MPU6050_InitP19__I2C_HandleTypeDef>
	MPU6050_SetSleepEnabled(0);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fdba 	bl	8000d30 <_Z23MPU6050_SetSleepEnabledh>
	MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fdef 	bl	8000da0 <_Z22MPU6050_SetClockSourceh>
	MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 80011c2:	2004      	movs	r0, #4
 80011c4:	f7ff fd4a 	bl	8000c5c <_Z15MPU6050_SetDlpfh>
	MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fe1d 	bl	8000e08 <_Z29MPU6050_SetFullScaleGyroRangeh>
	MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fe7c 	bl	8000ecc <_Z30MPU6050_SetFullScaleAccelRangeh>
	MPU6050_SetSleepEnabled(0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fdab 	bl	8000d30 <_Z23MPU6050_SetSleepEnabledh>
	MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fde0 	bl	8000da0 <_Z22MPU6050_SetClockSourceh>
	MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fd3b 	bl	8000c5c <_Z15MPU6050_SetDlpfh>
	MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fe0e 	bl	8000e08 <_Z29MPU6050_SetFullScaleGyroRangeh>
	MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fe6d 	bl	8000ecc <_Z30MPU6050_SetFullScaleAccelRangeh>
	MPU6050_SetSleepEnabled(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fd9c 	bl	8000d30 <_Z23MPU6050_SetSleepEnabledh>
	MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fdd1 	bl	8000da0 <_Z22MPU6050_SetClockSourceh>
	MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 80011fe:	2004      	movs	r0, #4
 8001200:	f7ff fd2c 	bl	8000c5c <_Z15MPU6050_SetDlpfh>
	MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fdff 	bl	8000e08 <_Z29MPU6050_SetFullScaleGyroRangeh>
	MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fe5e 	bl	8000ecc <_Z30MPU6050_SetFullScaleAccelRangeh>
	//MX_USB_DEVICE_Init();

	for(;;){


		osDelay(240);
 8001210:	20f0      	movs	r0, #240	; 0xf0
 8001212:	f007 fd45 	bl	8008ca0 <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <_Z22Start_IMU_Gesture_TaskPKv+0x94>)
 800121c:	f002 fcfe 	bl	8003c1c <HAL_GPIO_TogglePin>


		MPU6050_GetAccelerometerScaled(&acc_x, &acc_y, &acc_z);
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <_Z22Start_IMU_Gesture_TaskPKv+0x98>)
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <_Z22Start_IMU_Gesture_TaskPKv+0x9c>)
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <_Z22Start_IMU_Gesture_TaskPKv+0xa0>)
 8001226:	f7ff fee9 	bl	8000ffc <_Z30MPU6050_GetAccelerometerScaledPfS_S_>
		MPU6050_GetGyroscopeScaled(&gyr_x, &gyr_y, &gyr_z);
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <_Z22Start_IMU_Gesture_TaskPKv+0xa4>)
 800122c:	4908      	ldr	r1, [pc, #32]	; (8001250 <_Z22Start_IMU_Gesture_TaskPKv+0xa8>)
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <_Z22Start_IMU_Gesture_TaskPKv+0xac>)
 8001230:	f7ff ff5a 	bl	80010e8 <_Z26MPU6050_GetGyroscopeScaledPfS_S_>
		osDelay(240);
 8001234:	e7ec      	b.n	8001210 <_Z22Start_IMU_Gesture_TaskPKv+0x68>
 8001236:	bf00      	nop
 8001238:	2000395c 	.word	0x2000395c
 800123c:	48000400 	.word	0x48000400
 8001240:	2000022c 	.word	0x2000022c
 8001244:	20000228 	.word	0x20000228
 8001248:	20000224 	.word	0x20000224
 800124c:	20000238 	.word	0x20000238
 8001250:	20000234 	.word	0x20000234
 8001254:	20000230 	.word	0x20000230

08001258 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001262:	edd7 7a01 	vldr	s15, [r7, #4]
 8001266:	eef0 7ae7 	vabs.f32	s15, s15
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_ZN4SMPS5SBC_c7set_pwmEt>:
#include <LED_Driver.hpp>
#include "main.h"
#include "math.h"


inline void SMPS::SBC_c::set_pwm(uint16_t pwm){
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <_ZN4SMPS5SBC_c7set_pwmEt+0x20>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001296:	e02c      	b.n	80012f2 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b04      	cmp	r3, #4
 800129e:	d105      	bne.n	80012ac <_ZN4SMPS5SBC_c7set_pwmEt+0x34>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012aa:	e022      	b.n	80012f2 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d105      	bne.n	80012c0 <_ZN4SMPS5SBC_c7set_pwmEt+0x48>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012be:	e018      	b.n	80012f2 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b0c      	cmp	r3, #12
 80012c6:	d105      	bne.n	80012d4 <_ZN4SMPS5SBC_c7set_pwmEt+0x5c>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012d2:	e00e      	b.n	80012f2 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b10      	cmp	r3, #16
 80012da:	d105      	bne.n	80012e8 <_ZN4SMPS5SBC_c7set_pwmEt+0x70>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	659a      	str	r2, [r3, #88]	; 0x58
}
 80012e6:	e004      	b.n	80012f2 <_ZN4SMPS5SBC_c7set_pwmEt+0x7a>
	__HAL_TIM_SET_COMPARE(_htim, _tim_channel, pwm);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_ZN4SMPS5SBC_c14get_current_mAEv>:


inline uint32_t SMPS::SBC_c::get_current_mA(){
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	return static_cast<uint32_t>(
			static_cast<float>(_adc1_data_ptr[_current_channel]) * 0.2 * 2
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b5b      	ldrb	r3, [r3, #13]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001340 <_ZN4SMPS5SBC_c14get_current_mAEv+0x40>
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	ee77 7aa7 	vadd.f32	s15, s15, s15
	);
 800132a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132e:	ee17 3a90 	vmov	r3, s15
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	3e4ccccd 	.word	0x3e4ccccd

08001344 <_ZN4SMPS5SBC_c11set_currentEm>:


void SMPS::SBC_c::set_current(uint32_t current_mA){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	_set_current_mA = current_mA;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	611a      	str	r2, [r3, #16]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_ZN4SMPS5SBC_c14set_update_pidEv>:
}




void SMPS::SBC_c::set_update_pid(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

	float measurement = static_cast<float>(get_current_mA());
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffc9 	bl	8001300 <_ZN4SMPS5SBC_c14get_current_mAEv>
 800136e:	ee07 0a90 	vmov	s15, r0
 8001372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001376:	edc7 7a06 	vstr	s15, [r7, #24]

	float error = static_cast<float>(_set_current_mA) - measurement;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001386:	edd7 7a06 	vldr	s15, [r7, #24]
 800138a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138e:	edc7 7a05 	vstr	s15, [r7, #20]

	float proportional = pid_const.Kp * error;
 8001392:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001584 <_ZN4SMPS5SBC_c14set_update_pidEv+0x224>
 8001396:	edd7 7a05 	vldr	s15, [r7, #20]
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	edc7 7a04 	vstr	s15, [r7, #16]

	_pid_data.integrator = _pid_data.integrator + 0.5f * pid_const.Ki * pid_const.Ts *(error - _pid_data.prevError);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80013a8:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001588 <_ZN4SMPS5SBC_c14set_update_pidEv+0x228>
 80013ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	eddf 6a75 	vldr	s13, [pc, #468]	; 800158c <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 80013b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	edd3 7a06 	vldr	s15, [r3, #24]
 80013c2:	ed97 6a05 	vldr	s12, [r7, #20]
 80013c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edc3 7a05 	vstr	s15, [r3, #20]

	// Anti-wind-up via integrator clamping
	if(_pid_data.integrator > pid_const.integ_lim_max)_pid_data.integrator = pid_const.integ_lim_max;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	edd3 7a05 	vldr	s15, [r3, #20]
 80013de:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd02      	ble.n	80013f2 <_ZN4SMPS5SBC_c14set_update_pidEv+0x92>
 80013ec:	4a68      	ldr	r2, [pc, #416]	; (8001590 <_ZN4SMPS5SBC_c14set_update_pidEv+0x230>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	615a      	str	r2, [r3, #20]
	if(_pid_data.integrator < pid_const.integ_lim_min)_pid_data.integrator = pid_const.integ_lim_min;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80013f8:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80013fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d502      	bpl.n	800140c <_ZN4SMPS5SBC_c14set_update_pidEv+0xac>
 8001406:	4a63      	ldr	r2, [pc, #396]	; (8001594 <_ZN4SMPS5SBC_c14set_update_pidEv+0x234>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	615a      	str	r2, [r3, #20]


	// - sign -> derative is on measurement + some inertia
	_pid_data.differentiator = -(2.0f * pid_const.Kd * (measurement - _pid_data.prevMeasurement)
 800140c:	eddf 7a5f 	vldr	s15, [pc, #380]	; 800158c <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001410:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 7a08 	vldr	s15, [r3, #32]
 800141a:	edd7 6a06 	vldr	s13, [r7, #24]
 800141e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001422:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (2.0f * pid_const.tau - pid_const.Ts) * _pid_data.differentiator)
 8001426:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8001598 <_ZN4SMPS5SBC_c14set_update_pidEv+0x238>
 800142a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800142e:	eddf 6a57 	vldr	s13, [pc, #348]	; 800158c <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001432:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edd3 7a07 	vldr	s15, [r3, #28]
 800143c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
	_pid_data.differentiator = -(2.0f * pid_const.Kd * (measurement - _pid_data.prevMeasurement)
 8001444:	eef1 6a67 	vneg.f32	s13, s15
            				/ (2.0f * pid_const.tau + pid_const.Ts);
 8001448:	eddf 7a53 	vldr	s15, [pc, #332]	; 8001598 <_ZN4SMPS5SBC_c14set_update_pidEv+0x238>
 800144c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001450:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800158c <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001454:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001458:	eec6 7a87 	vdiv.f32	s15, s13, s14
	_pid_data.differentiator = -(2.0f * pid_const.Kd * (measurement - _pid_data.prevMeasurement)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edc3 7a07 	vstr	s15, [r3, #28]


	float output = proportional + _pid_data.integrator + _pid_data.differentiator;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	ed93 7a05 	vldr	s14, [r3, #20]
 8001468:	edd7 7a04 	vldr	s15, [r7, #16]
 800146c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edd3 7a07 	vldr	s15, [r3, #28]
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	edc7 7a07 	vstr	s15, [r7, #28]


	if(output > pid_const.out_lim_max)output = pid_const.out_lim_max;
 800147e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001482:	edd7 7a07 	vldr	s15, [r7, #28]
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	dd01      	ble.n	8001494 <_ZN4SMPS5SBC_c14set_update_pidEv+0x134>
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <_ZN4SMPS5SBC_c14set_update_pidEv+0x23c>)
 8001492:	61fb      	str	r3, [r7, #28]
	if(output < pid_const.out_lim_min)output = pid_const.out_lim_min;
 8001494:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001498:	edd7 7a07 	vldr	s15, [r7, #28]
 800149c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	d501      	bpl.n	80014aa <_ZN4SMPS5SBC_c14set_update_pidEv+0x14a>
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <_ZN4SMPS5SBC_c14set_update_pidEv+0x240>)
 80014a8:	61fb      	str	r3, [r7, #28]

	_pid_data.prevError = error;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	619a      	str	r2, [r3, #24]
	_pid_data.prevMeasurement = measurement;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	621a      	str	r2, [r3, #32]

	_now_pwm_val += output;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	if(fabs(measurement) < 1 && _set_current_mA != 0 && _now_pwm_val > 100){
 80014ca:	ed97 0a06 	vldr	s0, [r7, #24]
 80014ce:	f7ff fec3 	bl	8001258 <_ZSt4fabsf>
 80014d2:	eef0 7a40 	vmov.f32	s15, s0
 80014d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d50f      	bpl.n	8001504 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80015a4 <_ZN4SMPS5SBC_c14set_update_pidEv+0x244>
 80014f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	dd01      	ble.n	8001504 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a4>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1a6>
 8001504:	2300      	movs	r3, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <_ZN4SMPS5SBC_c14set_update_pidEv+0x1bc>
		constexpr float max_pwm_no_load = MAX_PWM_TIM1 * MAX_VOLTAGE_mV_DISCONNECT_PROTECTION / 4200;
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <_ZN4SMPS5SBC_c14set_update_pidEv+0x248>)
 800150c:	60fb      	str	r3, [r7, #12]
		_now_pwm_val = max_pwm_no_load;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <_ZN4SMPS5SBC_c14set_update_pidEv+0x248>)
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
		_pid_data.integrator = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
	}

	if(_now_pwm_val > pid_const.pwm_lim_max)_now_pwm_val = pid_const.pwm_lim_max;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001522:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80015ac <_ZN4SMPS5SBC_c14set_update_pidEv+0x24c>
 8001526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dd02      	ble.n	8001536 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1d6>
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <_ZN4SMPS5SBC_c14set_update_pidEv+0x250>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
	if(_now_pwm_val < pid_const.pwm_lim_min)_now_pwm_val = pid_const.pwm_lim_min;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800153c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800158c <_ZN4SMPS5SBC_c14set_update_pidEv+0x22c>
 8001540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d503      	bpl.n	8001552 <_ZN4SMPS5SBC_c14set_update_pidEv+0x1f2>
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24

	// TODO re-do next if and test stability
	if(_set_current_mA == 0)set_pwm(0);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d104      	bne.n	8001564 <_ZN4SMPS5SBC_c14set_update_pidEv+0x204>
 800155a:	2100      	movs	r1, #0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe8b 	bl	8001278 <_ZN4SMPS5SBC_c7set_pwmEt>
	else set_pwm( static_cast<uint16_t>(_now_pwm_val) );

}
 8001562:	e00b      	b.n	800157c <_ZN4SMPS5SBC_c14set_update_pidEv+0x21c>
	else set_pwm( static_cast<uint16_t>(_now_pwm_val) );
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800156a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156e:	ee17 3a90 	vmov	r3, s15
 8001572:	b29b      	uxth	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fe7e 	bl	8001278 <_ZN4SMPS5SBC_c7set_pwmEt>
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	3c23d70a 	.word	0x3c23d70a
 8001588:	3ba3d70a 	.word	0x3ba3d70a
 800158c:	00000000 	.word	0x00000000
 8001590:	40a00000 	.word	0x40a00000
 8001594:	c0a00000 	.word	0xc0a00000
 8001598:	3d4ccccd 	.word	0x3d4ccccd
 800159c:	41200000 	.word	0x41200000
 80015a0:	c1200000 	.word	0xc1200000
 80015a4:	42c80000 	.word	0x42c80000
 80015a8:	43260000 	.word	0x43260000
 80015ac:	43480000 	.word	0x43480000
 80015b0:	43480000 	.word	0x43480000

080015b4 <_ZN4SMPS10pid_data_sIfEC1Ev>:



// template for testing with volatile and interrupt: pid_data_s<volatile float> foo;
template <typename Type>
struct pid_data_s{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_ZN4SMPS5SBC_cC1Ev>:


SMPS::SBC_c::SBC_c(){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3314      	adds	r3, #20
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffdc 	bl	80015b4 <_ZN4SMPS10pid_data_sIfEC1Ev>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
	_htim = nullptr;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
	_adc1_data_ptr = nullptr;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
	_tim_channel = 0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
	_voltage_channel = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	731a      	strb	r2, [r3, #12]
	_current_channel = 0;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	735a      	strb	r2, [r3, #13]
	_set_current_mA = 0;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
}
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item>:


void SMPS::led_drivers_c::set_all_currents(set_current_item *data){
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
	if(data->set_current[D1] <= D1_D2_max_current)SBC[D1].set_current(data->set_current[D1]);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001644:	4293      	cmp	r3, r2
 8001646:	d80b      	bhi.n	8001660 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item+0x2e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f82e 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8001652:	4602      	mov	r2, r0
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fe72 	bl	8001344 <_ZN4SMPS5SBC_c11set_currentEm>
	if(data->set_current[D2] <= D1_D2_max_current)SBC[D2].set_current(data->set_current[D2]);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	885b      	ldrh	r3, [r3, #2]
 8001664:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001668:	4293      	cmp	r3, r2
 800166a:	d80b      	bhi.n	8001684 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item+0x52>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2101      	movs	r1, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f000 f81c 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8001676:	4602      	mov	r2, r0
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f7ff fe60 	bl	8001344 <_ZN4SMPS5SBC_c11set_currentEm>
	if(data->set_current[D3] <= D3_max_current)SBC[D3].set_current(data->set_current[D3]);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800168c:	d80b      	bhi.n	80016a6 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item+0x74>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f80b 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8001698:	4602      	mov	r2, r0
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	889b      	ldrh	r3, [r3, #4]
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7ff fe4f 	bl	8001344 <_ZN4SMPS5SBC_c11set_currentEm>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>:
      operator[](size_type __n) noexcept
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f805 	bl	80016cc <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_refERA3_KS1_j>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>:
	SBC_c();
	~SBC_c() = default;
	SBC_c(const SBC_c&)= default;
	SBC_c & operator= ( const SBC_c&) = default;

	constexpr void init(TIM_HandleTypeDef * htim, uint32_t tim_channel ,uint32_t *adc1_data_ptr, ADC_RANK_DMA voltage_channel, ADC_RANK_DMA current_channel){
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
		_htim = htim;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	601a      	str	r2, [r3, #0]
		_adc1_data_ptr = adc1_data_ptr;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]
		_tim_channel = tim_channel;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
		_voltage_channel = voltage_channel;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7e3a      	ldrb	r2, [r7, #24]
 8001714:	731a      	strb	r2, [r3, #12]
		_current_channel = current_channel;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	7f3a      	ldrb	r2, [r7, #28]
 800171a:	735a      	strb	r2, [r3, #13]
	};
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev>:
    struct array
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2402      	movs	r4, #2
 8001734:	461d      	mov	r5, r3
 8001736:	2c00      	cmp	r4, #0
 8001738:	db05      	blt.n	8001746 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev+0x1e>
 800173a:	4628      	mov	r0, r5
 800173c:	f7ff ff55 	bl	80015ea <_ZN4SMPS5SBC_cC1Ev>
 8001740:	3528      	adds	r5, #40	; 0x28
 8001742:	3c01      	subs	r4, #1
 8001744:	e7f7      	b.n	8001736 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev+0xe>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bdb0      	pop	{r4, r5, r7, pc}

08001750 <_ZN4SMPS13led_drivers_cC1Ev>:

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////


class led_drivers_c{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ffe4 	bl	8001728 <_ZNSt5arrayIN4SMPS5SBC_cELj3EEC1Ev>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <_Z21Start_LED_Driver_TaskPKv>:
uint8_t Set_Current_QueueBuffer[Set_Current_Queue_Buffer_size];
osStaticMessageQDef_t Set_Current_QueueControlBlock;


void Start_LED_Driver_Task([[maybe_unused]] void const * argument)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b0b5      	sub	sp, #212	; 0xd4
 8001770:	af02      	add	r7, sp, #8
 8001772:	6078      	str	r0, [r7, #4]


	const unsigned int adc1_number_of_channels = 6;
 8001774:	2306      	movs	r3, #6
 8001776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	uint32_t adc1_data[adc1_number_of_channels];

	HAL_ADC_Start_DMA(&hadc1, adc1_data, 6);
 800177a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177e:	2206      	movs	r2, #6
 8001780:	4619      	mov	r1, r3
 8001782:	485f      	ldr	r0, [pc, #380]	; (8001900 <_Z21Start_LED_Driver_TaskPKv+0x194>)
 8001784:	f001 fec2 	bl	800350c <HAL_ADC_Start_DMA>
	SMPS::led_drivers_c led_drivers;
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ffdf 	bl	8001750 <_ZN4SMPS13led_drivers_cC1Ev>

	led_drivers.SBC[0].init(&htim1, TIM_CHANNEL_3, adc1_data, ADC_RANK_0, ADC_RANK_3);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff88 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 800179e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a2:	2203      	movs	r2, #3
 80017a4:	9201      	str	r2, [sp, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	9200      	str	r2, [sp, #0]
 80017aa:	2208      	movs	r2, #8
 80017ac:	4955      	ldr	r1, [pc, #340]	; (8001904 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 80017ae:	f7ff ff9f 	bl	80016f0 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>
	led_drivers.SBC[1].init(&htim1, TIM_CHANNEL_2, adc1_data, ADC_RANK_1, ADC_RANK_4);
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	2101      	movs	r1, #1
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff78 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 80017be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017c2:	2204      	movs	r2, #4
 80017c4:	9201      	str	r2, [sp, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	9200      	str	r2, [sp, #0]
 80017ca:	2204      	movs	r2, #4
 80017cc:	494d      	ldr	r1, [pc, #308]	; (8001904 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 80017ce:	f7ff ff8f 	bl	80016f0 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>
	led_drivers.SBC[2].init(&htim1, TIM_CHANNEL_1, adc1_data, ADC_RANK_2, ADC_RANK_5);
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	2102      	movs	r1, #2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff68 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 80017de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017e2:	2205      	movs	r2, #5
 80017e4:	9201      	str	r2, [sp, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	9200      	str	r2, [sp, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	4945      	ldr	r1, [pc, #276]	; (8001904 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 80017ee:	f7ff ff7f 	bl	80016f0 <_ZN4SMPS5SBC_c4initEP17TIM_HandleTypeDefmPmNS_12ADC_RANK_DMAES4_>

	led_drivers.SBC[0].set_current(0);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff58 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 80017fe:	4603      	mov	r3, r0
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fd9e 	bl	8001344 <_ZN4SMPS5SBC_c11set_currentEm>
	led_drivers.SBC[1].set_current(0);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	2101      	movs	r1, #1
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff4d 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 8001814:	4603      	mov	r3, r0
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fd93 	bl	8001344 <_ZN4SMPS5SBC_c11set_currentEm>
	led_drivers.SBC[2].set_current(0);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	2102      	movs	r1, #2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff42 	bl	80016ae <_ZNSt5arrayIN4SMPS5SBC_cELj3EEixEj>
 800182a:	4603      	mov	r3, r0
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fd88 	bl	8001344 <_ZN4SMPS5SBC_c11set_currentEm>

	//osMessageQDef(Set_Current_Queue, 3, set_current_item);
	osMessageQStaticDef(Set_Current_Queue, 3, set_current_item, Set_Current_QueueBuffer, &Set_Current_QueueControlBlock);
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <_Z21Start_LED_Driver_TaskPKv+0x19c>)
 8001836:	f107 0414 	add.w	r4, r7, #20
 800183a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800183c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Set_Current_QueueHandle = osMessageCreate(osMessageQ(Set_Current_Queue), NULL);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f007 fa55 	bl	8008cf6 <osMessageCreate>
 800184c:	4603      	mov	r3, r0
 800184e:	4a2f      	ldr	r2, [pc, #188]	; (800190c <_Z21Start_LED_Driver_TaskPKv+0x1a0>)
 8001850:	6013      	str	r3, [r2, #0]


	set_current_item set_current_data;

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001852:	2100      	movs	r1, #0
 8001854:	482b      	ldr	r0, [pc, #172]	; (8001904 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 8001856:	f004 fef9 	bl	800664c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800185a:	2104      	movs	r1, #4
 800185c:	4829      	ldr	r0, [pc, #164]	; (8001904 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 800185e:	f004 fef5 	bl	800664c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001862:	2108      	movs	r1, #8
 8001864:	4827      	ldr	r0, [pc, #156]	; (8001904 <_Z21Start_LED_Driver_TaskPKv+0x198>)
 8001866:	f004 fef1 	bl	800664c <HAL_TIM_PWM_Start>

	for(;;)
	{
		osDelay(1);
 800186a:	2001      	movs	r0, #1
 800186c:	f007 fa18 	bl	8008ca0 <osDelay>

		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001874:	4826      	ldr	r0, [pc, #152]	; (8001910 <_Z21Start_LED_Driver_TaskPKv+0x1a4>)
 8001876:	f002 f9d1 	bl	8003c1c <HAL_GPIO_TogglePin>

		// __builtin_expect() test
		if (xQueueReceive( Set_Current_QueueHandle, &set_current_data, 0) == pdPASS)
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <_Z21Start_LED_Driver_TaskPKv+0x1a0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f107 010c 	add.w	r1, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f007 fd15 	bl	80092b4 <xQueueReceive>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <_Z21Start_LED_Driver_TaskPKv+0x13e>
			led_drivers.set_all_currents(&set_current_data);
 800189a:	f107 020c 	add.w	r2, r7, #12
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fec4 	bl	8001632 <_ZN4SMPS13led_drivers_c16set_all_currentsEP16set_current_item>


		for(auto &el:led_drivers.SBC)el.set_update_pid();
 80018aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80018b2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80018b6:	f000 f82d 	bl	8001914 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE5beginEv>
 80018ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80018be:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80018c2:	f000 f833 	bl	800192c <_ZNSt5arrayIN4SMPS5SBC_cELj3EE3endEv>
 80018c6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80018ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d00d      	beq.n	80018f2 <_Z21Start_LED_Driver_TaskPKv+0x186>
 80018d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018de:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80018e2:	f7ff fd3d 	bl	8001360 <_ZN4SMPS5SBC_c14set_update_pidEv>
 80018e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018ea:	3328      	adds	r3, #40	; 0x28
 80018ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018f0:	e7eb      	b.n	80018ca <_Z21Start_LED_Driver_TaskPKv+0x15e>

		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80018f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <_Z21Start_LED_Driver_TaskPKv+0x1a4>)
 80018f8:	f002 f990 	bl	8003c1c <HAL_GPIO_TogglePin>


	}
 80018fc:	e7b5      	b.n	800186a <_Z21Start_LED_Driver_TaskPKv+0xfe>
 80018fe:	bf00      	nop
 8001900:	20003868 	.word	0x20003868
 8001904:	20003a04 	.word	0x20003a04
 8001908:	0800addc 	.word	0x0800addc
 800190c:	20000f98 	.word	0x20000f98
 8001910:	48000400 	.word	0x48000400

08001914 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE5beginEv>:
      begin() noexcept
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f812 	bl	8001946 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE4dataEv>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZNSt5arrayIN4SMPS5SBC_cELj3EE3endEv>:
      end() noexcept
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f806 	bl	8001946 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE4dataEv>
 800193a:	4603      	mov	r3, r0
 800193c:	3378      	adds	r3, #120	; 0x78
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_ZNSt5arrayIN4SMPS5SBC_cELj3EE4dataEv>:
      data() noexcept
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f805 	bl	8001960 <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_ptrERA3_KS1_>
 8001956:	4603      	mov	r3, r0
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZNSt14__array_traitsIN4SMPS5SBC_cELj3EE6_S_ptrERA3_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_ZN17mainboard_form_hb4initEPh>:
	mainboard_form_hb();
	~mainboard_form_hb() = default;
	mainboard_form_hb(const mainboard_form_hb&)= default;
	mainboard_form_hb & operator= (const mainboard_form_hb&) = default;

	constexpr void init(uint8_t *uart_data_ptr){
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
	    _recive_data_ptr = uart_data_ptr;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	601a      	str	r2, [r3, #0]
	};
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_ZN17mainboard_form_hb8get_dataEv>:

	void update();
	inline data_from_hb get_data(){return _data;};
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3304      	adds	r3, #4
 80019a2:	cb03      	ldmia	r3!, {r0, r1}
 80019a4:	6010      	str	r0, [r2, #0]
 80019a6:	6051      	str	r1, [r2, #4]
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	8113      	strh	r3, [r2, #8]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_Z23Start_Main_Control_TaskPKv>:
uint16_t b_voltage_debug;
uint8_t profile_debug;


void Start_Main_Control_Task([[maybe_unused]] void const * argument)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b0ad      	sub	sp, #180	; 0xb4
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN Start_Main_Control_Task */
	/* Infinite loop */

	/* HeadBoard comunication */
	uint8_t headboard_uart_data[10];
	mainboard_form_hb hb;
 80019c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f82b 	bl	8000a20 <_ZN17mainboard_form_hbC1Ev>
	hb.init(headboard_uart_data);
 80019ca:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80019ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ffce 	bl	8001976 <_ZN17mainboard_form_hb4initEPh>
	HAL_UART_Receive_DMA(&huart3, headboard_uart_data, 10);
 80019da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019de:	220a      	movs	r2, #10
 80019e0:	4619      	mov	r1, r3
 80019e2:	48cf      	ldr	r0, [pc, #828]	; (8001d20 <_Z23Start_Main_Control_TaskPKv+0x368>)
 80019e4:	f004 ff60 	bl	80068a8 <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f0:	f002 f90f 	bl	8003c12 <HAL_GPIO_WritePin>

	/* Button State Queue init*/
	button_state_item button_state;
	osMessageQDef(Button_state_Queue, 3, button_state_item);
 80019f4:	4bcb      	ldr	r3, [pc, #812]	; (8001d24 <_Z23Start_Main_Control_TaskPKv+0x36c>)
 80019f6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80019fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Button_state_QueueHandle = osMessageCreate(osMessageQ(Button_state_Queue), NULL);
 8001a00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 f975 	bl	8008cf6 <osMessageCreate>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4ac6      	ldr	r2, [pc, #792]	; (8001d28 <_Z23Start_Main_Control_TaskPKv+0x370>)
 8001a10:	6013      	str	r3, [r2, #0]

	/* Set initial current  */
	set_current_item set_current_data;
	set_current_data.set_current[D1] = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	set_current_data.set_current[D2] = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	set_current_data.set_current[D3] = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	xQueueSend( Set_Current_QueueHandle, &set_current_data, portMAX_DELAY );
 8001a24:	4bc1      	ldr	r3, [pc, #772]	; (8001d2c <_Z23Start_Main_Control_TaskPKv+0x374>)
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a32:	f007 fb25 	bl	8009080 <xQueueGenericSend>

	/* Set profile Init */
	uint8_t profile = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint8_t profile_last = 5;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
	uint16_t current_als = 2000;
 8001a42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a46:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

	/* Battery Management System Init*/
	cBQ BMS;
 8001a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fee6 	bl	8000820 <_ZN3cBQC1Ev>
	BMS.init_BQ(&hi2c1);
 8001a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a58:	49b5      	ldr	r1, [pc, #724]	; (8001d30 <_Z23Start_Main_Control_TaskPKv+0x378>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe ff56 	bl	800090c <_ZN3cBQ7init_BQEP19__I2C_HandleTypeDef>
	BMS.set_boost_mode(true);
 8001a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a64:	2101      	movs	r1, #1
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd81 	bl	800056e <_ZN3cBQ14set_boost_modeEb>
	BMS.set_battcharge(true);
 8001a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fda7 	bl	80005c6 <_ZN3cBQ14set_battchargeEb>



	for(;;)
	{
		osDelay(50);
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f007 f911 	bl	8008ca0 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);  // refresh more frequent than 15.25Hz
 8001a7e:	48ad      	ldr	r0, [pc, #692]	; (8001d34 <_Z23Start_Main_Control_TaskPKv+0x37c>)
 8001a80:	f002 fce0 	bl	8004444 <HAL_IWDG_Refresh>

		/* Battery Management */
		BMS.update_VBUS(1,400);
 8001a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ff8e 	bl	80009b0 <_ZN3cBQ11update_VBUSEbt>
		b_voltage_debug =  BMS.read_battvoltage(); //for live expression (debug)
 8001a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fe79 	bl	8000790 <_ZN3cBQ16read_battvoltageEv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4ba5      	ldr	r3, [pc, #660]	; (8001d38 <_Z23Start_Main_Control_TaskPKv+0x380>)
 8001aa4:	801a      	strh	r2, [r3, #0]

		/* Head Board - over temp protection */
		hb.update();
 8001aa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe ffde 	bl	8000a6c <_ZN17mainboard_form_hb6updateEv>
		HB_data_debug = hb.get_data(); //for live expression (debug)
 8001ab0:	4ca2      	ldr	r4, [pc, #648]	; (8001d3c <_Z23Start_Main_Control_TaskPKv+0x384>)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff69 	bl	8001992 <_ZN17mainboard_form_hb8get_dataEv>
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	463a      	mov	r2, r7
 8001ac4:	6810      	ldr	r0, [r2, #0]
 8001ac6:	6851      	ldr	r1, [r2, #4]
 8001ac8:	c303      	stmia	r3!, {r0, r1}
 8001aca:	8912      	ldrh	r2, [r2, #8]
 8001acc:	801a      	strh	r2, [r3, #0]

		for(const auto & temperature_in_degC_by_100 : hb.get_data().TEMP){
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5a 	bl	8001992 <_ZN17mainboard_form_hb8get_dataEv>
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ae8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001aec:	f7ff f829 	bl	8000b42 <_ZNSt5arrayIsLj3EE5beginEv>
 8001af0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001af4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001af8:	f7ff f82f 	bl	8000b5a <_ZNSt5arrayIsLj3EE3endEv>
 8001afc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8001b00:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d013      	beq.n	8001b34 <_Z23Start_Main_Control_TaskPKv+0x17c>
 8001b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if(temperature_in_degC_by_100 > 8000) profile = 0;
 8001b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001b20:	dd02      	ble.n	8001b28 <_Z23Start_Main_Control_TaskPKv+0x170>
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		for(const auto & temperature_in_degC_by_100 : hb.get_data().TEMP){
 8001b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b32:	e7e5      	b.n	8001b00 <_Z23Start_Main_Control_TaskPKv+0x148>
		}


		/* User Interface */
		if ( xQueueReceive( Button_state_QueueHandle, &button_state, 0) == pdPASS ){
 8001b34:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <_Z23Start_Main_Control_TaskPKv+0x370>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f007 fbb8 	bl	80092b4 <xQueueReceive>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	bf0c      	ite	eq
 8001b4a:	2301      	moveq	r3, #1
 8001b4c:	2300      	movne	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d02d      	beq.n	8001bb0 <_Z23Start_Main_Control_TaskPKv+0x1f8>
			if(button_state.sw1_press){
 8001b54:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d018      	beq.n	8001b8e <_Z23Start_Main_Control_TaskPKv+0x1d6>
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b60:	4877      	ldr	r0, [pc, #476]	; (8001d40 <_Z23Start_Main_Control_TaskPKv+0x388>)
 8001b62:	f002 f85b 	bl	8003c1c <HAL_GPIO_TogglePin>
				button_state.sw1_press = false;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

				if(++profile > 5)profile = 0;
 8001b6c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001b70:	3301      	adds	r3, #1
 8001b72:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001b76:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	bf8c      	ite	hi
 8001b7e:	2301      	movhi	r3, #1
 8001b80:	2300      	movls	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <_Z23Start_Main_Control_TaskPKv+0x1d6>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			}
			if(button_state.sw2_press){
 8001b8e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00c      	beq.n	8001bb0 <_Z23Start_Main_Control_TaskPKv+0x1f8>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9a:	4869      	ldr	r0, [pc, #420]	; (8001d40 <_Z23Start_Main_Control_TaskPKv+0x388>)
 8001b9c:	f002 f83e 	bl	8003c1c <HAL_GPIO_TogglePin>
				button_state.sw2_press = false;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				// TODO turn off procedure
				BMS.shipmode();
 8001ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fdd0 	bl	8000750 <_ZN3cBQ8shipmodeEv>
			}
		}


		switch ( profile ){
 8001bb0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	f200 8095 	bhi.w	8001ce4 <_Z23Start_Main_Control_TaskPKv+0x32c>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <_Z23Start_Main_Control_TaskPKv+0x208>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001bed 	.word	0x08001bed
 8001bc8:	08001c03 	.word	0x08001c03
 8001bcc:	08001c19 	.word	0x08001c19
 8001bd0:	08001c33 	.word	0x08001c33
 8001bd4:	08001c49 	.word	0x08001c49
		case 0:{
			set_current_data.set_current[D1] = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 8001bea:	e07e      	b.n	8001cea <_Z23Start_Main_Control_TaskPKv+0x332>
		}
		case 1:{
			set_current_data.set_current[D1] = 1500;
 8001bec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001bf0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 8001c00:	e073      	b.n	8001cea <_Z23Start_Main_Control_TaskPKv+0x332>
		}
		case 2:{
			set_current_data.set_current[D1] = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 1500;
 8001c08:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001c0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 8001c16:	e068      	b.n	8001cea <_Z23Start_Main_Control_TaskPKv+0x332>
		}
		case 3:{
			set_current_data.set_current[D1] = 2500;
 8001c18:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001c1c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 2500;
 8001c20:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001c24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 300;
 8001c28:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001c2c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 8001c30:	e05b      	b.n	8001cea <_Z23Start_Main_Control_TaskPKv+0x332>
		}

		case 4:{
			set_current_data.set_current[D1] = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 300;
 8001c3e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001c42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			break;
 8001c46:	e050      	b.n	8001cea <_Z23Start_Main_Control_TaskPKv+0x332>
		}

		case 5:{	/* testing adaptive mode */
			uint16_t als_now = hb.get_data().ALS;
 8001c48:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c4c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe9d 	bl	8001992 <_ZN17mainboard_form_hb8get_dataEv>
 8001c58:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001c5c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

			uint16_t als_setpoint = 200;
 8001c60:	23c8      	movs	r3, #200	; 0xc8
 8001c62:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

			float Proportional = 15 * ((float)als_setpoint - (float)als_now);
 8001c66:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c72:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c82:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
			current_als += (uint16_t)(Proportional);
 8001c8e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c96:	ee17 3a90 	vmov	r3, s15
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

			if(current_als<200)current_als = 200;
 8001ca6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001caa:	2bc7      	cmp	r3, #199	; 0xc7
 8001cac:	d802      	bhi.n	8001cb4 <_Z23Start_Main_Control_TaskPKv+0x2fc>
 8001cae:	23c8      	movs	r3, #200	; 0xc8
 8001cb0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			if(current_als>2000)current_als = 2000;
 8001cb4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001cb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001cbc:	d903      	bls.n	8001cc6 <_Z23Start_Main_Control_TaskPKv+0x30e>
 8001cbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cc2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

			set_current_data.set_current[D1] = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			set_current_data.set_current[D2] = (uint16_t)current_als;
 8001ccc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001cd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			set_current_data.set_current[D3] = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

			alc_current_debug = current_als;
 8001cda:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001cde:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <_Z23Start_Main_Control_TaskPKv+0x38c>)
 8001ce0:	6013      	str	r3, [r2, #0]
			break;
 8001ce2:	e002      	b.n	8001cea <_Z23Start_Main_Control_TaskPKv+0x332>
		}

		default:{
			Error_Handler();
 8001ce4:	f000 fd54 	bl	8002790 <Error_Handler>
			break;
 8001ce8:	bf00      	nop
		}

		}

		/* to send data to LED_Driver_TAsk if it is needed */
		if(profile != profile_last || profile == 5){
 8001cea:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8001cee:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d103      	bne.n	8001cfe <_Z23Start_Main_Control_TaskPKv+0x346>
 8001cf6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d107      	bne.n	8001d0e <_Z23Start_Main_Control_TaskPKv+0x356>
			xQueueSend( Set_Current_QueueHandle, &set_current_data, 10 );
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <_Z23Start_Main_Control_TaskPKv+0x374>)
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d06:	2300      	movs	r3, #0
 8001d08:	220a      	movs	r2, #10
 8001d0a:	f007 f9b9 	bl	8009080 <xQueueGenericSend>
		}

		profile_last = profile;
 8001d0e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001d12:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		profile_debug = profile;
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <_Z23Start_Main_Control_TaskPKv+0x390>)
 8001d18:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001d1c:	7013      	strb	r3, [r2, #0]

	}
 8001d1e:	e6ab      	b.n	8001a78 <_Z23Start_Main_Control_TaskPKv+0xc0>
 8001d20:	20003a98 	.word	0x20003a98
 8001d24:	0800adec 	.word	0x0800adec
 8001d28:	20000c98 	.word	0x20000c98
 8001d2c:	20000f98 	.word	0x20000f98
 8001d30:	2000395c 	.word	0x2000395c
 8001d34:	200039a8 	.word	0x200039a8
 8001d38:	200002dc 	.word	0x200002dc
 8001d3c:	200002cc 	.word	0x200002cc
 8001d40:	48000400 	.word	0x48000400
 8001d44:	200002d8 	.word	0x200002d8
 8001d48:	200002de 	.word	0x200002de

08001d4c <_Z3sw1v>:

void User_Buttons_ISR_SW1_handle();

void Start_User_Buttons_Task(void const * argument);

inline bool sw1(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET;
 8001d50:	2104      	movs	r1, #4
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <_Z3sw1v+0x1c>)
 8001d54:	f001 ff56 	bl	8003c04 <HAL_GPIO_ReadPin>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	48000400 	.word	0x48000400

08001d6c <_Z3sw2v>:

inline bool sw2(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET;
 8001d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <_Z3sw2v+0x20>)
 8001d76:	f001 ff45 	bl	8003c04 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	48000800 	.word	0x48000800

08001d90 <_Z23Start_User_Buttons_TaskPKv>:




void Start_User_Buttons_Task( [[maybe_unused]] void const * argument)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_User_Buttons_Task */
	/* Infinite loop */

	button_state_item button_state;
	button_state.sw1_press = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	723b      	strb	r3, [r7, #8]
	button_state.sw2_press = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	72bb      	strb	r3, [r7, #10]
	button_state.sw1_long_press = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	727b      	strb	r3, [r7, #9]
	button_state.sw2_long_press = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	72fb      	strb	r3, [r7, #11]
	button_state.both_longpress = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	733b      	strb	r3, [r7, #12]

	for(;;)
	{


		xSemaphoreTake(xButtonSemaphoreHandle,portMAX_DELAY);
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <_Z23Start_User_Buttons_TaskPKv+0x94>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db4:	4618      	mov	r0, r3
 8001db6:	f007 fb2b 	bl	8009410 <xQueueSemaphoreTake>

		if( sw1() ){
 8001dba:	f7ff ffc7 	bl	8001d4c <_Z3sw1v>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d014      	beq.n	8001dee <_Z23Start_User_Buttons_TaskPKv+0x5e>
			osDelay(Button_Debounce_delay_SW1);
 8001dc4:	207d      	movs	r0, #125	; 0x7d
 8001dc6:	f006 ff6b 	bl	8008ca0 <osDelay>
			if(sw1()){
 8001dca:	f7ff ffbf 	bl	8001d4c <_Z3sw1v>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00c      	beq.n	8001dee <_Z23Start_User_Buttons_TaskPKv+0x5e>

				button_state.sw1_press = true;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	723b      	strb	r3, [r7, #8]
				xQueueSend(Button_state_QueueHandle, &button_state, portMAX_DELAY );
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_Z23Start_User_Buttons_TaskPKv+0x98>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	f107 0108 	add.w	r1, r7, #8
 8001de0:	2300      	movs	r3, #0
 8001de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de6:	f007 f94b 	bl	8009080 <xQueueGenericSend>
				button_state.sw1_press = false;
 8001dea:	2300      	movs	r3, #0
 8001dec:	723b      	strb	r3, [r7, #8]
			}
		}


		if( sw2() ){
 8001dee:	f7ff ffbd 	bl	8001d6c <_Z3sw2v>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0d9      	beq.n	8001dac <_Z23Start_User_Buttons_TaskPKv+0x1c>
			osDelay(Button_Debounce_delay_SW2);
 8001df8:	203c      	movs	r0, #60	; 0x3c
 8001dfa:	f006 ff51 	bl	8008ca0 <osDelay>
			if(sw2()){
 8001dfe:	f7ff ffb5 	bl	8001d6c <_Z3sw2v>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0d1      	beq.n	8001dac <_Z23Start_User_Buttons_TaskPKv+0x1c>

				button_state.sw2_press = true;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	72bb      	strb	r3, [r7, #10]
				xQueueSend(Button_state_QueueHandle, &button_state, portMAX_DELAY );
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <_Z23Start_User_Buttons_TaskPKv+0x98>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	f107 0108 	add.w	r1, r7, #8
 8001e14:	2300      	movs	r3, #0
 8001e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e1a:	f007 f931 	bl	8009080 <xQueueGenericSend>
				button_state.sw2_press = false;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	72bb      	strb	r3, [r7, #10]
		xSemaphoreTake(xButtonSemaphoreHandle,portMAX_DELAY);
 8001e22:	e7c3      	b.n	8001dac <_Z23Start_User_Buttons_TaskPKv+0x1c>
 8001e24:	20000f4c 	.word	0x20000f4c
 8001e28:	20000c98 	.word	0x20000c98

08001e2c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8001e30:	2300      	movs	r3, #0
 8001e32:	9307      	str	r3, [sp, #28]
 8001e34:	9308      	str	r3, [sp, #32]
 8001e36:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	9302      	str	r3, [sp, #8]
 8001e3c:	9303      	str	r3, [sp, #12]
 8001e3e:	9304      	str	r3, [sp, #16]
 8001e40:	9305      	str	r3, [sp, #20]
 8001e42:	9306      	str	r3, [sp, #24]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e44:	4842      	ldr	r0, [pc, #264]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001e46:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <MX_ADC1_Init+0x128>)
 8001e48:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001e4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e4e:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e50:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e52:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e54:	2201      	movs	r2, #1
 8001e56:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e58:	2104      	movs	r1, #4
 8001e5a:	6141      	str	r1, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e5c:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e5e:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 6;
 8001e60:	2406      	movs	r4, #6
 8001e62:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e64:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e68:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e6c:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e70:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001e72:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001e76:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001e78:	6403      	str	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001e7a:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001e7c:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e7e:	f000 ff4d 	bl	8002d1c <HAL_ADC_Init>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d14c      	bne.n	8001f20 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e8a:	a907      	add	r1, sp, #28
 8001e8c:	4830      	ldr	r0, [pc, #192]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001e8e:	f001 fbbf 	bl	8003610 <HAL_ADCEx_MultiModeConfigChannel>
 8001e92:	2800      	cmp	r0, #0
 8001e94:	d147      	bne.n	8001f26 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <MX_ADC1_Init+0x12c>)
 8001e98:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001e9e:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ea0:	237f      	movs	r3, #127	; 0x7f
 8001ea2:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eac:	a901      	add	r1, sp, #4
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001eb0:	f001 f884 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d139      	bne.n	8001f2c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <MX_ADC1_Init+0x130>)
 8001eba:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec0:	a901      	add	r1, sp, #4
 8001ec2:	4823      	ldr	r0, [pc, #140]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001ec4:	f001 f87a 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d132      	bne.n	8001f32 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <MX_ADC1_Init+0x134>)
 8001ece:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ed0:	2312      	movs	r3, #18
 8001ed2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed4:	a901      	add	r1, sp, #4
 8001ed6:	481e      	ldr	r0, [pc, #120]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001ed8:	f001 f870 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001edc:	bb60      	cbnz	r0, 8001f38 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_ADC1_Init+0x138>)
 8001ee0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ee2:	2318      	movs	r3, #24
 8001ee4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eea:	a901      	add	r1, sp, #4
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001eee:	f001 f865 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001ef2:	bb20      	cbnz	r0, 8001f3e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <MX_ADC1_Init+0x13c>)
 8001ef6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efc:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efe:	a901      	add	r1, sp, #4
 8001f00:	4813      	ldr	r0, [pc, #76]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001f02:	f001 f85b 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001f06:	b9e8      	cbnz	r0, 8001f44 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_ADC1_Init+0x140>)
 8001f0a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001f0c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001f10:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f12:	a901      	add	r1, sp, #4
 8001f14:	480e      	ldr	r0, [pc, #56]	; (8001f50 <MX_ADC1_Init+0x124>)
 8001f16:	f001 f851 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001f1a:	b9b0      	cbnz	r0, 8001f4a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
  }

}
 8001f1c:	b00a      	add	sp, #40	; 0x28
 8001f1e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001f20:	f000 fc36 	bl	8002790 <Error_Handler>
 8001f24:	e7af      	b.n	8001e86 <MX_ADC1_Init+0x5a>
    Error_Handler();
 8001f26:	f000 fc33 	bl	8002790 <Error_Handler>
 8001f2a:	e7b4      	b.n	8001e96 <MX_ADC1_Init+0x6a>
    Error_Handler();
 8001f2c:	f000 fc30 	bl	8002790 <Error_Handler>
 8001f30:	e7c2      	b.n	8001eb8 <MX_ADC1_Init+0x8c>
    Error_Handler();
 8001f32:	f000 fc2d 	bl	8002790 <Error_Handler>
 8001f36:	e7c9      	b.n	8001ecc <MX_ADC1_Init+0xa0>
    Error_Handler();
 8001f38:	f000 fc2a 	bl	8002790 <Error_Handler>
 8001f3c:	e7cf      	b.n	8001ede <MX_ADC1_Init+0xb2>
    Error_Handler();
 8001f3e:	f000 fc27 	bl	8002790 <Error_Handler>
 8001f42:	e7d7      	b.n	8001ef4 <MX_ADC1_Init+0xc8>
    Error_Handler();
 8001f44:	f000 fc24 	bl	8002790 <Error_Handler>
 8001f48:	e7de      	b.n	8001f08 <MX_ADC1_Init+0xdc>
    Error_Handler();
 8001f4a:	f000 fc21 	bl	8002790 <Error_Handler>
}
 8001f4e:	e7e5      	b.n	8001f1c <MX_ADC1_Init+0xf0>
 8001f50:	20003868 	.word	0x20003868
 8001f54:	50040000 	.word	0x50040000
 8001f58:	14f00020 	.word	0x14f00020
 8001f5c:	19200040 	.word	0x19200040
 8001f60:	1d500080 	.word	0x1d500080
 8001f64:	25b00200 	.word	0x25b00200
 8001f68:	2a000400 	.word	0x2a000400
 8001f6c:	2e300800 	.word	0x2e300800

08001f70 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001f70:	b500      	push	{lr}
 8001f72:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	9303      	str	r3, [sp, #12]
 8001f7e:	9304      	str	r3, [sp, #16]
 8001f80:	9305      	str	r3, [sp, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f82:	4823      	ldr	r0, [pc, #140]	; (8002010 <MX_ADC2_Init+0xa0>)
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <MX_ADC2_Init+0xa4>)
 8001f86:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001f88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f8c:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f8e:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f90:	60c3      	str	r3, [r0, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f92:	2201      	movs	r2, #1
 8001f94:	6102      	str	r2, [r0, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f96:	2104      	movs	r1, #4
 8001f98:	6141      	str	r1, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f9a:	7603      	strb	r3, [r0, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001f9c:	7642      	strb	r2, [r0, #25]
  hadc2.Init.NbrOfConversion = 2;
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fa2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fa6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001faa:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fae:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = ENABLE;
 8001fb0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001fb4:	210c      	movs	r1, #12
 8001fb6:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001fb8:	6403      	str	r3, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001fba:	6443      	str	r3, [r0, #68]	; 0x44
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001fbc:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001fbe:	f000 fead 	bl	8002d1c <HAL_ADC_Init>
 8001fc2:	b9e0      	cbnz	r0, 8001ffe <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_ADC2_Init+0xa8>)
 8001fc6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fc8:	2306      	movs	r3, #6
 8001fca:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fd0:	237f      	movs	r3, #127	; 0x7f
 8001fd2:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fdc:	4669      	mov	r1, sp
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <MX_ADC2_Init+0xa0>)
 8001fe0:	f000 ffec 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001fe4:	b970      	cbnz	r0, 8002004 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <MX_ADC2_Init+0xac>)
 8001fe8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fea:	230c      	movs	r3, #12
 8001fec:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fee:	4669      	mov	r1, sp
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_ADC2_Init+0xa0>)
 8001ff2:	f000 ffe3 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8001ff6:	b940      	cbnz	r0, 800200a <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
  }

}
 8001ff8:	b007      	add	sp, #28
 8001ffa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ffe:	f000 fbc7 	bl	8002790 <Error_Handler>
 8002002:	e7df      	b.n	8001fc4 <MX_ADC2_Init+0x54>
    Error_Handler();
 8002004:	f000 fbc4 	bl	8002790 <Error_Handler>
 8002008:	e7ed      	b.n	8001fe6 <MX_ADC2_Init+0x76>
    Error_Handler();
 800200a:	f000 fbc1 	bl	8002790 <Error_Handler>
}
 800200e:	e7f3      	b.n	8001ff8 <MX_ADC2_Init+0x88>
 8002010:	20003804 	.word	0x20003804
 8002014:	50040100 	.word	0x50040100
 8002018:	21800100 	.word	0x21800100
 800201c:	3ef08000 	.word	0x3ef08000

08002020 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002026:	2300      	movs	r3, #0
 8002028:	9305      	str	r3, [sp, #20]
 800202a:	9306      	str	r3, [sp, #24]
 800202c:	9307      	str	r3, [sp, #28]
 800202e:	9308      	str	r3, [sp, #32]
 8002030:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8002032:	6803      	ldr	r3, [r0, #0]
 8002034:	4a4d      	ldr	r2, [pc, #308]	; (800216c <HAL_ADC_MspInit+0x14c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 800203a:	4a4d      	ldr	r2, [pc, #308]	; (8002170 <HAL_ADC_MspInit+0x150>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d042      	beq.n	80020c6 <HAL_ADC_MspInit+0xa6>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002040:	b00a      	add	sp, #40	; 0x28
 8002042:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 8002044:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_ADC_MspInit+0x154>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800204c:	2b01      	cmp	r3, #1
 800204e:	d02c      	beq.n	80020aa <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b49      	ldr	r3, [pc, #292]	; (8002178 <HAL_ADC_MspInit+0x158>)
 8002052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	64da      	str	r2, [r3, #76]	; 0x4c
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_VD1_FB_Pin|ADC_VD2_FB_Pin|ADC_VD3_FB_Pin|ADC_ID1_FB_Pin
 8002064:	2377      	movs	r3, #119	; 0x77
 8002066:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002068:	230b      	movs	r3, #11
 800206a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2500      	movs	r5, #0
 800206e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	a905      	add	r1, sp, #20
 8002072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002076:	f001 fd01 	bl	8003a7c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800207a:	4840      	ldr	r0, [pc, #256]	; (800217c <HAL_ADC_MspInit+0x15c>)
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_ADC_MspInit+0x160>)
 800207e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002080:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002082:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002084:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800208a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002094:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002096:	2320      	movs	r3, #32
 8002098:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800209a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800209c:	f001 fbac 	bl	80037f8 <HAL_DMA_Init>
 80020a0:	b970      	cbnz	r0, 80020c0 <HAL_ADC_MspInit+0xa0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_ADC_MspInit+0x15c>)
 80020a4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80020a6:	629c      	str	r4, [r3, #40]	; 0x28
 80020a8:	e7ca      	b.n	8002040 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC_CLK_ENABLE();
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_ADC_MspInit+0x158>)
 80020ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	9b00      	ldr	r3, [sp, #0]
 80020be:	e7c7      	b.n	8002050 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 80020c0:	f000 fb66 	bl	8002790 <Error_Handler>
 80020c4:	e7ed      	b.n	80020a2 <HAL_ADC_MspInit+0x82>
    HAL_RCC_ADC_CLK_ENABLED++;
 80020c6:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <HAL_ADC_MspInit+0x154>)
 80020c8:	6813      	ldr	r3, [r2, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d03d      	beq.n	800214e <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_ADC_MspInit+0x158>)
 80020d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	64da      	str	r2, [r3, #76]	; 0x4c
 80020dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020de:	f002 0201 	and.w	r2, r2, #1
 80020e2:	9203      	str	r2, [sp, #12]
 80020e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e8:	f042 0202 	orr.w	r2, r2, #2
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	9304      	str	r3, [sp, #16]
 80020f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ADC_I_IN_Pin;
 80020f8:	2308      	movs	r3, #8
 80020fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020fc:	260b      	movs	r6, #11
 80020fe:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2500      	movs	r5, #0
 8002102:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(ADC_I_IN_GPIO_Port, &GPIO_InitStruct);
 8002104:	a905      	add	r1, sp, #20
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f001 fcb7 	bl	8003a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800210e:	2301      	movs	r3, #1
 8002110:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002112:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	a905      	add	r1, sp, #20
 8002118:	481a      	ldr	r0, [pc, #104]	; (8002184 <HAL_ADC_MspInit+0x164>)
 800211a:	f001 fcaf 	bl	8003a7c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel4;
 800211e:	481a      	ldr	r0, [pc, #104]	; (8002188 <HAL_ADC_MspInit+0x168>)
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_ADC_MspInit+0x16c>)
 8002122:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8002124:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002126:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002128:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800212e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002132:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002138:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800213a:	2320      	movs	r3, #32
 800213c:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800213e:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002140:	f001 fb5a 	bl	80037f8 <HAL_DMA_Init>
 8002144:	b970      	cbnz	r0, 8002164 <HAL_ADC_MspInit+0x144>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_ADC_MspInit+0x168>)
 8002148:	64e3      	str	r3, [r4, #76]	; 0x4c
 800214a:	629c      	str	r4, [r3, #40]	; 0x28
}
 800214c:	e778      	b.n	8002040 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC_CLK_ENABLE();
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_ADC_MspInit+0x158>)
 8002150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002152:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002156:	64da      	str	r2, [r3, #76]	; 0x4c
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	9b02      	ldr	r3, [sp, #8]
 8002162:	e7b6      	b.n	80020d2 <HAL_ADC_MspInit+0xb2>
      Error_Handler();
 8002164:	f000 fb14 	bl	8002790 <Error_Handler>
 8002168:	e7ed      	b.n	8002146 <HAL_ADC_MspInit+0x126>
 800216a:	bf00      	nop
 800216c:	50040000 	.word	0x50040000
 8002170:	50040100 	.word	0x50040100
 8002174:	200002e0 	.word	0x200002e0
 8002178:	40021000 	.word	0x40021000
 800217c:	200038cc 	.word	0x200038cc
 8002180:	40020008 	.word	0x40020008
 8002184:	48000400 	.word	0x48000400
 8002188:	20003914 	.word	0x20003914
 800218c:	40020444 	.word	0x40020444

08002190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002190:	b500      	push	{lr}
 8002192:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_DMA_Init+0x60>)
 8002196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002198:	f042 0202 	orr.w	r2, r2, #2
 800219c:	649a      	str	r2, [r3, #72]	; 0x48
 800219e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021a0:	f002 0202 	and.w	r2, r2, #2
 80021a4:	9200      	str	r2, [sp, #0]
 80021a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	649a      	str	r2, [r3, #72]	; 0x48
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2105      	movs	r1, #5
 80021be:	200b      	movs	r0, #11
 80021c0:	f001 fac0 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021c4:	200b      	movs	r0, #11
 80021c6:	f001 faf1 	bl	80037ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2105      	movs	r1, #5
 80021ce:	200d      	movs	r0, #13
 80021d0:	f001 fab8 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021d4:	200d      	movs	r0, #13
 80021d6:	f001 fae9 	bl	80037ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2105      	movs	r1, #5
 80021de:	203b      	movs	r0, #59	; 0x3b
 80021e0:	f001 fab0 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80021e4:	203b      	movs	r0, #59	; 0x3b
 80021e6:	f001 fae1 	bl	80037ac <HAL_NVIC_EnableIRQ>

}
 80021ea:	b003      	add	sp, #12
 80021ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80021f0:	40021000 	.word	0x40021000

080021f4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <vApplicationGetIdleTaskMemory+0x10>)
 80021f6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <vApplicationGetIdleTaskMemory+0x14>)
 80021fa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021fc:	2340      	movs	r3, #64	; 0x40
 80021fe:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	200003e4 	.word	0x200003e4
 8002208:	200002e4 	.word	0x200002e4

0800220c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002210:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002212:	2400      	movs	r4, #0
 8002214:	9405      	str	r4, [sp, #20]
 8002216:	9406      	str	r4, [sp, #24]
 8002218:	9407      	str	r4, [sp, #28]
 800221a:	9408      	str	r4, [sp, #32]
 800221c:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	4b44      	ldr	r3, [pc, #272]	; (8002330 <MX_GPIO_Init+0x124>)
 8002220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002222:	f042 0204 	orr.w	r2, r2, #4
 8002226:	64da      	str	r2, [r3, #76]	; 0x4c
 8002228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800222a:	f002 0204 	and.w	r2, r2, #4
 800222e:	9201      	str	r2, [sp, #4]
 8002230:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	64da      	str	r2, [r3, #76]	; 0x4c
 800223a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800223c:	f002 0201 	and.w	r2, r2, #1
 8002240:	9202      	str	r2, [sp, #8]
 8002242:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002246:	f042 0202 	orr.w	r2, r2, #2
 800224a:	64da      	str	r2, [r3, #76]	; 0x4c
 800224c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800224e:	f002 0202 	and.w	r2, r2, #2
 8002252:	9203      	str	r2, [sp, #12]
 8002254:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002258:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225c:	64da      	str	r2, [r3, #76]	; 0x4c
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_RESET);
 8002268:	4622      	mov	r2, r4
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002270:	f001 fccf 	bl	8003c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SMPS_EN_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8002274:	4e2f      	ldr	r6, [pc, #188]	; (8002334 <MX_GPIO_Init+0x128>)
 8002276:	4622      	mov	r2, r4
 8002278:	f24f 0102 	movw	r1, #61442	; 0xf002
 800227c:	4630      	mov	r0, r6
 800227e:	f001 fcc8 	bl	8003c12 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8002282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002286:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING | GPIO_MODE_INPUT;
 8002288:	4f2b      	ldr	r7, [pc, #172]	; (8002338 <MX_GPIO_Init+0x12c>)
 800228a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228c:	2501      	movs	r5, #1
 800228e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8002290:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002340 <MX_GPIO_Init+0x134>
 8002294:	a905      	add	r1, sp, #20
 8002296:	4640      	mov	r0, r8
 8002298:	f001 fbf0 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 800229c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 80022a6:	a905      	add	r1, sp, #20
 80022a8:	4640      	mov	r0, r8
 80022aa:	f001 fbe7 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_3V3_Pin;
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(EN_3V3_GPIO_Port, &GPIO_InitStruct);
 80022b8:	a905      	add	r1, sp, #20
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f001 fbdd 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin;
 80022c2:	2302      	movs	r3, #2
 80022c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80022c6:	2311      	movs	r3, #17
 80022c8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ca:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SMPS_EN_GPIO_Port, &GPIO_InitStruct);
 80022ce:	a905      	add	r1, sp, #20
 80022d0:	4630      	mov	r0, r6
 80022d2:	f001 fbd3 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80022d6:	2304      	movs	r3, #4
 80022d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING | GPIO_MODE_INPUT;
 80022da:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022dc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80022de:	a905      	add	r1, sp, #20
 80022e0:	4630      	mov	r0, r6
 80022e2:	f001 fbcb 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80022e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80022ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	a905      	add	r1, sp, #20
 80022f4:	4630      	mov	r0, r6
 80022f6:	f001 fbc1 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80022fa:	2508      	movs	r5, #8
 80022fc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002302:	a905      	add	r1, sp, #20
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_GPIO_Init+0x130>)
 8002306:	f001 fbb9 	bl	8003a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800230a:	4622      	mov	r2, r4
 800230c:	2105      	movs	r1, #5
 800230e:	4628      	mov	r0, r5
 8002310:	f001 fa18 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002314:	4628      	mov	r0, r5
 8002316:	f001 fa49 	bl	80037ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800231a:	4622      	mov	r2, r4
 800231c:	2105      	movs	r1, #5
 800231e:	2028      	movs	r0, #40	; 0x28
 8002320:	f001 fa10 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002324:	2028      	movs	r0, #40	; 0x28
 8002326:	f001 fa41 	bl	80037ac <HAL_NVIC_EnableIRQ>

}
 800232a:	b00a      	add	sp, #40	; 0x28
 800232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	48000400 	.word	0x48000400
 8002338:	10210000 	.word	0x10210000
 800233c:	48001c00 	.word	0x48001c00
 8002340:	48000800 	.word	0x48000800

08002344 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002344:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002346:	4812      	ldr	r0, [pc, #72]	; (8002390 <MX_I2C1_Init+0x4c>)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_I2C1_Init+0x50>)
 800234a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00702991;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <MX_I2C1_Init+0x54>)
 800234e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002354:	2201      	movs	r2, #1
 8002356:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002358:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800235a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800235c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800235e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002360:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002362:	f001 fddf 	bl	8003f24 <HAL_I2C_Init>
 8002366:	b950      	cbnz	r0, 800237e <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002368:	2100      	movs	r1, #0
 800236a:	4809      	ldr	r0, [pc, #36]	; (8002390 <MX_I2C1_Init+0x4c>)
 800236c:	f001 ffe4 	bl	8004338 <HAL_I2CEx_ConfigAnalogFilter>
 8002370:	b940      	cbnz	r0, 8002384 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002372:	2100      	movs	r1, #0
 8002374:	4806      	ldr	r0, [pc, #24]	; (8002390 <MX_I2C1_Init+0x4c>)
 8002376:	f002 f80d 	bl	8004394 <HAL_I2CEx_ConfigDigitalFilter>
 800237a:	b930      	cbnz	r0, 800238a <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 800237c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800237e:	f000 fa07 	bl	8002790 <Error_Handler>
 8002382:	e7f1      	b.n	8002368 <MX_I2C1_Init+0x24>
    Error_Handler();
 8002384:	f000 fa04 	bl	8002790 <Error_Handler>
 8002388:	e7f3      	b.n	8002372 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800238a:	f000 fa01 	bl	8002790 <Error_Handler>
}
 800238e:	e7f5      	b.n	800237c <MX_I2C1_Init+0x38>
 8002390:	2000395c 	.word	0x2000395c
 8002394:	40005400 	.word	0x40005400
 8002398:	00702991 	.word	0x00702991

0800239c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800239c:	b510      	push	{r4, lr}
 800239e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	2300      	movs	r3, #0
 80023a2:	9303      	str	r3, [sp, #12]
 80023a4:	9304      	str	r3, [sp, #16]
 80023a6:	9305      	str	r3, [sp, #20]
 80023a8:	9306      	str	r3, [sp, #24]
 80023aa:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_I2C_MspInit+0x64>)
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023b4:	b008      	add	sp, #32
 80023b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4c12      	ldr	r4, [pc, #72]	; (8002404 <HAL_I2C_MspInit+0x68>)
 80023ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80023c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d2:	2312      	movs	r3, #18
 80023d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023de:	2304      	movs	r3, #4
 80023e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	a903      	add	r1, sp, #12
 80023e4:	4808      	ldr	r0, [pc, #32]	; (8002408 <HAL_I2C_MspInit+0x6c>)
 80023e6:	f001 fb49 	bl	8003a7c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80023f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	9b02      	ldr	r3, [sp, #8]
}
 80023fc:	e7da      	b.n	80023b4 <HAL_I2C_MspInit+0x18>
 80023fe:	bf00      	nop
 8002400:	40005400 	.word	0x40005400
 8002404:	40021000 	.word	0x40021000
 8002408:	48000400 	.word	0x48000400

0800240c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800240c:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
 800240e:	4808      	ldr	r0, [pc, #32]	; (8002430 <MX_IWDG_Init+0x24>)
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <MX_IWDG_Init+0x28>)
 8002412:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8002414:	2305      	movs	r3, #5
 8002416:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8002418:	f640 73ff 	movw	r3, #4095	; 0xfff
 800241c:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 800241e:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002420:	f001 ffe4 	bl	80043ec <HAL_IWDG_Init>
 8002424:	b900      	cbnz	r0, 8002428 <MX_IWDG_Init+0x1c>
  {
    Error_Handler();
  }

}
 8002426:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002428:	f000 f9b2 	bl	8002790 <Error_Handler>
}
 800242c:	e7fb      	b.n	8002426 <MX_IWDG_Init+0x1a>
 800242e:	bf00      	nop
 8002430:	200039a8 	.word	0x200039a8
 8002434:	40003000 	.word	0x40003000

08002438 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b090      	sub	sp, #64	; 0x40
 800243c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of xButtonSemaphore */
  osSemaphoreStaticDef(xButtonSemaphore, &xButtonSemaphoreControlBlock);
 800243e:	2300      	movs	r3, #0
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <_Z16MX_FREERTOS_Initv+0x70>)
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
  xButtonSemaphoreHandle = osSemaphoreCreate(osSemaphore(xButtonSemaphore), 1);
 8002446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f006 fc2e 	bl	8008cae <osSemaphoreCreate>
 8002452:	4603      	mov	r3, r0
 8002454:	4a15      	ldr	r2, [pc, #84]	; (80024ac <_Z16MX_FREERTOS_Initv+0x74>)
 8002456:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 64, defaultTaskBuffer, &defaultTaskControlBlock);
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <_Z16MX_FREERTOS_Initv+0x78>)
 800245a:	f107 041c 	add.w	r4, r7, #28
 800245e:	461d      	mov	r5, r3
 8002460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f006 fbdf 	bl	8008c36 <osThreadCreate>
 8002478:	4603      	mov	r3, r0
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <_Z16MX_FREERTOS_Initv+0x7c>)
 800247c:	6013      	str	r3, [r2, #0]

  /* definition and creation of State_of_Charge */
  osThreadStaticDef(State_of_Charge, Start_State_of_Charge_Task, osPriorityNormal, 0, 64, State_of_ChargeBuffer, &State_of_ChargeControlBlock);
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <_Z16MX_FREERTOS_Initv+0x80>)
 8002480:	463c      	mov	r4, r7
 8002482:	461d      	mov	r5, r3
 8002484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800248c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  State_of_ChargeHandle = osThreadCreate(osThread(State_of_Charge), NULL);
 8002490:	463b      	mov	r3, r7
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f006 fbce 	bl	8008c36 <osThreadCreate>
 800249a:	4603      	mov	r3, r0
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <_Z16MX_FREERTOS_Initv+0x84>)
 800249e:	6013      	str	r3, [r2, #0]


  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80024a0:	bf00      	nop
 80024a2:	3740      	adds	r7, #64	; 0x40
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdb0      	pop	{r4, r5, r7, pc}
 80024a8:	20000f50 	.word	0x20000f50
 80024ac:	20000f4c 	.word	0x20000f4c
 80024b0:	0800ae50 	.word	0x0800ae50
 80024b4:	20000c9c 	.word	0x20000c9c
 80024b8:	0800ae6c 	.word	0x0800ae6c
 80024bc:	20000df4 	.word	0x20000df4

080024c0 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80024c8:	f008 f8dc 	bl	800a684 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(UNUSED_TASK_OS_DELAY);
 80024cc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80024d0:	f006 fbe6 	bl	8008ca0 <osDelay>
 80024d4:	e7fa      	b.n	80024cc <_Z16StartDefaultTaskPKv+0xc>
	...

080024d8 <_Z26Start_State_of_Charge_TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_State_of_Charge_Task */
void Start_State_of_Charge_Task(void const * argument)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b094      	sub	sp, #80	; 0x50
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_State_of_Charge_Task */


	const unsigned int adc2_data_length = 16;
 80024e0:	2310      	movs	r3, #16
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t adc2_data[16];
	HAL_ADC_Start_DMA(&hadc2, adc2_data, adc2_data_length);
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	2210      	movs	r2, #16
 80024ea:	4619      	mov	r1, r3
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <_Z26Start_State_of_Charge_TaskPKv+0x24>)
 80024ee:	f001 f80d 	bl	800350c <HAL_ADC_Start_DMA>


  /* Infinite loop */
  for(;;)
  {
    osDelay(UNUSED_TASK_OS_DELAY);
 80024f2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80024f6:	f006 fbd3 	bl	8008ca0 <osDelay>
 80024fa:	e7fa      	b.n	80024f2 <_Z26Start_State_of_Charge_TaskPKv+0x1a>
 80024fc:	20003804 	.word	0x20003804

08002500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002504:	f000 fbd5 	bl	8002cb2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002508:	f000 f819 	bl	800253e <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800250c:	f7ff fe7e 	bl	800220c <MX_GPIO_Init>
	MX_DMA_Init();
 8002510:	f7ff fe3e 	bl	8002190 <MX_DMA_Init>
	MX_I2C1_Init();
 8002514:	f7ff ff16 	bl	8002344 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8002518:	f000 fb2e 	bl	8002b78 <MX_USART3_UART_Init>
	MX_TIM1_Init();
 800251c:	f000 fab8 	bl	8002a90 <MX_TIM1_Init>
	MX_ADC1_Init();
 8002520:	f7ff fc84 	bl	8001e2c <MX_ADC1_Init>
	MX_ADC2_Init();
 8002524:	f7ff fd24 	bl	8001f70 <MX_ADC2_Init>
	MX_IWDG_Init();
 8002528:	f7ff ff70 	bl	800240c <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */

	Custom_MainBoard_abstraction_init();
 800252c:	f000 f8f0 	bl	8002710 <_Z33Custom_MainBoard_abstraction_initv>

	Custom_FREERTOS_Init();
 8002530:	f000 f88c 	bl	800264c <_Z20Custom_FREERTOS_Initv>
	/* init indicator to prevent unseen reset*/



	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8002534:	f7ff ff80 	bl	8002438 <_Z16MX_FREERTOS_Initv>
	/* Start scheduler */
	osKernelStart();
 8002538:	f006 fb78 	bl	8008c2c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800253c:	e7fe      	b.n	800253c <main+0x3c>

0800253e <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b0a4      	sub	sp, #144	; 0x90
 8002542:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002544:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002548:	2244      	movs	r2, #68	; 0x44
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f008 fb69 	bl	800ac24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002552:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	2234      	movs	r2, #52	; 0x34
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f008 fb5b 	bl	800ac24 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800256e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002572:	f002 fe77 	bl	8005264 <HAL_PWREx_ControlVoltageScaling>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0x4c>
	{
		Error_Handler();
 8002586:	f000 f903 	bl	8002790 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800258a:	2338      	movs	r3, #56	; 0x38
 800258c:	64fb      	str	r3, [r7, #76]	; 0x4c
			|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800258e:	2301      	movs	r3, #1
 8002590:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002592:	2301      	movs	r3, #1
 8002594:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002596:	2301      	movs	r3, #1
 8002598:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800259e:	2360      	movs	r3, #96	; 0x60
 80025a0:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a2:	2302      	movs	r3, #2
 80025a4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80025a6:	2301      	movs	r3, #1
 80025a8:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLN = 40;
 80025b0:	2328      	movs	r3, #40	; 0x28
 80025b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025bc:	2302      	movs	r3, #2
 80025be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 ff3e 	bl	8005448 <HAL_RCC_OscConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80025dc:	f000 f8d8 	bl	8002790 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e0:	230f      	movs	r3, #15
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e4:	2303      	movs	r3, #3
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025f8:	2104      	movs	r1, #4
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fa92 	bl	8005b24 <HAL_RCC_ClockConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <SystemClock_Config+0xd6>
	{
		Error_Handler();
 8002610:	f000 f8be 	bl	8002790 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8002614:	f246 0344 	movw	r3, #24644	; 0x6044
 8002618:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fb71 	bl	8005d10 <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x104>
	{
		Error_Handler();
 800263e:	f000 f8a7 	bl	8002790 <Error_Handler>
	}
}
 8002642:	bf00      	nop
 8002644:	3790      	adds	r7, #144	; 0x90
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <_Z20Custom_FREERTOS_Initv>:
/* USER CODE BEGIN 4 */




void Custom_FREERTOS_Init(void){
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	b09c      	sub	sp, #112	; 0x70
 8002650:	af00      	add	r7, sp, #0

	// FIXME rewrite thread def to prevent warning ISO c++ tring -> char*

	osThreadStaticDef(Main_Control, Start_Main_Control_Task, osPriorityNormal, 0, Main_Control_Task_Buffer_size, Main_Control_Task_Buffer, &Main_Control_TaskControlBlock);
 8002652:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <_Z20Custom_FREERTOS_Initv+0xa4>)
 8002654:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002658:	461d      	mov	r5, r3
 800265a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Main_ControlHandle = osThreadCreate(osThread(Main_Control), NULL);
 8002666:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f006 fae2 	bl	8008c36 <osThreadCreate>
 8002672:	4603      	mov	r3, r0
 8002674:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <_Z20Custom_FREERTOS_Initv+0xa8>)
 8002676:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(LED_Driver, Start_LED_Driver_Task, osPriorityHigh, 0, LED_Driver_Task_Buffer_size, LED_Driver_Task_Buffer, &LED_DriverControlBlock);
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <_Z20Custom_FREERTOS_Initv+0xac>)
 800267a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800267e:	461d      	mov	r5, r3
 8002680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED_DriverHandle = osThreadCreate(osThread(LED_Driver), NULL);
 800268c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f006 facf 	bl	8008c36 <osThreadCreate>
 8002698:	4603      	mov	r3, r0
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <_Z20Custom_FREERTOS_Initv+0xb0>)
 800269c:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(IMU_Gesture, Start_IMU_Gesture_Task, osPriorityBelowNormal, 0,IMU_Gesture_Task_Buffer_size, IMU_GestureBuffer, &IMU_GestureControlBlock);
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <_Z20Custom_FREERTOS_Initv+0xb4>)
 80026a0:	f107 041c 	add.w	r4, r7, #28
 80026a4:	461d      	mov	r5, r3
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMU_GestureHandle = osThreadCreate(osThread(IMU_Gesture), NULL);
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f006 fabc 	bl	8008c36 <osThreadCreate>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a10      	ldr	r2, [pc, #64]	; (8002704 <_Z20Custom_FREERTOS_Initv+0xb8>)
 80026c2:	6013      	str	r3, [r2, #0]

	osThreadStaticDef(User_Buttons, Start_User_Buttons_Task, osPriorityNormal, 0, User_Buttons_Task_Buffer_size, User_Buttons_Task_Buffer, &User_ButtonControlBlock);
 80026c4:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_Z20Custom_FREERTOS_Initv+0xbc>)
 80026c6:	463c      	mov	r4, r7
 80026c8:	461d      	mov	r5, r3
 80026ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	User_ButtonsHandle = osThreadCreate(osThread(User_Buttons), NULL);
 80026d6:	463b      	mov	r3, r7
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f006 faab 	bl	8008c36 <osThreadCreate>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <_Z20Custom_FREERTOS_Initv+0xc0>)
 80026e4:	6013      	str	r3, [r2, #0]

}
 80026e6:	bf00      	nop
 80026e8:	3770      	adds	r7, #112	; 0x70
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bdb0      	pop	{r4, r5, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	0800ae88 	.word	0x0800ae88
 80026f4:	20000438 	.word	0x20000438
 80026f8:	0800aea4 	.word	0x0800aea4
 80026fc:	20000690 	.word	0x20000690
 8002700:	0800aec0 	.word	0x0800aec0
 8002704:	20000a40 	.word	0x20000a40
 8002708:	0800aedc 	.word	0x0800aedc
 800270c:	200008e8 	.word	0x200008e8

08002710 <_Z33Custom_MainBoard_abstraction_initv>:


void Custom_MainBoard_abstraction_init(){
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0

	//		SMPS - ON
	HAL_GPIO_WritePin(SMPS_EN_GPIO_Port, SMPS_EN_Pin, GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	2102      	movs	r1, #2
 800271a:	4813      	ldr	r0, [pc, #76]	; (8002768 <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 800271c:	f001 fa79 	bl	8003c12 <HAL_GPIO_WritePin>
	//		SMPS - OFF
	//HAL_GPIO_WritePin(SMPS_EN_GPIO_Port, SMPS_EN_Pin, (GPIO_PinState)0);


	/* Reset indicator to prevent unseen */
	for(int i = 0; i < 6; i++){
 8002720:	2300      	movs	r3, #0
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b05      	cmp	r3, #5
 8002728:	dc1a      	bgt.n	8002760 <_Z33Custom_MainBoard_abstraction_initv+0x50>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800272a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800272e:	480e      	ldr	r0, [pc, #56]	; (8002768 <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 8002730:	f001 fa74 	bl	8003c1c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002738:	480b      	ldr	r0, [pc, #44]	; (8002768 <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 800273a:	f001 fa6f 	bl	8003c1c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800273e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002742:	4809      	ldr	r0, [pc, #36]	; (8002768 <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 8002744:	f001 fa6a 	bl	8003c1c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800274c:	4806      	ldr	r0, [pc, #24]	; (8002768 <_Z33Custom_MainBoard_abstraction_initv+0x58>)
 800274e:	f001 fa65 	bl	8003c1c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002752:	20c8      	movs	r0, #200	; 0xc8
 8002754:	f000 face 	bl	8002cf4 <HAL_Delay>
	for(int i = 0; i < 6; i++){
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	e7e1      	b.n	8002724 <_Z33Custom_MainBoard_abstraction_initv+0x14>
	}


}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	48000400 	.word	0x48000400

0800276c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800277e:	f000 faa7 	bl	8002cd0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	/* USER CODE END Callback 1 */
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40014400 	.word	0x40014400

08002790 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	/* USER CODE END Error_Handler_Debug */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a0:	b500      	push	{lr}
 80027a2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_MspInit+0x3c>)
 80027a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60
 80027ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027b0:	f002 0201 	and.w	r2, r2, #1
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027be:	659a      	str	r2, [r3, #88]	; 0x58
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	210f      	movs	r1, #15
 80027ce:	f06f 0001 	mvn.w	r0, #1
 80027d2:	f000 ffb7 	bl	8003744 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	b003      	add	sp, #12
 80027d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b500      	push	{lr}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2019      	movs	r0, #25
 80027ea:	f000 ffab 	bl	8003744 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027ee:	2019      	movs	r0, #25
 80027f0:	f000 ffdc 	bl	80037ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_InitTick+0x68>)
 80027f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027fc:	661a      	str	r2, [r3, #96]	; 0x60
 80027fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002808:	a902      	add	r1, sp, #8
 800280a:	a803      	add	r0, sp, #12
 800280c:	f003 fa62 	bl	8005cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002810:	f003 fa4e 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_InitTick+0x6c>)
 8002816:	fba3 2300 	umull	r2, r3, r3, r0
 800281a:	0c9b      	lsrs	r3, r3, #18
 800281c:	3b01      	subs	r3, #1

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800281e:	480c      	ldr	r0, [pc, #48]	; (8002850 <HAL_InitTick+0x70>)
 8002820:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <HAL_InitTick+0x74>)
 8002822:	6002      	str	r2, [r0, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002828:	60c2      	str	r2, [r0, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800282a:	6043      	str	r3, [r0, #4]
  htim16.Init.ClockDivision = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	6103      	str	r3, [r0, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8002832:	f003 fdc9 	bl	80063c8 <HAL_TIM_Base_Init>
 8002836:	b118      	cbz	r0, 8002840 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
  }

  /* Return function status */
  return HAL_ERROR;
 8002838:	2001      	movs	r0, #1
}
 800283a:	b009      	add	sp, #36	; 0x24
 800283c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim16);
 8002840:	4803      	ldr	r0, [pc, #12]	; (8002850 <HAL_InitTick+0x70>)
 8002842:	f003 fc81 	bl	8006148 <HAL_TIM_Base_Start_IT>
 8002846:	e7f8      	b.n	800283a <HAL_InitTick+0x5a>
 8002848:	40021000 	.word	0x40021000
 800284c:	431bde83 	.word	0x431bde83
 8002850:	200039b8 	.word	0x200039b8
 8002854:	40014400 	.word	0x40014400

08002858 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002858:	4770      	bx	lr
	...

0800285c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285c:	b508      	push	{r3, lr}

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800285e:	4c0d      	ldr	r4, [pc, #52]	; (8002894 <HardFault_Handler+0x38>)
 8002860:	2201      	movs	r2, #1
 8002862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002866:	4620      	mov	r0, r4
 8002868:	f001 f9d3 	bl	8003c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002872:	4620      	mov	r0, r4
 8002874:	f001 f9cd 	bl	8003c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002878:	2200      	movs	r2, #0
 800287a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800287e:	4620      	mov	r0, r4
 8002880:	f001 f9c7 	bl	8003c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288a:	4620      	mov	r0, r4
 800288c:	f001 f9c1 	bl	8003c12 <HAL_GPIO_WritePin>
  while (1)
 8002890:	e7e5      	b.n	800285e <HardFault_Handler+0x2>
 8002892:	bf00      	nop
 8002894:	48000400 	.word	0x48000400

08002898 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <MemManage_Handler>

0800289a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <BusFault_Handler>

0800289c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler>

0800289e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289e:	4770      	bx	lr

080028a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80028a0:	b500      	push	{lr}
 80028a2:	b083      	sub	sp, #12
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80028a4:	2004      	movs	r0, #4
 80028a6:	f001 f9c3 	bl	8003c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  BaseType_t sHigherPriorityTaskWoken = pdFALSE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	9301      	str	r3, [sp, #4]
  xSemaphoreGiveFromISR(xButtonSemaphoreHandle,&sHigherPriorityTaskWoken);
 80028ae:	a901      	add	r1, sp, #4
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <EXTI2_IRQHandler+0x20>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	f006 fca4 	bl	8009200 <xQueueGiveFromISR>
  //portYIELD_FROM_ISR( sHigherPriorityTaskWoken );

  /* USER CODE END EXTI2_IRQn 1 */
}
 80028b8:	b003      	add	sp, #12
 80028ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80028be:	bf00      	nop
 80028c0:	20000f4c 	.word	0x20000f4c

080028c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c6:	4802      	ldr	r0, [pc, #8]	; (80028d0 <DMA1_Channel1_IRQHandler+0xc>)
 80028c8:	f001 f875 	bl	80039b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028cc:	bd08      	pop	{r3, pc}
 80028ce:	bf00      	nop
 80028d0:	200038cc 	.word	0x200038cc

080028d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80028d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028d6:	4802      	ldr	r0, [pc, #8]	; (80028e0 <DMA1_Channel3_IRQHandler+0xc>)
 80028d8:	f001 f86d 	bl	80039b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80028dc:	bd08      	pop	{r3, pc}
 80028de:	bf00      	nop
 80028e0:	20003a50 	.word	0x20003a50

080028e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80028e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028e6:	4803      	ldr	r0, [pc, #12]	; (80028f4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80028e8:	f003 fc68 	bl	80061bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80028ee:	f003 fc65 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80028f2:	bd08      	pop	{r3, pc}
 80028f4:	20003a04 	.word	0x20003a04
 80028f8:	200039b8 	.word	0x200039b8

080028fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028fe:	4802      	ldr	r0, [pc, #8]	; (8002908 <USART3_IRQHandler+0xc>)
 8002900:	f004 f886 	bl	8006a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002904:	bd08      	pop	{r3, pc}
 8002906:	bf00      	nop
 8002908:	20003a98 	.word	0x20003a98

0800290c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800290c:	b500      	push	{lr}
 800290e:	b083      	sub	sp, #12
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002910:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002914:	f001 f98c 	bl	8003c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

	BaseType_t sHigherPriorityTaskWoken = pdFALSE;
 8002918:	2300      	movs	r3, #0
 800291a:	9301      	str	r3, [sp, #4]
	xSemaphoreGiveFromISR(xButtonSemaphoreHandle,&sHigherPriorityTaskWoken);
 800291c:	a901      	add	r1, sp, #4
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <EXTI15_10_IRQHandler+0x34>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	f006 fc6d 	bl	8009200 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( sHigherPriorityTaskWoken );
 8002926:	9b01      	ldr	r3, [sp, #4]
 8002928:	b13b      	cbz	r3, 800293a <EXTI15_10_IRQHandler+0x2e>
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <EXTI15_10_IRQHandler+0x38>)
 800292c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800293a:	b003      	add	sp, #12
 800293c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002940:	20000f4c 	.word	0x20000f4c
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800294a:	4802      	ldr	r0, [pc, #8]	; (8002954 <DMA2_Channel4_IRQHandler+0xc>)
 800294c:	f001 f833 	bl	80039b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002950:	bd08      	pop	{r3, pc}
 8002952:	bf00      	nop
 8002954:	20003914 	.word	0x20003914

08002958 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8002958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800295a:	4802      	ldr	r0, [pc, #8]	; (8002964 <USB_IRQHandler+0xc>)
 800295c:	f002 fa27 	bl	8004dae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002960:	bd08      	pop	{r3, pc}
 8002962:	bf00      	nop
 8002964:	200047bc 	.word	0x200047bc

08002968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002968:	b510      	push	{r4, lr}
 800296a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800296c:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <_sbrk+0x38>)
 800296e:	490d      	ldr	r1, [pc, #52]	; (80029a4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end) // @suppress("Symbol is not resolved")
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <_sbrk+0x40>)
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	b140      	cbz	r0, 8002988 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	480c      	ldr	r0, [pc, #48]	; (80029a8 <_sbrk+0x40>)
 8002978:	6800      	ldr	r0, [r0, #0]
 800297a:	4403      	add	r3, r0
 800297c:	1a52      	subs	r2, r2, r1
 800297e:	4293      	cmp	r3, r2
 8002980:	d806      	bhi.n	8002990 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <_sbrk+0x40>)
 8002984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002986:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002988:	4807      	ldr	r0, [pc, #28]	; (80029a8 <_sbrk+0x40>)
 800298a:	4c08      	ldr	r4, [pc, #32]	; (80029ac <_sbrk+0x44>)
 800298c:	6004      	str	r4, [r0, #0]
 800298e:	e7f2      	b.n	8002976 <_sbrk+0xe>
    errno = ENOMEM;
 8002990:	f008 f900 	bl	800ab94 <__errno>
 8002994:	230c      	movs	r3, #12
 8002996:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800299c:	e7f3      	b.n	8002986 <_sbrk+0x1e>
 800299e:	bf00      	nop
 80029a0:	2000a000 	.word	0x2000a000
 80029a4:	00000400 	.word	0x00000400
 80029a8:	20000f9c 	.word	0x20000f9c
 80029ac:	20004ac0 	.word	0x20004ac0

080029b0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b0:	490f      	ldr	r1, [pc, #60]	; (80029f0 <SystemInit+0x40>)
 80029b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <SystemInit+0x44>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80029c8:	2000      	movs	r0, #0
 80029ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80029d2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80029d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80029d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80029e6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029ec:	608b      	str	r3, [r1, #8]
#endif
}
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00
 80029f4:	40021000 	.word	0x40021000

080029f8 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80029f8:	6802      	ldr	r2, [r0, #0]
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_TIM_PWM_MspInit+0x3c>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d000      	beq.n	8002a02 <HAL_TIM_PWM_MspInit+0xa>
 8002a00:	4770      	bx	lr
{
 8002a02:	b500      	push	{lr}
 8002a04:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a06:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002a0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a10:	661a      	str	r2, [r3, #96]	; 0x60
 8002a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4611      	mov	r1, r2
 8002a20:	2019      	movs	r0, #25
 8002a22:	f000 fe8f 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a26:	2019      	movs	r0, #25
 8002a28:	f000 fec0 	bl	80037ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002a2c:	b003      	add	sp, #12
 8002a2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00

08002a38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a38:	b500      	push	{lr}
 8002a3a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9302      	str	r3, [sp, #8]
 8002a42:	9303      	str	r3, [sp, #12]
 8002a44:	9304      	str	r3, [sp, #16]
 8002a46:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8002a48:	6802      	ldr	r2, [r0, #0]
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_TIM_MspPostInit+0x54>)
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d002      	beq.n	8002a56 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a50:	b007      	add	sp, #28
 8002a52:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a70:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	a901      	add	r1, sp, #4
 8002a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a86:	f000 fff9 	bl	8003a7c <HAL_GPIO_Init>
}
 8002a8a:	e7e1      	b.n	8002a50 <HAL_TIM_MspPostInit+0x18>
 8002a8c:	40012c00 	.word	0x40012c00

08002a90 <MX_TIM1_Init>:
{
 8002a90:	b510      	push	{r4, lr}
 8002a92:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a94:	2400      	movs	r4, #0
 8002a96:	9413      	str	r4, [sp, #76]	; 0x4c
 8002a98:	9414      	str	r4, [sp, #80]	; 0x50
 8002a9a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9c:	940c      	str	r4, [sp, #48]	; 0x30
 8002a9e:	940d      	str	r4, [sp, #52]	; 0x34
 8002aa0:	940e      	str	r4, [sp, #56]	; 0x38
 8002aa2:	940f      	str	r4, [sp, #60]	; 0x3c
 8002aa4:	9410      	str	r4, [sp, #64]	; 0x40
 8002aa6:	9411      	str	r4, [sp, #68]	; 0x44
 8002aa8:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aaa:	222c      	movs	r2, #44	; 0x2c
 8002aac:	4621      	mov	r1, r4
 8002aae:	a801      	add	r0, sp, #4
 8002ab0:	f008 f8b8 	bl	800ac24 <memset>
  htim1.Instance = TIM1;
 8002ab4:	482e      	ldr	r0, [pc, #184]	; (8002b70 <MX_TIM1_Init+0xe0>)
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <MX_TIM1_Init+0xe4>)
 8002ab8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002aba:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 200;
 8002abe:	23c8      	movs	r3, #200	; 0xc8
 8002ac0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ac4:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ac8:	f003 fcae 	bl	8006428 <HAL_TIM_PWM_Init>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d13d      	bne.n	8002b4c <MX_TIM1_Init+0xbc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ad4:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ad8:	a913      	add	r1, sp, #76	; 0x4c
 8002ada:	4825      	ldr	r0, [pc, #148]	; (8002b70 <MX_TIM1_Init+0xe0>)
 8002adc:	f003 fe4e 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d136      	bne.n	8002b52 <MX_TIM1_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae4:	2360      	movs	r3, #96	; 0x60
 8002ae6:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002ae8:	2200      	movs	r2, #0
 8002aea:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aec:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aee:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af0:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002af2:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002af4:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af6:	a90c      	add	r1, sp, #48	; 0x30
 8002af8:	481d      	ldr	r0, [pc, #116]	; (8002b70 <MX_TIM1_Init+0xe0>)
 8002afa:	f003 fd01 	bl	8006500 <HAL_TIM_PWM_ConfigChannel>
 8002afe:	bb58      	cbnz	r0, 8002b58 <MX_TIM1_Init+0xc8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b00:	2204      	movs	r2, #4
 8002b02:	a90c      	add	r1, sp, #48	; 0x30
 8002b04:	481a      	ldr	r0, [pc, #104]	; (8002b70 <MX_TIM1_Init+0xe0>)
 8002b06:	f003 fcfb 	bl	8006500 <HAL_TIM_PWM_ConfigChannel>
 8002b0a:	bb40      	cbnz	r0, 8002b5e <MX_TIM1_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	a90c      	add	r1, sp, #48	; 0x30
 8002b10:	4817      	ldr	r0, [pc, #92]	; (8002b70 <MX_TIM1_Init+0xe0>)
 8002b12:	f003 fcf5 	bl	8006500 <HAL_TIM_PWM_ConfigChannel>
 8002b16:	bb28      	cbnz	r0, 8002b64 <MX_TIM1_Init+0xd4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b1c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b1e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b20:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b22:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b28:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b2a:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b2c:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b32:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b34:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b36:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b38:	a901      	add	r1, sp, #4
 8002b3a:	480d      	ldr	r0, [pc, #52]	; (8002b70 <MX_TIM1_Init+0xe0>)
 8002b3c:	f003 fe56 	bl	80067ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002b40:	b998      	cbnz	r0, 8002b6a <MX_TIM1_Init+0xda>
  HAL_TIM_MspPostInit(&htim1);
 8002b42:	480b      	ldr	r0, [pc, #44]	; (8002b70 <MX_TIM1_Init+0xe0>)
 8002b44:	f7ff ff78 	bl	8002a38 <HAL_TIM_MspPostInit>
}
 8002b48:	b016      	add	sp, #88	; 0x58
 8002b4a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002b4c:	f7ff fe20 	bl	8002790 <Error_Handler>
 8002b50:	e7be      	b.n	8002ad0 <MX_TIM1_Init+0x40>
    Error_Handler();
 8002b52:	f7ff fe1d 	bl	8002790 <Error_Handler>
 8002b56:	e7c5      	b.n	8002ae4 <MX_TIM1_Init+0x54>
    Error_Handler();
 8002b58:	f7ff fe1a 	bl	8002790 <Error_Handler>
 8002b5c:	e7d0      	b.n	8002b00 <MX_TIM1_Init+0x70>
    Error_Handler();
 8002b5e:	f7ff fe17 	bl	8002790 <Error_Handler>
 8002b62:	e7d3      	b.n	8002b0c <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002b64:	f7ff fe14 	bl	8002790 <Error_Handler>
 8002b68:	e7d6      	b.n	8002b18 <MX_TIM1_Init+0x88>
    Error_Handler();
 8002b6a:	f7ff fe11 	bl	8002790 <Error_Handler>
 8002b6e:	e7e8      	b.n	8002b42 <MX_TIM1_Init+0xb2>
 8002b70:	20003a04 	.word	0x20003a04
 8002b74:	40012c00 	.word	0x40012c00

08002b78 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b78:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8002b7a:	480b      	ldr	r0, [pc, #44]	; (8002ba8 <MX_USART3_UART_Init+0x30>)
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_USART3_UART_Init+0x34>)
 8002b7e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002b80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002b84:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b86:	2300      	movs	r3, #0
 8002b88:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b8a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b8c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b8e:	220c      	movs	r2, #12
 8002b90:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b96:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b98:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b9a:	f004 fa3f 	bl	800701c <HAL_UART_Init>
 8002b9e:	b900      	cbnz	r0, 8002ba2 <MX_USART3_UART_Init+0x2a>
  {
    Error_Handler();
  }

}
 8002ba0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ba2:	f7ff fdf5 	bl	8002790 <Error_Handler>
}
 8002ba6:	e7fb      	b.n	8002ba0 <MX_USART3_UART_Init+0x28>
 8002ba8:	20003a98 	.word	0x20003a98
 8002bac:	40004800 	.word	0x40004800

08002bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9303      	str	r3, [sp, #12]
 8002bb8:	9304      	str	r3, [sp, #16]
 8002bba:	9305      	str	r3, [sp, #20]
 8002bbc:	9306      	str	r3, [sp, #24]
 8002bbe:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 8002bc0:	6802      	ldr	r2, [r0, #0]
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_UART_MspInit+0xa8>)
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002bc8:	b008      	add	sp, #32
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bce:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002bd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bd4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bd8:	659a      	str	r2, [r3, #88]	; 0x58
 8002bda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bdc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002be0:	9201      	str	r2, [sp, #4]
 8002be2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002be6:	f042 0202 	orr.w	r2, r2, #2
 8002bea:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2602      	movs	r6, #2
 8002bfe:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2500      	movs	r5, #0
 8002c02:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	a903      	add	r1, sp, #12
 8002c0e:	4813      	ldr	r0, [pc, #76]	; (8002c5c <HAL_UART_MspInit+0xac>)
 8002c10:	f000 ff34 	bl	8003a7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002c14:	4812      	ldr	r0, [pc, #72]	; (8002c60 <HAL_UART_MspInit+0xb0>)
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_UART_MspInit+0xb4>)
 8002c18:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8002c1a:	6046      	str	r6, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1c:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c1e:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c24:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c26:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c30:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c32:	f000 fde1 	bl	80037f8 <HAL_DMA_Init>
 8002c36:	b958      	cbnz	r0, 8002c50 <HAL_UART_MspInit+0xa0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_UART_MspInit+0xb0>)
 8002c3a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002c3c:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2105      	movs	r1, #5
 8002c42:	2027      	movs	r0, #39	; 0x27
 8002c44:	f000 fd7e 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c48:	2027      	movs	r0, #39	; 0x27
 8002c4a:	f000 fdaf 	bl	80037ac <HAL_NVIC_EnableIRQ>
}
 8002c4e:	e7bb      	b.n	8002bc8 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8002c50:	f7ff fd9e 	bl	8002790 <Error_Handler>
 8002c54:	e7f0      	b.n	8002c38 <HAL_UART_MspInit+0x88>
 8002c56:	bf00      	nop
 8002c58:	40004800 	.word	0x40004800
 8002c5c:	48000400 	.word	0x48000400
 8002c60:	20003a50 	.word	0x20003a50
 8002c64:	40020030 	.word	0x40020030

08002c68 <Reset_Handler>:
	.type	Reset_Handler, %function
Reset_Handler:

//c  ldr   sp, =_estack    /* Set stack pointer */
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c68:	f7ff fea2 	bl	80029b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c6e:	e003      	b.n	8002c78 <LoopCopyDataInit>

08002c70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8002c72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c76:	3104      	adds	r1, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c78:	4809      	ldr	r0, [pc, #36]	; (8002ca0 <LoopForever+0x6>)
	ldr	r3, =_edata
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <LoopForever+0xa>)
	adds	r2, r0, r1
 8002c7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c80:	d3f6      	bcc.n	8002c70 <CopyDataInit>
	ldr	r2, =_sbss
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <LoopForever+0xe>)
	b	LoopFillZerobss
 8002c84:	e002      	b.n	8002c8c <LoopFillZerobss>

08002c86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c88:	f842 3b04 	str.w	r3, [r2], #4

08002c8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <LoopForever+0x12>)
	cmp	r2, r3
 8002c8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c90:	d3f9      	bcc.n	8002c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c92:	f007 ff85 	bl	800aba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c96:	f7ff fc33 	bl	8002500 <main>

08002c9a <LoopForever>:

LoopForever:
    b LoopForever
 8002c9a:	e7fe      	b.n	8002c9a <LoopForever>
	ldr	r3, =_sidata
 8002c9c:	0800afa0 	.word	0x0800afa0
	ldr	r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ca4:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8002ca8:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002cac:	20004ac0 	.word	0x20004ac0

08002cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cb0:	e7fe      	b.n	8002cb0 <ADC1_2_IRQHandler>

08002cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb2:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f000 fd33 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7ff fd90 	bl	80027e0 <HAL_InitTick>
 8002cc0:	b110      	cbz	r0, 8002cc8 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8002cc2:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	bd10      	pop	{r4, pc}
 8002cc8:	4604      	mov	r4, r0
    HAL_MspInit();
 8002cca:	f7ff fd69 	bl	80027a0 <HAL_MspInit>
 8002cce:	e7f9      	b.n	8002cc4 <HAL_Init+0x12>

08002cd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_IncTick+0x10>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_IncTick+0x14>)
 8002cd6:	6811      	ldr	r1, [r2, #0]
 8002cd8:	440b      	add	r3, r1
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000004 	.word	0x20000004
 8002ce4:	20003b18 	.word	0x20003b18

08002ce8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ce8:	4b01      	ldr	r3, [pc, #4]	; (8002cf0 <HAL_GetTick+0x8>)
 8002cea:	6818      	ldr	r0, [r3, #0]
}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20003b18 	.word	0x20003b18

08002cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff fff6 	bl	8002ce8 <HAL_GetTick>
 8002cfc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002d02:	d002      	beq.n	8002d0a <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_Delay+0x24>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d0a:	f7ff ffed 	bl	8002ce8 <HAL_GetTick>
 8002d0e:	1b40      	subs	r0, r0, r5
 8002d10:	42a0      	cmp	r0, r4
 8002d12:	d3fa      	bcc.n	8002d0a <HAL_Delay+0x16>
  {
  }
}
 8002d14:	bd38      	pop	{r3, r4, r5, pc}
 8002d16:	bf00      	nop
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b530      	push	{r4, r5, lr}
 8002d1e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f000 80e1 	beq.w	8002eec <HAL_ADC_Init+0x1d0>
 8002d2a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d2e:	b303      	cbz	r3, 8002d72 <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d30:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002d38:	d005      	beq.n	8002d46 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002d40:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d44:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d46:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d48:	6893      	ldr	r3, [r2, #8]
 8002d4a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d4e:	d11d      	bne.n	8002d8c <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8002d50:	6893      	ldr	r3, [r2, #8]
 8002d52:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d60:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_ADC_Init+0x1d4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	4a63      	ldr	r2, [pc, #396]	; (8002ef4 <HAL_ADC_Init+0x1d8>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d70:	e009      	b.n	8002d86 <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 8002d72:	f7ff f955 	bl	8002020 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d76:	2300      	movs	r3, #0
 8002d78:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002d7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002d7e:	e7d7      	b.n	8002d30 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002d80:	9b01      	ldr	r3, [sp, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d86:	9b01      	ldr	r3, [sp, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f9      	bne.n	8002d80 <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d8c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d8e:	6893      	ldr	r3, [r2, #8]
 8002d90:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d94:	d109      	bne.n	8002daa <HAL_ADC_Init+0x8e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d98:	f043 0310 	orr.w	r3, r3, #16
 8002d9c:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002da6:	2001      	movs	r0, #1
 8002da8:	e000      	b.n	8002dac <HAL_ADC_Init+0x90>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002daa:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dac:	6893      	ldr	r3, [r2, #8]
 8002dae:	f013 0304 	ands.w	r3, r3, #4
 8002db2:	d000      	beq.n	8002db6 <HAL_ADC_Init+0x9a>
 8002db4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002db8:	f011 0f10 	tst.w	r1, #16
 8002dbc:	f040 808f 	bne.w	8002ede <HAL_ADC_Init+0x1c2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 808c 	bne.w	8002ede <HAL_ADC_Init+0x1c2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd2:	6893      	ldr	r3, [r2, #8]
 8002dd4:	f013 0f01 	tst.w	r3, #1
 8002dd8:	d114      	bne.n	8002e04 <HAL_ADC_Init+0xe8>
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_ADC_Init+0x1dc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f013 0301 	ands.w	r3, r3, #1
 8002de2:	d000      	beq.n	8002de6 <HAL_ADC_Init+0xca>
 8002de4:	2301      	movs	r3, #1
 8002de6:	4a45      	ldr	r2, [pc, #276]	; (8002efc <HAL_ADC_Init+0x1e0>)
 8002de8:	6892      	ldr	r2, [r2, #8]
 8002dea:	f012 0201 	ands.w	r2, r2, #1
 8002dee:	d000      	beq.n	8002df2 <HAL_ADC_Init+0xd6>
 8002df0:	2201      	movs	r2, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	d106      	bne.n	8002e04 <HAL_ADC_Init+0xe8>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002df6:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002df8:	4941      	ldr	r1, [pc, #260]	; (8002f00 <HAL_ADC_Init+0x1e4>)
 8002dfa:	688a      	ldr	r2, [r1, #8]
 8002dfc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e04:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8002e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e08:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8002e0c:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8002e0e:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8002e10:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8002e12:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e14:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e1c:	2a01      	cmp	r2, #1
 8002e1e:	d03e      	beq.n	8002e9e <HAL_ADC_Init+0x182>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e22:	b122      	cbz	r2, 8002e2e <HAL_ADC_Init+0x112>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e24:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e2a:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e2c:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e2e:	6821      	ldr	r1, [r4, #0]
 8002e30:	68cd      	ldr	r5, [r1, #12]
 8002e32:	4a34      	ldr	r2, [pc, #208]	; (8002f04 <HAL_ADC_Init+0x1e8>)
 8002e34:	402a      	ands	r2, r5
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3a:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3c:	688b      	ldr	r3, [r1, #8]
 8002e3e:	f013 0304 	ands.w	r3, r3, #4
 8002e42:	d000      	beq.n	8002e46 <HAL_ADC_Init+0x12a>
 8002e44:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e46:	688a      	ldr	r2, [r1, #8]
 8002e48:	f012 0208 	ands.w	r2, r2, #8
 8002e4c:	d000      	beq.n	8002e50 <HAL_ADC_Init+0x134>
 8002e4e:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e50:	b9b3      	cbnz	r3, 8002e80 <HAL_ADC_Init+0x164>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e52:	b9aa      	cbnz	r2, 8002e80 <HAL_ADC_Init+0x164>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e54:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e56:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002e5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e5c:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e60:	68cb      	ldr	r3, [r1, #12]
 8002e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e66:	f023 0302 	bic.w	r3, r3, #2
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d018      	beq.n	8002ea8 <HAL_ADC_Init+0x18c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	6913      	ldr	r3, [r2, #16]
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e80:	6923      	ldr	r3, [r4, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d022      	beq.n	8002ecc <HAL_ADC_Init+0x1b0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e86:	6822      	ldr	r2, [r4, #0]
 8002e88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002e8a:	f023 030f 	bic.w	r3, r3, #15
 8002e8e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6563      	str	r3, [r4, #84]	; 0x54
 8002e9c:	e024      	b.n	8002ee8 <HAL_ADC_Init+0x1cc>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002ea6:	e7bb      	b.n	8002e20 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ea8:	6821      	ldr	r1, [r4, #0]
 8002eaa:	690b      	ldr	r3, [r1, #16]
 8002eac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002eb6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002eb8:	432a      	orrs	r2, r5
 8002eba:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002ebc:	432a      	orrs	r2, r5
 8002ebe:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002ec0:	432a      	orrs	r2, r5
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	610b      	str	r3, [r1, #16]
 8002eca:	e7d9      	b.n	8002e80 <HAL_ADC_Init+0x164>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002ed0:	f023 030f 	bic.w	r3, r3, #15
 8002ed4:	69e2      	ldr	r2, [r4, #28]
 8002ed6:	3a01      	subs	r2, #1
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	630b      	str	r3, [r1, #48]	; 0x30
 8002edc:	e7d8      	b.n	8002e90 <HAL_ADC_Init+0x174>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002ee8:	b003      	add	sp, #12
 8002eea:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002eec:	2001      	movs	r0, #1
 8002eee:	e7fb      	b.n	8002ee8 <HAL_ADC_Init+0x1cc>
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	053e2d63 	.word	0x053e2d63
 8002ef8:	50040000 	.word	0x50040000
 8002efc:	50040100 	.word	0x50040100
 8002f00:	50040300 	.word	0x50040300
 8002f04:	fff0c007 	.word	0xfff0c007

08002f08 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f08:	4770      	bx	lr

08002f0a <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f0a:	4770      	bx	lr

08002f0c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002f10:	f7ff fffb 	bl	8002f0a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f14:	bd08      	pop	{r3, pc}

08002f16 <HAL_ADC_ErrorCallback>:
}
 8002f16:	4770      	bx	lr

08002f18 <ADC_DMAConvCplt>:
{
 8002f18:	b508      	push	{r3, lr}
 8002f1a:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f1e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002f20:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002f24:	d130      	bne.n	8002f88 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2c:	6543      	str	r3, [r0, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f2e:	6803      	ldr	r3, [r0, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	f012 0f08 	tst.w	r2, #8
 8002f36:	d014      	beq.n	8002f62 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002f3e:	d120      	bne.n	8002f82 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002f46:	d11c      	bne.n	8002f82 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f48:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4e:	6543      	str	r3, [r0, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f50:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f52:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002f56:	d114      	bne.n	8002f82 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f58:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6543      	str	r3, [r0, #84]	; 0x54
 8002f60:	e00f      	b.n	8002f82 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f013 0f02 	tst.w	r3, #2
 8002f68:	d10b      	bne.n	8002f82 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f70:	6543      	str	r3, [r0, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f72:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f74:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002f78:	d103      	bne.n	8002f82 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002f82:	f7ff ffc1 	bl	8002f08 <HAL_ADC_ConvCpltCallback>
}
 8002f86:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f88:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002f8a:	f012 0f10 	tst.w	r2, #16
 8002f8e:	d104      	bne.n	8002f9a <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f90:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002f92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f94:	4618      	mov	r0, r3
 8002f96:	4790      	blx	r2
}
 8002f98:	e7f5      	b.n	8002f86 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8002f9a:	f7ff ffbc 	bl	8002f16 <HAL_ADC_ErrorCallback>
 8002f9e:	e7f2      	b.n	8002f86 <ADC_DMAConvCplt+0x6e>

08002fa0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fa4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002faa:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fb4:	f7ff ffaf 	bl	8002f16 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb8:	bd08      	pop	{r3, pc}
	...

08002fbc <HAL_ADC_ConfigChannel>:
{
 8002fbc:	b4f0      	push	{r4, r5, r6, r7}
 8002fbe:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002fc4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002fc8:	2a01      	cmp	r2, #1
 8002fca:	f000 824d 	beq.w	8003468 <HAL_ADC_ConfigChannel+0x4ac>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fd8:	6892      	ldr	r2, [r2, #8]
 8002fda:	f012 0f04 	tst.w	r2, #4
 8002fde:	d00a      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002fe2:	f042 0220 	orr.w	r2, r2, #32
 8002fe6:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002fe8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ff4:	4770      	bx	lr
    if (sConfig->Rank <= 5U)
 8002ff6:	684a      	ldr	r2, [r1, #4]
 8002ff8:	2a05      	cmp	r2, #5
 8002ffa:	d809      	bhi.n	8003010 <HAL_ADC_ConfigChannel+0x54>
      switch (sConfig->Rank)
 8002ffc:	3a02      	subs	r2, #2
 8002ffe:	2a03      	cmp	r2, #3
 8003000:	f200 8097 	bhi.w	8003132 <HAL_ADC_ConfigChannel+0x176>
 8003004:	e8df f002 	tbb	[pc, r2]
 8003008:	918e8b02 	.word	0x918e8b02
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800300c:	220c      	movs	r2, #12
 800300e:	604a      	str	r2, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003010:	681e      	ldr	r6, [r3, #0]
 8003012:	684d      	ldr	r5, [r1, #4]
 8003014:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003016:	3630      	adds	r6, #48	; 0x30
 8003018:	0a2a      	lsrs	r2, r5, #8
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003020:	58b0      	ldr	r0, [r6, r2]
 8003022:	f005 051f 	and.w	r5, r5, #31
 8003026:	271f      	movs	r7, #31
 8003028:	40af      	lsls	r7, r5
 800302a:	ea20 0007 	bic.w	r0, r0, r7
 800302e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003032:	40ac      	lsls	r4, r5
 8003034:	4320      	orrs	r0, r4
 8003036:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003038:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800303a:	68a2      	ldr	r2, [r4, #8]
 800303c:	f012 0204 	ands.w	r2, r2, #4
 8003040:	d000      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x88>
 8003042:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003044:	68a0      	ldr	r0, [r4, #8]
 8003046:	f010 0008 	ands.w	r0, r0, #8
 800304a:	d000      	beq.n	800304e <HAL_ADC_ConfigChannel+0x92>
 800304c:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304e:	2a00      	cmp	r2, #0
 8003050:	d132      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0xfc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003052:	bb88      	cbnz	r0, 80030b8 <HAL_ADC_ConfigChannel+0xfc>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003054:	6888      	ldr	r0, [r1, #8]
 8003056:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800305a:	d06d      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x17c>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800305c:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800305e:	3414      	adds	r4, #20
 8003060:	0e72      	lsrs	r2, r6, #25
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003068:	58a5      	ldr	r5, [r4, r2]
 800306a:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800306e:	2707      	movs	r7, #7
 8003070:	40b7      	lsls	r7, r6
 8003072:	ea25 0507 	bic.w	r5, r5, r7
 8003076:	40b0      	lsls	r0, r6
 8003078:	4328      	orrs	r0, r5
 800307a:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800307c:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800307e:	6942      	ldr	r2, [r0, #20]
 8003080:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003084:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003086:	694c      	ldr	r4, [r1, #20]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	68c2      	ldr	r2, [r0, #12]
 800308c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003090:	0052      	lsls	r2, r2, #1
 8003092:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003096:	690d      	ldr	r5, [r1, #16]
 8003098:	2d04      	cmp	r5, #4
 800309a:	d062      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x1a6>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800309c:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309e:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80030a0:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80030a4:	4cb0      	ldr	r4, [pc, #704]	; (8003368 <HAL_ADC_ConfigChannel+0x3ac>)
 80030a6:	403c      	ands	r4, r7
 80030a8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80030ac:	4332      	orrs	r2, r6
 80030ae:	4314      	orrs	r4, r2
 80030b0:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80030b4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b8:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ba:	6882      	ldr	r2, [r0, #8]
 80030bc:	f012 0f01 	tst.w	r2, #1
 80030c0:	d116      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x134>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030c2:	680a      	ldr	r2, [r1, #0]
 80030c4:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80030c6:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80030ca:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80030ce:	ea24 0406 	bic.w	r4, r4, r6
 80030d2:	f005 0618 	and.w	r6, r5, #24
 80030d6:	4da5      	ldr	r5, [pc, #660]	; (800336c <HAL_ADC_ConfigChannel+0x3b0>)
 80030d8:	40f5      	lsrs	r5, r6
 80030da:	402a      	ands	r2, r5
 80030dc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80030e0:	4322      	orrs	r2, r4
 80030e2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030e6:	68c8      	ldr	r0, [r1, #12]
 80030e8:	4aa1      	ldr	r2, [pc, #644]	; (8003370 <HAL_ADC_ConfigChannel+0x3b4>)
 80030ea:	4290      	cmp	r0, r2
 80030ec:	f000 80a1 	beq.w	8003232 <HAL_ADC_ConfigChannel+0x276>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030f0:	680a      	ldr	r2, [r1, #0]
 80030f2:	49a0      	ldr	r1, [pc, #640]	; (8003374 <HAL_ADC_ConfigChannel+0x3b8>)
 80030f4:	420a      	tst	r2, r1
 80030f6:	f000 81b3 	beq.w	8003460 <HAL_ADC_ConfigChannel+0x4a4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030fa:	499f      	ldr	r1, [pc, #636]	; (8003378 <HAL_ADC_ConfigChannel+0x3bc>)
 80030fc:	6889      	ldr	r1, [r1, #8]
 80030fe:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003102:	489e      	ldr	r0, [pc, #632]	; (800337c <HAL_ADC_ConfigChannel+0x3c0>)
 8003104:	4282      	cmp	r2, r0
 8003106:	f000 815e 	beq.w	80033c6 <HAL_ADC_ConfigChannel+0x40a>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800310a:	489d      	ldr	r0, [pc, #628]	; (8003380 <HAL_ADC_ConfigChannel+0x3c4>)
 800310c:	4282      	cmp	r2, r0
 800310e:	f000 8180 	beq.w	8003412 <HAL_ADC_ConfigChannel+0x456>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003112:	489c      	ldr	r0, [pc, #624]	; (8003384 <HAL_ADC_ConfigChannel+0x3c8>)
 8003114:	4282      	cmp	r2, r0
 8003116:	f000 8190 	beq.w	800343a <HAL_ADC_ConfigChannel+0x47e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800311a:	2000      	movs	r0, #0
 800311c:	e765      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800311e:	2212      	movs	r2, #18
 8003120:	604a      	str	r2, [r1, #4]
          break;
 8003122:	e775      	b.n	8003010 <HAL_ADC_ConfigChannel+0x54>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003124:	2218      	movs	r2, #24
 8003126:	604a      	str	r2, [r1, #4]
          break;
 8003128:	e772      	b.n	8003010 <HAL_ADC_ConfigChannel+0x54>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800312a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800312e:	604a      	str	r2, [r1, #4]
          break;
 8003130:	e76e      	b.n	8003010 <HAL_ADC_ConfigChannel+0x54>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003132:	2206      	movs	r2, #6
 8003134:	604a      	str	r2, [r1, #4]
          break;
 8003136:	e76b      	b.n	8003010 <HAL_ADC_ConfigChannel+0x54>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003138:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800313a:	3414      	adds	r4, #20
 800313c:	0e42      	lsrs	r2, r0, #25
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003144:	58a5      	ldr	r5, [r4, r2]
 8003146:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800314a:	2607      	movs	r6, #7
 800314c:	fa06 f000 	lsl.w	r0, r6, r0
 8003150:	ea25 0000 	bic.w	r0, r5, r0
 8003154:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003156:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003158:	6942      	ldr	r2, [r0, #20]
 800315a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800315e:	6142      	str	r2, [r0, #20]
}
 8003160:	e791      	b.n	8003086 <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003162:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003164:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003166:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800316a:	680a      	ldr	r2, [r1, #0]
 800316c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003170:	bb85      	cbnz	r5, 80031d4 <HAL_ADC_ConfigChannel+0x218>
 8003172:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003176:	4294      	cmp	r4, r2
 8003178:	d034      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x228>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800317a:	681c      	ldr	r4, [r3, #0]
 800317c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800317e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003180:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003184:	680a      	ldr	r2, [r1, #0]
 8003186:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800318a:	bb85      	cbnz	r5, 80031ee <HAL_ADC_ConfigChannel+0x232>
 800318c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003190:	4290      	cmp	r0, r2
 8003192:	d034      	beq.n	80031fe <HAL_ADC_ConfigChannel+0x242>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003194:	681c      	ldr	r4, [r3, #0]
 8003196:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003198:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800319a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800319e:	680a      	ldr	r2, [r1, #0]
 80031a0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80031a4:	bb85      	cbnz	r5, 8003208 <HAL_ADC_ConfigChannel+0x24c>
 80031a6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031aa:	4290      	cmp	r0, r2
 80031ac:	d034      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x25c>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031ae:	681c      	ldr	r4, [r3, #0]
 80031b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80031b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80031b4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b8:	680a      	ldr	r2, [r1, #0]
 80031ba:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80031be:	bb85      	cbnz	r5, 8003222 <HAL_ADC_ConfigChannel+0x266>
 80031c0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031c4:	4290      	cmp	r0, r2
 80031c6:	f47f af77 	bne.w	80030b8 <HAL_ADC_ConfigChannel+0xfc>
  MODIFY_REG(*preg,
 80031ca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80031cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031d0:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 80031d2:	e771      	b.n	80030b8 <HAL_ADC_ConfigChannel+0xfc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031d8:	b112      	cbz	r2, 80031e0 <HAL_ADC_ConfigChannel+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80031da:	fab2 f282 	clz	r2, r2
 80031de:	e7ca      	b.n	8003176 <HAL_ADC_ConfigChannel+0x1ba>
    return 32U;
 80031e0:	2220      	movs	r2, #32
 80031e2:	e7c8      	b.n	8003176 <HAL_ADC_ConfigChannel+0x1ba>
  MODIFY_REG(*preg,
 80031e4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80031e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ea:	6602      	str	r2, [r0, #96]	; 0x60
}
 80031ec:	e7c5      	b.n	800317a <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80031f2:	b112      	cbz	r2, 80031fa <HAL_ADC_ConfigChannel+0x23e>
  return __builtin_clz(value);
 80031f4:	fab2 f282 	clz	r2, r2
 80031f8:	e7ca      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1d4>
    return 32U;
 80031fa:	2220      	movs	r2, #32
 80031fc:	e7c8      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1d4>
  MODIFY_REG(*preg,
 80031fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003200:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003204:	6662      	str	r2, [r4, #100]	; 0x64
}
 8003206:	e7c5      	b.n	8003194 <HAL_ADC_ConfigChannel+0x1d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800320c:	b112      	cbz	r2, 8003214 <HAL_ADC_ConfigChannel+0x258>
  return __builtin_clz(value);
 800320e:	fab2 f282 	clz	r2, r2
 8003212:	e7ca      	b.n	80031aa <HAL_ADC_ConfigChannel+0x1ee>
    return 32U;
 8003214:	2220      	movs	r2, #32
 8003216:	e7c8      	b.n	80031aa <HAL_ADC_ConfigChannel+0x1ee>
  MODIFY_REG(*preg,
 8003218:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800321a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800321e:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003220:	e7c5      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003226:	b112      	cbz	r2, 800322e <HAL_ADC_ConfigChannel+0x272>
  return __builtin_clz(value);
 8003228:	fab2 f282 	clz	r2, r2
 800322c:	e7ca      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x208>
    return 32U;
 800322e:	2220      	movs	r2, #32
 8003230:	e7c8      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x208>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003232:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003234:	680a      	ldr	r2, [r1, #0]
 8003236:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800323a:	2e00      	cmp	r6, #0
 800323c:	d135      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x2ee>
 800323e:	0e90      	lsrs	r0, r2, #26
 8003240:	3001      	adds	r0, #1
 8003242:	f000 001f 	and.w	r0, r0, #31
 8003246:	2809      	cmp	r0, #9
 8003248:	bf8c      	ite	hi
 800324a:	2000      	movhi	r0, #0
 800324c:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324e:	2800      	cmp	r0, #0
 8003250:	d062      	beq.n	8003318 <HAL_ADC_ConfigChannel+0x35c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003252:	2e00      	cmp	r6, #0
 8003254:	d138      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x30c>
 8003256:	0e94      	lsrs	r4, r2, #26
 8003258:	3401      	adds	r4, #1
 800325a:	06a4      	lsls	r4, r4, #26
 800325c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003260:	2e00      	cmp	r6, #0
 8003262:	d13d      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x324>
 8003264:	0e90      	lsrs	r0, r2, #26
 8003266:	3001      	adds	r0, #1
 8003268:	f000 071f 	and.w	r7, r0, #31
 800326c:	2001      	movs	r0, #1
 800326e:	40b8      	lsls	r0, r7
 8003270:	4304      	orrs	r4, r0
 8003272:	2e00      	cmp	r6, #0
 8003274:	d142      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x340>
 8003276:	0e92      	lsrs	r2, r2, #26
 8003278:	3201      	adds	r2, #1
 800327a:	f002 021f 	and.w	r2, r2, #31
 800327e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003282:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003284:	4322      	orrs	r2, r4
 8003286:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003288:	3514      	adds	r5, #20
 800328a:	0e50      	lsrs	r0, r2, #25
 800328c:	0080      	lsls	r0, r0, #2
 800328e:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003292:	582e      	ldr	r6, [r5, r0]
 8003294:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003298:	2707      	movs	r7, #7
 800329a:	4097      	lsls	r7, r2
 800329c:	ea26 0607 	bic.w	r6, r6, r7
 80032a0:	fa04 f202 	lsl.w	r2, r4, r2
 80032a4:	4332      	orrs	r2, r6
 80032a6:	502a      	str	r2, [r5, r0]
}
 80032a8:	e722      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x134>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80032ae:	b148      	cbz	r0, 80032c4 <HAL_ADC_ConfigChannel+0x308>
  return __builtin_clz(value);
 80032b0:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032b4:	3001      	adds	r0, #1
 80032b6:	f000 001f 	and.w	r0, r0, #31
 80032ba:	2809      	cmp	r0, #9
 80032bc:	bf8c      	ite	hi
 80032be:	2000      	movhi	r0, #0
 80032c0:	2001      	movls	r0, #1
 80032c2:	e7c4      	b.n	800324e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80032c4:	2020      	movs	r0, #32
 80032c6:	e7f5      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80032cc:	b134      	cbz	r4, 80032dc <HAL_ADC_ConfigChannel+0x320>
  return __builtin_clz(value);
 80032ce:	fab4 f484 	clz	r4, r4
 80032d2:	3401      	adds	r4, #1
 80032d4:	06a4      	lsls	r4, r4, #26
 80032d6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80032da:	e7c1      	b.n	8003260 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80032dc:	2420      	movs	r4, #32
 80032de:	e7f8      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x316>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80032e4:	b140      	cbz	r0, 80032f8 <HAL_ADC_ConfigChannel+0x33c>
  return __builtin_clz(value);
 80032e6:	fab0 f080 	clz	r0, r0
 80032ea:	3001      	adds	r0, #1
 80032ec:	f000 001f 	and.w	r0, r0, #31
 80032f0:	2701      	movs	r7, #1
 80032f2:	fa07 f000 	lsl.w	r0, r7, r0
 80032f6:	e7bb      	b.n	8003270 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80032f8:	2020      	movs	r0, #32
 80032fa:	e7f6      	b.n	80032ea <HAL_ADC_ConfigChannel+0x32e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003300:	b142      	cbz	r2, 8003314 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003302:	fab2 f282 	clz	r2, r2
 8003306:	3201      	adds	r2, #1
 8003308:	f002 021f 	and.w	r2, r2, #31
 800330c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003310:	0512      	lsls	r2, r2, #20
 8003312:	e7b7      	b.n	8003284 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003314:	2220      	movs	r2, #32
 8003316:	e7f6      	b.n	8003306 <HAL_ADC_ConfigChannel+0x34a>
 8003318:	b9ce      	cbnz	r6, 800334e <HAL_ADC_ConfigChannel+0x392>
 800331a:	0e94      	lsrs	r4, r2, #26
 800331c:	3401      	adds	r4, #1
 800331e:	06a4      	lsls	r4, r4, #26
 8003320:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003324:	bb86      	cbnz	r6, 8003388 <HAL_ADC_ConfigChannel+0x3cc>
 8003326:	0e90      	lsrs	r0, r2, #26
 8003328:	3001      	adds	r0, #1
 800332a:	f000 071f 	and.w	r7, r0, #31
 800332e:	2001      	movs	r0, #1
 8003330:	40b8      	lsls	r0, r7
 8003332:	4304      	orrs	r4, r0
 8003334:	bbb6      	cbnz	r6, 80033a4 <HAL_ADC_ConfigChannel+0x3e8>
 8003336:	0e90      	lsrs	r0, r2, #26
 8003338:	3001      	adds	r0, #1
 800333a:	f000 001f 	and.w	r0, r0, #31
 800333e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003342:	3a1e      	subs	r2, #30
 8003344:	0512      	lsls	r2, r2, #20
 8003346:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800334a:	4322      	orrs	r2, r4
 800334c:	e79b      	b.n	8003286 <HAL_ADC_ConfigChannel+0x2ca>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003352:	b134      	cbz	r4, 8003362 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003354:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003358:	3401      	adds	r4, #1
 800335a:	06a4      	lsls	r4, r4, #26
 800335c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003360:	e7e0      	b.n	8003324 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003362:	2420      	movs	r4, #32
 8003364:	e7f8      	b.n	8003358 <HAL_ADC_ConfigChannel+0x39c>
 8003366:	bf00      	nop
 8003368:	03fff000 	.word	0x03fff000
 800336c:	0007ffff 	.word	0x0007ffff
 8003370:	407f0000 	.word	0x407f0000
 8003374:	80080000 	.word	0x80080000
 8003378:	50040300 	.word	0x50040300
 800337c:	c7520000 	.word	0xc7520000
 8003380:	cb840000 	.word	0xcb840000
 8003384:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800338c:	b140      	cbz	r0, 80033a0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800338e:	fab0 f080 	clz	r0, r0
 8003392:	3001      	adds	r0, #1
 8003394:	f000 001f 	and.w	r0, r0, #31
 8003398:	2701      	movs	r7, #1
 800339a:	fa07 f000 	lsl.w	r0, r7, r0
 800339e:	e7c8      	b.n	8003332 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80033a0:	2020      	movs	r0, #32
 80033a2:	e7f6      	b.n	8003392 <HAL_ADC_ConfigChannel+0x3d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80033a8:	b15a      	cbz	r2, 80033c2 <HAL_ADC_ConfigChannel+0x406>
  return __builtin_clz(value);
 80033aa:	fab2 f082 	clz	r0, r2
 80033ae:	3001      	adds	r0, #1
 80033b0:	f000 001f 	and.w	r0, r0, #31
 80033b4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80033b8:	3a1e      	subs	r2, #30
 80033ba:	0512      	lsls	r2, r2, #20
 80033bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80033c0:	e7c3      	b.n	800334a <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 80033c2:	2020      	movs	r0, #32
 80033c4:	e7f3      	b.n	80033ae <HAL_ADC_ConfigChannel+0x3f2>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033c6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80033ca:	f47f ae9e 	bne.w	800310a <HAL_ADC_ConfigChannel+0x14e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	4a26      	ldr	r2, [pc, #152]	; (800346c <HAL_ADC_ConfigChannel+0x4b0>)
 80033d2:	4291      	cmp	r1, r2
 80033d4:	d001      	beq.n	80033da <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d6:	2000      	movs	r0, #0
 80033d8:	e607      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033da:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033de:	4824      	ldr	r0, [pc, #144]	; (8003470 <HAL_ADC_ConfigChannel+0x4b4>)
 80033e0:	6881      	ldr	r1, [r0, #8]
 80033e2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80033e6:	430a      	orrs	r2, r1
 80033e8:	6082      	str	r2, [r0, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <HAL_ADC_ConfigChannel+0x4b8>)
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	0992      	lsrs	r2, r2, #6
 80033f0:	4921      	ldr	r1, [pc, #132]	; (8003478 <HAL_ADC_ConfigChannel+0x4bc>)
 80033f2:	fba1 1202 	umull	r1, r2, r1, r2
 80033f6:	0992      	lsrs	r2, r2, #6
 80033f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003400:	e002      	b.n	8003408 <HAL_ADC_ConfigChannel+0x44c>
            wait_loop_index--;
 8003402:	9a01      	ldr	r2, [sp, #4]
 8003404:	3a01      	subs	r2, #1
 8003406:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003408:	9a01      	ldr	r2, [sp, #4]
 800340a:	2a00      	cmp	r2, #0
 800340c:	d1f9      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x446>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340e:	2000      	movs	r0, #0
 8003410:	e5eb      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003412:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8003416:	f47f ae7c 	bne.w	8003112 <HAL_ADC_ConfigChannel+0x156>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	4a13      	ldr	r2, [pc, #76]	; (800346c <HAL_ADC_ConfigChannel+0x4b0>)
 800341e:	4291      	cmp	r1, r2
 8003420:	d001      	beq.n	8003426 <HAL_ADC_ConfigChannel+0x46a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003422:	2000      	movs	r0, #0
 8003424:	e5e1      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003426:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 800342a:	4811      	ldr	r0, [pc, #68]	; (8003470 <HAL_ADC_ConfigChannel+0x4b4>)
 800342c:	6881      	ldr	r1, [r0, #8]
 800342e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003432:	430a      	orrs	r2, r1
 8003434:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003436:	2000      	movs	r0, #0
}
 8003438:	e5d7      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800343a:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800343e:	d111      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x4a8>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <HAL_ADC_ConfigChannel+0x4b0>)
 8003444:	4291      	cmp	r1, r2
 8003446:	d001      	beq.n	800344c <HAL_ADC_ConfigChannel+0x490>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	2000      	movs	r0, #0
 800344a:	e5ce      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800344c:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003450:	4807      	ldr	r0, [pc, #28]	; (8003470 <HAL_ADC_ConfigChannel+0x4b4>)
 8003452:	6881      	ldr	r1, [r0, #8]
 8003454:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003458:	430a      	orrs	r2, r1
 800345a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345c:	2000      	movs	r0, #0
}
 800345e:	e5c4      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
 8003460:	2000      	movs	r0, #0
 8003462:	e5c2      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
 8003464:	2000      	movs	r0, #0
 8003466:	e5c0      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003468:	2002      	movs	r0, #2
 800346a:	e5c1      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x34>
 800346c:	50040000 	.word	0x50040000
 8003470:	50040300 	.word	0x50040300
 8003474:	20000000 	.word	0x20000000
 8003478:	053e2d63 	.word	0x053e2d63

0800347c <ADC_Enable>:
{
 800347c:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800347e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	f012 0f01 	tst.w	r2, #1
 8003486:	d13d      	bne.n	8003504 <ADC_Enable+0x88>
 8003488:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800348a:	6899      	ldr	r1, [r3, #8]
 800348c:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <ADC_Enable+0x8c>)
 800348e:	4211      	tst	r1, r2
 8003490:	d009      	beq.n	80034a6 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003492:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003494:	f043 0310 	orr.w	r3, r3, #16
 8003498:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
 80034a4:	e02f      	b.n	8003506 <ADC_Enable+0x8a>
  MODIFY_REG(ADCx->CR,
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034ac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80034b6:	f7ff fc17 	bl	8002ce8 <HAL_GetTick>
 80034ba:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034bc:	e004      	b.n	80034c8 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034be:	f7ff fc13 	bl	8002ce8 <HAL_GetTick>
 80034c2:	1b43      	subs	r3, r0, r5
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d811      	bhi.n	80034ec <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	f012 0f01 	tst.w	r2, #1
 80034d0:	d116      	bne.n	8003500 <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	f012 0f01 	tst.w	r2, #1
 80034d8:	d1f1      	bne.n	80034be <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034e0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	609a      	str	r2, [r3, #8]
}
 80034ea:	e7e8      	b.n	80034be <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034ee:	f043 0310 	orr.w	r3, r3, #16
 80034f2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
 80034fe:	e002      	b.n	8003506 <ADC_Enable+0x8a>
  return HAL_OK;
 8003500:	2000      	movs	r0, #0
 8003502:	e000      	b.n	8003506 <ADC_Enable+0x8a>
 8003504:	2000      	movs	r0, #0
}
 8003506:	bd38      	pop	{r3, r4, r5, pc}
 8003508:	8000003f 	.word	0x8000003f

0800350c <HAL_ADC_Start_DMA>:
{
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_ADC_Start_DMA+0xf0>)
 8003510:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003512:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f013 0f04 	tst.w	r3, #4
 800351a:	d16a      	bne.n	80035f2 <HAL_ADC_Start_DMA+0xe6>
 800351c:	4604      	mov	r4, r0
 800351e:	460e      	mov	r6, r1
 8003520:	4617      	mov	r7, r2
 8003522:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8003526:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800352a:	2b01      	cmp	r3, #1
 800352c:	d063      	beq.n	80035f6 <HAL_ADC_Start_DMA+0xea>
 800352e:	2301      	movs	r3, #1
 8003530:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003534:	b145      	cbz	r5, 8003548 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003536:	2d05      	cmp	r5, #5
 8003538:	d006      	beq.n	8003548 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800353a:	2d09      	cmp	r5, #9
 800353c:	d004      	beq.n	8003548 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 800353e:	2300      	movs	r3, #0
 8003540:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8003544:	2001      	movs	r0, #1
 8003546:	e055      	b.n	80035f4 <HAL_ADC_Start_DMA+0xe8>
      tmp_hal_status = ADC_Enable(hadc);
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff ff97 	bl	800347c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800354e:	2800      	cmp	r0, #0
 8003550:	d14b      	bne.n	80035ea <HAL_ADC_Start_DMA+0xde>
        ADC_STATE_CLR_SET(hadc->State,
 8003552:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003554:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	4a26      	ldr	r2, [pc, #152]	; (8003600 <HAL_ADC_Start_DMA+0xf4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d039      	beq.n	80035de <HAL_ADC_Start_DMA+0xd2>
 800356a:	461a      	mov	r2, r3
 800356c:	4293      	cmp	r3, r2
 800356e:	d000      	beq.n	8003572 <HAL_ADC_Start_DMA+0x66>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003570:	b91d      	cbnz	r5, 800357a <HAL_ADC_Start_DMA+0x6e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003572:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003574:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003578:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800357a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800357c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003580:	d030      	beq.n	80035e4 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003584:	f023 0306 	bic.w	r3, r3, #6
 8003588:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800358a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_ADC_Start_DMA+0xf8>)
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003590:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003592:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_ADC_Start_DMA+0xfc>)
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003596:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_ADC_Start_DMA+0x100>)
 800359a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	221c      	movs	r2, #28
 80035a0:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80035a2:	2300      	movs	r3, #0
 80035a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	6853      	ldr	r3, [r2, #4]
 80035ac:	f043 0310 	orr.w	r3, r3, #16
 80035b0:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	68d3      	ldr	r3, [r2, #12]
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035bc:	6821      	ldr	r1, [r4, #0]
 80035be:	463b      	mov	r3, r7
 80035c0:	4632      	mov	r2, r6
 80035c2:	3140      	adds	r1, #64	; 0x40
 80035c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80035c6:	f000 f993 	bl	80038f0 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035ca:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80035cc:	6893      	ldr	r3, [r2, #8]
 80035ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	6093      	str	r3, [r2, #8]
}
 80035dc:	e00a      	b.n	80035f4 <HAL_ADC_Start_DMA+0xe8>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035de:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80035e2:	e7c3      	b.n	800356c <HAL_ADC_Start_DMA+0x60>
          ADC_CLEAR_ERRORCODE(hadc);
 80035e4:	2300      	movs	r3, #0
 80035e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80035e8:	e7cf      	b.n	800358a <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 80035ea:	2300      	movs	r3, #0
 80035ec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80035f0:	e000      	b.n	80035f4 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_BUSY;
 80035f2:	2002      	movs	r0, #2
}
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80035f6:	2002      	movs	r0, #2
 80035f8:	e7fc      	b.n	80035f4 <HAL_ADC_Start_DMA+0xe8>
 80035fa:	bf00      	nop
 80035fc:	50040300 	.word	0x50040300
 8003600:	50040100 	.word	0x50040100
 8003604:	08002f19 	.word	0x08002f19
 8003608:	08002f0d 	.word	0x08002f0d
 800360c:	08002fa1 	.word	0x08002fa1

08003610 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003610:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003614:	2a01      	cmp	r2, #1
 8003616:	d07a      	beq.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
{
 8003618:	b430      	push	{r4, r5}
 800361a:	b09a      	sub	sp, #104	; 0x68
 800361c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800361e:	2201      	movs	r2, #1
 8003620:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003624:	6800      	ldr	r0, [r0, #0]
 8003626:	4a3b      	ldr	r2, [pc, #236]	; (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8003628:	4290      	cmp	r0, r2
 800362a:	d038      	beq.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 800362c:	2200      	movs	r2, #0
 800362e:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003630:	9a01      	ldr	r2, [sp, #4]
 8003632:	2a00      	cmp	r2, #0
 8003634:	d037      	beq.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0x96>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003636:	6892      	ldr	r2, [r2, #8]
 8003638:	f012 0204 	ands.w	r2, r2, #4
 800363c:	d000      	beq.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 800363e:	2201      	movs	r2, #1
 8003640:	6880      	ldr	r0, [r0, #8]
 8003642:	f010 0f04 	tst.w	r0, #4
 8003646:	d153      	bne.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003648:	2a00      	cmp	r2, #0
 800364a:	d151      	bne.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800364c:	680a      	ldr	r2, [r1, #0]
 800364e:	2a00      	cmp	r2, #0
 8003650:	d032      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003652:	4c31      	ldr	r4, [pc, #196]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8003654:	68a2      	ldr	r2, [r4, #8]
 8003656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800365a:	6848      	ldr	r0, [r1, #4]
 800365c:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8003660:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8003664:	4302      	orrs	r2, r0
 8003666:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003668:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	f012 0201 	ands.w	r2, r2, #1
 8003670:	d000      	beq.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8003672:	2201      	movs	r2, #1
 8003674:	4829      	ldr	r0, [pc, #164]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8003676:	6880      	ldr	r0, [r0, #8]
 8003678:	f010 0001 	ands.w	r0, r0, #1
 800367c:	d000      	beq.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 800367e:	2001      	movs	r0, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003680:	4302      	orrs	r2, r0
 8003682:	d140      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003684:	4c24      	ldr	r4, [pc, #144]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8003686:	68a2      	ldr	r2, [r4, #8]
 8003688:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800368c:	f022 020f 	bic.w	r2, r2, #15
 8003690:	6808      	ldr	r0, [r1, #0]
 8003692:	6889      	ldr	r1, [r1, #8]
 8003694:	4301      	orrs	r1, r0
 8003696:	430a      	orrs	r2, r1
 8003698:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369a:	2000      	movs	r0, #0
 800369c:	e02d      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0xea>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800369e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80036a2:	9201      	str	r2, [sp, #4]
 80036a4:	e7c4      	b.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036a8:	f042 0220 	orr.w	r2, r2, #32
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80036b4:	2001      	movs	r0, #1
 80036b6:	e023      	b.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036b8:	4917      	ldr	r1, [pc, #92]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80036ba:	688a      	ldr	r2, [r1, #8]
 80036bc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036c0:	608a      	str	r2, [r1, #8]
 80036c2:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80036c4:	6892      	ldr	r2, [r2, #8]
 80036c6:	f012 0201 	ands.w	r2, r2, #1
 80036ca:	d000      	beq.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80036cc:	2201      	movs	r2, #1
 80036ce:	4913      	ldr	r1, [pc, #76]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80036d0:	6889      	ldr	r1, [r1, #8]
 80036d2:	f011 0101 	ands.w	r1, r1, #1
 80036d6:	d000      	beq.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80036d8:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036da:	430a      	orrs	r2, r1
 80036dc:	d115      	bne.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036de:	490e      	ldr	r1, [pc, #56]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80036e0:	688a      	ldr	r2, [r1, #8]
 80036e2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80036e6:	f022 020f 	bic.w	r2, r2, #15
 80036ea:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ec:	2000      	movs	r0, #0
 80036ee:	e004      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0xea>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f2:	f042 0220 	orr.w	r2, r2, #32
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003700:	b01a      	add	sp, #104	; 0x68
 8003702:	bc30      	pop	{r4, r5}
 8003704:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003706:	2000      	movs	r0, #0
 8003708:	e7f7      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0xea>
 800370a:	2000      	movs	r0, #0
 800370c:	e7f5      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0xea>
  __HAL_LOCK(hadc);
 800370e:	2002      	movs	r0, #2
}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	50040000 	.word	0x50040000
 8003718:	50040300 	.word	0x50040300
 800371c:	50040100 	.word	0x50040100

08003720 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4a07      	ldr	r2, [pc, #28]	; (8003740 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003722:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003724:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800372c:	0200      	lsls	r0, r0, #8
 800372e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003732:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800373c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003744:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_NVIC_SetPriority+0x60>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374e:	f1c3 0407 	rsb	r4, r3, #7
 8003752:	2c04      	cmp	r4, #4
 8003754:	bf28      	it	cs
 8003756:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003758:	1d1d      	adds	r5, r3, #4
 800375a:	2d06      	cmp	r5, #6
 800375c:	d918      	bls.n	8003790 <HAL_NVIC_SetPriority+0x4c>
 800375e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003764:	fa05 f404 	lsl.w	r4, r5, r4
 8003768:	ea21 0104 	bic.w	r1, r1, r4
 800376c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376e:	fa05 f303 	lsl.w	r3, r5, r3
 8003772:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003776:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003778:	2800      	cmp	r0, #0
 800377a:	db0b      	blt.n	8003794 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	0109      	lsls	r1, r1, #4
 800377e:	b2c9      	uxtb	r1, r1
 8003780:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003784:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003788:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800378c:	bc30      	pop	{r4, r5}
 800378e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003790:	2300      	movs	r3, #0
 8003792:	e7e5      	b.n	8003760 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	f000 000f 	and.w	r0, r0, #15
 8003798:	0109      	lsls	r1, r1, #4
 800379a:	b2c9      	uxtb	r1, r1
 800379c:	4b02      	ldr	r3, [pc, #8]	; (80037a8 <HAL_NVIC_SetPriority+0x64>)
 800379e:	5419      	strb	r1, [r3, r0]
 80037a0:	e7f4      	b.n	800378c <HAL_NVIC_SetPriority+0x48>
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00
 80037a8:	e000ed14 	.word	0xe000ed14

080037ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037ac:	2800      	cmp	r0, #0
 80037ae:	db07      	blt.n	80037c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b0:	f000 021f 	and.w	r2, r0, #31
 80037b4:	0940      	lsrs	r0, r0, #5
 80037b6:	2301      	movs	r3, #1
 80037b8:	4093      	lsls	r3, r2
 80037ba:	4a02      	ldr	r2, [pc, #8]	; (80037c4 <HAL_NVIC_EnableIRQ+0x18>)
 80037bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e100 	.word	0xe000e100

080037c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c8:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80037cc:	f004 051c 	and.w	r5, r4, #28
 80037d0:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80037d2:	2401      	movs	r4, #1
 80037d4:	40ac      	lsls	r4, r5
 80037d6:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037d8:	6804      	ldr	r4, [r0, #0]
 80037da:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037dc:	6883      	ldr	r3, [r0, #8]
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d005      	beq.n	80037ee <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80037e2:	6803      	ldr	r3, [r0, #0]
 80037e4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80037e6:	6803      	ldr	r3, [r0, #0]
 80037e8:	60da      	str	r2, [r3, #12]
  }
}
 80037ea:	bc70      	pop	{r4, r5, r6}
 80037ec:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80037ee:	6803      	ldr	r3, [r0, #0]
 80037f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	60d9      	str	r1, [r3, #12]
 80037f6:	e7f8      	b.n	80037ea <DMA_SetConfig+0x22>

080037f8 <HAL_DMA_Init>:
  if(hdma == NULL)
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d068      	beq.n	80038ce <HAL_DMA_Init+0xd6>
{
 80037fc:	b410      	push	{r4}
 80037fe:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003800:	6800      	ldr	r0, [r0, #0]
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_DMA_Init+0xdc>)
 8003804:	4290      	cmp	r0, r2
 8003806:	d844      	bhi.n	8003892 <HAL_DMA_Init+0x9a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003808:	4a33      	ldr	r2, [pc, #204]	; (80038d8 <HAL_DMA_Init+0xe0>)
 800380a:	4402      	add	r2, r0
 800380c:	4933      	ldr	r1, [pc, #204]	; (80038dc <HAL_DMA_Init+0xe4>)
 800380e:	fba1 1202 	umull	r1, r2, r1, r2
 8003812:	0912      	lsrs	r2, r2, #4
 8003814:	0092      	lsls	r2, r2, #2
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003818:	4a31      	ldr	r2, [pc, #196]	; (80038e0 <HAL_DMA_Init+0xe8>)
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8003822:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003824:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003828:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800382c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003830:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003832:	691c      	ldr	r4, [r3, #16]
 8003834:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003838:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383a:	699c      	ldr	r4, [r3, #24]
 800383c:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800383e:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003840:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003842:	6a1c      	ldr	r4, [r3, #32]
 8003844:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8003846:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8003848:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003850:	d015      	beq.n	800387e <HAL_DMA_Init+0x86>
    if (DMA1 == hdma->DmaBaseAddress)
 8003852:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_DMA_Init+0xe8>)
 8003856:	4291      	cmp	r1, r2
 8003858:	d026      	beq.n	80038a8 <HAL_DMA_Init+0xb0>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800385a:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <HAL_DMA_Init+0xec>)
 800385c:	6811      	ldr	r1, [r2, #0]
 800385e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003860:	f000 041c 	and.w	r4, r0, #28
 8003864:	200f      	movs	r0, #15
 8003866:	40a0      	lsls	r0, r4
 8003868:	ea21 0100 	bic.w	r1, r1, r0
 800386c:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800386e:	6811      	ldr	r1, [r2, #0]
 8003870:	6858      	ldr	r0, [r3, #4]
 8003872:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003874:	f004 041c 	and.w	r4, r4, #28
 8003878:	40a0      	lsls	r0, r4
 800387a:	4301      	orrs	r1, r0
 800387c:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387e:	2000      	movs	r0, #0
 8003880:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003888:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 800388c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003890:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_DMA_Init+0xf0>)
 8003894:	4402      	add	r2, r0
 8003896:	4911      	ldr	r1, [pc, #68]	; (80038dc <HAL_DMA_Init+0xe4>)
 8003898:	fba1 1202 	umull	r1, r2, r1, r2
 800389c:	0912      	lsrs	r2, r2, #4
 800389e:	0092      	lsls	r2, r2, #2
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038a2:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_DMA_Init+0xf4>)
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
 80038a6:	e7b9      	b.n	800381c <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038a8:	32a8      	adds	r2, #168	; 0xa8
 80038aa:	6811      	ldr	r1, [r2, #0]
 80038ac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80038ae:	f000 041c 	and.w	r4, r0, #28
 80038b2:	200f      	movs	r0, #15
 80038b4:	40a0      	lsls	r0, r4
 80038b6:	ea21 0100 	bic.w	r1, r1, r0
 80038ba:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038bc:	6811      	ldr	r1, [r2, #0]
 80038be:	6858      	ldr	r0, [r3, #4]
 80038c0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80038c2:	f004 041c 	and.w	r4, r4, #28
 80038c6:	40a0      	lsls	r0, r4
 80038c8:	4301      	orrs	r1, r0
 80038ca:	6011      	str	r1, [r2, #0]
 80038cc:	e7d7      	b.n	800387e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40020407 	.word	0x40020407
 80038d8:	bffdfff8 	.word	0xbffdfff8
 80038dc:	cccccccd 	.word	0xcccccccd
 80038e0:	40020000 	.word	0x40020000
 80038e4:	400204a8 	.word	0x400204a8
 80038e8:	bffdfbf8 	.word	0xbffdfbf8
 80038ec:	40020400 	.word	0x40020400

080038f0 <HAL_DMA_Start_IT>:
{
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80038f4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80038f8:	2801      	cmp	r0, #1
 80038fa:	d032      	beq.n	8003962 <HAL_DMA_Start_IT+0x72>
 80038fc:	2001      	movs	r0, #1
 80038fe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8003902:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003906:	b2c0      	uxtb	r0, r0
 8003908:	2801      	cmp	r0, #1
 800390a:	d004      	beq.n	8003916 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 800390c:	2300      	movs	r3, #0
 800390e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8003912:	2002      	movs	r0, #2
}
 8003914:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003916:	2002      	movs	r0, #2
 8003918:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391c:	2000      	movs	r0, #0
 800391e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	6828      	ldr	r0, [r5, #0]
 8003924:	f020 0001 	bic.w	r0, r0, #1
 8003928:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800392a:	4620      	mov	r0, r4
 800392c:	f7ff ff4c 	bl	80037c8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8003930:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003932:	b15b      	cbz	r3, 800394c <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003934:	6822      	ldr	r2, [r4, #0]
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	f043 030e 	orr.w	r3, r3, #14
 800393c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	6813      	ldr	r3, [r2, #0]
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2000      	movs	r0, #0
 800394a:	e7e3      	b.n	8003914 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	6813      	ldr	r3, [r2, #0]
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	6813      	ldr	r3, [r2, #0]
 800395a:	f043 030a 	orr.w	r3, r3, #10
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e7ed      	b.n	800393e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003962:	2002      	movs	r0, #2
 8003964:	e7d6      	b.n	8003914 <HAL_DMA_Start_IT+0x24>

08003966 <HAL_DMA_Abort_IT>:
{
 8003966:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003968:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d003      	beq.n	800397a <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003972:	2304      	movs	r3, #4
 8003974:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003976:	2001      	movs	r0, #1
}
 8003978:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397a:	6802      	ldr	r2, [r0, #0]
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	f023 030e 	bic.w	r3, r3, #14
 8003982:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003984:	6802      	ldr	r2, [r0, #0]
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800398e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003990:	f003 031c 	and.w	r3, r3, #28
 8003994:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800399e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80039a2:	2300      	movs	r3, #0
 80039a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80039a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039aa:	b113      	cbz	r3, 80039b2 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80039ac:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2000      	movs	r0, #0
 80039b0:	e7e2      	b.n	8003978 <HAL_DMA_Abort_IT+0x12>
 80039b2:	2000      	movs	r0, #0
 80039b4:	e7e0      	b.n	8003978 <HAL_DMA_Abort_IT+0x12>

080039b6 <HAL_DMA_IRQHandler>:
{
 80039b6:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039ba:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80039bc:	6804      	ldr	r4, [r0, #0]
 80039be:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80039c2:	f003 031c 	and.w	r3, r3, #28
 80039c6:	2204      	movs	r2, #4
 80039c8:	409a      	lsls	r2, r3
 80039ca:	420a      	tst	r2, r1
 80039cc:	d015      	beq.n	80039fa <HAL_DMA_IRQHandler+0x44>
 80039ce:	f015 0f04 	tst.w	r5, #4
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	f013 0f20 	tst.w	r3, #32
 80039da:	d103      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	f023 0304 	bic.w	r3, r3, #4
 80039e2:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80039e6:	f003 021c 	and.w	r2, r3, #28
 80039ea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80039ec:	2304      	movs	r3, #4
 80039ee:	4093      	lsls	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80039f4:	b103      	cbz	r3, 80039f8 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80039f6:	4798      	blx	r3
}
 80039f8:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039fa:	2202      	movs	r2, #2
 80039fc:	409a      	lsls	r2, r3
 80039fe:	420a      	tst	r2, r1
 8003a00:	d01c      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x86>
 8003a02:	f015 0f02 	tst.w	r5, #2
 8003a06:	d019      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f013 0f20 	tst.w	r3, #32
 8003a0e:	d106      	bne.n	8003a1e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	f023 030a 	bic.w	r3, r3, #10
 8003a16:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a20:	f003 021c 	and.w	r2, r3, #28
 8003a24:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a26:	2302      	movs	r3, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003a32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0df      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003a38:	4798      	blx	r3
 8003a3a:	e7dd      	b.n	80039f8 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	420b      	tst	r3, r1
 8003a44:	d0d8      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x42>
 8003a46:	f015 0f08 	tst.w	r5, #8
 8003a4a:	d0d5      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	f023 030e 	bic.w	r3, r3, #14
 8003a52:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a56:	f003 031c 	and.w	r3, r3, #28
 8003a5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a64:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003a66:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003a70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0c0      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003a76:	4798      	blx	r3
  return;
 8003a78:	e7be      	b.n	80039f8 <HAL_DMA_IRQHandler+0x42>
	...

08003a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8003a80:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e036      	b.n	8003af2 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a84:	2403      	movs	r4, #3
 8003a86:	e000      	b.n	8003a8a <HAL_GPIO_Init+0xe>
 8003a88:	2400      	movs	r4, #0
 8003a8a:	40b4      	lsls	r4, r6
 8003a8c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a8e:	3502      	adds	r5, #2
 8003a90:	4e58      	ldr	r6, [pc, #352]	; (8003bf4 <HAL_GPIO_Init+0x178>)
 8003a92:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a96:	4c58      	ldr	r4, [pc, #352]	; (8003bf8 <HAL_GPIO_Init+0x17c>)
 8003a98:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003a9a:	43d4      	mvns	r4, r2
 8003a9c:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aa0:	684f      	ldr	r7, [r1, #4]
 8003aa2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003aa6:	d001      	beq.n	8003aac <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8003aa8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8003aac:	4d52      	ldr	r5, [pc, #328]	; (8003bf8 <HAL_GPIO_Init+0x17c>)
 8003aae:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8003ab0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003ab2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab6:	684f      	ldr	r7, [r1, #4]
 8003ab8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003abc:	d001      	beq.n	8003ac2 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8003abe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003ac2:	4d4d      	ldr	r5, [pc, #308]	; (8003bf8 <HAL_GPIO_Init+0x17c>)
 8003ac4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8003ac8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003acc:	684f      	ldr	r7, [r1, #4]
 8003ace:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003ad2:	d001      	beq.n	8003ad8 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8003ad4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003ad8:	4d47      	ldr	r5, [pc, #284]	; (8003bf8 <HAL_GPIO_Init+0x17c>)
 8003ada:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003adc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003ade:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae0:	684e      	ldr	r6, [r1, #4]
 8003ae2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003ae6:	d001      	beq.n	8003aec <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8003ae8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003aec:	4a42      	ldr	r2, [pc, #264]	; (8003bf8 <HAL_GPIO_Init+0x17c>)
 8003aee:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8003af0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af2:	680a      	ldr	r2, [r1, #0]
 8003af4:	fa32 f403 	lsrs.w	r4, r2, r3
 8003af8:	d07a      	beq.n	8003bf0 <HAL_GPIO_Init+0x174>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003afa:	2401      	movs	r4, #1
 8003afc:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003afe:	4022      	ands	r2, r4
 8003b00:	d0f6      	beq.n	8003af0 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b02:	684d      	ldr	r5, [r1, #4]
 8003b04:	1e6e      	subs	r6, r5, #1
 8003b06:	2e01      	cmp	r6, #1
 8003b08:	d903      	bls.n	8003b12 <HAL_GPIO_Init+0x96>
 8003b0a:	2d11      	cmp	r5, #17
 8003b0c:	d001      	beq.n	8003b12 <HAL_GPIO_Init+0x96>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b0e:	2d12      	cmp	r5, #18
 8003b10:	d112      	bne.n	8003b38 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8003b12:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b14:	005f      	lsls	r7, r3, #1
 8003b16:	2503      	movs	r5, #3
 8003b18:	40bd      	lsls	r5, r7
 8003b1a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b1e:	68cd      	ldr	r5, [r1, #12]
 8003b20:	40bd      	lsls	r5, r7
 8003b22:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003b24:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b26:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b28:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003b2c:	684d      	ldr	r5, [r1, #4]
 8003b2e:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8003b32:	409c      	lsls	r4, r3
 8003b34:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8003b36:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003b38:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b3a:	005e      	lsls	r6, r3, #1
 8003b3c:	2503      	movs	r5, #3
 8003b3e:	40b5      	lsls	r5, r6
 8003b40:	43ec      	mvns	r4, r5
 8003b42:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b46:	688d      	ldr	r5, [r1, #8]
 8003b48:	40b5      	lsls	r5, r6
 8003b4a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8003b4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b4e:	684d      	ldr	r5, [r1, #4]
 8003b50:	2d02      	cmp	r5, #2
 8003b52:	d001      	beq.n	8003b58 <HAL_GPIO_Init+0xdc>
 8003b54:	2d12      	cmp	r5, #18
 8003b56:	d113      	bne.n	8003b80 <HAL_GPIO_Init+0x104>
        temp = GPIOx->AFR[position >> 3u];
 8003b58:	08df      	lsrs	r7, r3, #3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b60:	f003 0507 	and.w	r5, r3, #7
 8003b64:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8003b68:	250f      	movs	r5, #15
 8003b6a:	fa05 f50c 	lsl.w	r5, r5, ip
 8003b6e:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b72:	690d      	ldr	r5, [r1, #16]
 8003b74:	fa05 f50c 	lsl.w	r5, r5, ip
 8003b78:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003b7c:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8003b80:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b82:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b84:	684c      	ldr	r4, [r1, #4]
 8003b86:	f004 0403 	and.w	r4, r4, #3
 8003b8a:	40b4      	lsls	r4, r6
 8003b8c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003b8e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b90:	684c      	ldr	r4, [r1, #4]
 8003b92:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003b96:	d0ab      	beq.n	8003af0 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b98:	4c18      	ldr	r4, [pc, #96]	; (8003bfc <HAL_GPIO_Init+0x180>)
 8003b9a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003b9c:	f045 0501 	orr.w	r5, r5, #1
 8003ba0:	6625      	str	r5, [r4, #96]	; 0x60
 8003ba2:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8003ba4:	f004 0401 	and.w	r4, r4, #1
 8003ba8:	9401      	str	r4, [sp, #4]
 8003baa:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003bac:	089d      	lsrs	r5, r3, #2
 8003bae:	1cae      	adds	r6, r5, #2
 8003bb0:	4c10      	ldr	r4, [pc, #64]	; (8003bf4 <HAL_GPIO_Init+0x178>)
 8003bb2:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bb6:	f003 0403 	and.w	r4, r3, #3
 8003bba:	00a6      	lsls	r6, r4, #2
 8003bbc:	240f      	movs	r4, #15
 8003bbe:	40b4      	lsls	r4, r6
 8003bc0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bc4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003bc8:	f43f af5e 	beq.w	8003a88 <HAL_GPIO_Init+0xc>
 8003bcc:	4c0c      	ldr	r4, [pc, #48]	; (8003c00 <HAL_GPIO_Init+0x184>)
 8003bce:	42a0      	cmp	r0, r4
 8003bd0:	d00a      	beq.n	8003be8 <HAL_GPIO_Init+0x16c>
 8003bd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003bd6:	42a0      	cmp	r0, r4
 8003bd8:	d008      	beq.n	8003bec <HAL_GPIO_Init+0x170>
 8003bda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003bde:	42a0      	cmp	r0, r4
 8003be0:	f43f af50 	beq.w	8003a84 <HAL_GPIO_Init+0x8>
 8003be4:	2407      	movs	r4, #7
 8003be6:	e750      	b.n	8003a8a <HAL_GPIO_Init+0xe>
 8003be8:	2401      	movs	r4, #1
 8003bea:	e74e      	b.n	8003a8a <HAL_GPIO_Init+0xe>
 8003bec:	2402      	movs	r4, #2
 8003bee:	e74c      	b.n	8003a8a <HAL_GPIO_Init+0xe>
  }
}
 8003bf0:	b003      	add	sp, #12
 8003bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40010400 	.word	0x40010400
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	48000400 	.word	0x48000400

08003c04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c04:	6903      	ldr	r3, [r0, #16]
 8003c06:	4219      	tst	r1, r3
 8003c08:	d001      	beq.n	8003c0e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003c10:	4770      	bx	lr

08003c12 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c12:	b10a      	cbz	r2, 8003c18 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c14:	6181      	str	r1, [r0, #24]
 8003c16:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c18:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003c1a:	4770      	bx	lr

08003c1c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c1c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c1e:	ea01 0203 	and.w	r2, r1, r3
 8003c22:	ea21 0103 	bic.w	r1, r1, r3
 8003c26:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c2a:	6181      	str	r1, [r0, #24]
}
 8003c2c:	4770      	bx	lr

08003c2e <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003c30:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4203      	tst	r3, r0
 8003c38:	d100      	bne.n	8003c3c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003c3a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c3e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c40:	f7ff fff5 	bl	8003c2e <HAL_GPIO_EXTI_Callback>
}
 8003c44:	e7f9      	b.n	8003c3a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003c46:	bf00      	nop
 8003c48:	40010400 	.word	0x40010400

08003c4c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c4c:	6803      	ldr	r3, [r0, #0]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	f012 0f02 	tst.w	r2, #2
 8003c54:	d001      	beq.n	8003c5a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c5a:	6803      	ldr	r3, [r0, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	f012 0f01 	tst.w	r2, #1
 8003c62:	d103      	bne.n	8003c6c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	619a      	str	r2, [r3, #24]
  }
}
 8003c6c:	4770      	bx	lr

08003c6e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c6e:	b470      	push	{r4, r5, r6}
 8003c70:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003c72:	6805      	ldr	r5, [r0, #0]
 8003c74:	6868      	ldr	r0, [r5, #4]
 8003c76:	0d74      	lsrs	r4, r6, #21
 8003c78:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003c7c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003c80:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8003c84:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003c88:	f044 0403 	orr.w	r4, r4, #3
 8003c8c:	ea20 0004 	bic.w	r0, r0, r4
 8003c90:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003c94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c98:	4319      	orrs	r1, r3
 8003c9a:	4331      	orrs	r1, r6
 8003c9c:	4301      	orrs	r1, r0
 8003c9e:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ca0:	bc70      	pop	{r4, r5, r6}
 8003ca2:	4770      	bx	lr

08003ca4 <I2C_IsAcknowledgeFailed>:
{
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	460e      	mov	r6, r1
 8003caa:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cac:	6803      	ldr	r3, [r0, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f013 0f10 	tst.w	r3, #16
 8003cb4:	d101      	bne.n	8003cba <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8003cb6:	2000      	movs	r0, #0
}
 8003cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	699c      	ldr	r4, [r3, #24]
 8003cbe:	f014 0f20 	tst.w	r4, #32
 8003cc2:	d117      	bne.n	8003cf4 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8003cc4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003cc8:	d0f7      	beq.n	8003cba <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7ff f80d 	bl	8002ce8 <HAL_GetTick>
 8003cce:	1bc0      	subs	r0, r0, r7
 8003cd0:	42b0      	cmp	r0, r6
 8003cd2:	d801      	bhi.n	8003cd8 <I2C_IsAcknowledgeFailed+0x34>
 8003cd4:	2e00      	cmp	r6, #0
 8003cd6:	d1f0      	bne.n	8003cba <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003cda:	f043 0320 	orr.w	r3, r3, #32
 8003cde:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003cec:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	e7e1      	b.n	8003cb8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	2210      	movs	r2, #16
 8003cf6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	2420      	movs	r4, #32
 8003cfc:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7ff ffa4 	bl	8003c4c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003d04:	682a      	ldr	r2, [r5, #0]
 8003d06:	6853      	ldr	r3, [r2, #4]
 8003d08:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003d0c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003d10:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d1a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003d2c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
 8003d32:	e7c1      	b.n	8003cb8 <I2C_IsAcknowledgeFailed+0x14>

08003d34 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4604      	mov	r4, r0
 8003d38:	460d      	mov	r5, r1
 8003d3a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f013 0f02 	tst.w	r3, #2
 8003d44:	d11d      	bne.n	8003d82 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d46:	4632      	mov	r2, r6
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f7ff ffaa 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003d50:	b9c8      	cbnz	r0, 8003d86 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003d56:	d0f1      	beq.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d58:	f7fe ffc6 	bl	8002ce8 <HAL_GetTick>
 8003d5c:	1b80      	subs	r0, r0, r6
 8003d5e:	42a8      	cmp	r0, r5
 8003d60:	d801      	bhi.n	8003d66 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	d1ea      	bne.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d68:	f043 0320 	orr.w	r3, r3, #32
 8003d6c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003d7e:	2001      	movs	r0, #1
 8003d80:	e000      	b.n	8003d84 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003d82:	2000      	movs	r0, #0
}
 8003d84:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003d86:	2001      	movs	r0, #1
 8003d88:	e7fc      	b.n	8003d84 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003d8a <I2C_WaitOnFlagUntilTimeout>:
{
 8003d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8e:	4606      	mov	r6, r0
 8003d90:	4688      	mov	r8, r1
 8003d92:	4617      	mov	r7, r2
 8003d94:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d96:	6834      	ldr	r4, [r6, #0]
 8003d98:	69a4      	ldr	r4, [r4, #24]
 8003d9a:	ea38 0304 	bics.w	r3, r8, r4
 8003d9e:	bf0c      	ite	eq
 8003da0:	2401      	moveq	r4, #1
 8003da2:	2400      	movne	r4, #0
 8003da4:	42bc      	cmp	r4, r7
 8003da6:	d118      	bne.n	8003dda <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003dac:	d0f3      	beq.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fe ff9b 	bl	8002ce8 <HAL_GetTick>
 8003db2:	9b06      	ldr	r3, [sp, #24]
 8003db4:	1ac0      	subs	r0, r0, r3
 8003db6:	42a8      	cmp	r0, r5
 8003db8:	d801      	bhi.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x34>
 8003dba:	2d00      	cmp	r5, #0
 8003dbc:	d1eb      	bne.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dbe:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003dc0:	f043 0320 	orr.w	r3, r3, #32
 8003dc4:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003dd2:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	e000      	b.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8003dda:	2000      	movs	r0, #0
}
 8003ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003de0 <I2C_RequestMemoryWrite>:
{
 8003de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	4604      	mov	r4, r0
 8003de8:	4690      	mov	r8, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	9e08      	ldr	r6, [sp, #32]
 8003dee:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <I2C_RequestMemoryWrite+0x78>)
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df8:	b2ea      	uxtb	r2, r5
 8003dfa:	f7ff ff38 	bl	8003c6e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfe:	463a      	mov	r2, r7
 8003e00:	4631      	mov	r1, r6
 8003e02:	4620      	mov	r0, r4
 8003e04:	f7ff ff96 	bl	8003d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e08:	b9f8      	cbnz	r0, 8003e4a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e0a:	2d01      	cmp	r5, #1
 8003e0c:	d10e      	bne.n	8003e2c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	fa5f f288 	uxtb.w	r2, r8
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e16:	9700      	str	r7, [sp, #0]
 8003e18:	4633      	mov	r3, r6
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f7ff ffb3 	bl	8003d8a <I2C_WaitOnFlagUntilTimeout>
 8003e24:	b9a8      	cbnz	r0, 8003e52 <I2C_RequestMemoryWrite+0x72>
}
 8003e26:	b002      	add	sp, #8
 8003e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e34:	463a      	mov	r2, r7
 8003e36:	4631      	mov	r1, r6
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff ff7b 	bl	8003d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e3e:	b930      	cbnz	r0, 8003e4e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	fa5f f288 	uxtb.w	r2, r8
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
 8003e48:	e7e5      	b.n	8003e16 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	e7eb      	b.n	8003e26 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8003e4e:	2001      	movs	r0, #1
 8003e50:	e7e9      	b.n	8003e26 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8003e52:	2001      	movs	r0, #1
 8003e54:	e7e7      	b.n	8003e26 <I2C_RequestMemoryWrite+0x46>
 8003e56:	bf00      	nop
 8003e58:	80002000 	.word	0x80002000

08003e5c <I2C_RequestMemoryRead>:
{
 8003e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	4604      	mov	r4, r0
 8003e64:	4690      	mov	r8, r2
 8003e66:	461d      	mov	r5, r3
 8003e68:	9e08      	ldr	r6, [sp, #32]
 8003e6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <I2C_RequestMemoryRead+0x74>)
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	b2ea      	uxtb	r2, r5
 8003e74:	f7ff fefb 	bl	8003c6e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e78:	463a      	mov	r2, r7
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff ff59 	bl	8003d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e82:	b9f8      	cbnz	r0, 8003ec4 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e84:	2d01      	cmp	r5, #1
 8003e86:	d10e      	bne.n	8003ea6 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	fa5f f288 	uxtb.w	r2, r8
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	9700      	str	r7, [sp, #0]
 8003e92:	4633      	mov	r3, r6
 8003e94:	2200      	movs	r2, #0
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff ff76 	bl	8003d8a <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	b9a8      	cbnz	r0, 8003ecc <I2C_RequestMemoryRead+0x70>
}
 8003ea0:	b002      	add	sp, #8
 8003ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eae:	463a      	mov	r2, r7
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7ff ff3e 	bl	8003d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eb8:	b930      	cbnz	r0, 8003ec8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	fa5f f288 	uxtb.w	r2, r8
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec2:	e7e5      	b.n	8003e90 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	e7eb      	b.n	8003ea0 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003ec8:	2001      	movs	r0, #1
 8003eca:	e7e9      	b.n	8003ea0 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003ecc:	2001      	movs	r0, #1
 8003ece:	e7e7      	b.n	8003ea0 <I2C_RequestMemoryRead+0x44>
 8003ed0:	80002000 	.word	0x80002000

08003ed4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	460c      	mov	r4, r1
 8003eda:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f013 0f20 	tst.w	r3, #32
 8003ee4:	d11a      	bne.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	f7ff feda 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003ef0:	b9b0      	cbnz	r0, 8003f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef2:	f7fe fef9 	bl	8002ce8 <HAL_GetTick>
 8003ef6:	1b80      	subs	r0, r0, r6
 8003ef8:	42a0      	cmp	r0, r4
 8003efa:	d801      	bhi.n	8003f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003efc:	2c00      	cmp	r4, #0
 8003efe:	d1ed      	bne.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003f02:	f043 0320 	orr.w	r3, r3, #32
 8003f06:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	2320      	movs	r3, #32
 8003f0a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f14:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003f18:	2001      	movs	r0, #1
}
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e7fc      	b.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003f20:	2001      	movs	r0, #1
 8003f22:	e7fa      	b.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003f24 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d059      	beq.n	8003fdc <HAL_I2C_Init+0xb8>
{
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d043      	beq.n	8003fbc <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f34:	2324      	movs	r3, #36	; 0x24
 8003f36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	6813      	ldr	r3, [r2, #0]
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003f4c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	6893      	ldr	r3, [r2, #8]
 8003f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f56:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f58:	68e3      	ldr	r3, [r4, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d033      	beq.n	8003fc6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003f66:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f68:	68e3      	ldr	r3, [r4, #12]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d031      	beq.n	8003fd2 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	6853      	ldr	r3, [r2, #4]
 8003f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	68d3      	ldr	r3, [r2, #12]
 8003f80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f84:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f86:	6923      	ldr	r3, [r4, #16]
 8003f88:	6962      	ldr	r2, [r4, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	69a1      	ldr	r1, [r4, #24]
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f94:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f96:	69e3      	ldr	r3, [r4, #28]
 8003f98:	6a21      	ldr	r1, [r4, #32]
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003faa:	2000      	movs	r0, #0
 8003fac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fb4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003fba:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003fbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003fc0:	f7fe f9ec 	bl	800239c <HAL_I2C_MspInit>
 8003fc4:	e7b6      	b.n	8003f34 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fc6:	68a3      	ldr	r3, [r4, #8]
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fce:	6093      	str	r3, [r2, #8]
 8003fd0:	e7ca      	b.n	8003f68 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e7c8      	b.n	8003f6e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003fdc:	2001      	movs	r0, #1
}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2C_Mem_Write>:
{
 8003fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	460e      	mov	r6, r1
 8003fe8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003fec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003ff2:	b2c9      	uxtb	r1, r1
 8003ff4:	2920      	cmp	r1, #32
 8003ff6:	f040 80bb 	bne.w	8004170 <HAL_I2C_Mem_Write+0x190>
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4690      	mov	r8, r2
 8003ffe:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004002:	b1cb      	cbz	r3, 8004038 <HAL_I2C_Mem_Write+0x58>
 8004004:	f1ba 0f00 	cmp.w	sl, #0
 8004008:	d016      	beq.n	8004038 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 800400a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800400e:	2b01      	cmp	r3, #1
 8004010:	f000 80b2 	beq.w	8004178 <HAL_I2C_Mem_Write+0x198>
 8004014:	f04f 0b01 	mov.w	fp, #1
 8004018:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800401c:	f7fe fe64 	bl	8002ce8 <HAL_GetTick>
 8004020:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004022:	9000      	str	r0, [sp, #0]
 8004024:	2319      	movs	r3, #25
 8004026:	465a      	mov	r2, fp
 8004028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800402c:	4620      	mov	r0, r4
 800402e:	f7ff feac 	bl	8003d8a <I2C_WaitOnFlagUntilTimeout>
 8004032:	b130      	cbz	r0, 8004042 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
 8004036:	e09c      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800403c:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800403e:	2001      	movs	r0, #1
 8004040:	e097      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004042:	2321      	movs	r3, #33	; 0x21
 8004044:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004048:	2340      	movs	r3, #64	; 0x40
 800404a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404e:	2300      	movs	r3, #0
 8004050:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004054:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004056:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800405a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800405c:	9701      	str	r7, [sp, #4]
 800405e:	9500      	str	r5, [sp, #0]
 8004060:	464b      	mov	r3, r9
 8004062:	4642      	mov	r2, r8
 8004064:	4631      	mov	r1, r6
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff feba 	bl	8003de0 <I2C_RequestMemoryWrite>
 800406c:	b970      	cbnz	r0, 800408c <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800406e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2bff      	cmp	r3, #255	; 0xff
 8004074:	d90f      	bls.n	8004096 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800407a:	2300      	movs	r3, #0
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004082:	4631      	mov	r1, r6
 8004084:	4620      	mov	r0, r4
 8004086:	f7ff fdf2 	bl	8003c6e <I2C_TransferConfig>
 800408a:	e021      	b.n	80040d0 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 800408c:	2300      	movs	r3, #0
 800408e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004092:	4658      	mov	r0, fp
 8004094:	e06d      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8004096:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004098:	b292      	uxth	r2, r2
 800409a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	4631      	mov	r1, r6
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7ff fde0 	bl	8003c6e <I2C_TransferConfig>
 80040ae:	e00f      	b.n	80040d0 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80040b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040b2:	b292      	uxth	r2, r2
 80040b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040b6:	2300      	movs	r3, #0
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4631      	mov	r1, r6
 80040c2:	4620      	mov	r0, r4
 80040c4:	f7ff fdd3 	bl	8003c6e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80040c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d033      	beq.n	8004138 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d0:	463a      	mov	r2, r7
 80040d2:	4629      	mov	r1, r5
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7ff fe2d 	bl	8003d34 <I2C_WaitOnTXISFlagUntilTimeout>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d14e      	bne.n	800417c <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	7812      	ldrb	r2, [r2, #0]
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80040e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e8:	3301      	adds	r3, #1
 80040ea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80040f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004100:	b292      	uxth	r2, r2
 8004102:	2a00      	cmp	r2, #0
 8004104:	d0e0      	beq.n	80040c8 <HAL_I2C_Mem_Write+0xe8>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1de      	bne.n	80040c8 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800410a:	9700      	str	r7, [sp, #0]
 800410c:	462b      	mov	r3, r5
 800410e:	2200      	movs	r2, #0
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	4620      	mov	r0, r4
 8004114:	f7ff fe39 	bl	8003d8a <I2C_WaitOnFlagUntilTimeout>
 8004118:	bb90      	cbnz	r0, 8004180 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800411a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2bff      	cmp	r3, #255	; 0xff
 8004120:	d9c6      	bls.n	80040b0 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004122:	22ff      	movs	r2, #255	; 0xff
 8004124:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004126:	2300      	movs	r3, #0
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800412e:	4631      	mov	r1, r6
 8004130:	4620      	mov	r0, r4
 8004132:	f7ff fd9c 	bl	8003c6e <I2C_TransferConfig>
 8004136:	e7c7      	b.n	80040c8 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004138:	463a      	mov	r2, r7
 800413a:	4629      	mov	r1, r5
 800413c:	4620      	mov	r0, r4
 800413e:	f7ff fec9 	bl	8003ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004142:	b9f8      	cbnz	r0, 8004184 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	2220      	movs	r2, #32
 8004148:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800414a:	6821      	ldr	r1, [r4, #0]
 800414c:	684b      	ldr	r3, [r1, #4]
 800414e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004152:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004156:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004160:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004164:	2300      	movs	r3, #0
 8004166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800416a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800416e:	e000      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8004170:	2002      	movs	r0, #2
}
 8004172:	b003      	add	sp, #12
 8004174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004178:	2002      	movs	r0, #2
 800417a:	e7fa      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 800417c:	2001      	movs	r0, #1
 800417e:	e7f8      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8004180:	2001      	movs	r0, #1
 8004182:	e7f6      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8004184:	2001      	movs	r0, #1
 8004186:	e7f4      	b.n	8004172 <HAL_I2C_Mem_Write+0x192>

08004188 <HAL_I2C_Mem_Read>:
{
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	b083      	sub	sp, #12
 800418e:	460e      	mov	r6, r1
 8004190:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004194:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004196:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800419a:	b2c9      	uxtb	r1, r1
 800419c:	2920      	cmp	r1, #32
 800419e:	f040 80bc 	bne.w	800431a <HAL_I2C_Mem_Read+0x192>
 80041a2:	4604      	mov	r4, r0
 80041a4:	4690      	mov	r8, r2
 80041a6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80041a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041aa:	b1cb      	cbz	r3, 80041e0 <HAL_I2C_Mem_Read+0x58>
 80041ac:	f1ba 0f00 	cmp.w	sl, #0
 80041b0:	d016      	beq.n	80041e0 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80041b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	f000 80b3 	beq.w	8004322 <HAL_I2C_Mem_Read+0x19a>
 80041bc:	f04f 0b01 	mov.w	fp, #1
 80041c0:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80041c4:	f7fe fd90 	bl	8002ce8 <HAL_GetTick>
 80041c8:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041ca:	9000      	str	r0, [sp, #0]
 80041cc:	2319      	movs	r3, #25
 80041ce:	465a      	mov	r2, fp
 80041d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff fdd8 	bl	8003d8a <I2C_WaitOnFlagUntilTimeout>
 80041da:	b130      	cbz	r0, 80041ea <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
 80041de:	e09d      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e4:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80041e6:	2001      	movs	r0, #1
 80041e8:	e098      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041ea:	2322      	movs	r3, #34	; 0x22
 80041ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80041fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041fc:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80041fe:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004202:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004204:	9701      	str	r7, [sp, #4]
 8004206:	9500      	str	r5, [sp, #0]
 8004208:	464b      	mov	r3, r9
 800420a:	4642      	mov	r2, r8
 800420c:	4631      	mov	r1, r6
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff fe24 	bl	8003e5c <I2C_RequestMemoryRead>
 8004214:	b970      	cbnz	r0, 8004234 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004216:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2bff      	cmp	r3, #255	; 0xff
 800421c:	d90f      	bls.n	800423e <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800421e:	22ff      	movs	r2, #255	; 0xff
 8004220:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004222:	4b44      	ldr	r3, [pc, #272]	; (8004334 <HAL_I2C_Mem_Read+0x1ac>)
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800422a:	4631      	mov	r1, r6
 800422c:	4620      	mov	r0, r4
 800422e:	f7ff fd1e 	bl	8003c6e <I2C_TransferConfig>
 8004232:	e021      	b.n	8004278 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8004234:	2300      	movs	r3, #0
 8004236:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800423a:	4658      	mov	r0, fp
 800423c:	e06e      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800423e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004240:	b292      	uxth	r2, r2
 8004242:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004244:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_I2C_Mem_Read+0x1ac>)
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	4631      	mov	r1, r6
 8004250:	4620      	mov	r0, r4
 8004252:	f7ff fd0c 	bl	8003c6e <I2C_TransferConfig>
 8004256:	e00f      	b.n	8004278 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004258:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800425a:	b292      	uxth	r2, r2
 800425c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800425e:	2300      	movs	r3, #0
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	4631      	mov	r1, r6
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff fcff 	bl	8003c6e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004270:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d034      	beq.n	80042e2 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004278:	9700      	str	r7, [sp, #0]
 800427a:	462b      	mov	r3, r5
 800427c:	2200      	movs	r2, #0
 800427e:	2104      	movs	r1, #4
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff fd82 	bl	8003d8a <I2C_WaitOnFlagUntilTimeout>
 8004286:	2800      	cmp	r0, #0
 8004288:	d14d      	bne.n	8004326 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800428e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004290:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004294:	3301      	adds	r3, #1
 8004296:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004298:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800429a:	3a01      	subs	r2, #1
 800429c:	b292      	uxth	r2, r2
 800429e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80042a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0de      	beq.n	8004270 <HAL_I2C_Mem_Read+0xe8>
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d1dc      	bne.n	8004270 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042b6:	9700      	str	r7, [sp, #0]
 80042b8:	462b      	mov	r3, r5
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff fd64 	bl	8003d8a <I2C_WaitOnFlagUntilTimeout>
 80042c2:	bb90      	cbnz	r0, 800432a <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2bff      	cmp	r3, #255	; 0xff
 80042ca:	d9c5      	bls.n	8004258 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042cc:	22ff      	movs	r2, #255	; 0xff
 80042ce:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042d0:	2300      	movs	r3, #0
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d8:	4631      	mov	r1, r6
 80042da:	4620      	mov	r0, r4
 80042dc:	f7ff fcc7 	bl	8003c6e <I2C_TransferConfig>
 80042e0:	e7c6      	b.n	8004270 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e2:	463a      	mov	r2, r7
 80042e4:	4629      	mov	r1, r5
 80042e6:	4620      	mov	r0, r4
 80042e8:	f7ff fdf4 	bl	8003ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ec:	b9f8      	cbnz	r0, 800432e <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	2220      	movs	r2, #32
 80042f2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80042f4:	6821      	ldr	r1, [r4, #0]
 80042f6:	684b      	ldr	r3, [r1, #4]
 80042f8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80042fc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004300:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800430e:	2300      	movs	r3, #0
 8004310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004314:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004318:	e000      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 800431a:	2002      	movs	r0, #2
}
 800431c:	b003      	add	sp, #12
 800431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004322:	2002      	movs	r0, #2
 8004324:	e7fa      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8004326:	2001      	movs	r0, #1
 8004328:	e7f8      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 800432a:	2001      	movs	r0, #1
 800432c:	e7f6      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 800432e:	2001      	movs	r0, #1
 8004330:	e7f4      	b.n	800431c <HAL_I2C_Mem_Read+0x194>
 8004332:	bf00      	nop
 8004334:	80002400 	.word	0x80002400

08004338 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	d124      	bne.n	800438c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004342:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004346:	2b01      	cmp	r3, #1
 8004348:	d022      	beq.n	8004390 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800434a:	2301      	movs	r3, #1
 800434c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004350:	2324      	movs	r3, #36	; 0x24
 8004352:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004356:	6802      	ldr	r2, [r0, #0]
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004360:	6802      	ldr	r2, [r0, #0]
 8004362:	6813      	ldr	r3, [r2, #0]
 8004364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004368:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800436a:	6802      	ldr	r2, [r0, #0]
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	4319      	orrs	r1, r3
 8004370:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004372:	6802      	ldr	r2, [r0, #0]
 8004374:	6813      	ldr	r3, [r2, #0]
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800437c:	2320      	movs	r3, #32
 800437e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004388:	4618      	mov	r0, r3
 800438a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800438c:	2002      	movs	r0, #2
 800438e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004390:	2002      	movs	r0, #2
  }
}
 8004392:	4770      	bx	lr

08004394 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004394:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b20      	cmp	r3, #32
 800439c:	d122      	bne.n	80043e4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800439e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d020      	beq.n	80043e8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80043a6:	2301      	movs	r3, #1
 80043a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ac:	2324      	movs	r3, #36	; 0x24
 80043ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	6802      	ldr	r2, [r0, #0]
 80043b4:	6813      	ldr	r3, [r2, #0]
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043bc:	6802      	ldr	r2, [r0, #0]
 80043be:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043c4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ca:	6802      	ldr	r2, [r0, #0]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	2320      	movs	r3, #32
 80043d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043da:	2300      	movs	r3, #0
 80043dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80043e0:	4618      	mov	r0, r3
 80043e2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2002      	movs	r0, #2
 80043e6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80043e8:	2002      	movs	r0, #2
  }
}
 80043ea:	4770      	bx	lr

080043ec <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80043ec:	b340      	cbz	r0, 8004440 <HAL_IWDG_Init+0x54>
{
 80043ee:	b538      	push	{r3, r4, r5, lr}
 80043f0:	4604      	mov	r4, r0
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80043f2:	6803      	ldr	r3, [r0, #0]
 80043f4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80043f8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80043fa:	6803      	ldr	r3, [r0, #0]
 80043fc:	f245 5255 	movw	r2, #21845	; 0x5555
 8004400:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004402:	6803      	ldr	r3, [r0, #0]
 8004404:	6842      	ldr	r2, [r0, #4]
 8004406:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004408:	6803      	ldr	r3, [r0, #0]
 800440a:	6882      	ldr	r2, [r0, #8]
 800440c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800440e:	f7fe fc6b 	bl	8002ce8 <HAL_GetTick>
 8004412:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	b132      	cbz	r2, 8004428 <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800441a:	f7fe fc65 	bl	8002ce8 <HAL_GetTick>
 800441e:	1b40      	subs	r0, r0, r5
 8004420:	2830      	cmp	r0, #48	; 0x30
 8004422:	d9f7      	bls.n	8004414 <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 8004424:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8004426:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004428:	6919      	ldr	r1, [r3, #16]
 800442a:	68e2      	ldr	r2, [r4, #12]
 800442c:	4291      	cmp	r1, r2
 800442e:	d002      	beq.n	8004436 <HAL_IWDG_Init+0x4a>
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004430:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004432:	2000      	movs	r0, #0
 8004434:	e7f7      	b.n	8004426 <HAL_IWDG_Init+0x3a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004436:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800443a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800443c:	2000      	movs	r0, #0
 800443e:	e7f2      	b.n	8004426 <HAL_IWDG_Init+0x3a>
    return HAL_ERROR;
 8004440:	2001      	movs	r0, #1
}
 8004442:	4770      	bx	lr

08004444 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004444:	6803      	ldr	r3, [r0, #0]
 8004446:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800444a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800444c:	2000      	movs	r0, #0
 800444e:	4770      	bx	lr

08004450 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004450:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004452:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004456:	d041      	beq.n	80044dc <HAL_PCD_EP_DB_Receive+0x8c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004458:	6804      	ldr	r4, [r0, #0]
 800445a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800445e:	780d      	ldrb	r5, [r1, #0]
 8004460:	00ee      	lsls	r6, r5, #3
 8004462:	fa16 f383 	uxtah	r3, r6, r3
 8004466:	4423      	add	r3, r4
 8004468:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 800446c:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8004470:	698b      	ldr	r3, [r1, #24]
 8004472:	42a3      	cmp	r3, r4
 8004474:	d328      	bcc.n	80044c8 <HAL_PCD_EP_DB_Receive+0x78>
    {
      ep->xfer_len -= count;
 8004476:	1b1b      	subs	r3, r3, r4
 8004478:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800447a:	698b      	ldr	r3, [r1, #24]
 800447c:	b97b      	cbnz	r3, 800449e <HAL_PCD_EP_DB_Receive+0x4e>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800447e:	6806      	ldr	r6, [r0, #0]
 8004480:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449a:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800449e:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044a2:	d00e      	beq.n	80044c2 <HAL_PCD_EP_DB_Receive+0x72>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044a4:	6802      	ldr	r2, [r0, #0]
 80044a6:	780d      	ldrb	r5, [r1, #0]
 80044a8:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044be:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80044c2:	b924      	cbnz	r4, 80044ce <HAL_PCD_EP_DB_Receive+0x7e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80044c4:	4620      	mov	r0, r4
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	618b      	str	r3, [r1, #24]
 80044cc:	e7d5      	b.n	800447a <HAL_PCD_EP_DB_Receive+0x2a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044ce:	4623      	mov	r3, r4
 80044d0:	890a      	ldrh	r2, [r1, #8]
 80044d2:	6949      	ldr	r1, [r1, #20]
 80044d4:	6800      	ldr	r0, [r0, #0]
 80044d6:	f003 fd06 	bl	8007ee6 <USB_ReadPMA>
 80044da:	e7f3      	b.n	80044c4 <HAL_PCD_EP_DB_Receive+0x74>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044dc:	6804      	ldr	r4, [r0, #0]
 80044de:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80044e2:	780d      	ldrb	r5, [r1, #0]
 80044e4:	00ee      	lsls	r6, r5, #3
 80044e6:	fa16 f383 	uxtah	r3, r6, r3
 80044ea:	4423      	add	r3, r4
 80044ec:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 80044f0:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80044f4:	698b      	ldr	r3, [r1, #24]
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	d32e      	bcc.n	8004558 <HAL_PCD_EP_DB_Receive+0x108>
      ep->xfer_len -= count;
 80044fa:	1b1b      	subs	r3, r3, r4
 80044fc:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80044fe:	698b      	ldr	r3, [r1, #24]
 8004500:	b97b      	cbnz	r3, 8004522 <HAL_PCD_EP_DB_Receive+0xd2>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004502:	6806      	ldr	r6, [r0, #0]
 8004504:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451e:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004522:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004526:	d10e      	bne.n	8004546 <HAL_PCD_EP_DB_Receive+0xf6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004528:	6802      	ldr	r2, [r0, #0]
 800452a:	780d      	ldrb	r5, [r1, #0]
 800452c:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004542:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 8004546:	2c00      	cmp	r4, #0
 8004548:	d0bc      	beq.n	80044c4 <HAL_PCD_EP_DB_Receive+0x74>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800454a:	4623      	mov	r3, r4
 800454c:	894a      	ldrh	r2, [r1, #10]
 800454e:	6949      	ldr	r1, [r1, #20]
 8004550:	6800      	ldr	r0, [r0, #0]
 8004552:	f003 fcc8 	bl	8007ee6 <USB_ReadPMA>
 8004556:	e7b5      	b.n	80044c4 <HAL_PCD_EP_DB_Receive+0x74>
      ep->xfer_len = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	618b      	str	r3, [r1, #24]
 800455c:	e7cf      	b.n	80044fe <HAL_PCD_EP_DB_Receive+0xae>

0800455e <HAL_PCD_Init>:
{
 800455e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004560:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8004562:	2800      	cmp	r0, #0
 8004564:	f000 8087 	beq.w	8004676 <HAL_PCD_Init+0x118>
 8004568:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800456a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800456e:	b1db      	cbz	r3, 80045a8 <HAL_PCD_Init+0x4a>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004570:	2303      	movs	r3, #3
 8004572:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	f002 fd92 	bl	80070a0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800457c:	4625      	mov	r5, r4
 800457e:	f855 7b10 	ldr.w	r7, [r5], #16
 8004582:	466e      	mov	r6, sp
 8004584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004586:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	6033      	str	r3, [r6, #0]
 800458c:	1d23      	adds	r3, r4, #4
 800458e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004590:	4638      	mov	r0, r7
 8004592:	f002 fd75 	bl	8007080 <USB_CoreInit>
 8004596:	4605      	mov	r5, r0
 8004598:	b158      	cbz	r0, 80045b2 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800459a:	2302      	movs	r3, #2
 800459c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80045a0:	2501      	movs	r5, #1
}
 80045a2:	4628      	mov	r0, r5
 80045a4:	b007      	add	sp, #28
 80045a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80045a8:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80045ac:	f006 f956 	bl	800a85c <HAL_PCD_MspInit>
 80045b0:	e7de      	b.n	8004570 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045b2:	2100      	movs	r1, #0
 80045b4:	6820      	ldr	r0, [r4, #0]
 80045b6:	f002 fd7d 	bl	80070b4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	462b      	mov	r3, r5
 80045bc:	e019      	b.n	80045f2 <HAL_PCD_Init+0x94>
    hpcd->IN_ep[i].is_in = 1U;
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80045c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80045c8:	2001      	movs	r0, #1
 80045ca:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80045cc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80045d0:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80045d8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80045dc:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045de:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 80045e2:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80045e6:	2000      	movs	r0, #0
 80045e8:	70f0      	strb	r0, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045ea:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045ec:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80045ee:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f0:	b2d3      	uxtb	r3, r2
 80045f2:	6861      	ldr	r1, [r4, #4]
 80045f4:	428b      	cmp	r3, r1
 80045f6:	d3e2      	bcc.n	80045be <HAL_PCD_Init+0x60>
 80045f8:	e016      	b.n	8004628 <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 80045fa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80045fe:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8004608:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800460c:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004610:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004614:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004618:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800461c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8004620:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004624:	3501      	adds	r5, #1
 8004626:	b2ed      	uxtb	r5, r5
 8004628:	42a9      	cmp	r1, r5
 800462a:	d8e6      	bhi.n	80045fa <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800462c:	4625      	mov	r5, r4
 800462e:	f855 7b10 	ldr.w	r7, [r5], #16
 8004632:	466e      	mov	r6, sp
 8004634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004636:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	6033      	str	r3, [r6, #0]
 800463c:	1d23      	adds	r3, r4, #4
 800463e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004640:	4638      	mov	r0, r7
 8004642:	f002 fd39 	bl	80070b8 <USB_DevInit>
 8004646:	4605      	mov	r5, r0
 8004648:	b960      	cbnz	r0, 8004664 <HAL_PCD_Init+0x106>
  hpcd->USB_Address = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004650:	2301      	movs	r3, #1
 8004652:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8004656:	69e3      	ldr	r3, [r4, #28]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d008      	beq.n	800466e <HAL_PCD_Init+0x110>
  (void)USB_DevDisconnect(hpcd->Instance);
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	f003 f851 	bl	8007704 <USB_DevDisconnect>
  return HAL_OK;
 8004662:	e79e      	b.n	80045a2 <HAL_PCD_Init+0x44>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004664:	2302      	movs	r3, #2
 8004666:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800466a:	2501      	movs	r5, #1
 800466c:	e799      	b.n	80045a2 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800466e:	4620      	mov	r0, r4
 8004670:	f000 fdda 	bl	8005228 <HAL_PCDEx_ActivateLPM>
 8004674:	e7f2      	b.n	800465c <HAL_PCD_Init+0xfe>
    return HAL_ERROR;
 8004676:	2501      	movs	r5, #1
 8004678:	e793      	b.n	80045a2 <HAL_PCD_Init+0x44>

0800467a <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 800467a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800467e:	2b01      	cmp	r3, #1
 8004680:	d00e      	beq.n	80046a0 <HAL_PCD_Start+0x26>
{
 8004682:	b510      	push	{r4, lr}
 8004684:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004686:	2301      	movs	r3, #1
 8004688:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f002 fcfe 	bl	800708e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	f003 f82b 	bl	80076ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004698:	2000      	movs	r0, #0
 800469a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800469e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80046a0:	2002      	movs	r0, #2
}
 80046a2:	4770      	bx	lr

080046a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4605      	mov	r5, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046b0:	f000 80b8 	beq.w	8004824 <HAL_PCD_EP_DB_Transmit+0x180>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046b4:	6802      	ldr	r2, [r0, #0]
 80046b6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80046ba:	7809      	ldrb	r1, [r1, #0]
 80046bc:	00c8      	lsls	r0, r1, #3
 80046be:	fa10 f383 	uxtah	r3, r0, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80046c8:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 80046cc:	69a3      	ldr	r3, [r4, #24]
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d92b      	bls.n	800472a <HAL_PCD_EP_DB_Transmit+0x86>
    {
      ep->xfer_len -= TxByteNbre;
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046d6:	69a3      	ldr	r3, [r4, #24]
 80046d8:	b353      	cbz	r3, 8004730 <HAL_PCD_EP_DB_Transmit+0x8c>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046da:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80046de:	d00d      	beq.n	80046fc <HAL_PCD_EP_DB_Transmit+0x58>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046e0:	6828      	ldr	r0, [r5, #0]
 80046e2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004700:	2b01      	cmp	r3, #1
 8004702:	d02b      	beq.n	800475c <HAL_PCD_EP_DB_Transmit+0xb8>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004704:	682a      	ldr	r2, [r5, #0]
 8004706:	7821      	ldrb	r1, [r4, #0]
 8004708:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800471a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004722:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8004726:	2000      	movs	r0, #0
 8004728:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	61a3      	str	r3, [r4, #24]
 800472e:	e7d2      	b.n	80046d6 <HAL_PCD_EP_DB_Transmit+0x32>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004730:	4628      	mov	r0, r5
 8004732:	f006 f8e5 	bl	800a900 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004736:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800473a:	d0e3      	beq.n	8004704 <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800473c:	682a      	ldr	r2, [r5, #0]
 800473e:	7821      	ldrb	r1, [r4, #0]
 8004740:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800475a:	e7d3      	b.n	8004704 <HAL_PCD_EP_DB_Transmit+0x60>
        ep->xfer_buff += TxByteNbre;
 800475c:	6963      	ldr	r3, [r4, #20]
 800475e:	4413      	add	r3, r2
 8004760:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8004762:	69e3      	ldr	r3, [r4, #28]
 8004764:	4413      	add	r3, r2
 8004766:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8004768:	6a21      	ldr	r1, [r4, #32]
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	4299      	cmp	r1, r3
 800476e:	d31f      	bcc.n	80047b0 <HAL_PCD_EP_DB_Transmit+0x10c>
          ep->xfer_len_db -= len;
 8004770:	1ac9      	subs	r1, r1, r3
 8004772:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004774:	7862      	ldrb	r2, [r4, #1]
 8004776:	2a00      	cmp	r2, #0
 8004778:	d13f      	bne.n	80047fa <HAL_PCD_EP_DB_Transmit+0x156>
 800477a:	6829      	ldr	r1, [r5, #0]
 800477c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8004780:	fa11 f282 	uxtah	r2, r1, r2
 8004784:	7821      	ldrb	r1, [r4, #0]
 8004786:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800478a:	b9eb      	cbnz	r3, 80047c8 <HAL_PCD_EP_DB_Transmit+0x124>
 800478c:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8004790:	b289      	uxth	r1, r1
 8004792:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004796:	b289      	uxth	r1, r1
 8004798:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800479c:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80047a0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80047a4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80047a8:	b289      	uxth	r1, r1
 80047aa:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80047ae:	e026      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x15a>
        else if (ep->xfer_len_db == 0U)
 80047b0:	b921      	cbnz	r1, 80047bc <HAL_PCD_EP_DB_Transmit+0x118>
          ep->xfer_fill_db = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80047b8:	4613      	mov	r3, r2
 80047ba:	e7db      	b.n	8004774 <HAL_PCD_EP_DB_Transmit+0xd0>
          ep->xfer_fill_db = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80047c2:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80047c4:	460b      	mov	r3, r1
 80047c6:	e7d5      	b.n	8004774 <HAL_PCD_EP_DB_Transmit+0xd0>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047c8:	2b3e      	cmp	r3, #62	; 0x3e
 80047ca:	d809      	bhi.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x13c>
 80047cc:	0859      	lsrs	r1, r3, #1
 80047ce:	f013 0f01 	tst.w	r3, #1
 80047d2:	d000      	beq.n	80047d6 <HAL_PCD_EP_DB_Transmit+0x132>
 80047d4:	3101      	adds	r1, #1
 80047d6:	0289      	lsls	r1, r1, #10
 80047d8:	b289      	uxth	r1, r1
 80047da:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80047de:	e00e      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x15a>
 80047e0:	0959      	lsrs	r1, r3, #5
 80047e2:	f013 0f1f 	tst.w	r3, #31
 80047e6:	d100      	bne.n	80047ea <HAL_PCD_EP_DB_Transmit+0x146>
 80047e8:	3901      	subs	r1, #1
 80047ea:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80047ee:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80047f2:	b289      	uxth	r1, r1
 80047f4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80047f8:	e001      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x15a>
 80047fa:	2a01      	cmp	r2, #1
 80047fc:	d006      	beq.n	800480c <HAL_PCD_EP_DB_Transmit+0x168>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8922      	ldrh	r2, [r4, #8]
 8004802:	6961      	ldr	r1, [r4, #20]
 8004804:	6828      	ldr	r0, [r5, #0]
 8004806:	f002 ff8b 	bl	8007720 <USB_WritePMA>
 800480a:	e77b      	b.n	8004704 <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800480c:	6829      	ldr	r1, [r5, #0]
 800480e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8004812:	fa11 f282 	uxtah	r2, r1, r2
 8004816:	7821      	ldrb	r1, [r4, #0]
 8004818:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800481c:	b299      	uxth	r1, r3
 800481e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8004822:	e7ec      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x15a>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004824:	6802      	ldr	r2, [r0, #0]
 8004826:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800482a:	7809      	ldrb	r1, [r1, #0]
 800482c:	00c8      	lsls	r0, r1, #3
 800482e:	fa10 f383 	uxtah	r3, r0, r3
 8004832:	4413      	add	r3, r2
 8004834:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8004838:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 800483c:	69a3      	ldr	r3, [r4, #24]
 800483e:	4293      	cmp	r3, r2
 8004840:	d344      	bcc.n	80048cc <HAL_PCD_EP_DB_Transmit+0x228>
      ep->xfer_len -= TxByteNbre;
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8004846:	69a3      	ldr	r3, [r4, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d042      	beq.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x22e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800484c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004850:	d10d      	bne.n	800486e <HAL_PCD_EP_DB_Transmit+0x1ca>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004852:	6828      	ldr	r0, [r5, #0]
 8004854:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800486e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004872:	2b01      	cmp	r3, #1
 8004874:	f47f af46 	bne.w	8004704 <HAL_PCD_EP_DB_Transmit+0x60>
        ep->xfer_buff += TxByteNbre;
 8004878:	6963      	ldr	r3, [r4, #20]
 800487a:	4413      	add	r3, r2
 800487c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 800487e:	69e3      	ldr	r3, [r4, #28]
 8004880:	4413      	add	r3, r2
 8004882:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8004884:	6a21      	ldr	r1, [r4, #32]
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	4299      	cmp	r1, r3
 800488a:	d339      	bcc.n	8004900 <HAL_PCD_EP_DB_Transmit+0x25c>
          ep->xfer_len_db -= len;
 800488c:	1ac9      	subs	r1, r1, r3
 800488e:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004890:	6829      	ldr	r1, [r5, #0]
 8004892:	7862      	ldrb	r2, [r4, #1]
 8004894:	2a00      	cmp	r2, #0
 8004896:	d158      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x2a6>
 8004898:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800489c:	fa11 f282 	uxtah	r2, r1, r2
 80048a0:	7821      	ldrb	r1, [r4, #0]
 80048a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80048a6:	bbbb      	cbnz	r3, 8004918 <HAL_PCD_EP_DB_Transmit+0x274>
 80048a8:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 80048ac:	b289      	uxth	r1, r1
 80048ae:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80048b2:	b289      	uxth	r1, r1
 80048b4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80048b8:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 80048bc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80048c0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80048c4:	b289      	uxth	r1, r1
 80048c6:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80048ca:	e040      	b.n	800494e <HAL_PCD_EP_DB_Transmit+0x2aa>
      ep->xfer_len = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61a3      	str	r3, [r4, #24]
 80048d0:	e7b9      	b.n	8004846 <HAL_PCD_EP_DB_Transmit+0x1a2>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048d2:	4628      	mov	r0, r5
 80048d4:	f006 f814 	bl	800a900 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048d8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80048dc:	f47f af12 	bne.w	8004704 <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048e0:	682a      	ldr	r2, [r5, #0]
 80048e2:	7821      	ldrb	r1, [r4, #0]
 80048e4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80048fe:	e701      	b.n	8004704 <HAL_PCD_EP_DB_Transmit+0x60>
        else if (ep->xfer_len_db == 0U)
 8004900:	b921      	cbnz	r1, 800490c <HAL_PCD_EP_DB_Transmit+0x268>
          ep->xfer_fill_db = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8004908:	4613      	mov	r3, r2
 800490a:	e7c1      	b.n	8004890 <HAL_PCD_EP_DB_Transmit+0x1ec>
          ep->xfer_len_db = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8004910:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8004914:	460b      	mov	r3, r1
 8004916:	e7bb      	b.n	8004890 <HAL_PCD_EP_DB_Transmit+0x1ec>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004918:	2b3e      	cmp	r3, #62	; 0x3e
 800491a:	d809      	bhi.n	8004930 <HAL_PCD_EP_DB_Transmit+0x28c>
 800491c:	0859      	lsrs	r1, r3, #1
 800491e:	f013 0f01 	tst.w	r3, #1
 8004922:	d000      	beq.n	8004926 <HAL_PCD_EP_DB_Transmit+0x282>
 8004924:	3101      	adds	r1, #1
 8004926:	0289      	lsls	r1, r1, #10
 8004928:	b289      	uxth	r1, r1
 800492a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800492e:	e00e      	b.n	800494e <HAL_PCD_EP_DB_Transmit+0x2aa>
 8004930:	0959      	lsrs	r1, r3, #5
 8004932:	f013 0f1f 	tst.w	r3, #31
 8004936:	d100      	bne.n	800493a <HAL_PCD_EP_DB_Transmit+0x296>
 8004938:	3901      	subs	r1, #1
 800493a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800493e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004942:	b289      	uxth	r1, r1
 8004944:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8004948:	e001      	b.n	800494e <HAL_PCD_EP_DB_Transmit+0x2aa>
 800494a:	2a01      	cmp	r2, #1
 800494c:	d006      	beq.n	800495c <HAL_PCD_EP_DB_Transmit+0x2b8>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800494e:	b29b      	uxth	r3, r3
 8004950:	8962      	ldrh	r2, [r4, #10]
 8004952:	6961      	ldr	r1, [r4, #20]
 8004954:	6828      	ldr	r0, [r5, #0]
 8004956:	f002 fee3 	bl	8007720 <USB_WritePMA>
 800495a:	e6d3      	b.n	8004704 <HAL_PCD_EP_DB_Transmit+0x60>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800495c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8004960:	fa11 f182 	uxtah	r1, r1, r2
 8004964:	7822      	ldrb	r2, [r4, #0]
 8004966:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800496a:	b29a      	uxth	r2, r3
 800496c:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8004970:	e7ed      	b.n	800494e <HAL_PCD_EP_DB_Transmit+0x2aa>

08004972 <PCD_EP_ISR_Handler>:
{
 8004972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004976:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004978:	6828      	ldr	r0, [r5, #0]
 800497a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800497e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004982:	f000 81fd 	beq.w	8004d80 <PCD_EP_ISR_Handler+0x40e>
    wIstr = hpcd->Instance->ISTR;
 8004986:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 800498a:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800498c:	f014 040f 	ands.w	r4, r4, #15
 8004990:	f040 80ce 	bne.w	8004b30 <PCD_EP_ISR_Handler+0x1be>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004994:	f013 0f10 	tst.w	r3, #16
 8004998:	d05b      	beq.n	8004a52 <PCD_EP_ISR_Handler+0xe0>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800499a:	8803      	ldrh	r3, [r0, #0]
 800499c:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800499e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80049a2:	f040 808b 	bne.w	8004abc <PCD_EP_ISR_Handler+0x14a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049a6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80049aa:	d0e5      	beq.n	8004978 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049ac:	8803      	ldrh	r3, [r0, #0]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	051b      	lsls	r3, r3, #20
 80049b4:	0d1b      	lsrs	r3, r3, #20
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049bc:	6828      	ldr	r0, [r5, #0]
 80049be:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80049c2:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80049c6:	00d2      	lsls	r2, r2, #3
 80049c8:	fa12 f383 	uxtah	r3, r2, r3
 80049cc:	4403      	add	r3, r0
 80049ce:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80049d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d6:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80049da:	b18b      	cbz	r3, 8004a00 <PCD_EP_ISR_Handler+0x8e>
 80049dc:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 80049e0:	b171      	cbz	r1, 8004a00 <PCD_EP_ISR_Handler+0x8e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049e2:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80049e6:	f003 fa7e 	bl	8007ee6 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80049ea:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80049ee:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80049f2:	4413      	add	r3, r2
 80049f4:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049f8:	2100      	movs	r1, #0
 80049fa:	4628      	mov	r0, r5
 80049fc:	f005 ff74 	bl	800a8e8 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004a06:	fa13 f382 	uxtah	r3, r3, r2
 8004a0a:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	d175      	bne.n	8004afe <PCD_EP_ISR_Handler+0x18c>
 8004a12:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8004a16:	b292      	uxth	r2, r2
 8004a18:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8004a22:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8004a26:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004a2a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004a2e:	b292      	uxth	r2, r2
 8004a30:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a34:	682a      	ldr	r2, [r5, #0]
 8004a36:	8813      	ldrh	r3, [r2, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	8013      	strh	r3, [r2, #0]
 8004a50:	e792      	b.n	8004978 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a52:	8803      	ldrh	r3, [r0, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a6a:	6829      	ldr	r1, [r5, #0]
 8004a6c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8004a70:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8004a74:	00d2      	lsls	r2, r2, #3
 8004a76:	fa12 f383 	uxtah	r3, r2, r3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8004a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a84:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8004a86:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004a88:	4413      	add	r3, r2
 8004a8a:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f005 ff36 	bl	800a900 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a94:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f43f af6d 	beq.w	8004978 <PCD_EP_ISR_Handler+0x6>
 8004a9e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f af69 	bne.w	8004978 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004aa6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8004aaa:	682a      	ldr	r2, [r5, #0]
 8004aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab0:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8004aba:	e75d      	b.n	8004978 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004abc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004ac0:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8004ac4:	00d2      	lsls	r2, r2, #3
 8004ac6:	fa12 f383 	uxtah	r3, r2, r3
 8004aca:	4403      	add	r3, r0
 8004acc:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8004ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad4:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ad8:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8004adc:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8004ae0:	f003 fa01 	bl	8007ee6 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ae4:	682a      	ldr	r2, [r5, #0]
 8004ae6:	8813      	ldrh	r3, [r2, #0]
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	051b      	lsls	r3, r3, #20
 8004aee:	0d1b      	lsrs	r3, r3, #20
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004af6:	4628      	mov	r0, r5
 8004af8:	f005 feee 	bl	800a8d8 <HAL_PCD_SetupStageCallback>
 8004afc:	e73c      	b.n	8004978 <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004afe:	2a3e      	cmp	r2, #62	; 0x3e
 8004b00:	d809      	bhi.n	8004b16 <PCD_EP_ISR_Handler+0x1a4>
 8004b02:	0851      	lsrs	r1, r2, #1
 8004b04:	f012 0f01 	tst.w	r2, #1
 8004b08:	d000      	beq.n	8004b0c <PCD_EP_ISR_Handler+0x19a>
 8004b0a:	3101      	adds	r1, #1
 8004b0c:	0289      	lsls	r1, r1, #10
 8004b0e:	b289      	uxth	r1, r1
 8004b10:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8004b14:	e78e      	b.n	8004a34 <PCD_EP_ISR_Handler+0xc2>
 8004b16:	0951      	lsrs	r1, r2, #5
 8004b18:	f012 0f1f 	tst.w	r2, #31
 8004b1c:	d100      	bne.n	8004b20 <PCD_EP_ISR_Handler+0x1ae>
 8004b1e:	3901      	subs	r1, #1
 8004b20:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8004b24:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8004b2e:	e781      	b.n	8004a34 <PCD_EP_ISR_Handler+0xc2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004b30:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004b34:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b36:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004b3a:	d14a      	bne.n	8004bd2 <PCD_EP_ISR_Handler+0x260>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b3c:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004b40:	f43f af1a 	beq.w	8004978 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8004b44:	1c62      	adds	r2, r4, #1
 8004b46:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004b4a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b4e:	6828      	ldr	r0, [r5, #0]
 8004b50:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8004b6c:	78cb      	ldrb	r3, [r1, #3]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	f000 80e9 	beq.w	8004d46 <PCD_EP_ISR_Handler+0x3d4>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b74:	6828      	ldr	r0, [r5, #0]
 8004b76:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004b7a:	1c62      	adds	r2, r4, #1
 8004b7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b80:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8004b84:	00d2      	lsls	r2, r2, #3
 8004b86:	fa12 f383 	uxtah	r3, r2, r3
 8004b8a:	4403      	add	r3, r0
 8004b8c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8004b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8004b94:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004b98:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004b9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	f240 80da 	bls.w	8004d58 <PCD_EP_ISR_Handler+0x3e6>
            ep->xfer_len -= TxByteNbre;
 8004ba4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8004ba8:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8004bac:	1ad2      	subs	r2, r2, r3
 8004bae:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8004bb0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004bb4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	f040 80d3 	bne.w	8004d66 <PCD_EP_ISR_Handler+0x3f4>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bc0:	3401      	adds	r4, #1
 8004bc2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004bc6:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f005 fe98 	bl	800a900 <HAL_PCD_DataInStageCallback>
 8004bd0:	e6d2      	b.n	8004978 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004bd2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	051b      	lsls	r3, r3, #20
 8004bdc:	0d1b      	lsrs	r3, r3, #20
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8004be6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004bea:	00c9      	lsls	r1, r1, #3
 8004bec:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8004bf0:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8004bf4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004bf8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004bfc:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d140      	bne.n	8004c86 <PCD_EP_ISR_Handler+0x314>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c04:	6828      	ldr	r0, [r5, #0]
 8004c06:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004c0a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004c0e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004c12:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8004c16:	00d2      	lsls	r2, r2, #3
 8004c18:	fa12 f383 	uxtah	r3, r2, r3
 8004c1c:	4403      	add	r3, r0
 8004c1e:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8004c22:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8004c26:	bb17      	cbnz	r7, 8004c6e <PCD_EP_ISR_Handler+0x2fc>
        ep->xfer_count += count;
 8004c28:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004c2c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c30:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8004c34:	443a      	add	r2, r7
 8004c36:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8004c3a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004c3e:	443a      	add	r2, r7
 8004c40:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c44:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8004c48:	b13b      	cbz	r3, 8004c5a <PCD_EP_ISR_Handler+0x2e8>
 8004c4a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004c4e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c52:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004c56:	429f      	cmp	r7, r3
 8004c58:	d270      	bcs.n	8004d3c <PCD_EP_ISR_Handler+0x3ca>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004c5e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c62:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8004c66:	4628      	mov	r0, r5
 8004c68:	f005 fe3e 	bl	800a8e8 <HAL_PCD_DataOutStageCallback>
 8004c6c:	e766      	b.n	8004b3c <PCD_EP_ISR_Handler+0x1ca>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c6e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004c72:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004c76:	463b      	mov	r3, r7
 8004c78:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8004c7c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004c80:	f003 f931 	bl	8007ee6 <USB_ReadPMA>
 8004c84:	e7d0      	b.n	8004c28 <PCD_EP_ISR_Handler+0x2b6>
          if (ep->type == EP_TYPE_BULK)
 8004c86:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004c8a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c8e:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d033      	beq.n	8004cfe <PCD_EP_ISR_Handler+0x38c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c96:	6829      	ldr	r1, [r5, #0]
 8004c98:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004c9c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004ca0:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8004ca4:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cba:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004cbe:	6828      	ldr	r0, [r5, #0]
 8004cc0:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8004cc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cc8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004ccc:	d01e      	beq.n	8004d0c <PCD_EP_ISR_Handler+0x39a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	fa13 f382 	uxtah	r3, r3, r2
 8004cd8:	4403      	add	r3, r0
 8004cda:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8004cde:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8004ce2:	2f00      	cmp	r7, #0
 8004ce4:	d0a0      	beq.n	8004c28 <PCD_EP_ISR_Handler+0x2b6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ce6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004cea:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004cee:	463b      	mov	r3, r7
 8004cf0:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8004cf4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004cf8:	f003 f8f5 	bl	8007ee6 <USB_ReadPMA>
 8004cfc:	e794      	b.n	8004c28 <PCD_EP_ISR_Handler+0x2b6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004cfe:	4632      	mov	r2, r6
 8004d00:	4641      	mov	r1, r8
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7ff fba4 	bl	8004450 <HAL_PCD_EP_DB_Receive>
 8004d08:	4607      	mov	r7, r0
 8004d0a:	e78d      	b.n	8004c28 <PCD_EP_ISR_Handler+0x2b6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d0c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	fa13 f382 	uxtah	r3, r3, r2
 8004d16:	4403      	add	r3, r0
 8004d18:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8004d1c:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8004d20:	2f00      	cmp	r7, #0
 8004d22:	d081      	beq.n	8004c28 <PCD_EP_ISR_Handler+0x2b6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d24:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004d28:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8004d32:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004d36:	f003 f8d6 	bl	8007ee6 <USB_ReadPMA>
 8004d3a:	e775      	b.n	8004c28 <PCD_EP_ISR_Handler+0x2b6>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	6828      	ldr	r0, [r5, #0]
 8004d40:	f002 fd01 	bl	8007746 <USB_EPStartXfer>
 8004d44:	e6fa      	b.n	8004b3c <PCD_EP_ISR_Handler+0x1ca>
        if ((ep->type != EP_TYPE_BULK) ||
 8004d46:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004d4a:	f43f af13 	beq.w	8004b74 <PCD_EP_ISR_Handler+0x202>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d4e:	4632      	mov	r2, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	f7ff fca7 	bl	80046a4 <HAL_PCD_EP_DB_Transmit>
 8004d56:	e60f      	b.n	8004978 <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 8004d58:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004d5c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004d60:	2600      	movs	r6, #0
 8004d62:	6416      	str	r6, [r2, #64]	; 0x40
 8004d64:	e724      	b.n	8004bb0 <PCD_EP_ISR_Handler+0x23e>
            ep->xfer_buff += TxByteNbre;
 8004d66:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004d6a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004d6e:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8004d70:	441e      	add	r6, r3
 8004d72:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004d74:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004d76:	4423      	add	r3, r4
 8004d78:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d7a:	f002 fce4 	bl	8007746 <USB_EPStartXfer>
 8004d7e:	e5fb      	b.n	8004978 <PCD_EP_ISR_Handler+0x6>
}
 8004d80:	2000      	movs	r0, #0
 8004d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d86 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8004d86:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d00d      	beq.n	8004daa <HAL_PCD_SetAddress+0x24>
{
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004d92:	2301      	movs	r3, #1
 8004d94:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d98:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f002 fca0 	bl	80076e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004da8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004daa:	2002      	movs	r0, #2
}
 8004dac:	4770      	bx	lr

08004dae <HAL_PCD_IRQHandler>:
{
 8004dae:	b510      	push	{r4, lr}
 8004db0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004db2:	6800      	ldr	r0, [r0, #0]
 8004db4:	f002 fcae 	bl	8007714 <USB_ReadInterrupts>
 8004db8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004dbc:	f040 809b 	bne.w	8004ef6 <HAL_PCD_IRQHandler+0x148>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	f002 fca7 	bl	8007714 <USB_ReadInterrupts>
 8004dc6:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004dca:	f040 8098 	bne.w	8004efe <HAL_PCD_IRQHandler+0x150>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	f002 fca0 	bl	8007714 <USB_ReadInterrupts>
 8004dd4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8004dd8:	d008      	beq.n	8004dec <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	f002 fc91 	bl	8007714 <USB_ReadInterrupts>
 8004df2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8004df6:	d008      	beq.n	8004e0a <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004df8:	6822      	ldr	r2, [r4, #0]
 8004dfa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	f002 fc82 	bl	8007714 <USB_ReadInterrupts>
 8004e10:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8004e14:	d021      	beq.n	8004e5a <HAL_PCD_IRQHandler+0xac>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f023 0304 	bic.w	r3, r3, #4
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f023 0308 	bic.w	r3, r3, #8
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8004e3a:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d06e      	beq.n	8004f20 <HAL_PCD_IRQHandler+0x172>
    HAL_PCD_ResumeCallback(hpcd);
 8004e42:	4620      	mov	r0, r4
 8004e44:	f005 fd90 	bl	800a968 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004e5a:	6820      	ldr	r0, [r4, #0]
 8004e5c:	f002 fc5a 	bl	8007714 <USB_ReadInterrupts>
 8004e60:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8004e64:	d163      	bne.n	8004f2e <HAL_PCD_IRQHandler+0x180>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	f002 fc54 	bl	8007714 <USB_ReadInterrupts>
 8004e6c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e70:	d02b      	beq.n	8004eca <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004e84:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d16d      	bne.n	8004f68 <HAL_PCD_IRQHandler+0x1ba>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f043 0308 	orr.w	r3, r3, #8
 8004ea8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8004eac:	2101      	movs	r1, #1
 8004eae:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004eb8:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8004ebc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004ec0:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f005 fe41 	bl	800ab4c <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	f002 fc22 	bl	8007714 <USB_ReadInterrupts>
 8004ed0:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004ed4:	d14c      	bne.n	8004f70 <HAL_PCD_IRQHandler+0x1c2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	f002 fc1c 	bl	8007714 <USB_ReadInterrupts>
 8004edc:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004ee0:	d008      	beq.n	8004ef4 <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8004ef4:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff fd3b 	bl	8004972 <PCD_EP_ISR_Handler>
 8004efc:	e760      	b.n	8004dc0 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004f10:	4620      	mov	r0, r4
 8004f12:	f005 fd06 	bl	800a922 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f16:	2100      	movs	r1, #0
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff ff34 	bl	8004d86 <HAL_PCD_SetAddress>
 8004f1e:	e756      	b.n	8004dce <HAL_PCD_IRQHandler+0x20>
      hpcd->LPM_State = LPM_L0;
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f26:	4620      	mov	r0, r4
 8004f28:	f005 fe10 	bl	800ab4c <HAL_PCDEx_LPM_Callback>
 8004f2c:	e789      	b.n	8004e42 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f2e:	6822      	ldr	r2, [r4, #0]
 8004f30:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f043 0308 	orr.w	r3, r3, #8
 8004f3a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004f60:	4620      	mov	r0, r4
 8004f62:	f005 fcf1 	bl	800a948 <HAL_PCD_SuspendCallback>
 8004f66:	e77e      	b.n	8004e66 <HAL_PCD_IRQHandler+0xb8>
      HAL_PCD_SuspendCallback(hpcd);
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f005 fced 	bl	800a948 <HAL_PCD_SuspendCallback>
 8004f6e:	e7ac      	b.n	8004eca <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004f82:	4620      	mov	r0, r4
 8004f84:	f005 fcc7 	bl	800a916 <HAL_PCD_SOFCallback>
 8004f88:	e7a5      	b.n	8004ed6 <HAL_PCD_IRQHandler+0x128>

08004f8a <HAL_PCD_EP_Open>:
{
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8004f90:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f94:	d126      	bne.n	8004fe4 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f96:	f001 0007 	and.w	r0, r1, #7
 8004f9a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8004f9e:	00c9      	lsls	r1, r1, #3
 8004fa0:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 8004fa4:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 8004fa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004faa:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8004fae:	2600      	movs	r6, #0
 8004fb0:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb4:	f004 0407 	and.w	r4, r4, #7
 8004fb8:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8004fba:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8004fbc:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8004fbe:	784a      	ldrb	r2, [r1, #1]
 8004fc0:	b102      	cbz	r2, 8004fc4 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8004fc2:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d017      	beq.n	8004ff8 <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 8004fc8:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d016      	beq.n	8004ffe <HAL_PCD_EP_Open+0x74>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fd6:	6828      	ldr	r0, [r5, #0]
 8004fd8:	f002 f882 	bl	80070e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fe4:	f001 0007 	and.w	r0, r1, #7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8004fee:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8004ff2:	2601      	movs	r6, #1
 8004ff4:	704e      	strb	r6, [r1, #1]
 8004ff6:	e7dd      	b.n	8004fb4 <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	710b      	strb	r3, [r1, #4]
 8004ffc:	e7e4      	b.n	8004fc8 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8004ffe:	2002      	movs	r0, #2
 8005000:	e7ef      	b.n	8004fe2 <HAL_PCD_EP_Open+0x58>

08005002 <HAL_PCD_EP_Close>:
{
 8005002:	b510      	push	{r4, lr}
 8005004:	4604      	mov	r4, r0
 8005006:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005008:	f011 0f80 	tst.w	r1, #128	; 0x80
 800500c:	d11f      	bne.n	800504e <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800500e:	f001 0207 	and.w	r2, r1, #7
 8005012:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005016:	00c9      	lsls	r1, r1, #3
 8005018:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800501c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800501e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005022:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005026:	2000      	movs	r0, #0
 8005028:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005032:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005036:	2b01      	cmp	r3, #1
 8005038:	d013      	beq.n	8005062 <HAL_PCD_EP_Close+0x60>
 800503a:	2301      	movs	r3, #1
 800503c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005040:	6820      	ldr	r0, [r4, #0]
 8005042:	f002 f9ed 	bl	8007420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005046:	2000      	movs	r0, #0
 8005048:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800504c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504e:	f001 0207 	and.w	r2, r1, #7
 8005052:	3201      	adds	r2, #1
 8005054:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005058:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800505c:	2001      	movs	r0, #1
 800505e:	7048      	strb	r0, [r1, #1]
 8005060:	e7e4      	b.n	800502c <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8005062:	2002      	movs	r0, #2
 8005064:	e7f2      	b.n	800504c <HAL_PCD_EP_Close+0x4a>

08005066 <HAL_PCD_EP_Receive>:
{
 8005066:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005068:	f001 0407 	and.w	r4, r1, #7
 800506c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005070:	00c9      	lsls	r1, r1, #3
 8005072:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005076:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8005078:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800507c:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8005080:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8005084:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 800508e:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005092:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005096:	b924      	cbnz	r4, 80050a2 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005098:	6800      	ldr	r0, [r0, #0]
 800509a:	f002 fb54 	bl	8007746 <USB_EPStartXfer>
}
 800509e:	2000      	movs	r0, #0
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	f002 fb4f 	bl	8007746 <USB_EPStartXfer>
 80050a8:	e7f9      	b.n	800509e <HAL_PCD_EP_Receive+0x38>

080050aa <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050aa:	f001 0107 	and.w	r1, r1, #7
 80050ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80050b2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80050b6:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80050ba:	4770      	bx	lr

080050bc <HAL_PCD_EP_Transmit>:
{
 80050bc:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050be:	f001 0507 	and.w	r5, r1, #7
 80050c2:	1c6c      	adds	r4, r5, #1
 80050c4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80050c8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80050cc:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 80050d0:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80050d4:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 80050d6:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80050d8:	2201      	movs	r2, #1
 80050da:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 80050de:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 80050e4:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80050ea:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050ee:	b925      	cbnz	r5, 80050fa <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80050f0:	6800      	ldr	r0, [r0, #0]
 80050f2:	f002 fb28 	bl	8007746 <USB_EPStartXfer>
}
 80050f6:	2000      	movs	r0, #0
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	f002 fb23 	bl	8007746 <USB_EPStartXfer>
 8005100:	e7f9      	b.n	80050f6 <HAL_PCD_EP_Transmit+0x3a>

08005102 <HAL_PCD_EP_SetStall>:
{
 8005102:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005104:	f001 0507 	and.w	r5, r1, #7
 8005108:	6842      	ldr	r2, [r0, #4]
 800510a:	4295      	cmp	r5, r2
 800510c:	d831      	bhi.n	8005172 <HAL_PCD_EP_SetStall+0x70>
 800510e:	4604      	mov	r4, r0
 8005110:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8005112:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005116:	d11e      	bne.n	8005156 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8005118:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800511c:	00c9      	lsls	r1, r1, #3
 800511e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005122:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005124:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005128:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8005132:	2301      	movs	r3, #1
 8005134:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005136:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005138:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800513c:	2b01      	cmp	r3, #1
 800513e:	d01a      	beq.n	8005176 <HAL_PCD_EP_SetStall+0x74>
 8005140:	2301      	movs	r3, #1
 8005142:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	f002 fa55 	bl	80075f6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800514c:	b15d      	cbz	r5, 8005166 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 800514e:	2000      	movs	r0, #0
 8005150:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005154:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005156:	1c6b      	adds	r3, r5, #1
 8005158:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800515c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005160:	2201      	movs	r2, #1
 8005162:	704a      	strb	r2, [r1, #1]
 8005164:	e7e5      	b.n	8005132 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005166:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	f002 fad6 	bl	800771c <USB_EP0_OutStart>
 8005170:	e7ed      	b.n	800514e <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8005172:	2001      	movs	r0, #1
 8005174:	e7ee      	b.n	8005154 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8005176:	2002      	movs	r0, #2
 8005178:	e7ec      	b.n	8005154 <HAL_PCD_EP_SetStall+0x52>

0800517a <HAL_PCD_EP_ClrStall>:
{
 800517a:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800517c:	f001 010f 	and.w	r1, r1, #15
 8005180:	6842      	ldr	r2, [r0, #4]
 8005182:	4291      	cmp	r1, r2
 8005184:	d830      	bhi.n	80051e8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8005186:	b510      	push	{r4, lr}
 8005188:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800518a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800518e:	d121      	bne.n	80051d4 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005190:	f003 0207 	and.w	r2, r3, #7
 8005194:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005198:	00c9      	lsls	r1, r1, #3
 800519a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800519e:	4401      	add	r1, r0
    ep->is_in = 0U;
 80051a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80051a4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80051a8:	2000      	movs	r0, #0
 80051aa:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80051ae:	2200      	movs	r2, #0
 80051b0:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80051b8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d015      	beq.n	80051ec <HAL_PCD_EP_ClrStall+0x72>
 80051c0:	2301      	movs	r3, #1
 80051c2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	f002 fa3a 	bl	8007640 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80051d2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d4:	f003 0207 	and.w	r2, r3, #7
 80051d8:	3201      	adds	r2, #1
 80051da:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80051de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80051e2:	2001      	movs	r0, #1
 80051e4:	7048      	strb	r0, [r1, #1]
 80051e6:	e7e2      	b.n	80051ae <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80051e8:	2001      	movs	r0, #1
}
 80051ea:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80051ec:	2002      	movs	r0, #2
 80051ee:	e7f0      	b.n	80051d2 <HAL_PCD_EP_ClrStall+0x58>

080051f0 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80051f4:	d00b      	beq.n	800520e <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051f6:	f001 0107 	and.w	r1, r1, #7
 80051fa:	3101      	adds	r1, #1
 80051fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005200:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005204:	b952      	cbnz	r2, 800521c <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005206:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005208:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800520a:	2000      	movs	r0, #0
 800520c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800520e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005212:	00c9      	lsls	r1, r1, #3
 8005214:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005218:	4401      	add	r1, r0
 800521a:	e7f3      	b.n	8005204 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800521c:	2201      	movs	r2, #1
 800521e:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005220:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005222:	0c1b      	lsrs	r3, r3, #16
 8005224:	814b      	strh	r3, [r1, #10]
 8005226:	e7f0      	b.n	800520a <HAL_PCDEx_PMAConfig+0x1a>

08005228 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005228:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800522a:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800522c:	2101      	movs	r1, #1
 800522e:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005232:	2000      	movs	r0, #0
 8005234:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005238:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800523c:	b29b      	uxth	r3, r3
 800523e:	430b      	orrs	r3, r1
 8005240:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005244:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8005248:	b29b      	uxth	r3, r3
 800524a:	f043 0302 	orr.w	r3, r3, #2
 800524e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8005252:	4770      	bx	lr

08005254 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005254:	4b02      	ldr	r3, [pc, #8]	; (8005260 <HAL_PWREx_GetVoltageRange+0xc>)
 8005256:	6818      	ldr	r0, [r3, #0]
#endif
}
 8005258:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40007000 	.word	0x40007000

08005264 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005264:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005268:	d00f      	beq.n	800528a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800526a:	4b1f      	ldr	r3, [pc, #124]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005276:	d034      	beq.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005280:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005284:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005286:	2000      	movs	r0, #0
 8005288:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800528a:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005296:	d020      	beq.n	80052da <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052a4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_PWREx_ControlVoltageScaling+0x88>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	2332      	movs	r3, #50	; 0x32
 80052ac:	fb03 f302 	mul.w	r3, r3, r2
 80052b0:	4a0f      	ldr	r2, [pc, #60]	; (80052f0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0c9b      	lsrs	r3, r3, #18
 80052b8:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ba:	e000      	b.n	80052be <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 80052bc:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80052c0:	6952      	ldr	r2, [r2, #20]
 80052c2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80052c6:	d001      	beq.n	80052cc <HAL_PWREx_ControlVoltageScaling+0x68>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f7      	bne.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80052d4:	d103      	bne.n	80052de <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 80052d6:	2000      	movs	r0, #0
 80052d8:	4770      	bx	lr
 80052da:	2000      	movs	r0, #0
 80052dc:	4770      	bx	lr
        return HAL_TIMEOUT;
 80052de:	2003      	movs	r0, #3
 80052e0:	4770      	bx	lr
  return HAL_OK;
 80052e2:	2000      	movs	r0, #0
}
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40007000 	.word	0x40007000
 80052ec:	20000000 	.word	0x20000000
 80052f0:	431bde83 	.word	0x431bde83

080052f4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80052f4:	4a02      	ldr	r2, [pc, #8]	; (8005300 <HAL_PWREx_EnableVddUSB+0xc>)
 80052f6:	6853      	ldr	r3, [r2, #4]
 80052f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052fc:	6053      	str	r3, [r2, #4]
}
 80052fe:	4770      	bx	lr
 8005300:	40007000 	.word	0x40007000

08005304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005304:	b530      	push	{r4, r5, lr}
 8005306:	b083      	sub	sp, #12
 8005308:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800530a:	4b20      	ldr	r3, [pc, #128]	; (800538c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005312:	d00b      	beq.n	800532c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005314:	f7ff ff9e 	bl	8005254 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005318:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800531c:	d017      	beq.n	800534e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800531e:	2c80      	cmp	r4, #128	; 0x80
 8005320:	d81f      	bhi.n	8005362 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005322:	d02d      	beq.n	8005380 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005324:	2c70      	cmp	r4, #112	; 0x70
 8005326:	d02d      	beq.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005328:	2100      	movs	r1, #0
 800532a:	e01b      	b.n	8005364 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800532c:	4d17      	ldr	r5, [pc, #92]	; (800538c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800532e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	65ab      	str	r3, [r5, #88]	; 0x58
 8005336:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005340:	f7ff ff88 	bl	8005254 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005344:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534a:	65ab      	str	r3, [r5, #88]	; 0x58
 800534c:	e7e4      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800534e:	2c80      	cmp	r4, #128	; 0x80
 8005350:	d903      	bls.n	800535a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8005352:	2ca0      	cmp	r4, #160	; 0xa0
 8005354:	d903      	bls.n	800535e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005356:	2102      	movs	r1, #2
 8005358:	e004      	b.n	8005364 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800535a:	2100      	movs	r1, #0
 800535c:	e002      	b.n	8005364 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800535e:	2101      	movs	r1, #1
 8005360:	e000      	b.n	8005364 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005362:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005364:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8005366:	6813      	ldr	r3, [r2, #0]
 8005368:	f023 0307 	bic.w	r3, r3, #7
 800536c:	430b      	orrs	r3, r1
 800536e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005370:	6813      	ldr	r3, [r2, #0]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	428b      	cmp	r3, r1
 8005378:	d106      	bne.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800537a:	2000      	movs	r0, #0
}
 800537c:	b003      	add	sp, #12
 800537e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8005380:	2102      	movs	r1, #2
 8005382:	e7ef      	b.n	8005364 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8005384:	2101      	movs	r1, #1
 8005386:	e7ed      	b.n	8005364 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8005388:	2001      	movs	r0, #1
 800538a:	e7f7      	b.n	800537c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800538c:	40021000 	.word	0x40021000
 8005390:	40022000 	.word	0x40022000

08005394 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005394:	4a28      	ldr	r2, [pc, #160]	; (8005438 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005396:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005398:	68d2      	ldr	r2, [r2, #12]
 800539a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800539e:	f013 030c 	ands.w	r3, r3, #12
 80053a2:	d00a      	beq.n	80053ba <HAL_RCC_GetSysClockFreq+0x26>
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d006      	beq.n	80053b6 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d01f      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d020      	beq.n	80053f2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053b0:	2000      	movs	r0, #0
 80053b2:	4602      	mov	r2, r0
 80053b4:	e010      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053b6:	2a01      	cmp	r2, #1
 80053b8:	d1f6      	bne.n	80053a8 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053ba:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	f012 0f08 	tst.w	r2, #8
 80053c2:	d10c      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053c4:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053c6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80053ca:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80053ce:	491b      	ldr	r1, [pc, #108]	; (800543c <HAL_RCC_GetSysClockFreq+0xa8>)
 80053d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053d4:	b143      	cbz	r3, 80053e8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053d6:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d00d      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x64>
}
 80053dc:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80053e6:	e7f2      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80053e8:	4610      	mov	r0, r2
 80053ea:	e7f5      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80053ec:	4814      	ldr	r0, [pc, #80]	; (8005440 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053ee:	2200      	movs	r2, #0
 80053f0:	e7f2      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80053f2:	4814      	ldr	r0, [pc, #80]	; (8005444 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053f4:	2200      	movs	r2, #0
 80053f6:	e7ef      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005400:	2b02      	cmp	r3, #2
 8005402:	d016      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x9e>
 8005404:	2b03      	cmp	r3, #3
 8005406:	d100      	bne.n	800540a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8005408:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_GetSysClockFreq+0xa4>)
 800540c:	68d8      	ldr	r0, [r3, #12]
 800540e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8005412:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005414:	68d9      	ldr	r1, [r3, #12]
 8005416:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800541a:	fb02 f201 	mul.w	r2, r2, r1
 800541e:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005422:	68d8      	ldr	r0, [r3, #12]
 8005424:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005428:	3001      	adds	r0, #1
 800542a:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800542c:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005430:	e7d4      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8005432:	4a03      	ldr	r2, [pc, #12]	; (8005440 <HAL_RCC_GetSysClockFreq+0xac>)
 8005434:	e7e9      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x76>
 8005436:	bf00      	nop
 8005438:	40021000 	.word	0x40021000
 800543c:	0800af10 	.word	0x0800af10
 8005440:	00f42400 	.word	0x00f42400
 8005444:	007a1200 	.word	0x007a1200

08005448 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8005448:	2800      	cmp	r0, #0
 800544a:	f000 8354 	beq.w	8005af6 <HAL_RCC_OscConfig+0x6ae>
{
 800544e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005450:	b083      	sub	sp, #12
 8005452:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005454:	4b96      	ldr	r3, [pc, #600]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 8005456:	689d      	ldr	r5, [r3, #8]
 8005458:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800545c:	68de      	ldr	r6, [r3, #12]
 800545e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005462:	6803      	ldr	r3, [r0, #0]
 8005464:	f013 0f10 	tst.w	r3, #16
 8005468:	d05a      	beq.n	8005520 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800546a:	b1e5      	cbz	r5, 80054a6 <HAL_RCC_OscConfig+0x5e>
 800546c:	2d0c      	cmp	r5, #12
 800546e:	d018      	beq.n	80054a2 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005470:	69e3      	ldr	r3, [r4, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80bb 	beq.w	80055ee <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8005478:	4a8d      	ldr	r2, [pc, #564]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005482:	f7fd fc31 	bl	8002ce8 <HAL_GetTick>
 8005486:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005488:	4b89      	ldr	r3, [pc, #548]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f013 0f02 	tst.w	r3, #2
 8005490:	f040 809a 	bne.w	80055c8 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005494:	f7fd fc28 	bl	8002ce8 <HAL_GetTick>
 8005498:	1bc0      	subs	r0, r0, r7
 800549a:	2802      	cmp	r0, #2
 800549c:	d9f4      	bls.n	8005488 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800549e:	2003      	movs	r0, #3
 80054a0:	e336      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054a2:	2e01      	cmp	r6, #1
 80054a4:	d1e4      	bne.n	8005470 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054a6:	4b82      	ldr	r3, [pc, #520]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f013 0f02 	tst.w	r3, #2
 80054ae:	d003      	beq.n	80054b8 <HAL_RCC_OscConfig+0x70>
 80054b0:	69e3      	ldr	r3, [r4, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8321 	beq.w	8005afa <HAL_RCC_OscConfig+0x6b2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054ba:	4b7d      	ldr	r3, [pc, #500]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f013 0f08 	tst.w	r3, #8
 80054c2:	d05b      	beq.n	800557c <HAL_RCC_OscConfig+0x134>
 80054c4:	4b7a      	ldr	r3, [pc, #488]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054cc:	4298      	cmp	r0, r3
 80054ce:	d85c      	bhi.n	800558a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d0:	4b77      	ldr	r3, [pc, #476]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	f042 0208 	orr.w	r2, r2, #8
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80054e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054e2:	430a      	orrs	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80054ec:	6a21      	ldr	r1, [r4, #32]
 80054ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054f2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	d060      	beq.n	80055ba <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054f8:	f7ff ff4c 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 80054fc:	4b6c      	ldr	r3, [pc, #432]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005504:	4a6b      	ldr	r2, [pc, #428]	; (80056b4 <HAL_RCC_OscConfig+0x26c>)
 8005506:	5cd3      	ldrb	r3, [r2, r3]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	40d8      	lsrs	r0, r3
 800550e:	4b6a      	ldr	r3, [pc, #424]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005510:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005512:	4b6a      	ldr	r3, [pc, #424]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	f7fd f963 	bl	80027e0 <HAL_InitTick>
        if(status != HAL_OK)
 800551a:	2800      	cmp	r0, #0
 800551c:	f040 82f8 	bne.w	8005b10 <HAL_RCC_OscConfig+0x6c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	f013 0f01 	tst.w	r3, #1
 8005526:	f000 8081 	beq.w	800562c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800552a:	2d08      	cmp	r5, #8
 800552c:	d075      	beq.n	800561a <HAL_RCC_OscConfig+0x1d2>
 800552e:	2d0c      	cmp	r5, #12
 8005530:	d071      	beq.n	8005616 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005532:	6863      	ldr	r3, [r4, #4]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	f000 8098 	beq.w	800566c <HAL_RCC_OscConfig+0x224>
 800553c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005540:	f000 809a 	beq.w	8005678 <HAL_RCC_OscConfig+0x230>
 8005544:	4b5a      	ldr	r3, [pc, #360]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005554:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005556:	6863      	ldr	r3, [r4, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 809a 	beq.w	8005692 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 800555e:	f7fd fbc3 	bl	8002ce8 <HAL_GetTick>
 8005562:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005564:	4b52      	ldr	r3, [pc, #328]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800556c:	d15e      	bne.n	800562c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556e:	f7fd fbbb 	bl	8002ce8 <HAL_GetTick>
 8005572:	1bc0      	subs	r0, r0, r7
 8005574:	2864      	cmp	r0, #100	; 0x64
 8005576:	d9f5      	bls.n	8005564 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8005578:	2003      	movs	r0, #3
 800557a:	e2c9      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800557c:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005588:	e7a0      	b.n	80054cc <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800558a:	f7ff febb 	bl	8005304 <RCC_SetFlashLatencyFromMSIRange>
 800558e:	2800      	cmp	r0, #0
 8005590:	f040 82b5 	bne.w	8005afe <HAL_RCC_OscConfig+0x6b6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005594:	4b46      	ldr	r3, [pc, #280]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	f042 0208 	orr.w	r2, r2, #8
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80055a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055a6:	430a      	orrs	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80055b0:	6a21      	ldr	r1, [r4, #32]
 80055b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	e79e      	b.n	80054f8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80055bc:	f7ff fea2 	bl	8005304 <RCC_SetFlashLatencyFromMSIRange>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d099      	beq.n	80054f8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80055c4:	2001      	movs	r0, #1
 80055c6:	e2a3      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f042 0208 	orr.w	r2, r2, #8
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80055d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80055e4:	6a21      	ldr	r1, [r4, #32]
 80055e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055ea:	605a      	str	r2, [r3, #4]
 80055ec:	e798      	b.n	8005520 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80055ee:	4a30      	ldr	r2, [pc, #192]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 80055f0:	6813      	ldr	r3, [r2, #0]
 80055f2:	f023 0301 	bic.w	r3, r3, #1
 80055f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80055f8:	f7fd fb76 	bl	8002ce8 <HAL_GetTick>
 80055fc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055fe:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f013 0f02 	tst.w	r3, #2
 8005606:	d08b      	beq.n	8005520 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005608:	f7fd fb6e 	bl	8002ce8 <HAL_GetTick>
 800560c:	1bc0      	subs	r0, r0, r7
 800560e:	2802      	cmp	r0, #2
 8005610:	d9f5      	bls.n	80055fe <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8005612:	2003      	movs	r0, #3
 8005614:	e27c      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005616:	2e03      	cmp	r6, #3
 8005618:	d18b      	bne.n	8005532 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561a:	4b25      	ldr	r3, [pc, #148]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005622:	d003      	beq.n	800562c <HAL_RCC_OscConfig+0x1e4>
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 826b 	beq.w	8005b02 <HAL_RCC_OscConfig+0x6ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	f013 0f02 	tst.w	r3, #2
 8005632:	d058      	beq.n	80056e6 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005634:	2d04      	cmp	r5, #4
 8005636:	d045      	beq.n	80056c4 <HAL_RCC_OscConfig+0x27c>
 8005638:	2d0c      	cmp	r5, #12
 800563a:	d041      	beq.n	80056c0 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800563c:	68e3      	ldr	r3, [r4, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8091 	beq.w	8005766 <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_HSI_ENABLE();
 8005644:	4a1a      	ldr	r2, [pc, #104]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800564e:	f7fd fb4b 	bl	8002ce8 <HAL_GetTick>
 8005652:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800565c:	d17a      	bne.n	8005754 <HAL_RCC_OscConfig+0x30c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565e:	f7fd fb43 	bl	8002ce8 <HAL_GetTick>
 8005662:	1b80      	subs	r0, r0, r6
 8005664:	2802      	cmp	r0, #2
 8005666:	d9f5      	bls.n	8005654 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8005668:	2003      	movs	r0, #3
 800566a:	e251      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800566c:	4a10      	ldr	r2, [pc, #64]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e76e      	b.n	8005556 <HAL_RCC_OscConfig+0x10e>
 8005678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800567c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e761      	b.n	8005556 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8005692:	f7fd fb29 	bl	8002ce8 <HAL_GetTick>
 8005696:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCC_OscConfig+0x268>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80056a0:	d0c4      	beq.n	800562c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a2:	f7fd fb21 	bl	8002ce8 <HAL_GetTick>
 80056a6:	1bc0      	subs	r0, r0, r7
 80056a8:	2864      	cmp	r0, #100	; 0x64
 80056aa:	d9f5      	bls.n	8005698 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 80056ac:	2003      	movs	r0, #3
 80056ae:	e22f      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
 80056b0:	40021000 	.word	0x40021000
 80056b4:	0800aef8 	.word	0x0800aef8
 80056b8:	20000000 	.word	0x20000000
 80056bc:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056c0:	2e02      	cmp	r6, #2
 80056c2:	d1bb      	bne.n	800563c <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	4baf      	ldr	r3, [pc, #700]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80056cc:	d003      	beq.n	80056d6 <HAL_RCC_OscConfig+0x28e>
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8218 	beq.w	8005b06 <HAL_RCC_OscConfig+0x6be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d6:	4aab      	ldr	r2, [pc, #684]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80056d8:	6853      	ldr	r3, [r2, #4]
 80056da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056de:	6921      	ldr	r1, [r4, #16]
 80056e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80056e4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	f013 0f08 	tst.w	r3, #8
 80056ec:	d07d      	beq.n	80057ea <HAL_RCC_OscConfig+0x3a2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056ee:	6963      	ldr	r3, [r4, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d063      	beq.n	80057bc <HAL_RCC_OscConfig+0x374>
      uint32_t csr_temp = RCC->CSR;
 80056f4:	4ba3      	ldr	r3, [pc, #652]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80056f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80056fa:	69a1      	ldr	r1, [r4, #24]
 80056fc:	f003 0210 	and.w	r2, r3, #16
 8005700:	4291      	cmp	r1, r2
 8005702:	d010      	beq.n	8005726 <HAL_RCC_OscConfig+0x2de>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005704:	f003 0203 	and.w	r2, r3, #3
 8005708:	2a02      	cmp	r2, #2
 800570a:	f000 81fe 	beq.w	8005b0a <HAL_RCC_OscConfig+0x6c2>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800570e:	f013 0f01 	tst.w	r3, #1
 8005712:	d13c      	bne.n	800578e <HAL_RCC_OscConfig+0x346>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005714:	4a9b      	ldr	r2, [pc, #620]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005716:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800571a:	f023 0310 	bic.w	r3, r3, #16
 800571e:	69a1      	ldr	r1, [r4, #24]
 8005720:	430b      	orrs	r3, r1
 8005722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8005726:	4a97      	ldr	r2, [pc, #604]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005728:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005734:	f7fd fad8 	bl	8002ce8 <HAL_GetTick>
 8005738:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800573a:	4b92      	ldr	r3, [pc, #584]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005740:	f013 0f02 	tst.w	r3, #2
 8005744:	d151      	bne.n	80057ea <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005746:	f7fd facf 	bl	8002ce8 <HAL_GetTick>
 800574a:	1b80      	subs	r0, r0, r6
 800574c:	2811      	cmp	r0, #17
 800574e:	d9f4      	bls.n	800573a <HAL_RCC_OscConfig+0x2f2>
          return HAL_TIMEOUT;
 8005750:	2003      	movs	r0, #3
 8005752:	e1dd      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005754:	4a8b      	ldr	r2, [pc, #556]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005756:	6853      	ldr	r3, [r2, #4]
 8005758:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800575c:	6921      	ldr	r1, [r4, #16]
 800575e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005762:	6053      	str	r3, [r2, #4]
 8005764:	e7bf      	b.n	80056e6 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8005766:	4a87      	ldr	r2, [pc, #540]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005768:	6813      	ldr	r3, [r2, #0]
 800576a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800576e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005770:	f7fd faba 	bl	8002ce8 <HAL_GetTick>
 8005774:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005776:	4b83      	ldr	r3, [pc, #524]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800577e:	d0b2      	beq.n	80056e6 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005780:	f7fd fab2 	bl	8002ce8 <HAL_GetTick>
 8005784:	1b80      	subs	r0, r0, r6
 8005786:	2802      	cmp	r0, #2
 8005788:	d9f5      	bls.n	8005776 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 800578a:	2003      	movs	r0, #3
 800578c:	e1c0      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
          __HAL_RCC_LSI_DISABLE();
 800578e:	4a7d      	ldr	r2, [pc, #500]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005790:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800579c:	f7fd faa4 	bl	8002ce8 <HAL_GetTick>
 80057a0:	4606      	mov	r6, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057a2:	4b78      	ldr	r3, [pc, #480]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80057a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a8:	f013 0f02 	tst.w	r3, #2
 80057ac:	d0b2      	beq.n	8005714 <HAL_RCC_OscConfig+0x2cc>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ae:	f7fd fa9b 	bl	8002ce8 <HAL_GetTick>
 80057b2:	1b80      	subs	r0, r0, r6
 80057b4:	2811      	cmp	r0, #17
 80057b6:	d9f4      	bls.n	80057a2 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80057b8:	2003      	movs	r0, #3
 80057ba:	e1a9      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
      __HAL_RCC_LSI_DISABLE();
 80057bc:	4a71      	ldr	r2, [pc, #452]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80057be:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80057ca:	f7fd fa8d 	bl	8002ce8 <HAL_GetTick>
 80057ce:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d0:	4b6c      	ldr	r3, [pc, #432]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d6:	f013 0f02 	tst.w	r3, #2
 80057da:	d006      	beq.n	80057ea <HAL_RCC_OscConfig+0x3a2>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057dc:	f7fd fa84 	bl	8002ce8 <HAL_GetTick>
 80057e0:	1b80      	subs	r0, r0, r6
 80057e2:	2811      	cmp	r0, #17
 80057e4:	d9f4      	bls.n	80057d0 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 80057e6:	2003      	movs	r0, #3
 80057e8:	e192      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	f013 0f04 	tst.w	r3, #4
 80057f0:	f000 808d 	beq.w	800590e <HAL_RCC_OscConfig+0x4c6>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057f4:	4b63      	ldr	r3, [pc, #396]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80057fc:	d12e      	bne.n	800585c <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	4b61      	ldr	r3, [pc, #388]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005800:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005806:	659a      	str	r2, [r3, #88]	; 0x58
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005812:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005814:	4b5c      	ldr	r3, [pc, #368]	; (8005988 <HAL_RCC_OscConfig+0x540>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f413 7f80 	tst.w	r3, #256	; 0x100
 800581c:	d020      	beq.n	8005860 <HAL_RCC_OscConfig+0x418>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800581e:	68a3      	ldr	r3, [r4, #8]
 8005820:	f013 0f01 	tst.w	r3, #1
 8005824:	d038      	beq.n	8005898 <HAL_RCC_OscConfig+0x450>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005826:	4957      	ldr	r1, [pc, #348]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005828:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800582c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800583a:	68a3      	ldr	r3, [r4, #8]
 800583c:	f013 0f04 	tst.w	r3, #4
 8005840:	d022      	beq.n	8005888 <HAL_RCC_OscConfig+0x440>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005842:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005846:	f042 0204 	orr.w	r2, r2, #4
 800584a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800584e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 800585a:	e02a      	b.n	80058b2 <HAL_RCC_OscConfig+0x46a>
    FlagStatus       pwrclkchanged = RESET;
 800585c:	2600      	movs	r6, #0
 800585e:	e7d9      	b.n	8005814 <HAL_RCC_OscConfig+0x3cc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005860:	4a49      	ldr	r2, [pc, #292]	; (8005988 <HAL_RCC_OscConfig+0x540>)
 8005862:	6813      	ldr	r3, [r2, #0]
 8005864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005868:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800586a:	f7fd fa3d 	bl	8002ce8 <HAL_GetTick>
 800586e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005870:	4b45      	ldr	r3, [pc, #276]	; (8005988 <HAL_RCC_OscConfig+0x540>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005878:	d1d1      	bne.n	800581e <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587a:	f7fd fa35 	bl	8002ce8 <HAL_GetTick>
 800587e:	1bc0      	subs	r0, r0, r7
 8005880:	2802      	cmp	r0, #2
 8005882:	d9f5      	bls.n	8005870 <HAL_RCC_OscConfig+0x428>
          return HAL_TIMEOUT;
 8005884:	2003      	movs	r0, #3
 8005886:	e143      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005888:	4a3e      	ldr	r2, [pc, #248]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 800588a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005896:	e00c      	b.n	80058b2 <HAL_RCC_OscConfig+0x46a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005898:	4b3a      	ldr	r3, [pc, #232]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 800589a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80058aa:	f022 0204 	bic.w	r2, r2, #4
 80058ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	b18b      	cbz	r3, 80058da <HAL_RCC_OscConfig+0x492>
      tickstart = HAL_GetTick();
 80058b6:	f7fd fa17 	bl	8002ce8 <HAL_GetTick>
 80058ba:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058bc:	4b31      	ldr	r3, [pc, #196]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f013 0f02 	tst.w	r3, #2
 80058c6:	d121      	bne.n	800590c <HAL_RCC_OscConfig+0x4c4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c8:	f7fd fa0e 	bl	8002ce8 <HAL_GetTick>
 80058cc:	1bc0      	subs	r0, r0, r7
 80058ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80058d2:	4298      	cmp	r0, r3
 80058d4:	d9f2      	bls.n	80058bc <HAL_RCC_OscConfig+0x474>
          return HAL_TIMEOUT;
 80058d6:	2003      	movs	r0, #3
 80058d8:	e11a      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
      tickstart = HAL_GetTick();
 80058da:	f7fd fa05 	bl	8002ce8 <HAL_GetTick>
 80058de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e0:	4b28      	ldr	r3, [pc, #160]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f013 0f02 	tst.w	r3, #2
 80058ea:	d008      	beq.n	80058fe <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fd f9fc 	bl	8002ce8 <HAL_GetTick>
 80058f0:	1bc0      	subs	r0, r0, r7
 80058f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80058f6:	4298      	cmp	r0, r3
 80058f8:	d9f2      	bls.n	80058e0 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 80058fa:	2003      	movs	r0, #3
 80058fc:	e108      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005900:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 800590c:	b9e6      	cbnz	r6, 8005948 <HAL_RCC_OscConfig+0x500>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	f013 0f20 	tst.w	r3, #32
 8005914:	d03a      	beq.n	800598c <HAL_RCC_OscConfig+0x544>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005918:	b1e3      	cbz	r3, 8005954 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI48_ENABLE();
 800591a:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 800591c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005928:	f7fd f9de 	bl	8002ce8 <HAL_GetTick>
 800592c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800592e:	4b15      	ldr	r3, [pc, #84]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005934:	f013 0f02 	tst.w	r3, #2
 8005938:	d128      	bne.n	800598c <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800593a:	f7fd f9d5 	bl	8002ce8 <HAL_GetTick>
 800593e:	1b80      	subs	r0, r0, r6
 8005940:	2802      	cmp	r0, #2
 8005942:	d9f4      	bls.n	800592e <HAL_RCC_OscConfig+0x4e6>
          return HAL_TIMEOUT;
 8005944:	2003      	movs	r0, #3
 8005946:	e0e3      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005948:	4a0e      	ldr	r2, [pc, #56]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 800594a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800594c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005950:	6593      	str	r3, [r2, #88]	; 0x58
 8005952:	e7dc      	b.n	800590e <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSI48_DISABLE();
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 8005956:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005962:	f7fd f9c1 	bl	8002ce8 <HAL_GetTick>
 8005966:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <HAL_RCC_OscConfig+0x53c>)
 800596a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800596e:	f013 0f02 	tst.w	r3, #2
 8005972:	d00b      	beq.n	800598c <HAL_RCC_OscConfig+0x544>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005974:	f7fd f9b8 	bl	8002ce8 <HAL_GetTick>
 8005978:	1b80      	subs	r0, r0, r6
 800597a:	2802      	cmp	r0, #2
 800597c:	d9f4      	bls.n	8005968 <HAL_RCC_OscConfig+0x520>
          return HAL_TIMEOUT;
 800597e:	2003      	movs	r0, #3
 8005980:	e0c6      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000
 8005988:	40007000 	.word	0x40007000
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800598c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80bd 	beq.w	8005b0e <HAL_RCC_OscConfig+0x6c6>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005994:	2b02      	cmp	r3, #2
 8005996:	d01f      	beq.n	80059d8 <HAL_RCC_OscConfig+0x590>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005998:	2d0c      	cmp	r5, #12
 800599a:	f000 80bd 	beq.w	8005b18 <HAL_RCC_OscConfig+0x6d0>
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b5f      	ldr	r3, [pc, #380]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80059a6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	f022 0203 	bic.w	r2, r2, #3
 80059ae:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 80059b6:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80059b8:	f7fd f996 	bl	8002ce8 <HAL_GetTick>
 80059bc:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059be:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80059c6:	f000 8094 	beq.w	8005af2 <HAL_RCC_OscConfig+0x6aa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fd f98d 	bl	8002ce8 <HAL_GetTick>
 80059ce:	1b00      	subs	r0, r0, r4
 80059d0:	2802      	cmp	r0, #2
 80059d2:	d9f4      	bls.n	80059be <HAL_RCC_OscConfig+0x576>
            return HAL_TIMEOUT;
 80059d4:	2003      	movs	r0, #3
 80059d6:	e09b      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
      pll_config = RCC->PLLCFGR;
 80059d8:	4b50      	ldr	r3, [pc, #320]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 80059da:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059dc:	f003 0103 	and.w	r1, r3, #3
 80059e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80059e2:	4291      	cmp	r1, r2
 80059e4:	d016      	beq.n	8005a14 <HAL_RCC_OscConfig+0x5cc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059e6:	2d0c      	cmp	r5, #12
 80059e8:	f000 8094 	beq.w	8005b14 <HAL_RCC_OscConfig+0x6cc>
            __HAL_RCC_PLL_DISABLE();
 80059ec:	4a4b      	ldr	r2, [pc, #300]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f4:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80059f6:	f7fd f977 	bl	8002ce8 <HAL_GetTick>
 80059fa:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	4b47      	ldr	r3, [pc, #284]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a04:	d02a      	beq.n	8005a5c <HAL_RCC_OscConfig+0x614>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fd f96f 	bl	8002ce8 <HAL_GetTick>
 8005a0a:	1b40      	subs	r0, r0, r5
 8005a0c:	2802      	cmp	r0, #2
 8005a0e:	d9f5      	bls.n	80059fc <HAL_RCC_OscConfig+0x5b4>
                return HAL_TIMEOUT;
 8005a10:	2003      	movs	r0, #3
 8005a12:	e07d      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a1a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005a20:	d1e1      	bne.n	80059e6 <HAL_RCC_OscConfig+0x59e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a28:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005a2c:	d1db      	bne.n	80059e6 <HAL_RCC_OscConfig+0x59e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a2e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005a32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a34:	0852      	lsrs	r2, r2, #1
 8005a36:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a38:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005a3c:	d1d3      	bne.n	80059e6 <HAL_RCC_OscConfig+0x59e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a3e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005a42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a44:	0852      	lsrs	r2, r2, #1
 8005a46:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a48:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005a4c:	d1cb      	bne.n	80059e6 <HAL_RCC_OscConfig+0x59e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4e:	4b33      	ldr	r3, [pc, #204]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a56:	d032      	beq.n	8005abe <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e059      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a5c:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 8005a5e:	68d3      	ldr	r3, [r2, #12]
 8005a60:	492f      	ldr	r1, [pc, #188]	; (8005b20 <HAL_RCC_OscConfig+0x6d8>)
 8005a62:	4019      	ands	r1, r3
 8005a64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a66:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005a68:	3801      	subs	r0, #1
 8005a6a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005a6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005a70:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005a74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005a76:	0840      	lsrs	r0, r0, #1
 8005a78:	3801      	subs	r0, #1
 8005a7a:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8005a7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005a80:	0840      	lsrs	r0, r0, #1
 8005a82:	3801      	subs	r0, #1
 8005a84:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8005a8c:	6813      	ldr	r3, [r2, #0]
 8005a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a92:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a94:	68d3      	ldr	r3, [r2, #12]
 8005a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a9a:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8005a9c:	f7fd f924 	bl	8002ce8 <HAL_GetTick>
 8005aa0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa2:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005aaa:	d106      	bne.n	8005aba <HAL_RCC_OscConfig+0x672>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd f91c 	bl	8002ce8 <HAL_GetTick>
 8005ab0:	1b00      	subs	r0, r0, r4
 8005ab2:	2802      	cmp	r0, #2
 8005ab4:	d9f5      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x65a>
                return HAL_TIMEOUT;
 8005ab6:	2003      	movs	r0, #3
 8005ab8:	e02a      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
  return HAL_OK;
 8005aba:	2000      	movs	r0, #0
 8005abc:	e028      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
          __HAL_RCC_PLL_ENABLE();
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005ac6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005ace:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8005ad0:	f7fd f90a 	bl	8002ce8 <HAL_GetTick>
 8005ad4:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <HAL_RCC_OscConfig+0x6d4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ade:	d106      	bne.n	8005aee <HAL_RCC_OscConfig+0x6a6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fd f902 	bl	8002ce8 <HAL_GetTick>
 8005ae4:	1b03      	subs	r3, r0, r4
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d9f5      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x68e>
              return HAL_TIMEOUT;
 8005aea:	2003      	movs	r0, #3
 8005aec:	e010      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
  return HAL_OK;
 8005aee:	2000      	movs	r0, #0
 8005af0:	e00e      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
 8005af2:	2000      	movs	r0, #0
 8005af4:	e00c      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
    return HAL_ERROR;
 8005af6:	2001      	movs	r0, #1
}
 8005af8:	4770      	bx	lr
        return HAL_ERROR;
 8005afa:	2001      	movs	r0, #1
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
            return HAL_ERROR;
 8005afe:	2001      	movs	r0, #1
 8005b00:	e006      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
        return HAL_ERROR;
 8005b02:	2001      	movs	r0, #1
 8005b04:	e004      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
        return HAL_ERROR;
 8005b06:	2001      	movs	r0, #1
 8005b08:	e002      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
          return HAL_ERROR;
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	e000      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
  return HAL_OK;
 8005b0e:	2000      	movs	r0, #0
}
 8005b10:	b003      	add	sp, #12
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8005b14:	2001      	movs	r0, #1
 8005b16:	e7fb      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
        return HAL_ERROR;
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e7f9      	b.n	8005b10 <HAL_RCC_OscConfig+0x6c8>
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	f99f808c 	.word	0xf99f808c

08005b24 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005b24:	2800      	cmp	r0, #0
 8005b26:	f000 8098 	beq.w	8005c5a <HAL_RCC_ClockConfig+0x136>
{
 8005b2a:	b570      	push	{r4, r5, r6, lr}
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b30:	4b4e      	ldr	r3, [pc, #312]	; (8005c6c <HAL_RCC_ClockConfig+0x148>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	428b      	cmp	r3, r1
 8005b3a:	d20b      	bcs.n	8005b54 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3c:	4a4b      	ldr	r2, [pc, #300]	; (8005c6c <HAL_RCC_ClockConfig+0x148>)
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b48:	6813      	ldr	r3, [r2, #0]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	428b      	cmp	r3, r1
 8005b50:	f040 8085 	bne.w	8005c5e <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	f013 0f01 	tst.w	r3, #1
 8005b5a:	d039      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b5c:	686b      	ldr	r3, [r5, #4]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d009      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d026      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b66:	bb63      	cbnz	r3, 8005bc2 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b68:	4a41      	ldr	r2, [pc, #260]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	f012 0f02 	tst.w	r2, #2
 8005b70:	d106      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8005b72:	2001      	movs	r0, #1
 8005b74:	e070      	b.n	8005c58 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b76:	4a3e      	ldr	r2, [pc, #248]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005b7e:	d070      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b80:	493b      	ldr	r1, [pc, #236]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005b82:	688a      	ldr	r2, [r1, #8]
 8005b84:	f022 0203 	bic.w	r2, r2, #3
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005b8c:	f7fd f8ac 	bl	8002ce8 <HAL_GetTick>
 8005b90:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b92:	4b37      	ldr	r3, [pc, #220]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	686a      	ldr	r2, [r5, #4]
 8005b9c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005ba0:	d016      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba2:	f7fd f8a1 	bl	8002ce8 <HAL_GetTick>
 8005ba6:	1b80      	subs	r0, r0, r6
 8005ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bac:	4298      	cmp	r0, r3
 8005bae:	d9f0      	bls.n	8005b92 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8005bb0:	2003      	movs	r0, #3
 8005bb2:	e051      	b.n	8005c58 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb4:	4a2e      	ldr	r2, [pc, #184]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005bbc:	d1e0      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	e04a      	b.n	8005c58 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bc2:	4a2b      	ldr	r2, [pc, #172]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005bca:	d1d9      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8005bcc:	2001      	movs	r0, #1
 8005bce:	e043      	b.n	8005c58 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	f013 0f02 	tst.w	r3, #2
 8005bd6:	d006      	beq.n	8005be6 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005bda:	6893      	ldr	r3, [r2, #8]
 8005bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be0:	68a9      	ldr	r1, [r5, #8]
 8005be2:	430b      	orrs	r3, r1
 8005be4:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005be6:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <HAL_RCC_ClockConfig+0x148>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	d90a      	bls.n	8005c08 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_RCC_ClockConfig+0x148>)
 8005bf4:	6813      	ldr	r3, [r2, #0]
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	4323      	orrs	r3, r4
 8005bfc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d12e      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	f013 0f04 	tst.w	r3, #4
 8005c0e:	d006      	beq.n	8005c1e <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c10:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005c12:	6893      	ldr	r3, [r2, #8]
 8005c14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c18:	68e9      	ldr	r1, [r5, #12]
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	f013 0f08 	tst.w	r3, #8
 8005c24:	d007      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c26:	4a12      	ldr	r2, [pc, #72]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005c28:	6893      	ldr	r3, [r2, #8]
 8005c2a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005c2e:	6929      	ldr	r1, [r5, #16]
 8005c30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c34:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c36:	f7ff fbad 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <HAL_RCC_ClockConfig+0x14c>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c42:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <HAL_RCC_ClockConfig+0x150>)
 8005c44:	5cd3      	ldrb	r3, [r2, r3]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	40d8      	lsrs	r0, r3
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <HAL_RCC_ClockConfig+0x154>)
 8005c4e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <HAL_RCC_ClockConfig+0x158>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	f7fc fdc4 	bl	80027e0 <HAL_InitTick>
}
 8005c58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005c5a:	2001      	movs	r0, #1
}
 8005c5c:	4770      	bx	lr
      return HAL_ERROR;
 8005c5e:	2001      	movs	r0, #1
 8005c60:	e7fa      	b.n	8005c58 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8005c62:	2001      	movs	r0, #1
 8005c64:	e7f8      	b.n	8005c58 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8005c66:	2001      	movs	r0, #1
 8005c68:	e7f6      	b.n	8005c58 <HAL_RCC_ClockConfig+0x134>
 8005c6a:	bf00      	nop
 8005c6c:	40022000 	.word	0x40022000
 8005c70:	40021000 	.word	0x40021000
 8005c74:	0800aef8 	.word	0x0800aef8
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	20000008 	.word	0x20000008

08005c80 <HAL_RCC_GetHCLKFreq>:
}
 8005c80:	4b01      	ldr	r3, [pc, #4]	; (8005c88 <HAL_RCC_GetHCLKFreq+0x8>)
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	20000000 	.word	0x20000000

08005c8c <HAL_RCC_GetPCLK1Freq>:
{
 8005c8c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c8e:	f7ff fff7 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005c9a:	4a04      	ldr	r2, [pc, #16]	; (8005cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
}
 8005ca2:	40d8      	lsrs	r0, r3
 8005ca4:	bd08      	pop	{r3, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	0800af08 	.word	0x0800af08

08005cb0 <HAL_RCC_GetPCLK2Freq>:
{
 8005cb0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cb2:	f7ff ffe5 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005cbe:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cc0:	5cd3      	ldrb	r3, [r2, r3]
 8005cc2:	f003 031f 	and.w	r3, r3, #31
}
 8005cc6:	40d8      	lsrs	r0, r3
 8005cc8:	bd08      	pop	{r3, pc}
 8005cca:	bf00      	nop
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	0800af08 	.word	0x0800af08

08005cd4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cd4:	230f      	movs	r3, #15
 8005cd6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_RCC_GetClockConfig+0x34>)
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	f002 0203 	and.w	r2, r2, #3
 8005ce0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005ce8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005cf0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cfa:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005cfc:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <HAL_RCC_GetClockConfig+0x38>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	600b      	str	r3, [r1, #0]
}
 8005d06:	4770      	bx	lr
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40022000 	.word	0x40022000

08005d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d12:	b083      	sub	sp, #12
 8005d14:	4604      	mov	r4, r0
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d16:	6803      	ldr	r3, [r0, #0]
 8005d18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005d1c:	d069      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d1e:	4b87      	ldr	r3, [pc, #540]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005d26:	d11e      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d28:	4b84      	ldr	r3, [pc, #528]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d30:	659a      	str	r2, [r3, #88]	; 0x58
 8005d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005d3c:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d3e:	4a80      	ldr	r2, [pc, #512]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d48:	f7fc ffce 	bl	8002ce8 <HAL_GetTick>
 8005d4c:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d4e:	4b7c      	ldr	r3, [pc, #496]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d56:	d108      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d58:	f7fc ffc6 	bl	8002ce8 <HAL_GetTick>
 8005d5c:	1b40      	subs	r0, r0, r5
 8005d5e:	2802      	cmp	r0, #2
 8005d60:	d9f5      	bls.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8005d62:	2503      	movs	r5, #3
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8005d66:	2600      	movs	r6, #0
 8005d68:	e7e9      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d6a:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8005d6c:	bb45      	cbnz	r5, 8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d6e:	4b73      	ldr	r3, [pc, #460]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d74:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005d78:	d015      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8005d7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d012      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d80:	4a6e      	ldr	r2, [pc, #440]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d8a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005d8e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005d92:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d96:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005d9a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005d9e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005da6:	f013 0f01 	tst.w	r3, #1
 8005daa:	d110      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }

      if(ret == HAL_OK)
 8005dac:	b945      	cbnz	r5, 8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dae:	4a63      	ldr	r2, [pc, #396]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005db0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dc0:	b1c6      	cbz	r6, 8005df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc2:	4a5e      	ldr	r2, [pc, #376]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dc4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dca:	6593      	str	r3, [r2, #88]	; 0x58
 8005dcc:	e012      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 8005dce:	f7fc ff8b 	bl	8002ce8 <HAL_GetTick>
 8005dd2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd4:	4b59      	ldr	r3, [pc, #356]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f013 0f02 	tst.w	r3, #2
 8005dde:	d1e5      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de0:	f7fc ff82 	bl	8002ce8 <HAL_GetTick>
 8005de4:	1bc0      	subs	r0, r0, r7
 8005de6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dea:	4298      	cmp	r0, r3
 8005dec:	d9f2      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8005dee:	2503      	movs	r5, #3
 8005df0:	e7dc      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005df2:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	f013 0f01 	tst.w	r3, #1
 8005dfa:	d008      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dfc:	4a4f      	ldr	r2, [pc, #316]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	6861      	ldr	r1, [r4, #4]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f013 0f02 	tst.w	r3, #2
 8005e14:	d008      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e16:	4a49      	ldr	r2, [pc, #292]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e1c:	f023 030c 	bic.w	r3, r3, #12
 8005e20:	68a1      	ldr	r1, [r4, #8]
 8005e22:	430b      	orrs	r3, r1
 8005e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	f013 0f04 	tst.w	r3, #4
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e30:	4a42      	ldr	r2, [pc, #264]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005e3a:	68e1      	ldr	r1, [r4, #12]
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f013 0f20 	tst.w	r3, #32
 8005e48:	d008      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e4a:	4a3c      	ldr	r2, [pc, #240]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e54:	6921      	ldr	r1, [r4, #16]
 8005e56:	430b      	orrs	r3, r1
 8005e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005e62:	d008      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e64:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e6a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005e6e:	6a21      	ldr	r1, [r4, #32]
 8005e70:	430b      	orrs	r3, r1
 8005e72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005e7c:	d008      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e96:	d008      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e98:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ea2:	6961      	ldr	r1, [r4, #20]
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005eb0:	d008      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eb2:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eb4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005eb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005ebc:	69a1      	ldr	r1, [r4, #24]
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005eca:	d008      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ecc:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ece:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005ed2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005ed6:	69e1      	ldr	r1, [r4, #28]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005ee4:	d00c      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ee8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005eec:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005ef0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005efe:	d013      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005f06:	d00c      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f08:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005f0e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005f12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f14:	430b      	orrs	r3, r1
 8005f16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f20:	d007      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x222>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8005f22:	4628      	mov	r0, r5
 8005f24:	b003      	add	sp, #12
 8005f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f28:	68d3      	ldr	r3, [r2, #12]
 8005f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2e:	60d3      	str	r3, [r2, #12]
 8005f30:	e7e6      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f32:	68d3      	ldr	r3, [r2, #12]
 8005f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f38:	60d3      	str	r3, [r2, #12]
 8005f3a:	e7f2      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	40007000 	.word	0x40007000

08005f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f46:	6a03      	ldr	r3, [r0, #32]
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f52:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f58:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f5c:	680d      	ldr	r5, [r1, #0]
 8005f5e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f60:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f64:	688d      	ldr	r5, [r1, #8]
 8005f66:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f68:	4d14      	ldr	r5, [pc, #80]	; (8005fbc <TIM_OC1_SetConfig+0x78>)
 8005f6a:	42a8      	cmp	r0, r5
 8005f6c:	d007      	beq.n	8005f7e <TIM_OC1_SetConfig+0x3a>
 8005f6e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8005f72:	42a8      	cmp	r0, r5
 8005f74:	d003      	beq.n	8005f7e <TIM_OC1_SetConfig+0x3a>
 8005f76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f7a:	42a8      	cmp	r0, r5
 8005f7c:	d105      	bne.n	8005f8a <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f7e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f82:	68cd      	ldr	r5, [r1, #12]
 8005f84:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f86:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	4d0c      	ldr	r5, [pc, #48]	; (8005fbc <TIM_OC1_SetConfig+0x78>)
 8005f8c:	42a8      	cmp	r0, r5
 8005f8e:	d007      	beq.n	8005fa0 <TIM_OC1_SetConfig+0x5c>
 8005f90:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8005f94:	42a8      	cmp	r0, r5
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC1_SetConfig+0x5c>
 8005f98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f9c:	42a8      	cmp	r0, r5
 8005f9e:	d105      	bne.n	8005fac <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fa0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fa4:	694c      	ldr	r4, [r1, #20]
 8005fa6:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fa8:	698d      	ldr	r5, [r1, #24]
 8005faa:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fae:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fb0:	684a      	ldr	r2, [r1, #4]
 8005fb2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb4:	6203      	str	r3, [r0, #32]
}
 8005fb6:	bc30      	pop	{r4, r5}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40012c00 	.word	0x40012c00

08005fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc2:	6a03      	ldr	r3, [r0, #32]
 8005fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fd4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	680d      	ldr	r5, [r1, #0]
 8005fda:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fe0:	688d      	ldr	r5, [r1, #8]
 8005fe2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fe6:	4d12      	ldr	r5, [pc, #72]	; (8006030 <TIM_OC3_SetConfig+0x70>)
 8005fe8:	42a8      	cmp	r0, r5
 8005fea:	d019      	beq.n	8006020 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fec:	4d10      	ldr	r5, [pc, #64]	; (8006030 <TIM_OC3_SetConfig+0x70>)
 8005fee:	42a8      	cmp	r0, r5
 8005ff0:	d007      	beq.n	8006002 <TIM_OC3_SetConfig+0x42>
 8005ff2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8005ff6:	42a8      	cmp	r0, r5
 8005ff8:	d003      	beq.n	8006002 <TIM_OC3_SetConfig+0x42>
 8005ffa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ffe:	42a8      	cmp	r0, r5
 8006000:	d107      	bne.n	8006012 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006002:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006006:	694d      	ldr	r5, [r1, #20]
 8006008:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800600c:	698d      	ldr	r5, [r1, #24]
 800600e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006014:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006016:	684a      	ldr	r2, [r1, #4]
 8006018:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601a:	6203      	str	r3, [r0, #32]
}
 800601c:	bc30      	pop	{r4, r5}
 800601e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006024:	68cd      	ldr	r5, [r1, #12]
 8006026:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800602a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800602e:	e7dd      	b.n	8005fec <TIM_OC3_SetConfig+0x2c>
 8006030:	40012c00 	.word	0x40012c00

08006034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006036:	6a03      	ldr	r3, [r0, #32]
 8006038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800603c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006042:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006048:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	680d      	ldr	r5, [r1, #0]
 800604e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006056:	688d      	ldr	r5, [r1, #8]
 8006058:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605c:	4d0b      	ldr	r5, [pc, #44]	; (800608c <TIM_OC4_SetConfig+0x58>)
 800605e:	42a8      	cmp	r0, r5
 8006060:	d007      	beq.n	8006072 <TIM_OC4_SetConfig+0x3e>
 8006062:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006066:	42a8      	cmp	r0, r5
 8006068:	d003      	beq.n	8006072 <TIM_OC4_SetConfig+0x3e>
 800606a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800606e:	42a8      	cmp	r0, r5
 8006070:	d104      	bne.n	800607c <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006072:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006076:	694d      	ldr	r5, [r1, #20]
 8006078:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800607e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006080:	684b      	ldr	r3, [r1, #4]
 8006082:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006084:	6202      	str	r2, [r0, #32]
}
 8006086:	bc30      	pop	{r4, r5}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40012c00 	.word	0x40012c00

08006090 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006092:	6a03      	ldr	r3, [r0, #32]
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800609e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a8:	680d      	ldr	r5, [r1, #0]
 80060aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060b0:	688d      	ldr	r5, [r1, #8]
 80060b2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b6:	4d0b      	ldr	r5, [pc, #44]	; (80060e4 <TIM_OC5_SetConfig+0x54>)
 80060b8:	42a8      	cmp	r0, r5
 80060ba:	d007      	beq.n	80060cc <TIM_OC5_SetConfig+0x3c>
 80060bc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80060c0:	42a8      	cmp	r0, r5
 80060c2:	d003      	beq.n	80060cc <TIM_OC5_SetConfig+0x3c>
 80060c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060c8:	42a8      	cmp	r0, r5
 80060ca:	d104      	bne.n	80060d6 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060cc:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060d0:	694d      	ldr	r5, [r1, #20]
 80060d2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060da:	684a      	ldr	r2, [r1, #4]
 80060dc:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060de:	6203      	str	r3, [r0, #32]
}
 80060e0:	bc30      	pop	{r4, r5}
 80060e2:	4770      	bx	lr
 80060e4:	40012c00 	.word	0x40012c00

080060e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060ea:	6a03      	ldr	r3, [r0, #32]
 80060ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060f6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006100:	680d      	ldr	r5, [r1, #0]
 8006102:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006106:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800610a:	688d      	ldr	r5, [r1, #8]
 800610c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	4d0b      	ldr	r5, [pc, #44]	; (8006140 <TIM_OC6_SetConfig+0x58>)
 8006112:	42a8      	cmp	r0, r5
 8006114:	d007      	beq.n	8006126 <TIM_OC6_SetConfig+0x3e>
 8006116:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800611a:	42a8      	cmp	r0, r5
 800611c:	d003      	beq.n	8006126 <TIM_OC6_SetConfig+0x3e>
 800611e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006122:	42a8      	cmp	r0, r5
 8006124:	d104      	bne.n	8006130 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006126:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800612a:	694d      	ldr	r5, [r1, #20]
 800612c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006130:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006132:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006134:	684b      	ldr	r3, [r1, #4]
 8006136:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	6202      	str	r2, [r0, #32]
}
 800613a:	bc30      	pop	{r4, r5}
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40012c00 	.word	0x40012c00

08006144 <HAL_TIM_Base_MspInit>:
}
 8006144:	4770      	bx	lr
	...

08006148 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006148:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d126      	bne.n	80061a0 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8006152:	2302      	movs	r3, #2
 8006154:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006158:	6802      	ldr	r2, [r0, #0]
 800615a:	68d3      	ldr	r3, [r2, #12]
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006162:	6803      	ldr	r3, [r0, #0]
 8006164:	4a11      	ldr	r2, [pc, #68]	; (80061ac <HAL_TIM_Base_Start_IT+0x64>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00c      	beq.n	8006184 <HAL_TIM_Base_Start_IT+0x3c>
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d009      	beq.n	8006184 <HAL_TIM_Base_Start_IT+0x3c>
 8006170:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8006174:	4293      	cmp	r3, r2
 8006176:	d005      	beq.n	8006184 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006180:	2000      	movs	r0, #0
 8006182:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006184:	6899      	ldr	r1, [r3, #8]
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <HAL_TIM_Base_Start_IT+0x68>)
 8006188:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	2a06      	cmp	r2, #6
 800618c:	d00a      	beq.n	80061a4 <HAL_TIM_Base_Start_IT+0x5c>
 800618e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006192:	d009      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800619c:	2000      	movs	r0, #0
 800619e:	4770      	bx	lr
    return HAL_ERROR;
 80061a0:	2001      	movs	r0, #1
 80061a2:	4770      	bx	lr
  return HAL_OK;
 80061a4:	2000      	movs	r0, #0
 80061a6:	4770      	bx	lr
 80061a8:	2000      	movs	r0, #0
}
 80061aa:	4770      	bx	lr
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	00010007 	.word	0x00010007

080061b4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80061b4:	4770      	bx	lr

080061b6 <HAL_TIM_IC_CaptureCallback>:
}
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80061b8:	4770      	bx	lr

080061ba <HAL_TIM_TriggerCallback>:
}
 80061ba:	4770      	bx	lr

080061bc <HAL_TIM_IRQHandler>:
{
 80061bc:	b510      	push	{r4, lr}
 80061be:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c0:	6803      	ldr	r3, [r0, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	f012 0f02 	tst.w	r2, #2
 80061c8:	d011      	beq.n	80061ee <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	f012 0f02 	tst.w	r2, #2
 80061d0:	d00d      	beq.n	80061ee <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061d2:	f06f 0202 	mvn.w	r2, #2
 80061d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061d8:	2301      	movs	r3, #1
 80061da:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061dc:	6803      	ldr	r3, [r0, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f013 0f03 	tst.w	r3, #3
 80061e4:	d079      	beq.n	80062da <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	f7ff ffe6 	bl	80061b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	2300      	movs	r3, #0
 80061ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	f012 0f04 	tst.w	r2, #4
 80061f6:	d012      	beq.n	800621e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	f012 0f04 	tst.w	r2, #4
 80061fe:	d00e      	beq.n	800621e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006200:	f06f 0204 	mvn.w	r2, #4
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006206:	2302      	movs	r3, #2
 8006208:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006212:	d068      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006214:	4620      	mov	r0, r4
 8006216:	f7ff ffce 	bl	80061b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	2300      	movs	r3, #0
 800621c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	f012 0f08 	tst.w	r2, #8
 8006226:	d012      	beq.n	800624e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	f012 0f08 	tst.w	r2, #8
 800622e:	d00e      	beq.n	800624e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006230:	f06f 0208 	mvn.w	r2, #8
 8006234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006236:	2304      	movs	r3, #4
 8006238:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f013 0f03 	tst.w	r3, #3
 8006242:	d057      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff ffb6 	bl	80061b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	2300      	movs	r3, #0
 800624c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	f012 0f10 	tst.w	r2, #16
 8006256:	d012      	beq.n	800627e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	f012 0f10 	tst.w	r2, #16
 800625e:	d00e      	beq.n	800627e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006260:	f06f 0210 	mvn.w	r2, #16
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006266:	2308      	movs	r3, #8
 8006268:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006272:	d046      	beq.n	8006302 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006274:	4620      	mov	r0, r4
 8006276:	f7ff ff9e 	bl	80061b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	2300      	movs	r3, #0
 800627c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	f012 0f01 	tst.w	r2, #1
 8006286:	d003      	beq.n	8006290 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	f012 0f01 	tst.w	r2, #1
 800628e:	d13f      	bne.n	8006310 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	f012 0f80 	tst.w	r2, #128	; 0x80
 80062a0:	d13d      	bne.n	800631e <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80062aa:	d003      	beq.n	80062b4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80062b2:	d13b      	bne.n	800632c <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80062bc:	d003      	beq.n	80062c6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80062c4:	d139      	bne.n	800633a <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	f012 0f20 	tst.w	r2, #32
 80062ce:	d003      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	f012 0f20 	tst.w	r2, #32
 80062d6:	d137      	bne.n	8006348 <HAL_TIM_IRQHandler+0x18c>
}
 80062d8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	f7ff ff6b 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062de:	4620      	mov	r0, r4
 80062e0:	f7ff ff6a 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80062e4:	e781      	b.n	80061ea <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7ff ff64 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7ff ff63 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80062f2:	e792      	b.n	800621a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff ff5d 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fa:	4620      	mov	r0, r4
 80062fc:	f7ff ff5c 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
 8006300:	e7a3      	b.n	800624a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	4620      	mov	r0, r4
 8006304:	f7ff ff56 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff ff55 	bl	80061b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800630e:	e7b4      	b.n	800627a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006310:	f06f 0201 	mvn.w	r2, #1
 8006314:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006316:	4620      	mov	r0, r4
 8006318:	f7fc fa28 	bl	800276c <HAL_TIM_PeriodElapsedCallback>
 800631c:	e7b8      	b.n	8006290 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800631e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006322:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006324:	4620      	mov	r0, r4
 8006326:	f000 faa6 	bl	8006876 <HAL_TIMEx_BreakCallback>
 800632a:	e7ba      	b.n	80062a2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800632c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006330:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006332:	4620      	mov	r0, r4
 8006334:	f000 faa0 	bl	8006878 <HAL_TIMEx_Break2Callback>
 8006338:	e7bc      	b.n	80062b4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800633a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800633e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006340:	4620      	mov	r0, r4
 8006342:	f7ff ff3a 	bl	80061ba <HAL_TIM_TriggerCallback>
 8006346:	e7be      	b.n	80062c6 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006348:	f06f 0220 	mvn.w	r2, #32
 800634c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800634e:	4620      	mov	r0, r4
 8006350:	f000 fa90 	bl	8006874 <HAL_TIMEx_CommutCallback>
}
 8006354:	e7c0      	b.n	80062d8 <HAL_TIM_IRQHandler+0x11c>
	...

08006358 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006358:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800635a:	4a1a      	ldr	r2, [pc, #104]	; (80063c4 <TIM_Base_SetConfig+0x6c>)
 800635c:	4290      	cmp	r0, r2
 800635e:	d002      	beq.n	8006366 <TIM_Base_SetConfig+0xe>
 8006360:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006364:	d103      	bne.n	800636e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800636a:	684a      	ldr	r2, [r1, #4]
 800636c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636e:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <TIM_Base_SetConfig+0x6c>)
 8006370:	4290      	cmp	r0, r2
 8006372:	d00a      	beq.n	800638a <TIM_Base_SetConfig+0x32>
 8006374:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006378:	d007      	beq.n	800638a <TIM_Base_SetConfig+0x32>
 800637a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800637e:	4290      	cmp	r0, r2
 8006380:	d003      	beq.n	800638a <TIM_Base_SetConfig+0x32>
 8006382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006386:	4290      	cmp	r0, r2
 8006388:	d103      	bne.n	8006392 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638e:	68ca      	ldr	r2, [r1, #12]
 8006390:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006396:	694a      	ldr	r2, [r1, #20]
 8006398:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800639a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800639c:	688b      	ldr	r3, [r1, #8]
 800639e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063a0:	680b      	ldr	r3, [r1, #0]
 80063a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a4:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <TIM_Base_SetConfig+0x6c>)
 80063a6:	4298      	cmp	r0, r3
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0x62>
 80063aa:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80063ae:	4298      	cmp	r0, r3
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0x62>
 80063b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b6:	4298      	cmp	r0, r3
 80063b8:	d101      	bne.n	80063be <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 80063ba:	690b      	ldr	r3, [r1, #16]
 80063bc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80063be:	2301      	movs	r3, #1
 80063c0:	6143      	str	r3, [r0, #20]
}
 80063c2:	4770      	bx	lr
 80063c4:	40012c00 	.word	0x40012c00

080063c8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80063c8:	b360      	cbz	r0, 8006424 <HAL_TIM_Base_Init+0x5c>
{
 80063ca:	b510      	push	{r4, lr}
 80063cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80063ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063d2:	b313      	cbz	r3, 800641a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	2302      	movs	r3, #2
 80063d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063da:	4621      	mov	r1, r4
 80063dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80063e0:	f7ff ffba 	bl	8006358 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80063ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80063f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80063f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80063fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006402:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800640a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800640e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006412:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006416:	2000      	movs	r0, #0
}
 8006418:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800641a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800641e:	f7ff fe91 	bl	8006144 <HAL_TIM_Base_MspInit>
 8006422:	e7d7      	b.n	80063d4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006424:	2001      	movs	r0, #1
}
 8006426:	4770      	bx	lr

08006428 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006428:	b360      	cbz	r0, 8006484 <HAL_TIM_PWM_Init+0x5c>
{
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800642e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006432:	b313      	cbz	r3, 800647a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	2302      	movs	r3, #2
 8006436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800643a:	4621      	mov	r1, r4
 800643c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006440:	f7ff ff8a 	bl	8006358 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006444:	2301      	movs	r3, #1
 8006446:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800644e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006452:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006456:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800645a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800646a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800646e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006472:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006476:	2000      	movs	r0, #0
}
 8006478:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800647a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800647e:	f7fc fabb 	bl	80029f8 <HAL_TIM_PWM_MspInit>
 8006482:	e7d7      	b.n	8006434 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006484:	2001      	movs	r0, #1
}
 8006486:	4770      	bx	lr

08006488 <TIM_OC2_SetConfig>:
{
 8006488:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800648a:	6a03      	ldr	r3, [r0, #32]
 800648c:	f023 0310 	bic.w	r3, r3, #16
 8006490:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006492:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006494:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006496:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006498:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800649c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	680d      	ldr	r5, [r1, #0]
 80064a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80064a6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064aa:	688d      	ldr	r5, [r1, #8]
 80064ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b0:	4d12      	ldr	r5, [pc, #72]	; (80064fc <TIM_OC2_SetConfig+0x74>)
 80064b2:	42a8      	cmp	r0, r5
 80064b4:	d019      	beq.n	80064ea <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b6:	4d11      	ldr	r5, [pc, #68]	; (80064fc <TIM_OC2_SetConfig+0x74>)
 80064b8:	42a8      	cmp	r0, r5
 80064ba:	d007      	beq.n	80064cc <TIM_OC2_SetConfig+0x44>
 80064bc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80064c0:	42a8      	cmp	r0, r5
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0x44>
 80064c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064c8:	42a8      	cmp	r0, r5
 80064ca:	d107      	bne.n	80064dc <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064cc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d0:	694d      	ldr	r5, [r1, #20]
 80064d2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d6:	698d      	ldr	r5, [r1, #24]
 80064d8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80064dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80064de:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80064e0:	684a      	ldr	r2, [r1, #4]
 80064e2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80064e4:	6203      	str	r3, [r0, #32]
}
 80064e6:	bc30      	pop	{r4, r5}
 80064e8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80064ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064ee:	68cd      	ldr	r5, [r1, #12]
 80064f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80064f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f8:	e7dd      	b.n	80064b6 <TIM_OC2_SetConfig+0x2e>
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00

08006500 <HAL_TIM_PWM_ConfigChannel>:
{
 8006500:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006502:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006506:	2b01      	cmp	r3, #1
 8006508:	f000 808c 	beq.w	8006624 <HAL_TIM_PWM_ConfigChannel+0x124>
 800650c:	4604      	mov	r4, r0
 800650e:	460d      	mov	r5, r1
 8006510:	2301      	movs	r3, #1
 8006512:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006516:	2a14      	cmp	r2, #20
 8006518:	d81e      	bhi.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x58>
 800651a:	e8df f002 	tbb	[pc, r2]
 800651e:	1d0b      	.short	0x1d0b
 8006520:	1d211d1d 	.word	0x1d211d1d
 8006524:	1d351d1d 	.word	0x1d351d1d
 8006528:	1d481d1d 	.word	0x1d481d1d
 800652c:	1d5c1d1d 	.word	0x1d5c1d1d
 8006530:	1d1d      	.short	0x1d1d
 8006532:	6f          	.byte	0x6f
 8006533:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006534:	6800      	ldr	r0, [r0, #0]
 8006536:	f7ff fd05 	bl	8005f44 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	6993      	ldr	r3, [r2, #24]
 800653e:	f043 0308 	orr.w	r3, r3, #8
 8006542:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	6993      	ldr	r3, [r2, #24]
 8006548:	f023 0304 	bic.w	r3, r3, #4
 800654c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	6993      	ldr	r3, [r2, #24]
 8006552:	6929      	ldr	r1, [r5, #16]
 8006554:	430b      	orrs	r3, r1
 8006556:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8006558:	2000      	movs	r0, #0
 800655a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800655e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006560:	6800      	ldr	r0, [r0, #0]
 8006562:	f7ff ff91 	bl	8006488 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	6993      	ldr	r3, [r2, #24]
 800656a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800656e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	6993      	ldr	r3, [r2, #24]
 8006574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006578:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	6993      	ldr	r3, [r2, #24]
 800657e:	6929      	ldr	r1, [r5, #16]
 8006580:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006584:	6193      	str	r3, [r2, #24]
      break;
 8006586:	e7e7      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006588:	6800      	ldr	r0, [r0, #0]
 800658a:	f7ff fd19 	bl	8005fc0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	69d3      	ldr	r3, [r2, #28]
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	69d3      	ldr	r3, [r2, #28]
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	69d3      	ldr	r3, [r2, #28]
 80065a6:	6929      	ldr	r1, [r5, #16]
 80065a8:	430b      	orrs	r3, r1
 80065aa:	61d3      	str	r3, [r2, #28]
      break;
 80065ac:	e7d4      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ae:	6800      	ldr	r0, [r0, #0]
 80065b0:	f7ff fd40 	bl	8006034 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	69d3      	ldr	r3, [r2, #28]
 80065b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065bc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	69d3      	ldr	r3, [r2, #28]
 80065c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065c6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	69d3      	ldr	r3, [r2, #28]
 80065cc:	6929      	ldr	r1, [r5, #16]
 80065ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80065d2:	61d3      	str	r3, [r2, #28]
      break;
 80065d4:	e7c0      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065d6:	6800      	ldr	r0, [r0, #0]
 80065d8:	f7ff fd5a 	bl	8006090 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065dc:	6822      	ldr	r2, [r4, #0]
 80065de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065e0:	f043 0308 	orr.w	r3, r3, #8
 80065e4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065ea:	f023 0304 	bic.w	r3, r3, #4
 80065ee:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065f4:	6929      	ldr	r1, [r5, #16]
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80065fa:	e7ad      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f7ff fd73 	bl	80060e8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006606:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800660a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800660c:	6822      	ldr	r2, [r4, #0]
 800660e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006614:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800661a:	6929      	ldr	r1, [r5, #16]
 800661c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006620:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8006622:	e799      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 8006624:	2002      	movs	r0, #2
 8006626:	e79a      	b.n	800655e <HAL_TIM_PWM_ConfigChannel+0x5e>

08006628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006628:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800662a:	f001 011f 	and.w	r1, r1, #31
 800662e:	2301      	movs	r3, #1
 8006630:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006634:	6a03      	ldr	r3, [r0, #32]
 8006636:	ea23 0304 	bic.w	r3, r3, r4
 800663a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800663c:	6a03      	ldr	r3, [r0, #32]
 800663e:	fa02 f101 	lsl.w	r1, r2, r1
 8006642:	430b      	orrs	r3, r1
 8006644:	6203      	str	r3, [r0, #32]
}
 8006646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_PWM_Start>:
{
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006650:	4608      	mov	r0, r1
 8006652:	2900      	cmp	r1, #0
 8006654:	d132      	bne.n	80066bc <HAL_TIM_PWM_Start+0x70>
 8006656:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800665a:	b2db      	uxtb	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	bf18      	it	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d17f      	bne.n	8006766 <HAL_TIM_PWM_Start+0x11a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006666:	2800      	cmp	r0, #0
 8006668:	d153      	bne.n	8006712 <HAL_TIM_PWM_Start+0xc6>
 800666a:	2302      	movs	r3, #2
 800666c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006670:	2201      	movs	r2, #1
 8006672:	4601      	mov	r1, r0
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	f7ff ffd7 	bl	8006628 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	4a3d      	ldr	r2, [pc, #244]	; (8006774 <HAL_TIM_PWM_Start+0x128>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d007      	beq.n	8006692 <HAL_TIM_PWM_Start+0x46>
 8006682:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <HAL_TIM_PWM_Start+0x46>
 800668a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800668e:	4293      	cmp	r3, r2
 8006690:	d103      	bne.n	800669a <HAL_TIM_PWM_Start+0x4e>
    __HAL_TIM_MOE_ENABLE(htim);
 8006692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	4a35      	ldr	r2, [pc, #212]	; (8006774 <HAL_TIM_PWM_Start+0x128>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d053      	beq.n	800674a <HAL_TIM_PWM_Start+0xfe>
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a6:	d050      	beq.n	800674a <HAL_TIM_PWM_Start+0xfe>
 80066a8:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04c      	beq.n	800674a <HAL_TIM_PWM_Start+0xfe>
    __HAL_TIM_ENABLE(htim);
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80066b8:	2000      	movs	r0, #0
 80066ba:	e055      	b.n	8006768 <HAL_TIM_PWM_Start+0x11c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066bc:	2904      	cmp	r1, #4
 80066be:	d00c      	beq.n	80066da <HAL_TIM_PWM_Start+0x8e>
 80066c0:	2908      	cmp	r1, #8
 80066c2:	d011      	beq.n	80066e8 <HAL_TIM_PWM_Start+0x9c>
 80066c4:	290c      	cmp	r1, #12
 80066c6:	d016      	beq.n	80066f6 <HAL_TIM_PWM_Start+0xaa>
 80066c8:	2910      	cmp	r1, #16
 80066ca:	d01b      	beq.n	8006704 <HAL_TIM_PWM_Start+0xb8>
 80066cc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	bf18      	it	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	e7c3      	b.n	8006662 <HAL_TIM_PWM_Start+0x16>
 80066da:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	bf18      	it	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	e7bc      	b.n	8006662 <HAL_TIM_PWM_Start+0x16>
 80066e8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	bf18      	it	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	e7b5      	b.n	8006662 <HAL_TIM_PWM_Start+0x16>
 80066f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	bf18      	it	ne
 8006700:	2301      	movne	r3, #1
 8006702:	e7ae      	b.n	8006662 <HAL_TIM_PWM_Start+0x16>
 8006704:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006708:	b2db      	uxtb	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	bf18      	it	ne
 800670e:	2301      	movne	r3, #1
 8006710:	e7a7      	b.n	8006662 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006712:	2804      	cmp	r0, #4
 8006714:	d009      	beq.n	800672a <HAL_TIM_PWM_Start+0xde>
 8006716:	2808      	cmp	r0, #8
 8006718:	d00b      	beq.n	8006732 <HAL_TIM_PWM_Start+0xe6>
 800671a:	280c      	cmp	r0, #12
 800671c:	d00d      	beq.n	800673a <HAL_TIM_PWM_Start+0xee>
 800671e:	2810      	cmp	r0, #16
 8006720:	d00f      	beq.n	8006742 <HAL_TIM_PWM_Start+0xf6>
 8006722:	2302      	movs	r3, #2
 8006724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006728:	e7a2      	b.n	8006670 <HAL_TIM_PWM_Start+0x24>
 800672a:	2302      	movs	r3, #2
 800672c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006730:	e79e      	b.n	8006670 <HAL_TIM_PWM_Start+0x24>
 8006732:	2302      	movs	r3, #2
 8006734:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006738:	e79a      	b.n	8006670 <HAL_TIM_PWM_Start+0x24>
 800673a:	2302      	movs	r3, #2
 800673c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006740:	e796      	b.n	8006670 <HAL_TIM_PWM_Start+0x24>
 8006742:	2302      	movs	r3, #2
 8006744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006748:	e792      	b.n	8006670 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800674a:	6899      	ldr	r1, [r3, #8]
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_TIM_PWM_Start+0x12c>)
 800674e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006750:	2a06      	cmp	r2, #6
 8006752:	d00a      	beq.n	800676a <HAL_TIM_PWM_Start+0x11e>
 8006754:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006758:	d009      	beq.n	800676e <HAL_TIM_PWM_Start+0x122>
      __HAL_TIM_ENABLE(htim);
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	f042 0201 	orr.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006762:	2000      	movs	r0, #0
 8006764:	e000      	b.n	8006768 <HAL_TIM_PWM_Start+0x11c>
    return HAL_ERROR;
 8006766:	2001      	movs	r0, #1
}
 8006768:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800676a:	2000      	movs	r0, #0
 800676c:	e7fc      	b.n	8006768 <HAL_TIM_PWM_Start+0x11c>
 800676e:	2000      	movs	r0, #0
 8006770:	e7fa      	b.n	8006768 <HAL_TIM_PWM_Start+0x11c>
 8006772:	bf00      	nop
 8006774:	40012c00 	.word	0x40012c00
 8006778:	00010007 	.word	0x00010007

0800677c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800677c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d02f      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8006784:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006786:	2301      	movs	r3, #1
 8006788:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	2302      	movs	r3, #2
 800678e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006792:	6802      	ldr	r2, [r0, #0]
 8006794:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006796:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006798:	4c13      	ldr	r4, [pc, #76]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800679a:	42a2      	cmp	r2, r4
 800679c:	d01d      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a2:	680c      	ldr	r4, [r1, #0]
 80067a4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a8:	6803      	ldr	r3, [r0, #0]
 80067aa:	4a0f      	ldr	r2, [pc, #60]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d006      	beq.n	80067be <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b4:	d003      	beq.n	80067be <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80067b6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d104      	bne.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067be:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067c2:	688a      	ldr	r2, [r1, #8]
 80067c4:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c6:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ce:	2300      	movs	r3, #0
 80067d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80067d4:	4618      	mov	r0, r3
}
 80067d6:	bc30      	pop	{r4, r5}
 80067d8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067de:	684c      	ldr	r4, [r1, #4]
 80067e0:	4323      	orrs	r3, r4
 80067e2:	e7dc      	b.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80067e4:	2002      	movs	r0, #2
}
 80067e6:	4770      	bx	lr
 80067e8:	40012c00 	.word	0x40012c00

080067ec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d03b      	beq.n	800686c <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 80067f4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80067f6:	2301      	movs	r3, #1
 80067f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067fc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006802:	688a      	ldr	r2, [r1, #8]
 8006804:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800680a:	684a      	ldr	r2, [r1, #4]
 800680c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800680e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006812:	680a      	ldr	r2, [r1, #0]
 8006814:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800681a:	690a      	ldr	r2, [r1, #16]
 800681c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800681e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006822:	694a      	ldr	r2, [r1, #20]
 8006824:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800682c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800682e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006832:	698a      	ldr	r2, [r1, #24]
 8006834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006838:	6802      	ldr	r2, [r0, #0]
 800683a:	4c0d      	ldr	r4, [pc, #52]	; (8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 800683c:	42a2      	cmp	r2, r4
 800683e:	d007      	beq.n	8006850 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006840:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006842:	2300      	movs	r3, #0
 8006844:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006848:	4618      	mov	r0, r3
}
 800684a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800684e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006850:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006854:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006856:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800685a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800685e:	69cc      	ldr	r4, [r1, #28]
 8006860:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006862:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006866:	6a09      	ldr	r1, [r1, #32]
 8006868:	430b      	orrs	r3, r1
 800686a:	e7e9      	b.n	8006840 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 800686c:	2002      	movs	r0, #2
}
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00

08006874 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006874:	4770      	bx	lr

08006876 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006876:	4770      	bx	lr

08006878 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006878:	4770      	bx	lr

0800687a <UART_EndTxTransfer>:
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800687a:	6802      	ldr	r2, [r0, #0]
 800687c:	6813      	ldr	r3, [r2, #0]
 800687e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006882:	6013      	str	r3, [r2, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006884:	2320      	movs	r3, #32
 8006886:	6743      	str	r3, [r0, #116]	; 0x74
}
 8006888:	4770      	bx	lr

0800688a <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688a:	6802      	ldr	r2, [r0, #0]
 800688c:	6813      	ldr	r3, [r2, #0]
 800688e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006892:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	6802      	ldr	r2, [r0, #0]
 8006896:	6893      	ldr	r3, [r2, #8]
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800689e:	2320      	movs	r3, #32
 80068a0:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	6603      	str	r3, [r0, #96]	; 0x60
}
 80068a6:	4770      	bx	lr

080068a8 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80068a8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d144      	bne.n	8006938 <HAL_UART_Receive_DMA+0x90>
{
 80068ae:	b510      	push	{r4, lr}
 80068b0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80068b2:	2900      	cmp	r1, #0
 80068b4:	d042      	beq.n	800693c <HAL_UART_Receive_DMA+0x94>
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	d042      	beq.n	8006940 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 80068ba:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d040      	beq.n	8006944 <HAL_UART_Receive_DMA+0x9c>
 80068c2:	2301      	movs	r3, #1
 80068c4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 80068c8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80068ca:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d2:	2322      	movs	r3, #34	; 0x22
 80068d4:	6783      	str	r3, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 80068d6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80068d8:	b1db      	cbz	r3, 8006912 <HAL_UART_Receive_DMA+0x6a>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068da:	491b      	ldr	r1, [pc, #108]	; (8006948 <HAL_UART_Receive_DMA+0xa0>)
 80068dc:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068de:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80068e0:	491a      	ldr	r1, [pc, #104]	; (800694c <HAL_UART_Receive_DMA+0xa4>)
 80068e2:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068e4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80068e6:	491a      	ldr	r1, [pc, #104]	; (8006950 <HAL_UART_Receive_DMA+0xa8>)
 80068e8:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmarx->XferAbortCallback = NULL;
 80068ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80068ec:	2100      	movs	r1, #0
 80068ee:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068f0:	6801      	ldr	r1, [r0, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80068f6:	3124      	adds	r1, #36	; 0x24
 80068f8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80068fa:	f7fc fff9 	bl	80038f0 <HAL_DMA_Start_IT>
 80068fe:	b140      	cbz	r0, 8006912 <HAL_UART_Receive_DMA+0x6a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006900:	2310      	movs	r3, #16
 8006902:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006904:	2300      	movs	r3, #0
 8006906:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 800690a:	2320      	movs	r3, #32
 800690c:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 800690e:	2001      	movs	r0, #1
 8006910:	e011      	b.n	8006936 <HAL_UART_Receive_DMA+0x8e>
    __HAL_UNLOCK(huart);
 8006912:	2000      	movs	r0, #0
 8006914:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	6893      	ldr	r3, [r2, #8]
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	6893      	ldr	r3, [r2, #8]
 8006930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006934:	6093      	str	r3, [r2, #8]
}
 8006936:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006938:	2002      	movs	r0, #2
}
 800693a:	4770      	bx	lr
      return HAL_ERROR;
 800693c:	2001      	movs	r0, #1
 800693e:	e7fa      	b.n	8006936 <HAL_UART_Receive_DMA+0x8e>
 8006940:	2001      	movs	r0, #1
 8006942:	e7f8      	b.n	8006936 <HAL_UART_Receive_DMA+0x8e>
    __HAL_LOCK(huart);
 8006944:	2002      	movs	r0, #2
 8006946:	e7f6      	b.n	8006936 <HAL_UART_Receive_DMA+0x8e>
 8006948:	08006973 	.word	0x08006973
 800694c:	080069b3 	.word	0x080069b3
 8006950:	080069bf 	.word	0x080069bf

08006954 <HAL_UART_TxCpltCallback>:
}
 8006954:	4770      	bx	lr

08006956 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006956:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006958:	6801      	ldr	r1, [r0, #0]
 800695a:	680a      	ldr	r2, [r1, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006960:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006962:	2220      	movs	r2, #32
 8006964:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006966:	2200      	movs	r2, #0
 8006968:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800696a:	f7ff fff3 	bl	8006954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800696e:	bd08      	pop	{r3, pc}

08006970 <HAL_UART_RxCpltCallback>:
}
 8006970:	4770      	bx	lr

08006972 <UART_DMAReceiveCplt>:
{
 8006972:	b508      	push	{r3, lr}
 8006974:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006976:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f013 0f20 	tst.w	r3, #32
 8006980:	d113      	bne.n	80069aa <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006988:	6802      	ldr	r2, [r0, #0]
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006992:	6802      	ldr	r2, [r0, #0]
 8006994:	6893      	ldr	r3, [r2, #8]
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699c:	6802      	ldr	r2, [r0, #0]
 800699e:	6893      	ldr	r3, [r2, #8]
 80069a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a4:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80069a6:	2320      	movs	r3, #32
 80069a8:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_RxCpltCallback(huart);
 80069aa:	f7ff ffe1 	bl	8006970 <HAL_UART_RxCpltCallback>
}
 80069ae:	bd08      	pop	{r3, pc}

080069b0 <HAL_UART_RxHalfCpltCallback>:
}
 80069b0:	4770      	bx	lr

080069b2 <UART_DMARxHalfCplt>:
{
 80069b2:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80069b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80069b6:	f7ff fffb 	bl	80069b0 <HAL_UART_RxHalfCpltCallback>
}
 80069ba:	bd08      	pop	{r3, pc}

080069bc <HAL_UART_ErrorCallback>:
}
 80069bc:	4770      	bx	lr

080069be <UART_DMAError>:
{
 80069be:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80069c2:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80069c4:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069ce:	d001      	beq.n	80069d4 <UART_DMAError+0x16>
 80069d0:	2a21      	cmp	r2, #33	; 0x21
 80069d2:	d00e      	beq.n	80069f2 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069dc:	d001      	beq.n	80069e2 <UART_DMAError+0x24>
 80069de:	2d22      	cmp	r5, #34	; 0x22
 80069e0:	d00e      	beq.n	8006a00 <UART_DMAError+0x42>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069e4:	f043 0310 	orr.w	r3, r3, #16
 80069e8:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80069ea:	4620      	mov	r0, r4
 80069ec:	f7ff ffe6 	bl	80069bc <HAL_UART_ErrorCallback>
}
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80069f8:	4620      	mov	r0, r4
 80069fa:	f7ff ff3e 	bl	800687a <UART_EndTxTransfer>
 80069fe:	e7e9      	b.n	80069d4 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006a06:	4620      	mov	r0, r4
 8006a08:	f7ff ff3f 	bl	800688a <UART_EndRxTransfer>
 8006a0c:	e7e9      	b.n	80069e2 <UART_DMAError+0x24>
	...

08006a10 <HAL_UART_IRQHandler>:
{
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a14:	6801      	ldr	r1, [r0, #0]
 8006a16:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a18:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a1a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a1c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006a20:	401a      	ands	r2, r3
 8006a22:	d105      	bne.n	8006a30 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a24:	f013 0f20 	tst.w	r3, #32
 8006a28:	d002      	beq.n	8006a30 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a2a:	f010 0f20 	tst.w	r0, #32
 8006a2e:	d11c      	bne.n	8006a6a <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8006a30:	b12a      	cbz	r2, 8006a3e <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a32:	f015 0201 	ands.w	r2, r5, #1
 8006a36:	d11e      	bne.n	8006a76 <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a38:	4e54      	ldr	r6, [pc, #336]	; (8006b8c <HAL_UART_IRQHandler+0x17c>)
 8006a3a:	4230      	tst	r0, r6
 8006a3c:	d11b      	bne.n	8006a76 <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a3e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006a42:	d003      	beq.n	8006a4c <HAL_UART_IRQHandler+0x3c>
 8006a44:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006a48:	f040 808e 	bne.w	8006b68 <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a50:	d003      	beq.n	8006a5a <HAL_UART_IRQHandler+0x4a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a52:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a56:	f040 808e 	bne.w	8006b76 <HAL_UART_IRQHandler+0x166>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a5e:	d003      	beq.n	8006a68 <HAL_UART_IRQHandler+0x58>
 8006a60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a64:	f040 808e 	bne.w	8006b84 <HAL_UART_IRQHandler+0x174>
}
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006a6a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0fb      	beq.n	8006a68 <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 8006a70:	4620      	mov	r0, r4
 8006a72:	4798      	blx	r3
      return;
 8006a74:	e7f8      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a76:	f013 0f01 	tst.w	r3, #1
 8006a7a:	d007      	beq.n	8006a8c <HAL_UART_IRQHandler+0x7c>
 8006a7c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006a80:	d004      	beq.n	8006a8c <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a82:	2501      	movs	r5, #1
 8006a84:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a86:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006a88:	4329      	orrs	r1, r5
 8006a8a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a8c:	f013 0f02 	tst.w	r3, #2
 8006a90:	d007      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x92>
 8006a92:	b132      	cbz	r2, 8006aa2 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a94:	6821      	ldr	r1, [r4, #0]
 8006a96:	2502      	movs	r5, #2
 8006a98:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a9a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006a9c:	f041 0104 	orr.w	r1, r1, #4
 8006aa0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aa2:	f013 0f04 	tst.w	r3, #4
 8006aa6:	d007      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xa8>
 8006aa8:	b132      	cbz	r2, 8006ab8 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aaa:	6821      	ldr	r1, [r4, #0]
 8006aac:	2504      	movs	r5, #4
 8006aae:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ab0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006ab2:	f041 0102 	orr.w	r1, r1, #2
 8006ab6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ab8:	f013 0f08 	tst.w	r3, #8
 8006abc:	d009      	beq.n	8006ad2 <HAL_UART_IRQHandler+0xc2>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006abe:	f010 0f20 	tst.w	r0, #32
 8006ac2:	d100      	bne.n	8006ac6 <HAL_UART_IRQHandler+0xb6>
 8006ac4:	b12a      	cbz	r2, 8006ad2 <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac6:	6822      	ldr	r2, [r4, #0]
 8006ac8:	2108      	movs	r1, #8
 8006aca:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006acc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ad2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006ad6:	d00a      	beq.n	8006aee <HAL_UART_IRQHandler+0xde>
 8006ad8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006adc:	d007      	beq.n	8006aee <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ae4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ae6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006ae8:	f042 0220 	orr.w	r2, r2, #32
 8006aec:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006af0:	2a00      	cmp	r2, #0
 8006af2:	d0b9      	beq.n	8006a68 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006af4:	f013 0f20 	tst.w	r3, #32
 8006af8:	d006      	beq.n	8006b08 <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006afa:	f010 0f20 	tst.w	r0, #32
 8006afe:	d003      	beq.n	8006b08 <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 8006b00:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006b02:	b10b      	cbz	r3, 8006b08 <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 8006b04:	4620      	mov	r0, r4
 8006b06:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006b08:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b12:	d102      	bne.n	8006b1a <HAL_UART_IRQHandler+0x10a>
 8006b14:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006b18:	d020      	beq.n	8006b5c <HAL_UART_IRQHandler+0x14c>
        UART_EndRxTransfer(huart);
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff feb5 	bl	800688a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006b28:	d014      	beq.n	8006b54 <HAL_UART_IRQHandler+0x144>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b30:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006b32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b34:	b153      	cbz	r3, 8006b4c <HAL_UART_IRQHandler+0x13c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <HAL_UART_IRQHandler+0x180>)
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b3a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006b3c:	f7fc ff13 	bl	8003966 <HAL_DMA_Abort_IT>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d091      	beq.n	8006a68 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b44:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006b46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b48:	4798      	blx	r3
 8006b4a:	e78d      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f7ff ff35 	bl	80069bc <HAL_UART_ErrorCallback>
 8006b52:	e789      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff ff31 	bl	80069bc <HAL_UART_ErrorCallback>
 8006b5a:	e785      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff ff2d 	bl	80069bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	67e3      	str	r3, [r4, #124]	; 0x7c
    return;
 8006b66:	e77f      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b6c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fa85 	bl	800707e <HAL_UARTEx_WakeupCallback>
    return;
 8006b74:	e778      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 8006b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f43f af75 	beq.w	8006a68 <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4798      	blx	r3
    return;
 8006b82:	e771      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7ff fee6 	bl	8006956 <UART_EndTransmit_IT>
    return;
 8006b8a:	e76d      	b.n	8006a68 <HAL_UART_IRQHandler+0x58>
 8006b8c:	04000120 	.word	0x04000120
 8006b90:	08006b95 	.word	0x08006b95

08006b94 <UART_DMAAbortOnError>:
{
 8006b94:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b96:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b9e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8006ba2:	f7ff ff0b 	bl	80069bc <HAL_UART_ErrorCallback>
}
 8006ba6:	bd08      	pop	{r3, pc}

08006ba8 <UART_SetConfig>:
{
 8006ba8:	b5d0      	push	{r4, r6, r7, lr}
 8006baa:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bac:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bae:	6883      	ldr	r3, [r0, #8]
 8006bb0:	6902      	ldr	r2, [r0, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	6942      	ldr	r2, [r0, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	69c2      	ldr	r2, [r0, #28]
 8006bba:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bbc:	6808      	ldr	r0, [r1, #0]
 8006bbe:	4a9a      	ldr	r2, [pc, #616]	; (8006e28 <UART_SetConfig+0x280>)
 8006bc0:	4002      	ands	r2, r0
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	6853      	ldr	r3, [r2, #4]
 8006bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006bce:	68e1      	ldr	r1, [r4, #12]
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bd4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	4b94      	ldr	r3, [pc, #592]	; (8006e2c <UART_SetConfig+0x284>)
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d001      	beq.n	8006be2 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006bde:	6a23      	ldr	r3, [r4, #32]
 8006be0:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be2:	6893      	ldr	r3, [r2, #8]
 8006be4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	4b90      	ldr	r3, [pc, #576]	; (8006e30 <UART_SetConfig+0x288>)
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d01f      	beq.n	8006c34 <UART_SetConfig+0x8c>
 8006bf4:	4b8f      	ldr	r3, [pc, #572]	; (8006e34 <UART_SetConfig+0x28c>)
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d030      	beq.n	8006c5c <UART_SetConfig+0xb4>
 8006bfa:	4b8f      	ldr	r3, [pc, #572]	; (8006e38 <UART_SetConfig+0x290>)
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d046      	beq.n	8006c8e <UART_SetConfig+0xe6>
 8006c00:	4b8a      	ldr	r3, [pc, #552]	; (8006e2c <UART_SetConfig+0x284>)
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d055      	beq.n	8006cb2 <UART_SetConfig+0x10a>
 8006c06:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c08:	4988      	ldr	r1, [pc, #544]	; (8006e2c <UART_SetConfig+0x284>)
 8006c0a:	428a      	cmp	r2, r1
 8006c0c:	d07a      	beq.n	8006d04 <UART_SetConfig+0x15c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0e:	69e0      	ldr	r0, [r4, #28]
 8006c10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c14:	f000 80a5 	beq.w	8006d62 <UART_SetConfig+0x1ba>
    switch (clocksource)
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	f200 80fb 	bhi.w	8006e14 <UART_SetConfig+0x26c>
 8006c1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006c22:	00cd      	.short	0x00cd
 8006c24:	00cb00e0 	.word	0x00cb00e0
 8006c28:	00e300f9 	.word	0x00e300f9
 8006c2c:	00f900f9 	.word	0x00f900f9
 8006c30:	00e600f9 	.word	0x00e600f9
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c34:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d809      	bhi.n	8006c58 <UART_SetConfig+0xb0>
 8006c44:	e8df f003 	tbb	[pc, r3]
 8006c48:	064a0402 	.word	0x064a0402
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e7db      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c50:	2304      	movs	r3, #4
 8006c52:	e7d9      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c54:	2308      	movs	r3, #8
 8006c56:	e7d7      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	e7d5      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c5c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c64:	f003 030c 	and.w	r3, r3, #12
 8006c68:	2b0c      	cmp	r3, #12
 8006c6a:	d80e      	bhi.n	8006c8a <UART_SetConfig+0xe2>
 8006c6c:	e8df f003 	tbb	[pc, r3]
 8006c70:	0d0d0d07 	.word	0x0d0d0d07
 8006c74:	0d0d0d09 	.word	0x0d0d0d09
 8006c78:	0d0d0d38 	.word	0x0d0d0d38
 8006c7c:	0b          	.byte	0x0b
 8006c7d:	00          	.byte	0x00
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e7c2      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c82:	2304      	movs	r3, #4
 8006c84:	e7c0      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c86:	2308      	movs	r3, #8
 8006c88:	e7be      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	e7bc      	b.n	8006c08 <UART_SetConfig+0x60>
 8006c8e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d022      	beq.n	8006ce4 <UART_SetConfig+0x13c>
 8006c9e:	d804      	bhi.n	8006caa <UART_SetConfig+0x102>
 8006ca0:	b313      	cbz	r3, 8006ce8 <UART_SetConfig+0x140>
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d122      	bne.n	8006cec <UART_SetConfig+0x144>
 8006ca6:	2304      	movs	r3, #4
 8006ca8:	e7ae      	b.n	8006c08 <UART_SetConfig+0x60>
 8006caa:	2b30      	cmp	r3, #48	; 0x30
 8006cac:	d120      	bne.n	8006cf0 <UART_SetConfig+0x148>
 8006cae:	2308      	movs	r3, #8
 8006cb0:	e7aa      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cb2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8006cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc2:	d017      	beq.n	8006cf4 <UART_SetConfig+0x14c>
 8006cc4:	d805      	bhi.n	8006cd2 <UART_SetConfig+0x12a>
 8006cc6:	b1bb      	cbz	r3, 8006cf8 <UART_SetConfig+0x150>
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ccc:	d116      	bne.n	8006cfc <UART_SetConfig+0x154>
 8006cce:	2304      	movs	r3, #4
 8006cd0:	e79a      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cd6:	d113      	bne.n	8006d00 <UART_SetConfig+0x158>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	e795      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e793      	b.n	8006c08 <UART_SetConfig+0x60>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e791      	b.n	8006c08 <UART_SetConfig+0x60>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e78f      	b.n	8006c08 <UART_SetConfig+0x60>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e78d      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cec:	2310      	movs	r3, #16
 8006cee:	e78b      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	e789      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e787      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e785      	b.n	8006c08 <UART_SetConfig+0x60>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	e783      	b.n	8006c08 <UART_SetConfig+0x60>
 8006d00:	2310      	movs	r3, #16
 8006d02:	e781      	b.n	8006c08 <UART_SetConfig+0x60>
    switch (clocksource)
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d875      	bhi.n	8006df4 <UART_SetConfig+0x24c>
 8006d08:	e8df f003 	tbb	[pc, r3]
 8006d0c:	74297408 	.word	0x74297408
 8006d10:	74747426 	.word	0x74747426
 8006d14:	05          	.byte	0x05
 8006d15:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006d1a:	e003      	b.n	8006d24 <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d1c:	f7fe ffb6 	bl	8005c8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d069      	beq.n	8006df8 <UART_SetConfig+0x250>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d24:	6862      	ldr	r2, [r4, #4]
 8006d26:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006d2a:	4283      	cmp	r3, r0
 8006d2c:	d866      	bhi.n	8006dfc <UART_SetConfig+0x254>
 8006d2e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006d32:	d865      	bhi.n	8006e00 <UART_SetConfig+0x258>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006d34:	2300      	movs	r3, #0
 8006d36:	0e07      	lsrs	r7, r0, #24
 8006d38:	0206      	lsls	r6, r0, #8
 8006d3a:	0850      	lsrs	r0, r2, #1
 8006d3c:	1830      	adds	r0, r6, r0
 8006d3e:	f147 0100 	adc.w	r1, r7, #0
 8006d42:	f7f9 fa45 	bl	80001d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d46:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <UART_SetConfig+0x294>)
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d859      	bhi.n	8006e04 <UART_SetConfig+0x25c>
          huart->Instance->BRR = usartdiv;
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	60d8      	str	r0, [r3, #12]
 8006d54:	2000      	movs	r0, #0
 8006d56:	e062      	b.n	8006e1e <UART_SetConfig+0x276>
        pclk = HAL_RCC_GetSysClockFreq();
 8006d58:	f7fe fb1c 	bl	8005394 <HAL_RCC_GetSysClockFreq>
        break;
 8006d5c:	e7e0      	b.n	8006d20 <UART_SetConfig+0x178>
        pclk = (uint32_t) HSI_VALUE;
 8006d5e:	4838      	ldr	r0, [pc, #224]	; (8006e40 <UART_SetConfig+0x298>)
 8006d60:	e7e0      	b.n	8006d24 <UART_SetConfig+0x17c>
    switch (clocksource)
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d850      	bhi.n	8006e08 <UART_SetConfig+0x260>
 8006d66:	e8df f003 	tbb	[pc, r3]
 8006d6a:	2107      	.short	0x2107
 8006d6c:	4f244f05 	.word	0x4f244f05
 8006d70:	4f4f      	.short	0x4f4f
 8006d72:	0b          	.byte	0x0b
 8006d73:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d74:	4832      	ldr	r0, [pc, #200]	; (8006e40 <UART_SetConfig+0x298>)
 8006d76:	e003      	b.n	8006d80 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d78:	f7fe ff88 	bl	8005c8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d045      	beq.n	8006e0c <UART_SetConfig+0x264>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d80:	6862      	ldr	r2, [r4, #4]
 8006d82:	0853      	lsrs	r3, r2, #1
 8006d84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006d88:	fbb0 f0f2 	udiv	r0, r0, r2
 8006d8c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d8e:	f1a0 0210 	sub.w	r2, r0, #16
 8006d92:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d83a      	bhi.n	8006e10 <UART_SetConfig+0x268>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d9a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d9e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006da2:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	60d8      	str	r0, [r3, #12]
 8006da8:	2000      	movs	r0, #0
 8006daa:	e038      	b.n	8006e1e <UART_SetConfig+0x276>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dac:	f7fe ff80 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
        break;
 8006db0:	e7e4      	b.n	8006d7c <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8006db2:	f7fe faef 	bl	8005394 <HAL_RCC_GetSysClockFreq>
        break;
 8006db6:	e7e1      	b.n	8006d7c <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db8:	4821      	ldr	r0, [pc, #132]	; (8006e40 <UART_SetConfig+0x298>)
 8006dba:	e002      	b.n	8006dc2 <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fe ff66 	bl	8005c8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006dc0:	b350      	cbz	r0, 8006e18 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006dc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8006dcc:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dce:	f1a0 0210 	sub.w	r2, r0, #16
 8006dd2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d820      	bhi.n	8006e1c <UART_SetConfig+0x274>
        huart->Instance->BRR = usartdiv;
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	60d8      	str	r0, [r3, #12]
 8006dde:	2000      	movs	r0, #0
 8006de0:	e01d      	b.n	8006e1e <UART_SetConfig+0x276>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de2:	f7fe ff65 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
        break;
 8006de6:	e7eb      	b.n	8006dc0 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8006de8:	f7fe fad4 	bl	8005394 <HAL_RCC_GetSysClockFreq>
        break;
 8006dec:	e7e8      	b.n	8006dc0 <UART_SetConfig+0x218>
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006df2:	e7e6      	b.n	8006dc2 <UART_SetConfig+0x21a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006df4:	2001      	movs	r0, #1
 8006df6:	e012      	b.n	8006e1e <UART_SetConfig+0x276>
 8006df8:	2000      	movs	r0, #0
 8006dfa:	e010      	b.n	8006e1e <UART_SetConfig+0x276>
        ret = HAL_ERROR;
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	e00e      	b.n	8006e1e <UART_SetConfig+0x276>
 8006e00:	2001      	movs	r0, #1
 8006e02:	e00c      	b.n	8006e1e <UART_SetConfig+0x276>
          ret = HAL_ERROR;
 8006e04:	2001      	movs	r0, #1
 8006e06:	e00a      	b.n	8006e1e <UART_SetConfig+0x276>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e08:	2001      	movs	r0, #1
 8006e0a:	e008      	b.n	8006e1e <UART_SetConfig+0x276>
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	e006      	b.n	8006e1e <UART_SetConfig+0x276>
        ret = HAL_ERROR;
 8006e10:	2001      	movs	r0, #1
 8006e12:	e004      	b.n	8006e1e <UART_SetConfig+0x276>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e14:	2001      	movs	r0, #1
 8006e16:	e002      	b.n	8006e1e <UART_SetConfig+0x276>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e000      	b.n	8006e1e <UART_SetConfig+0x276>
        ret = HAL_ERROR;
 8006e1c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8006e22:	6663      	str	r3, [r4, #100]	; 0x64
}
 8006e24:	bdd0      	pop	{r4, r6, r7, pc}
 8006e26:	bf00      	nop
 8006e28:	efff69f3 	.word	0xefff69f3
 8006e2c:	40008000 	.word	0x40008000
 8006e30:	40013800 	.word	0x40013800
 8006e34:	40004400 	.word	0x40004400
 8006e38:	40004800 	.word	0x40004800
 8006e3c:	000ffcff 	.word	0x000ffcff
 8006e40:	00f42400 	.word	0x00f42400

08006e44 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e46:	f013 0f01 	tst.w	r3, #1
 8006e4a:	d006      	beq.n	8006e5a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e4c:	6802      	ldr	r2, [r0, #0]
 8006e4e:	6853      	ldr	r3, [r2, #4]
 8006e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e54:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e5c:	f013 0f02 	tst.w	r3, #2
 8006e60:	d006      	beq.n	8006e70 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e62:	6802      	ldr	r2, [r0, #0]
 8006e64:	6853      	ldr	r3, [r2, #4]
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e6a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e72:	f013 0f04 	tst.w	r3, #4
 8006e76:	d006      	beq.n	8006e86 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e78:	6802      	ldr	r2, [r0, #0]
 8006e7a:	6853      	ldr	r3, [r2, #4]
 8006e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e80:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006e82:	430b      	orrs	r3, r1
 8006e84:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e88:	f013 0f08 	tst.w	r3, #8
 8006e8c:	d006      	beq.n	8006e9c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e8e:	6802      	ldr	r2, [r0, #0]
 8006e90:	6853      	ldr	r3, [r2, #4]
 8006e92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e96:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e9e:	f013 0f10 	tst.w	r3, #16
 8006ea2:	d006      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea4:	6802      	ldr	r2, [r0, #0]
 8006ea6:	6893      	ldr	r3, [r2, #8]
 8006ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006eb4:	f013 0f20 	tst.w	r3, #32
 8006eb8:	d006      	beq.n	8006ec8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eba:	6802      	ldr	r2, [r0, #0]
 8006ebc:	6893      	ldr	r3, [r2, #8]
 8006ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ec2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006eca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed0:	6802      	ldr	r2, [r0, #0]
 8006ed2:	6853      	ldr	r3, [r2, #4]
 8006ed4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ed8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006eda:	430b      	orrs	r3, r1
 8006edc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ede:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee4:	d00b      	beq.n	8006efe <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ee6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ee8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006eec:	d006      	beq.n	8006efc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eee:	6802      	ldr	r2, [r0, #0]
 8006ef0:	6853      	ldr	r3, [r2, #4]
 8006ef2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006ef6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6053      	str	r3, [r2, #4]
}
 8006efc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006efe:	6802      	ldr	r2, [r0, #0]
 8006f00:	6853      	ldr	r3, [r2, #4]
 8006f02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006f06:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	6053      	str	r3, [r2, #4]
 8006f0c:	e7eb      	b.n	8006ee6 <UART_AdvFeatureConfig+0xa2>

08006f0e <UART_WaitOnFlagUntilTimeout>:
{
 8006f0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f12:	4605      	mov	r5, r0
 8006f14:	460f      	mov	r7, r1
 8006f16:	4616      	mov	r6, r2
 8006f18:	4699      	mov	r9, r3
 8006f1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1e:	682c      	ldr	r4, [r5, #0]
 8006f20:	69e4      	ldr	r4, [r4, #28]
 8006f22:	ea37 0304 	bics.w	r3, r7, r4
 8006f26:	bf0c      	ite	eq
 8006f28:	2401      	moveq	r4, #1
 8006f2a:	2400      	movne	r4, #0
 8006f2c:	42b4      	cmp	r4, r6
 8006f2e:	d13c      	bne.n	8006faa <UART_WaitOnFlagUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8006f30:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006f34:	d0f3      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f36:	f7fb fed7 	bl	8002ce8 <HAL_GetTick>
 8006f3a:	eba0 0009 	sub.w	r0, r0, r9
 8006f3e:	4540      	cmp	r0, r8
 8006f40:	d821      	bhi.n	8006f86 <UART_WaitOnFlagUntilTimeout+0x78>
 8006f42:	f1b8 0f00 	cmp.w	r8, #0
 8006f46:	d01e      	beq.n	8006f86 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f012 0f04 	tst.w	r2, #4
 8006f50:	d0e5      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006f58:	d0e1      	beq.n	8006f1e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f5e:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f60:	682a      	ldr	r2, [r5, #0]
 8006f62:	6813      	ldr	r3, [r2, #0]
 8006f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f68:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6a:	682a      	ldr	r2, [r5, #0]
 8006f6c:	6893      	ldr	r3, [r2, #8]
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006f74:	2320      	movs	r3, #32
 8006f76:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006f78:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f7a:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          return HAL_TIMEOUT;
 8006f82:	2003      	movs	r0, #3
 8006f84:	e012      	b.n	8006fac <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f86:	682a      	ldr	r2, [r5, #0]
 8006f88:	6813      	ldr	r3, [r2, #0]
 8006f8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f8e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f90:	682a      	ldr	r2, [r5, #0]
 8006f92:	6893      	ldr	r3, [r2, #8]
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006f9a:	2320      	movs	r3, #32
 8006f9c:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8006fa6:	2003      	movs	r0, #3
 8006fa8:	e000      	b.n	8006fac <UART_WaitOnFlagUntilTimeout+0x9e>
  return HAL_OK;
 8006faa:	2000      	movs	r0, #0
}
 8006fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006fb0 <UART_CheckIdleState>:
{
 8006fb0:	b530      	push	{r4, r5, lr}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006fba:	f7fb fe95 	bl	8002ce8 <HAL_GetTick>
 8006fbe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f013 0f08 	tst.w	r3, #8
 8006fc8:	d10c      	bne.n	8006fe4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f013 0f04 	tst.w	r3, #4
 8006fd2:	d115      	bne.n	8007000 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8006fe0:	b003      	add	sp, #12
 8006fe2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	4603      	mov	r3, r0
 8006fec:	2200      	movs	r2, #0
 8006fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7ff ff8b 	bl	8006f0e <UART_WaitOnFlagUntilTimeout>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d0e6      	beq.n	8006fca <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8006ffc:	2003      	movs	r0, #3
 8006ffe:	e7ef      	b.n	8006fe0 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	462b      	mov	r3, r5
 8007008:	2200      	movs	r2, #0
 800700a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800700e:	4620      	mov	r0, r4
 8007010:	f7ff ff7d 	bl	8006f0e <UART_WaitOnFlagUntilTimeout>
 8007014:	2800      	cmp	r0, #0
 8007016:	d0dd      	beq.n	8006fd4 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8007018:	2003      	movs	r0, #3
 800701a:	e7e1      	b.n	8006fe0 <UART_CheckIdleState+0x30>

0800701c <HAL_UART_Init>:
  if (huart == NULL)
 800701c:	b368      	cbz	r0, 800707a <HAL_UART_Init+0x5e>
{
 800701e:	b510      	push	{r4, lr}
 8007020:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007022:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007024:	b303      	cbz	r3, 8007068 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007026:	2324      	movs	r3, #36	; 0x24
 8007028:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	6813      	ldr	r3, [r2, #0]
 800702e:	f023 0301 	bic.w	r3, r3, #1
 8007032:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007034:	4620      	mov	r0, r4
 8007036:	f7ff fdb7 	bl	8006ba8 <UART_SetConfig>
 800703a:	2801      	cmp	r0, #1
 800703c:	d013      	beq.n	8007066 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800703e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007040:	b9bb      	cbnz	r3, 8007072 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	6853      	ldr	r3, [r2, #4]
 8007046:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800704a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	6893      	ldr	r3, [r2, #8]
 8007050:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007054:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	6813      	ldr	r3, [r2, #0]
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007060:	4620      	mov	r0, r4
 8007062:	f7ff ffa5 	bl	8006fb0 <UART_CheckIdleState>
}
 8007066:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007068:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800706c:	f7fb fda0 	bl	8002bb0 <HAL_UART_MspInit>
 8007070:	e7d9      	b.n	8007026 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8007072:	4620      	mov	r0, r4
 8007074:	f7ff fee6 	bl	8006e44 <UART_AdvFeatureConfig>
 8007078:	e7e3      	b.n	8007042 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800707a:	2001      	movs	r0, #1
}
 800707c:	4770      	bx	lr

0800707e <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800707e:	4770      	bx	lr

08007080 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007080:	b084      	sub	sp, #16
 8007082:	a801      	add	r0, sp, #4
 8007084:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8007088:	2000      	movs	r0, #0
 800708a:	b004      	add	sp, #16
 800708c:	4770      	bx	lr

0800708e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800708e:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007090:	2000      	movs	r0, #0
 8007092:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007096:	f64b 7280 	movw	r2, #49024	; 0xbf80
 800709a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800709e:	4770      	bx	lr

080070a0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070a0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80070a4:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80070a8:	045b      	lsls	r3, r3, #17
 80070aa:	0c5b      	lsrs	r3, r3, #17
 80070ac:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80070b0:	2000      	movs	r0, #0
 80070b2:	4770      	bx	lr

080070b4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80070b4:	2000      	movs	r0, #0
 80070b6:	4770      	bx	lr

080070b8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070b8:	b084      	sub	sp, #16
 80070ba:	b410      	push	{r4}
 80070bc:	4604      	mov	r4, r0
 80070be:	a802      	add	r0, sp, #8
 80070c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80070ca:	2000      	movs	r0, #0
 80070cc:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80070d0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070d4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80070d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070dc:	b004      	add	sp, #16
 80070de:	4770      	bx	lr

080070e0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070e0:	b430      	push	{r4, r5}
 80070e2:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070e4:	780a      	ldrb	r2, [r1, #0]
 80070e6:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80070ea:	b2a4      	uxth	r4, r4
 80070ec:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80070f0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80070f4:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 80070f6:	78c8      	ldrb	r0, [r1, #3]
 80070f8:	2803      	cmp	r0, #3
 80070fa:	d85b      	bhi.n	80071b4 <USB_ActivateEndpoint+0xd4>
 80070fc:	e8df f000 	tbb	[pc, r0]
 8007100:	5202564f 	.word	0x5202564f
 8007104:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007106:	f248 0580 	movw	r5, #32896	; 0x8080
 800710a:	432c      	orrs	r4, r5
 800710c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007110:	780c      	ldrb	r4, [r1, #0]
 8007112:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007116:	b212      	sxth	r2, r2
 8007118:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800711c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007120:	4322      	orrs	r2, r4
 8007122:	b292      	uxth	r2, r2
 8007124:	432a      	orrs	r2, r5
 8007126:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 800712a:	7b0a      	ldrb	r2, [r1, #12]
 800712c:	2a00      	cmp	r2, #0
 800712e:	f040 80b6 	bne.w	800729e <USB_ActivateEndpoint+0x1be>
  {
    if (ep->is_in != 0U)
 8007132:	784a      	ldrb	r2, [r1, #1]
 8007134:	2a00      	cmp	r2, #0
 8007136:	d04e      	beq.n	80071d6 <USB_ActivateEndpoint+0xf6>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007138:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800713c:	fa13 f282 	uxtah	r2, r3, r2
 8007140:	780c      	ldrb	r4, [r1, #0]
 8007142:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007146:	88cc      	ldrh	r4, [r1, #6]
 8007148:	0864      	lsrs	r4, r4, #1
 800714a:	0064      	lsls	r4, r4, #1
 800714c:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007150:	780c      	ldrb	r4, [r1, #0]
 8007152:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007156:	f012 0f40 	tst.w	r2, #64	; 0x40
 800715a:	d00c      	beq.n	8007176 <USB_ActivateEndpoint+0x96>
 800715c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007160:	b292      	uxth	r2, r2
 8007162:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007166:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800716a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800716e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007172:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007176:	78ca      	ldrb	r2, [r1, #3]
 8007178:	2a01      	cmp	r2, #1
 800717a:	d01d      	beq.n	80071b8 <USB_ActivateEndpoint+0xd8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800717c:	7809      	ldrb	r1, [r1, #0]
 800717e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007182:	b292      	uxth	r2, r2
 8007184:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718c:	f082 0220 	eor.w	r2, r2, #32
 8007190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007198:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800719c:	e064      	b.n	8007268 <USB_ActivateEndpoint+0x188>
      wEpRegVal |= USB_EP_CONTROL;
 800719e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      break;
 80071a2:	e7b0      	b.n	8007106 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80071a4:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80071a8:	2000      	movs	r0, #0
      break;
 80071aa:	e7ac      	b.n	8007106 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80071ac:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80071b0:	2000      	movs	r0, #0
      break;
 80071b2:	e7a8      	b.n	8007106 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 80071b4:	2001      	movs	r0, #1
 80071b6:	e7a6      	b.n	8007106 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071b8:	7809      	ldrb	r1, [r1, #0]
 80071ba:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80071be:	b292      	uxth	r2, r2
 80071c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80071c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071d0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80071d4:	e048      	b.n	8007268 <USB_ActivateEndpoint+0x188>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071d6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80071da:	fa13 f282 	uxtah	r2, r3, r2
 80071de:	780c      	ldrb	r4, [r1, #0]
 80071e0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80071e4:	88cc      	ldrh	r4, [r1, #6]
 80071e6:	0864      	lsrs	r4, r4, #1
 80071e8:	0064      	lsls	r4, r4, #1
 80071ea:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80071ee:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80071f2:	fa13 f282 	uxtah	r2, r3, r2
 80071f6:	780c      	ldrb	r4, [r1, #0]
 80071f8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80071fc:	690c      	ldr	r4, [r1, #16]
 80071fe:	bbac      	cbnz	r4, 800726c <USB_ActivateEndpoint+0x18c>
 8007200:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8007204:	b2a4      	uxth	r4, r4
 8007206:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800720a:	b2a4      	uxth	r4, r4
 800720c:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8007210:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8007214:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007218:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800721c:	b2a4      	uxth	r4, r4
 800721e:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007222:	780c      	ldrb	r4, [r1, #0]
 8007224:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007228:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800722c:	d00c      	beq.n	8007248 <USB_ActivateEndpoint+0x168>
 800722e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007232:	b292      	uxth	r2, r2
 8007234:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007238:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800723c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007244:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007248:	7809      	ldrb	r1, [r1, #0]
 800724a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800724e:	b292      	uxth	r2, r2
 8007250:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007254:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007258:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800725c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007264:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8007268:	bc30      	pop	{r4, r5}
 800726a:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800726c:	2c3e      	cmp	r4, #62	; 0x3e
 800726e:	d809      	bhi.n	8007284 <USB_ActivateEndpoint+0x1a4>
 8007270:	0865      	lsrs	r5, r4, #1
 8007272:	f014 0f01 	tst.w	r4, #1
 8007276:	d000      	beq.n	800727a <USB_ActivateEndpoint+0x19a>
 8007278:	3501      	adds	r5, #1
 800727a:	02ad      	lsls	r5, r5, #10
 800727c:	b2ad      	uxth	r5, r5
 800727e:	f8a2 5406 	strh.w	r5, [r2, #1030]	; 0x406
 8007282:	e7ce      	b.n	8007222 <USB_ActivateEndpoint+0x142>
 8007284:	0965      	lsrs	r5, r4, #5
 8007286:	f014 0f1f 	tst.w	r4, #31
 800728a:	d100      	bne.n	800728e <USB_ActivateEndpoint+0x1ae>
 800728c:	3d01      	subs	r5, #1
 800728e:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8007292:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007296:	b2a4      	uxth	r4, r4
 8007298:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800729c:	e7c1      	b.n	8007222 <USB_ActivateEndpoint+0x142>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800729e:	780c      	ldrb	r4, [r1, #0]
 80072a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80072a4:	b292      	uxth	r2, r2
 80072a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80072aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072ae:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80072b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80072ba:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80072be:	fa13 f282 	uxtah	r2, r3, r2
 80072c2:	780c      	ldrb	r4, [r1, #0]
 80072c4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80072c8:	890c      	ldrh	r4, [r1, #8]
 80072ca:	0864      	lsrs	r4, r4, #1
 80072cc:	0064      	lsls	r4, r4, #1
 80072ce:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 80072d2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80072d6:	fa13 f282 	uxtah	r2, r3, r2
 80072da:	780c      	ldrb	r4, [r1, #0]
 80072dc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80072e0:	894c      	ldrh	r4, [r1, #10]
 80072e2:	0864      	lsrs	r4, r4, #1
 80072e4:	0064      	lsls	r4, r4, #1
 80072e6:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 80072ea:	784a      	ldrb	r2, [r1, #1]
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	d140      	bne.n	8007372 <USB_ActivateEndpoint+0x292>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072f0:	780c      	ldrb	r4, [r1, #0]
 80072f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80072f6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80072fa:	d00c      	beq.n	8007316 <USB_ActivateEndpoint+0x236>
 80072fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007300:	b292      	uxth	r2, r2
 8007302:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007306:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800730a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800730e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007312:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007316:	780c      	ldrb	r4, [r1, #0]
 8007318:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800731c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007320:	d00c      	beq.n	800733c <USB_ActivateEndpoint+0x25c>
 8007322:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007326:	b292      	uxth	r2, r2
 8007328:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800732c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007334:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007338:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800733c:	780d      	ldrb	r5, [r1, #0]
 800733e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8007342:	b292      	uxth	r2, r2
 8007344:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800734c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8007350:	f248 0480 	movw	r4, #32896	; 0x8080
 8007354:	4322      	orrs	r2, r4
 8007356:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800735a:	7809      	ldrb	r1, [r1, #0]
 800735c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007360:	b292      	uxth	r2, r2
 8007362:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736a:	4322      	orrs	r2, r4
 800736c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007370:	e77a      	b.n	8007268 <USB_ActivateEndpoint+0x188>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007372:	780c      	ldrb	r4, [r1, #0]
 8007374:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007378:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800737c:	d00c      	beq.n	8007398 <USB_ActivateEndpoint+0x2b8>
 800737e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007382:	b292      	uxth	r2, r2
 8007384:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007388:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800738c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007394:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007398:	780c      	ldrb	r4, [r1, #0]
 800739a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800739e:	f012 0f40 	tst.w	r2, #64	; 0x40
 80073a2:	d00c      	beq.n	80073be <USB_ActivateEndpoint+0x2de>
 80073a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80073a8:	b292      	uxth	r2, r2
 80073aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80073ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80073b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073b6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80073ba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80073be:	78ca      	ldrb	r2, [r1, #3]
 80073c0:	2a01      	cmp	r2, #1
 80073c2:	d01e      	beq.n	8007402 <USB_ActivateEndpoint+0x322>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073c4:	780c      	ldrb	r4, [r1, #0]
 80073c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80073ca:	b292      	uxth	r2, r2
 80073cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80073d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d4:	f082 0220 	eor.w	r2, r2, #32
 80073d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073e4:	7809      	ldrb	r1, [r1, #0]
 80073e6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80073ea:	b292      	uxth	r2, r2
 80073ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80073f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073fc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007400:	e732      	b.n	8007268 <USB_ActivateEndpoint+0x188>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007402:	780c      	ldrb	r4, [r1, #0]
 8007404:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007408:	b292      	uxth	r2, r2
 800740a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800740e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800741a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800741e:	e7e1      	b.n	80073e4 <USB_ActivateEndpoint+0x304>

08007420 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007420:	7b0b      	ldrb	r3, [r1, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d146      	bne.n	80074b4 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8007426:	784b      	ldrb	r3, [r1, #1]
 8007428:	b313      	cbz	r3, 8007470 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800742a:	780a      	ldrb	r2, [r1, #0]
 800742c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007430:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007434:	d00c      	beq.n	8007450 <USB_DeactivateEndpoint+0x30>
 8007436:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007448:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800744c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007450:	780a      	ldrb	r2, [r1, #0]
 8007452:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007468:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800746c:	2000      	movs	r0, #0
 800746e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007470:	780a      	ldrb	r2, [r1, #0]
 8007472:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007476:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800747a:	d00c      	beq.n	8007496 <USB_DeactivateEndpoint+0x76>
 800747c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800748e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007492:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007496:	780a      	ldrb	r2, [r1, #0]
 8007498:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800749c:	b29b      	uxth	r3, r3
 800749e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80074b2:	e7db      	b.n	800746c <USB_DeactivateEndpoint+0x4c>
{
 80074b4:	b410      	push	{r4}
    if (ep->is_in == 0U)
 80074b6:	784b      	ldrb	r3, [r1, #1]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d14f      	bne.n	800755c <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074bc:	780a      	ldrb	r2, [r1, #0]
 80074be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80074c2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80074c6:	d00c      	beq.n	80074e2 <USB_DeactivateEndpoint+0xc2>
 80074c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e2:	780a      	ldrb	r2, [r1, #0]
 80074e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80074e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074ec:	d00c      	beq.n	8007508 <USB_DeactivateEndpoint+0xe8>
 80074ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007504:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8007508:	780a      	ldrb	r2, [r1, #0]
 800750a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007520:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007524:	780b      	ldrb	r3, [r1, #0]
 8007526:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800752a:	b292      	uxth	r2, r2
 800752c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007530:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007534:	f248 0480 	movw	r4, #32896	; 0x8080
 8007538:	4322      	orrs	r2, r4
 800753a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800753e:	780a      	ldrb	r2, [r1, #0]
 8007540:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007544:	b29b      	uxth	r3, r3
 8007546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800754e:	4323      	orrs	r3, r4
 8007550:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8007554:	2000      	movs	r0, #0
 8007556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800755a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800755c:	780a      	ldrb	r2, [r1, #0]
 800755e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007562:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007566:	d00c      	beq.n	8007582 <USB_DeactivateEndpoint+0x162>
 8007568:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800756c:	b29b      	uxth	r3, r3
 800756e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800757a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007582:	780a      	ldrb	r2, [r1, #0]
 8007584:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007588:	f013 0f40 	tst.w	r3, #64	; 0x40
 800758c:	d00c      	beq.n	80075a8 <USB_DeactivateEndpoint+0x188>
 800758e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80075a8:	780a      	ldrb	r2, [r1, #0]
 80075aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075c4:	780b      	ldrb	r3, [r1, #0]
 80075c6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80075ca:	b292      	uxth	r2, r2
 80075cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80075d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d4:	f248 0480 	movw	r4, #32896	; 0x8080
 80075d8:	4322      	orrs	r2, r4
 80075da:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075de:	780a      	ldrb	r2, [r1, #0]
 80075e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ee:	4323      	orrs	r3, r4
 80075f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80075f4:	e7ae      	b.n	8007554 <USB_DeactivateEndpoint+0x134>

080075f6 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80075f6:	784b      	ldrb	r3, [r1, #1]
 80075f8:	b18b      	cbz	r3, 800761e <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075fa:	780a      	ldrb	r2, [r1, #0]
 80075fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760a:	f083 0310 	eor.w	r3, r3, #16
 800760e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007616:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800761a:	2000      	movs	r0, #0
 800761c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800761e:	780a      	ldrb	r2, [r1, #0]
 8007620:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800763e:	e7ec      	b.n	800761a <USB_EPSetStall+0x24>

08007640 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007640:	7b0b      	ldrb	r3, [r1, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d14b      	bne.n	80076de <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8007646:	784b      	ldrb	r3, [r1, #1]
 8007648:	b333      	cbz	r3, 8007698 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800764a:	780a      	ldrb	r2, [r1, #0]
 800764c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007650:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007654:	d00c      	beq.n	8007670 <USB_EPClearStall+0x30>
 8007656:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800766c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007670:	78cb      	ldrb	r3, [r1, #3]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d033      	beq.n	80076de <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007676:	780a      	ldrb	r2, [r1, #0]
 8007678:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800767c:	b29b      	uxth	r3, r3
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007686:	f083 0320 	eor.w	r3, r3, #32
 800768a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007692:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007696:	e022      	b.n	80076de <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007698:	780a      	ldrb	r2, [r1, #0]
 800769a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800769e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80076a2:	d00c      	beq.n	80076be <USB_EPClearStall+0x7e>
 80076a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076be:	780a      	ldrb	r2, [r1, #0]
 80076c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ce:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80076d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80076de:	2000      	movs	r0, #0
 80076e0:	4770      	bx	lr

080076e2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80076e2:	b911      	cbnz	r1, 80076ea <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80076ea:	2000      	movs	r0, #0
 80076ec:	4770      	bx	lr

080076ee <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80076ee:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80076f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8007700:	2000      	movs	r0, #0
 8007702:	4770      	bx	lr

08007704 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007704:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8007708:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800770c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8007710:	2000      	movs	r0, #0
 8007712:	4770      	bx	lr

08007714 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007714:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8007718:	b280      	uxth	r0, r0
 800771a:	4770      	bx	lr

0800771c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800771c:	2000      	movs	r0, #0
 800771e:	4770      	bx	lr

08007720 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007720:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007722:	1c5c      	adds	r4, r3, #1
 8007724:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007726:	4402      	add	r2, r0
 8007728:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800772c:	b144      	cbz	r4, 8007740 <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 800772e:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007730:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8007732:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007736:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800773a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800773c:	3c01      	subs	r4, #1
 800773e:	e7f5      	b.n	800772c <USB_WritePMA+0xc>
  }
}
 8007740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_EPStartXfer>:
{
 8007746:	b570      	push	{r4, r5, r6, lr}
 8007748:	4605      	mov	r5, r0
 800774a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800774c:	784a      	ldrb	r2, [r1, #1]
 800774e:	2a01      	cmp	r2, #1
 8007750:	d037      	beq.n	80077c2 <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 8007752:	7b0b      	ldrb	r3, [r1, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 82a1 	bne.w	8007c9c <USB_EPStartXfer+0x556>
      if (ep->xfer_len > ep->maxpacket)
 800775a:	698b      	ldr	r3, [r1, #24]
 800775c:	690a      	ldr	r2, [r1, #16]
 800775e:	4293      	cmp	r3, r2
 8007760:	f240 827f 	bls.w	8007c62 <USB_EPStartXfer+0x51c>
        ep->xfer_len -= len;
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007768:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800776c:	fa15 f383 	uxtah	r3, r5, r3
 8007770:	7821      	ldrb	r1, [r4, #0]
 8007772:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007776:	2a00      	cmp	r2, #0
 8007778:	f040 8277 	bne.w	8007c6a <USB_EPStartXfer+0x524>
 800777c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007780:	b292      	uxth	r2, r2
 8007782:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007786:	b292      	uxth	r2, r2
 8007788:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800778c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007790:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007794:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007798:	b292      	uxth	r2, r2
 800779a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800779e:	7822      	ldrb	r2, [r4, #0]
 80077a0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ba:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80077be:	2000      	movs	r0, #0
}
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80077c2:	698b      	ldr	r3, [r1, #24]
 80077c4:	6909      	ldr	r1, [r1, #16]
 80077c6:	428b      	cmp	r3, r1
 80077c8:	d900      	bls.n	80077cc <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 80077ca:	460b      	mov	r3, r1
    if (ep->doublebuffer == 0U)
 80077cc:	7b20      	ldrb	r0, [r4, #12]
 80077ce:	b338      	cbz	r0, 8007820 <USB_EPStartXfer+0xda>
      if (ep->type == EP_TYPE_BULK)
 80077d0:	78e0      	ldrb	r0, [r4, #3]
 80077d2:	2802      	cmp	r0, #2
 80077d4:	d046      	beq.n	8007864 <USB_EPStartXfer+0x11e>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077d6:	7821      	ldrb	r1, [r4, #0]
 80077d8:	f835 0021 	ldrh.w	r0, [r5, r1, lsl #2]
 80077dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077e0:	f000 81ef 	beq.w	8007bc2 <USB_EPStartXfer+0x47c>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	f040 81cb 	bne.w	8007b80 <USB_EPStartXfer+0x43a>
 80077ea:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80077ee:	fa15 f282 	uxtah	r2, r5, r2
 80077f2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 81a9 	bne.w	8007b4e <USB_EPStartXfer+0x408>
 80077fc:	f8b1 2406 	ldrh.w	r2, [r1, #1030]	; 0x406
 8007800:	b292      	uxth	r2, r2
 8007802:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007806:	b292      	uxth	r2, r2
 8007808:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 800780c:	f8b1 2406 	ldrh.w	r2, [r1, #1030]	; 0x406
 8007810:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007814:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007818:	b292      	uxth	r2, r2
 800781a:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 800781e:	e1b8      	b.n	8007b92 <USB_EPStartXfer+0x44c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007820:	b29e      	uxth	r6, r3
 8007822:	4633      	mov	r3, r6
 8007824:	88e2      	ldrh	r2, [r4, #6]
 8007826:	6961      	ldr	r1, [r4, #20]
 8007828:	4628      	mov	r0, r5
 800782a:	f7ff ff79 	bl	8007720 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800782e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007832:	fa15 f383 	uxtah	r3, r5, r3
 8007836:	7822      	ldrb	r2, [r4, #0]
 8007838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783c:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007840:	7822      	ldrb	r2, [r4, #0]
 8007842:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8007860:	2000      	movs	r0, #0
 8007862:	e7ad      	b.n	80077c0 <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 8007864:	6a23      	ldr	r3, [r4, #32]
 8007866:	4299      	cmp	r1, r3
 8007868:	f080 8153 	bcs.w	8007b12 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800786c:	7822      	ldrb	r2, [r4, #0]
 800786e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007884:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          len = ep->maxpacket;
 8007888:	6926      	ldr	r6, [r4, #16]
          ep->xfer_len_db -= len;
 800788a:	6a23      	ldr	r3, [r4, #32]
 800788c:	1b9b      	subs	r3, r3, r6
 800788e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007890:	7823      	ldrb	r3, [r4, #0]
 8007892:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8007896:	f012 0f40 	tst.w	r2, #64	; 0x40
 800789a:	f000 809d 	beq.w	80079d8 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800789e:	7862      	ldrb	r2, [r4, #1]
 80078a0:	bb8a      	cbnz	r2, 8007906 <USB_EPStartXfer+0x1c0>
 80078a2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80078a6:	fa15 f282 	uxtah	r2, r5, r2
 80078aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078ae:	b98e      	cbnz	r6, 80078d4 <USB_EPStartXfer+0x18e>
 80078b0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80078b4:	b292      	uxth	r2, r2
 80078b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80078ba:	b292      	uxth	r2, r2
 80078bc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80078c0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80078c4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80078c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80078cc:	b292      	uxth	r2, r2
 80078ce:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80078d2:	e01a      	b.n	800790a <USB_EPStartXfer+0x1c4>
 80078d4:	2e3e      	cmp	r6, #62	; 0x3e
 80078d6:	d809      	bhi.n	80078ec <USB_EPStartXfer+0x1a6>
 80078d8:	0872      	lsrs	r2, r6, #1
 80078da:	f016 0f01 	tst.w	r6, #1
 80078de:	d000      	beq.n	80078e2 <USB_EPStartXfer+0x19c>
 80078e0:	3201      	adds	r2, #1
 80078e2:	0292      	lsls	r2, r2, #10
 80078e4:	b292      	uxth	r2, r2
 80078e6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80078ea:	e00e      	b.n	800790a <USB_EPStartXfer+0x1c4>
 80078ec:	0972      	lsrs	r2, r6, #5
 80078ee:	f016 0f1f 	tst.w	r6, #31
 80078f2:	d100      	bne.n	80078f6 <USB_EPStartXfer+0x1b0>
 80078f4:	3a01      	subs	r2, #1
 80078f6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80078fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80078fe:	b292      	uxth	r2, r2
 8007900:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007904:	e001      	b.n	800790a <USB_EPStartXfer+0x1c4>
 8007906:	2a01      	cmp	r2, #1
 8007908:	d02b      	beq.n	8007962 <USB_EPStartXfer+0x21c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800790a:	b2b3      	uxth	r3, r6
 800790c:	8962      	ldrh	r2, [r4, #10]
 800790e:	6961      	ldr	r1, [r4, #20]
 8007910:	4628      	mov	r0, r5
 8007912:	f7ff ff05 	bl	8007720 <USB_WritePMA>
            ep->xfer_buff += len;
 8007916:	6963      	ldr	r3, [r4, #20]
 8007918:	441e      	add	r6, r3
 800791a:	6166      	str	r6, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800791c:	6a22      	ldr	r2, [r4, #32]
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	429a      	cmp	r2, r3
 8007922:	d928      	bls.n	8007976 <USB_EPStartXfer+0x230>
              ep->xfer_len_db -= len;
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007928:	7862      	ldrb	r2, [r4, #1]
 800792a:	2a00      	cmp	r2, #0
 800792c:	d140      	bne.n	80079b0 <USB_EPStartXfer+0x26a>
 800792e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007932:	fa15 f282 	uxtah	r2, r5, r2
 8007936:	7821      	ldrb	r1, [r4, #0]
 8007938:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800793c:	b9fb      	cbnz	r3, 800797e <USB_EPStartXfer+0x238>
 800793e:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007942:	b289      	uxth	r1, r1
 8007944:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007948:	b289      	uxth	r1, r1
 800794a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800794e:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007952:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007956:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800795a:	b289      	uxth	r1, r1
 800795c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007960:	e028      	b.n	80079b4 <USB_EPStartXfer+0x26e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007962:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007966:	fa15 f282 	uxtah	r2, r5, r2
 800796a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800796e:	b2b2      	uxth	r2, r6
 8007970:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007974:	e7c9      	b.n	800790a <USB_EPStartXfer+0x1c4>
              ep->xfer_len_db = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	6223      	str	r3, [r4, #32]
              len = ep->xfer_len_db;
 800797a:	4613      	mov	r3, r2
 800797c:	e7d4      	b.n	8007928 <USB_EPStartXfer+0x1e2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800797e:	2b3e      	cmp	r3, #62	; 0x3e
 8007980:	d809      	bhi.n	8007996 <USB_EPStartXfer+0x250>
 8007982:	0859      	lsrs	r1, r3, #1
 8007984:	f013 0f01 	tst.w	r3, #1
 8007988:	d000      	beq.n	800798c <USB_EPStartXfer+0x246>
 800798a:	3101      	adds	r1, #1
 800798c:	0289      	lsls	r1, r1, #10
 800798e:	b289      	uxth	r1, r1
 8007990:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007994:	e00e      	b.n	80079b4 <USB_EPStartXfer+0x26e>
 8007996:	0959      	lsrs	r1, r3, #5
 8007998:	f013 0f1f 	tst.w	r3, #31
 800799c:	d100      	bne.n	80079a0 <USB_EPStartXfer+0x25a>
 800799e:	3901      	subs	r1, #1
 80079a0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80079a4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80079a8:	b289      	uxth	r1, r1
 80079aa:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80079ae:	e001      	b.n	80079b4 <USB_EPStartXfer+0x26e>
 80079b0:	2a01      	cmp	r2, #1
 80079b2:	d006      	beq.n	80079c2 <USB_EPStartXfer+0x27c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	8922      	ldrh	r2, [r4, #8]
 80079b8:	6961      	ldr	r1, [r4, #20]
 80079ba:	4628      	mov	r0, r5
 80079bc:	f7ff feb0 	bl	8007720 <USB_WritePMA>
 80079c0:	e73e      	b.n	8007840 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80079c6:	fa15 f282 	uxtah	r2, r5, r2
 80079ca:	7821      	ldrb	r1, [r4, #0]
 80079cc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80079d0:	b299      	uxth	r1, r3
 80079d2:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80079d6:	e7ed      	b.n	80079b4 <USB_EPStartXfer+0x26e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079d8:	7862      	ldrb	r2, [r4, #1]
 80079da:	bb8a      	cbnz	r2, 8007a40 <USB_EPStartXfer+0x2fa>
 80079dc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80079e0:	fa15 f282 	uxtah	r2, r5, r2
 80079e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079e8:	b98e      	cbnz	r6, 8007a0e <USB_EPStartXfer+0x2c8>
 80079ea:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80079ee:	b292      	uxth	r2, r2
 80079f0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80079f4:	b292      	uxth	r2, r2
 80079f6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80079fa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80079fe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007a02:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007a06:	b292      	uxth	r2, r2
 8007a08:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007a0c:	e01a      	b.n	8007a44 <USB_EPStartXfer+0x2fe>
 8007a0e:	2e3e      	cmp	r6, #62	; 0x3e
 8007a10:	d809      	bhi.n	8007a26 <USB_EPStartXfer+0x2e0>
 8007a12:	0872      	lsrs	r2, r6, #1
 8007a14:	f016 0f01 	tst.w	r6, #1
 8007a18:	d000      	beq.n	8007a1c <USB_EPStartXfer+0x2d6>
 8007a1a:	3201      	adds	r2, #1
 8007a1c:	0292      	lsls	r2, r2, #10
 8007a1e:	b292      	uxth	r2, r2
 8007a20:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007a24:	e00e      	b.n	8007a44 <USB_EPStartXfer+0x2fe>
 8007a26:	0972      	lsrs	r2, r6, #5
 8007a28:	f016 0f1f 	tst.w	r6, #31
 8007a2c:	d100      	bne.n	8007a30 <USB_EPStartXfer+0x2ea>
 8007a2e:	3a01      	subs	r2, #1
 8007a30:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007a34:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007a3e:	e001      	b.n	8007a44 <USB_EPStartXfer+0x2fe>
 8007a40:	2a01      	cmp	r2, #1
 8007a42:	d02b      	beq.n	8007a9c <USB_EPStartXfer+0x356>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a44:	b2b3      	uxth	r3, r6
 8007a46:	8922      	ldrh	r2, [r4, #8]
 8007a48:	6961      	ldr	r1, [r4, #20]
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f7ff fe68 	bl	8007720 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a50:	6963      	ldr	r3, [r4, #20]
 8007a52:	441e      	add	r6, r3
 8007a54:	6166      	str	r6, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007a56:	6a22      	ldr	r2, [r4, #32]
 8007a58:	6923      	ldr	r3, [r4, #16]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d928      	bls.n	8007ab0 <USB_EPStartXfer+0x36a>
              ep->xfer_len_db -= len;
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a62:	7862      	ldrb	r2, [r4, #1]
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	d140      	bne.n	8007aea <USB_EPStartXfer+0x3a4>
 8007a68:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007a6c:	fa15 f282 	uxtah	r2, r5, r2
 8007a70:	7821      	ldrb	r1, [r4, #0]
 8007a72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007a76:	b9fb      	cbnz	r3, 8007ab8 <USB_EPStartXfer+0x372>
 8007a78:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007a7c:	b289      	uxth	r1, r1
 8007a7e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007a82:	b289      	uxth	r1, r1
 8007a84:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007a88:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007a8c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007a90:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007a94:	b289      	uxth	r1, r1
 8007a96:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007a9a:	e028      	b.n	8007aee <USB_EPStartXfer+0x3a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a9c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007aa0:	fa15 f282 	uxtah	r2, r5, r2
 8007aa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007aa8:	b2b2      	uxth	r2, r6
 8007aaa:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007aae:	e7c9      	b.n	8007a44 <USB_EPStartXfer+0x2fe>
              ep->xfer_len_db = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	6223      	str	r3, [r4, #32]
              len = ep->xfer_len_db;
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	e7d4      	b.n	8007a62 <USB_EPStartXfer+0x31c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8007aba:	d809      	bhi.n	8007ad0 <USB_EPStartXfer+0x38a>
 8007abc:	0859      	lsrs	r1, r3, #1
 8007abe:	f013 0f01 	tst.w	r3, #1
 8007ac2:	d000      	beq.n	8007ac6 <USB_EPStartXfer+0x380>
 8007ac4:	3101      	adds	r1, #1
 8007ac6:	0289      	lsls	r1, r1, #10
 8007ac8:	b289      	uxth	r1, r1
 8007aca:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007ace:	e00e      	b.n	8007aee <USB_EPStartXfer+0x3a8>
 8007ad0:	0959      	lsrs	r1, r3, #5
 8007ad2:	f013 0f1f 	tst.w	r3, #31
 8007ad6:	d100      	bne.n	8007ada <USB_EPStartXfer+0x394>
 8007ad8:	3901      	subs	r1, #1
 8007ada:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007ade:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007ae2:	b289      	uxth	r1, r1
 8007ae4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007ae8:	e001      	b.n	8007aee <USB_EPStartXfer+0x3a8>
 8007aea:	2a01      	cmp	r2, #1
 8007aec:	d006      	beq.n	8007afc <USB_EPStartXfer+0x3b6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	8962      	ldrh	r2, [r4, #10]
 8007af2:	6961      	ldr	r1, [r4, #20]
 8007af4:	4628      	mov	r0, r5
 8007af6:	f7ff fe13 	bl	8007720 <USB_WritePMA>
 8007afa:	e6a1      	b.n	8007840 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007afc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007b00:	fa15 f282 	uxtah	r2, r5, r2
 8007b04:	7821      	ldrb	r1, [r4, #0]
 8007b06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007b0a:	b299      	uxth	r1, r3
 8007b0c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007b10:	e7ed      	b.n	8007aee <USB_EPStartXfer+0x3a8>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007b12:	7821      	ldrb	r1, [r4, #0]
 8007b14:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007b1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b2a:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b2e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007b32:	fa15 f282 	uxtah	r2, r5, r2
 8007b36:	7821      	ldrb	r1, [r4, #0]
 8007b38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b42:	8922      	ldrh	r2, [r4, #8]
 8007b44:	6961      	ldr	r1, [r4, #20]
 8007b46:	4628      	mov	r0, r5
 8007b48:	f7ff fdea 	bl	8007720 <USB_WritePMA>
 8007b4c:	e678      	b.n	8007840 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b50:	d809      	bhi.n	8007b66 <USB_EPStartXfer+0x420>
 8007b52:	085a      	lsrs	r2, r3, #1
 8007b54:	f013 0f01 	tst.w	r3, #1
 8007b58:	d000      	beq.n	8007b5c <USB_EPStartXfer+0x416>
 8007b5a:	3201      	adds	r2, #1
 8007b5c:	0292      	lsls	r2, r2, #10
 8007b5e:	b292      	uxth	r2, r2
 8007b60:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8007b64:	e015      	b.n	8007b92 <USB_EPStartXfer+0x44c>
 8007b66:	095a      	lsrs	r2, r3, #5
 8007b68:	f013 0f1f 	tst.w	r3, #31
 8007b6c:	d100      	bne.n	8007b70 <USB_EPStartXfer+0x42a>
 8007b6e:	3a01      	subs	r2, #1
 8007b70:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007b74:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8007b7e:	e008      	b.n	8007b92 <USB_EPStartXfer+0x44c>
 8007b80:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007b84:	fa15 f282 	uxtah	r2, r5, r2
 8007b88:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
          pmabuffer = ep->pmaaddr1;
 8007b92:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	6961      	ldr	r1, [r4, #20]
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f7ff fdc1 	bl	8007720 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007b9e:	7863      	ldrb	r3, [r4, #1]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d14c      	bne.n	8007c3e <USB_EPStartXfer+0x4f8>
 8007ba4:	7822      	ldrb	r2, [r4, #0]
 8007ba6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bbc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8007bc0:	e63e      	b.n	8007840 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc2:	bb8a      	cbnz	r2, 8007c28 <USB_EPStartXfer+0x4e2>
 8007bc4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007bc8:	fa15 f282 	uxtah	r2, r5, r2
 8007bcc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007bd0:	b98b      	cbnz	r3, 8007bf6 <USB_EPStartXfer+0x4b0>
 8007bd2:	f8b1 2402 	ldrh.w	r2, [r1, #1026]	; 0x402
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8007be2:	f8b1 2402 	ldrh.w	r2, [r1, #1026]	; 0x402
 8007be6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007bea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8007bf4:	e021      	b.n	8007c3a <USB_EPStartXfer+0x4f4>
 8007bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf8:	d809      	bhi.n	8007c0e <USB_EPStartXfer+0x4c8>
 8007bfa:	085a      	lsrs	r2, r3, #1
 8007bfc:	f013 0f01 	tst.w	r3, #1
 8007c00:	d000      	beq.n	8007c04 <USB_EPStartXfer+0x4be>
 8007c02:	3201      	adds	r2, #1
 8007c04:	0292      	lsls	r2, r2, #10
 8007c06:	b292      	uxth	r2, r2
 8007c08:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8007c0c:	e015      	b.n	8007c3a <USB_EPStartXfer+0x4f4>
 8007c0e:	095a      	lsrs	r2, r3, #5
 8007c10:	f013 0f1f 	tst.w	r3, #31
 8007c14:	d100      	bne.n	8007c18 <USB_EPStartXfer+0x4d2>
 8007c16:	3a01      	subs	r2, #1
 8007c18:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007c1c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007c20:	b292      	uxth	r2, r2
 8007c22:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8007c26:	e008      	b.n	8007c3a <USB_EPStartXfer+0x4f4>
 8007c28:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007c2c:	fa15 f282 	uxtah	r2, r5, r2
 8007c30:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
          pmabuffer = ep->pmaaddr0;
 8007c3a:	8922      	ldrh	r2, [r4, #8]
 8007c3c:	e7aa      	b.n	8007b94 <USB_EPStartXfer+0x44e>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	f47f adfe 	bne.w	8007840 <USB_EPStartXfer+0xfa>
 8007c44:	7822      	ldrb	r2, [r4, #0]
 8007c46:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8007c60:	e5ee      	b.n	8007840 <USB_EPStartXfer+0xfa>
        ep->xfer_len = 0U;
 8007c62:	2200      	movs	r2, #0
 8007c64:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8007c66:	461a      	mov	r2, r3
 8007c68:	e57e      	b.n	8007768 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c6a:	2a3e      	cmp	r2, #62	; 0x3e
 8007c6c:	d809      	bhi.n	8007c82 <USB_EPStartXfer+0x53c>
 8007c6e:	0851      	lsrs	r1, r2, #1
 8007c70:	f012 0f01 	tst.w	r2, #1
 8007c74:	d000      	beq.n	8007c78 <USB_EPStartXfer+0x532>
 8007c76:	3101      	adds	r1, #1
 8007c78:	0289      	lsls	r1, r1, #10
 8007c7a:	b289      	uxth	r1, r1
 8007c7c:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8007c80:	e58d      	b.n	800779e <USB_EPStartXfer+0x58>
 8007c82:	0951      	lsrs	r1, r2, #5
 8007c84:	f012 0f1f 	tst.w	r2, #31
 8007c88:	d100      	bne.n	8007c8c <USB_EPStartXfer+0x546>
 8007c8a:	3901      	subs	r1, #1
 8007c8c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007c90:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007c94:	b289      	uxth	r1, r1
 8007c96:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8007c9a:	e580      	b.n	800779e <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8007c9c:	78cb      	ldrb	r3, [r1, #3]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d045      	beq.n	8007d2e <USB_EPStartXfer+0x5e8>
      else if (ep->type == EP_TYPE_ISOC)
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	f040 811d 	bne.w	8007ee2 <USB_EPStartXfer+0x79c>
        if (ep->xfer_len > ep->maxpacket)
 8007ca8:	6989      	ldr	r1, [r1, #24]
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	4299      	cmp	r1, r3
 8007cae:	f240 80d4 	bls.w	8007e5a <USB_EPStartXfer+0x714>
          ep->xfer_len -= len;
 8007cb2:	1ac9      	subs	r1, r1, r3
 8007cb4:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007cb6:	b9d2      	cbnz	r2, 8007cee <USB_EPStartXfer+0x5a8>
 8007cb8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007cbc:	fa15 f282 	uxtah	r2, r5, r2
 8007cc0:	7821      	ldrb	r1, [r4, #0]
 8007cc2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 80cb 	bne.w	8007e62 <USB_EPStartXfer+0x71c>
 8007ccc:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007cd0:	b289      	uxth	r1, r1
 8007cd2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007cd6:	b289      	uxth	r1, r1
 8007cd8:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007cdc:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007ce0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007ce4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007ce8:	b289      	uxth	r1, r1
 8007cea:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007cee:	7862      	ldrb	r2, [r4, #1]
 8007cf0:	2a00      	cmp	r2, #0
 8007cf2:	f040 80e8 	bne.w	8007ec6 <USB_EPStartXfer+0x780>
 8007cf6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007cfa:	fa15 f282 	uxtah	r2, r5, r2
 8007cfe:	7821      	ldrb	r1, [r4, #0]
 8007d00:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f040 80c5 	bne.w	8007e94 <USB_EPStartXfer+0x74e>
 8007d0a:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007d1a:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8007d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007d2c:	e537      	b.n	800779e <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d2e:	b9ca      	cbnz	r2, 8007d64 <USB_EPStartXfer+0x61e>
 8007d30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007d34:	fa10 f383 	uxtah	r3, r0, r3
 8007d38:	780a      	ldrb	r2, [r1, #0]
 8007d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3e:	690a      	ldr	r2, [r1, #16]
 8007d40:	bb72      	cbnz	r2, 8007da0 <USB_EPStartXfer+0x65a>
 8007d42:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007d46:	b292      	uxth	r2, r2
 8007d48:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007d4c:	b292      	uxth	r2, r2
 8007d4e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007d52:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007d56:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007d5a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007d5e:	b292      	uxth	r2, r2
 8007d60:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007d64:	7863      	ldrb	r3, [r4, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d14c      	bne.n	8007e04 <USB_EPStartXfer+0x6be>
 8007d6a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007d6e:	fa15 f383 	uxtah	r3, r5, r3
 8007d72:	7822      	ldrb	r2, [r4, #0]
 8007d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d78:	6922      	ldr	r2, [r4, #16]
 8007d7a:	bb52      	cbnz	r2, 8007dd2 <USB_EPStartXfer+0x68c>
 8007d7c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007d80:	b292      	uxth	r2, r2
 8007d82:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007d86:	b292      	uxth	r2, r2
 8007d88:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007d8c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007d90:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007d94:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007d9e:	e033      	b.n	8007e08 <USB_EPStartXfer+0x6c2>
 8007da0:	2a3e      	cmp	r2, #62	; 0x3e
 8007da2:	d809      	bhi.n	8007db8 <USB_EPStartXfer+0x672>
 8007da4:	0851      	lsrs	r1, r2, #1
 8007da6:	f012 0f01 	tst.w	r2, #1
 8007daa:	d000      	beq.n	8007dae <USB_EPStartXfer+0x668>
 8007dac:	3101      	adds	r1, #1
 8007dae:	028a      	lsls	r2, r1, #10
 8007db0:	b292      	uxth	r2, r2
 8007db2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007db6:	e7d5      	b.n	8007d64 <USB_EPStartXfer+0x61e>
 8007db8:	0951      	lsrs	r1, r2, #5
 8007dba:	f012 0f1f 	tst.w	r2, #31
 8007dbe:	d100      	bne.n	8007dc2 <USB_EPStartXfer+0x67c>
 8007dc0:	3901      	subs	r1, #1
 8007dc2:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8007dc6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007dca:	b292      	uxth	r2, r2
 8007dcc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007dd0:	e7c8      	b.n	8007d64 <USB_EPStartXfer+0x61e>
 8007dd2:	2a3e      	cmp	r2, #62	; 0x3e
 8007dd4:	d809      	bhi.n	8007dea <USB_EPStartXfer+0x6a4>
 8007dd6:	0851      	lsrs	r1, r2, #1
 8007dd8:	f012 0f01 	tst.w	r2, #1
 8007ddc:	d000      	beq.n	8007de0 <USB_EPStartXfer+0x69a>
 8007dde:	3101      	adds	r1, #1
 8007de0:	028a      	lsls	r2, r1, #10
 8007de2:	b292      	uxth	r2, r2
 8007de4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007de8:	e00e      	b.n	8007e08 <USB_EPStartXfer+0x6c2>
 8007dea:	0951      	lsrs	r1, r2, #5
 8007dec:	f012 0f1f 	tst.w	r2, #31
 8007df0:	d100      	bne.n	8007df4 <USB_EPStartXfer+0x6ae>
 8007df2:	3901      	subs	r1, #1
 8007df4:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8007df8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007dfc:	b292      	uxth	r2, r2
 8007dfe:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007e02:	e001      	b.n	8007e08 <USB_EPStartXfer+0x6c2>
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d01d      	beq.n	8007e44 <USB_EPStartXfer+0x6fe>
        if (ep->xfer_count != 0U)
 8007e08:	69e3      	ldr	r3, [r4, #28]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f43f acc7 	beq.w	800779e <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e10:	7822      	ldrb	r2, [r4, #0]
 8007e12:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e16:	f244 0340 	movw	r3, #16448	; 0x4040
 8007e1a:	ea03 0001 	and.w	r0, r3, r1
 8007e1e:	438b      	bics	r3, r1
 8007e20:	d002      	beq.n	8007e28 <USB_EPStartXfer+0x6e2>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f47f acbb 	bne.w	800779e <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007e28:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e3e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8007e42:	e4ac      	b.n	800779e <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e44:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007e48:	fa15 f383 	uxtah	r3, r5, r3
 8007e4c:	7822      	ldrb	r2, [r4, #0]
 8007e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e52:	8a22      	ldrh	r2, [r4, #16]
 8007e54:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007e58:	e7d6      	b.n	8007e08 <USB_EPStartXfer+0x6c2>
          ep->xfer_len = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 8007e5e:	460b      	mov	r3, r1
 8007e60:	e729      	b.n	8007cb6 <USB_EPStartXfer+0x570>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e62:	2b3e      	cmp	r3, #62	; 0x3e
 8007e64:	d809      	bhi.n	8007e7a <USB_EPStartXfer+0x734>
 8007e66:	0859      	lsrs	r1, r3, #1
 8007e68:	f013 0f01 	tst.w	r3, #1
 8007e6c:	d000      	beq.n	8007e70 <USB_EPStartXfer+0x72a>
 8007e6e:	3101      	adds	r1, #1
 8007e70:	0289      	lsls	r1, r1, #10
 8007e72:	b289      	uxth	r1, r1
 8007e74:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007e78:	e739      	b.n	8007cee <USB_EPStartXfer+0x5a8>
 8007e7a:	0959      	lsrs	r1, r3, #5
 8007e7c:	f013 0f1f 	tst.w	r3, #31
 8007e80:	d100      	bne.n	8007e84 <USB_EPStartXfer+0x73e>
 8007e82:	3901      	subs	r1, #1
 8007e84:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007e88:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007e8c:	b289      	uxth	r1, r1
 8007e8e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007e92:	e72c      	b.n	8007cee <USB_EPStartXfer+0x5a8>
 8007e94:	2b3e      	cmp	r3, #62	; 0x3e
 8007e96:	d809      	bhi.n	8007eac <USB_EPStartXfer+0x766>
 8007e98:	0859      	lsrs	r1, r3, #1
 8007e9a:	f013 0f01 	tst.w	r3, #1
 8007e9e:	d000      	beq.n	8007ea2 <USB_EPStartXfer+0x75c>
 8007ea0:	3101      	adds	r1, #1
 8007ea2:	028b      	lsls	r3, r1, #10
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007eaa:	e478      	b.n	800779e <USB_EPStartXfer+0x58>
 8007eac:	0959      	lsrs	r1, r3, #5
 8007eae:	f013 0f1f 	tst.w	r3, #31
 8007eb2:	d100      	bne.n	8007eb6 <USB_EPStartXfer+0x770>
 8007eb4:	3901      	subs	r1, #1
 8007eb6:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 8007eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007ec4:	e46b      	b.n	800779e <USB_EPStartXfer+0x58>
 8007ec6:	2a01      	cmp	r2, #1
 8007ec8:	f47f ac69 	bne.w	800779e <USB_EPStartXfer+0x58>
 8007ecc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007ed0:	fa15 f282 	uxtah	r2, r5, r2
 8007ed4:	7821      	ldrb	r1, [r4, #0]
 8007ed6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8007ee0:	e45d      	b.n	800779e <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	e46c      	b.n	80077c0 <USB_EPStartXfer+0x7a>

08007ee6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ee6:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ee8:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007eea:	4410      	add	r0, r2
 8007eec:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8007ef0:	b144      	cbz	r4, 8007f04 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007ef2:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ef6:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ef8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007efc:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8007efe:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8007f00:	3c01      	subs	r4, #1
 8007f02:	e7f5      	b.n	8007ef0 <USB_ReadPMA+0xa>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007f04:	f013 0f01 	tst.w	r3, #1
 8007f08:	d001      	beq.n	8007f0e <USB_ReadPMA+0x28>
  {
    temp = *pdwVal;
 8007f0a:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f0c:	700b      	strb	r3, [r1, #0]
  }
}
 8007f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f14:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f16:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f1a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8007f1e:	b15b      	cbz	r3, 8007f38 <USBD_CDC_EP0_RxReady+0x24>
 8007f20:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007f24:	28ff      	cmp	r0, #255	; 0xff
 8007f26:	d007      	beq.n	8007f38 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007f32:	23ff      	movs	r3, #255	; 0xff
 8007f34:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
}
 8007f38:	2000      	movs	r0, #0
 8007f3a:	bd10      	pop	{r4, pc}

08007f3c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f3c:	2343      	movs	r3, #67	; 0x43
 8007f3e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8007f40:	4800      	ldr	r0, [pc, #0]	; (8007f44 <USBD_CDC_GetFSCfgDesc+0x8>)
 8007f42:	4770      	bx	lr
 8007f44:	20000044 	.word	0x20000044

08007f48 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f48:	2343      	movs	r3, #67	; 0x43
 8007f4a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8007f4c:	4800      	ldr	r0, [pc, #0]	; (8007f50 <USBD_CDC_GetHSCfgDesc+0x8>)
 8007f4e:	4770      	bx	lr
 8007f50:	20000088 	.word	0x20000088

08007f54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f54:	2343      	movs	r3, #67	; 0x43
 8007f56:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8007f58:	4800      	ldr	r0, [pc, #0]	; (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8007f5a:	4770      	bx	lr
 8007f5c:	200000d8 	.word	0x200000d8

08007f60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f60:	230a      	movs	r3, #10
 8007f62:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8007f64:	4800      	ldr	r0, [pc, #0]	; (8007f68 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007f66:	4770      	bx	lr
 8007f68:	200000cc 	.word	0x200000cc

08007f6c <USBD_CDC_DataOut>:
{
 8007f6c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f6e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8007f72:	b175      	cbz	r5, 8007f92 <USBD_CDC_DataOut+0x26>
 8007f74:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f76:	f002 fde3 	bl	800ab40 <USBD_LL_GetRxDataSize>
 8007f7a:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f7e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8007f88:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8007f8c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8007f8e:	2000      	movs	r0, #0
}
 8007f90:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8007f92:	2003      	movs	r0, #3
 8007f94:	e7fc      	b.n	8007f90 <USBD_CDC_DataOut+0x24>

08007f96 <USBD_CDC_DataIn>:
{
 8007f96:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f98:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8007f9c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007fa0:	b353      	cbz	r3, 8007ff8 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fa2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8007fa6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007faa:	6992      	ldr	r2, [r2, #24]
 8007fac:	b14a      	cbz	r2, 8007fc2 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fae:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8007fb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007fb6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007fb8:	fbb2 f4f5 	udiv	r4, r2, r5
 8007fbc:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fc0:	b172      	cbz	r2, 8007fe0 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007fc8:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8007fcc:	6914      	ldr	r4, [r2, #16]
 8007fce:	b1ac      	cbz	r4, 8007ffc <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fd0:	460a      	mov	r2, r1
 8007fd2:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8007fd6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007fda:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8007fdc:	2000      	movs	r0, #0
}
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8007fe0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007fe4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007fe8:	2400      	movs	r4, #0
 8007fea:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fec:	4623      	mov	r3, r4
 8007fee:	4622      	mov	r2, r4
 8007ff0:	f002 fd88 	bl	800ab04 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8007ff4:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ff6:	e7f2      	b.n	8007fde <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8007ff8:	2003      	movs	r0, #3
 8007ffa:	e7f0      	b.n	8007fde <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e7ee      	b.n	8007fde <USBD_CDC_DataIn+0x48>

08008000 <USBD_CDC_Setup>:
{
 8008000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008002:	b083      	sub	sp, #12
 8008004:	4606      	mov	r6, r0
 8008006:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008008:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8008012:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008016:	780b      	ldrb	r3, [r1, #0]
 8008018:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800801c:	d027      	beq.n	800806e <USBD_CDC_Setup+0x6e>
 800801e:	2d20      	cmp	r5, #32
 8008020:	d158      	bne.n	80080d4 <USBD_CDC_Setup+0xd4>
      if (req->wLength != 0U)
 8008022:	88ca      	ldrh	r2, [r1, #6]
 8008024:	b1da      	cbz	r2, 800805e <USBD_CDC_Setup+0x5e>
        if ((req->bmRequest & 0x80U) != 0U)
 8008026:	f013 0f80 	tst.w	r3, #128	; 0x80
 800802a:	d00c      	beq.n	8008046 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800802c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	4639      	mov	r1, r7
 8008034:	7860      	ldrb	r0, [r4, #1]
 8008036:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008038:	88e2      	ldrh	r2, [r4, #6]
 800803a:	4639      	mov	r1, r7
 800803c:	4630      	mov	r0, r6
 800803e:	f000 fdad 	bl	8008b9c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008042:	2500      	movs	r5, #0
 8008044:	e049      	b.n	80080da <USBD_CDC_Setup+0xda>
          hcdc->CmdOpCode = req->bRequest;
 8008046:	784b      	ldrb	r3, [r1, #1]
 8008048:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800804c:	798b      	ldrb	r3, [r1, #6]
 800804e:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008052:	88ca      	ldrh	r2, [r1, #6]
 8008054:	4639      	mov	r1, r7
 8008056:	f000 fdb6 	bl	8008bc6 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800805a:	2500      	movs	r5, #0
 800805c:	e03d      	b.n	80080da <USBD_CDC_Setup+0xda>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800805e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	7848      	ldrb	r0, [r1, #1]
 8008068:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800806a:	2500      	movs	r5, #0
 800806c:	e035      	b.n	80080da <USBD_CDC_Setup+0xda>
      switch (req->bRequest)
 800806e:	784f      	ldrb	r7, [r1, #1]
 8008070:	2f0b      	cmp	r7, #11
 8008072:	d82b      	bhi.n	80080cc <USBD_CDC_Setup+0xcc>
 8008074:	e8df f007 	tbb	[pc, r7]
 8008078:	2a2a3106 	.word	0x2a2a3106
 800807c:	2a2a2a2a 	.word	0x2a2a2a2a
 8008080:	22142a2a 	.word	0x22142a2a
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008084:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008088:	2b03      	cmp	r3, #3
 800808a:	d003      	beq.n	8008094 <USBD_CDC_Setup+0x94>
            USBD_CtlError(pdev, req);
 800808c:	f000 fa54 	bl	8008538 <USBD_CtlError>
            ret = USBD_FAIL;
 8008090:	2503      	movs	r5, #3
 8008092:	e022      	b.n	80080da <USBD_CDC_Setup+0xda>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008094:	2202      	movs	r2, #2
 8008096:	a901      	add	r1, sp, #4
 8008098:	f000 fd80 	bl	8008b9c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800809c:	463d      	mov	r5, r7
 800809e:	e01c      	b.n	80080da <USBD_CDC_Setup+0xda>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d003      	beq.n	80080b0 <USBD_CDC_Setup+0xb0>
            USBD_CtlError(pdev, req);
 80080a8:	f000 fa46 	bl	8008538 <USBD_CtlError>
            ret = USBD_FAIL;
 80080ac:	2503      	movs	r5, #3
 80080ae:	e014      	b.n	80080da <USBD_CDC_Setup+0xda>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080b0:	2201      	movs	r2, #1
 80080b2:	f10d 0107 	add.w	r1, sp, #7
 80080b6:	f000 fd71 	bl	8008b9c <USBD_CtlSendData>
 80080ba:	e00e      	b.n	80080da <USBD_CDC_Setup+0xda>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d00a      	beq.n	80080da <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 80080c4:	f000 fa38 	bl	8008538 <USBD_CtlError>
            ret = USBD_FAIL;
 80080c8:	2503      	movs	r5, #3
 80080ca:	e006      	b.n	80080da <USBD_CDC_Setup+0xda>
          USBD_CtlError(pdev, req);
 80080cc:	f000 fa34 	bl	8008538 <USBD_CtlError>
          ret = USBD_FAIL;
 80080d0:	2503      	movs	r5, #3
          break;
 80080d2:	e002      	b.n	80080da <USBD_CDC_Setup+0xda>
      USBD_CtlError(pdev, req);
 80080d4:	f000 fa30 	bl	8008538 <USBD_CtlError>
      ret = USBD_FAIL;
 80080d8:	2503      	movs	r5, #3
}
 80080da:	4628      	mov	r0, r5
 80080dc:	b003      	add	sp, #12
 80080de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080e0 <USBD_CDC_DeInit>:
{
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080e4:	2181      	movs	r1, #129	; 0x81
 80080e6:	f002 fcba 	bl	800aa5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080ea:	2500      	movs	r5, #0
 80080ec:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080ee:	2101      	movs	r1, #1
 80080f0:	4620      	mov	r0, r4
 80080f2:	f002 fcb4 	bl	800aa5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80080f6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080fa:	2182      	movs	r1, #130	; 0x82
 80080fc:	4620      	mov	r0, r4
 80080fe:	f002 fcae 	bl	800aa5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008102:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008106:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800810a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800810e:	b14b      	cbz	r3, 8008124 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008110:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008118:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800811c:	f002 fd6c 	bl	800abf8 <free>
    pdev->pClassData = NULL;
 8008120:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8008124:	2000      	movs	r0, #0
 8008126:	bd38      	pop	{r3, r4, r5, pc}

08008128 <USBD_CDC_Init>:
{
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800812c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008130:	f002 fd5a 	bl	800abe8 <malloc>
  if (hcdc == NULL)
 8008134:	b3b8      	cbz	r0, 80081a6 <USBD_CDC_Init+0x7e>
 8008136:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8008138:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800813c:	7c23      	ldrb	r3, [r4, #16]
 800813e:	bbbb      	cbnz	r3, 80081b0 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008144:	2202      	movs	r2, #2
 8008146:	2181      	movs	r1, #129	; 0x81
 8008148:	4620      	mov	r0, r4
 800814a:	f002 fc76 	bl	800aa3a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800814e:	2501      	movs	r5, #1
 8008150:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008156:	2202      	movs	r2, #2
 8008158:	4629      	mov	r1, r5
 800815a:	4620      	mov	r0, r4
 800815c:	f002 fc6d 	bl	800aa3a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008160:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008164:	2310      	movs	r3, #16
 8008166:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800816a:	2308      	movs	r3, #8
 800816c:	2203      	movs	r2, #3
 800816e:	2182      	movs	r1, #130	; 0x82
 8008170:	4620      	mov	r0, r4
 8008172:	f002 fc62 	bl	800aa3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008176:	2301      	movs	r3, #1
 8008178:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800817c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4798      	blx	r3
  hcdc->TxState = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800818a:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818e:	7c25      	ldrb	r5, [r4, #16]
 8008190:	bb15      	cbnz	r5, 80081d8 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008196:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800819a:	2101      	movs	r1, #1
 800819c:	4620      	mov	r0, r4
 800819e:	f002 fcc0 	bl	800ab22 <USBD_LL_PrepareReceive>
}
 80081a2:	4628      	mov	r0, r5
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80081ac:	2502      	movs	r5, #2
 80081ae:	e7f8      	b.n	80081a2 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	2202      	movs	r2, #2
 80081b4:	2181      	movs	r1, #129	; 0x81
 80081b6:	4620      	mov	r0, r4
 80081b8:	f002 fc3f 	bl	800aa3a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081bc:	2501      	movs	r5, #1
 80081be:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081c0:	2340      	movs	r3, #64	; 0x40
 80081c2:	2202      	movs	r2, #2
 80081c4:	4629      	mov	r1, r5
 80081c6:	4620      	mov	r0, r4
 80081c8:	f002 fc37 	bl	800aa3a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081cc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081d0:	2310      	movs	r3, #16
 80081d2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80081d6:	e7c8      	b.n	800816a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081d8:	2340      	movs	r3, #64	; 0x40
 80081da:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80081de:	2101      	movs	r1, #1
 80081e0:	4620      	mov	r0, r4
 80081e2:	f002 fc9e 	bl	800ab22 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80081e6:	2500      	movs	r5, #0
 80081e8:	e7db      	b.n	80081a2 <USBD_CDC_Init+0x7a>

080081ea <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80081ea:	b119      	cbz	r1, 80081f4 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80081ec:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80081f0:	2000      	movs	r0, #0
 80081f2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80081f4:	2003      	movs	r0, #3
}
 80081f6:	4770      	bx	lr

080081f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081f8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 80081fc:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008200:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8008204:	2000      	movs	r0, #0
 8008206:	4770      	bx	lr

08008208 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008208:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 800820c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 8008210:	2000      	movs	r0, #0
 8008212:	4770      	bx	lr

08008214 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008214:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008216:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800821a:	b192      	cbz	r2, 8008242 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821c:	7c04      	ldrb	r4, [r0, #16]
 800821e:	b944      	cbnz	r4, 8008232 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008224:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008228:	2101      	movs	r1, #1
 800822a:	f002 fc7a 	bl	800ab22 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800822e:	4620      	mov	r0, r4
 8008230:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008238:	2101      	movs	r1, #1
 800823a:	f002 fc72 	bl	800ab22 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800823e:	2400      	movs	r4, #0
 8008240:	e7f5      	b.n	800822e <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8008242:	2403      	movs	r4, #3
 8008244:	e7f3      	b.n	800822e <USBD_CDC_ReceivePacket+0x1a>

08008246 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008246:	b198      	cbz	r0, 8008270 <USBD_Init+0x2a>
{
 8008248:	b508      	push	{r3, lr}
 800824a:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800824c:	2000      	movs	r0, #0
 800824e:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008252:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008256:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800825a:	b109      	cbz	r1, 8008260 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800825c:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008260:	2101      	movs	r1, #1
 8008262:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8008266:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008268:	4618      	mov	r0, r3
 800826a:	f002 fb91 	bl	800a990 <USBD_LL_Init>

  return ret;
}
 800826e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008270:	2003      	movs	r0, #3
}
 8008272:	4770      	bx	lr

08008274 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008274:	b510      	push	{r4, lr}
 8008276:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800827e:	b161      	cbz	r1, 800829a <USBD_RegisterClass+0x26>
 8008280:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008282:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008286:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008288:	b14b      	cbz	r3, 800829e <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800828a:	f10d 0006 	add.w	r0, sp, #6
 800828e:	4798      	blx	r3
 8008290:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008294:	2000      	movs	r0, #0
}
 8008296:	b002      	add	sp, #8
 8008298:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800829a:	2003      	movs	r0, #3
 800829c:	e7fb      	b.n	8008296 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800829e:	2000      	movs	r0, #0
 80082a0:	e7f9      	b.n	8008296 <USBD_RegisterClass+0x22>

080082a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082a2:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082a4:	f002 fbba 	bl	800aa1c <USBD_LL_Start>
}
 80082a8:	bd08      	pop	{r3, pc}

080082aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082aa:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80082ac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80082b0:	b113      	cbz	r3, 80082b8 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4798      	blx	r3
  }

  return ret;
}
 80082b6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082b8:	2003      	movs	r0, #3
 80082ba:	e7fc      	b.n	80082b6 <USBD_SetClassConfig+0xc>

080082bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082bc:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80082c2:	b10b      	cbz	r3, 80082c8 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80082c8:	2000      	movs	r0, #0
 80082ca:	bd08      	pop	{r3, pc}

080082cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082d0:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 f91b 	bl	8008510 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082da:	2301      	movs	r3, #1
 80082dc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082e0:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80082e4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082e8:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 80082ec:	f001 031f 	and.w	r3, r1, #31
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d00d      	beq.n	8008310 <USBD_LL_SetupStage+0x44>
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d010      	beq.n	800831a <USBD_LL_SetupStage+0x4e>
 80082f8:	b12b      	cbz	r3, 8008306 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082fa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80082fe:	4620      	mov	r0, r4
 8008300:	f002 fbbc 	bl	800aa7c <USBD_LL_StallEP>
      break;
 8008304:	e003      	b.n	800830e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008306:	4629      	mov	r1, r5
 8008308:	4620      	mov	r0, r4
 800830a:	f000 facd 	bl	80088a8 <USBD_StdDevReq>
  }

  return ret;
}
 800830e:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008310:	4629      	mov	r1, r5
 8008312:	4620      	mov	r0, r4
 8008314:	f000 fb00 	bl	8008918 <USBD_StdItfReq>
      break;
 8008318:	e7f9      	b.n	800830e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800831a:	4629      	mov	r1, r5
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fb2f 	bl	8008980 <USBD_StdEPReq>
      break;
 8008322:	e7f4      	b.n	800830e <USBD_LL_SetupStage+0x42>

08008324 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008328:	460d      	mov	r5, r1
 800832a:	bb31      	cbnz	r1, 800837a <USBD_LL_DataOutStage+0x56>
 800832c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800832e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008332:	2a03      	cmp	r2, #3
 8008334:	d001      	beq.n	800833a <USBD_LL_DataOutStage+0x16>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008336:	4608      	mov	r0, r1
}
 8008338:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800833a:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800833e:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8008342:	4291      	cmp	r1, r2
 8008344:	d80c      	bhi.n	8008360 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008346:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	b11b      	cbz	r3, 8008356 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800834e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008352:	2a03      	cmp	r2, #3
 8008354:	d00f      	beq.n	8008376 <USBD_LL_DataOutStage+0x52>
        (void)USBD_CtlSendStatus(pdev);
 8008356:	4620      	mov	r0, r4
 8008358:	f000 fc4c 	bl	8008bf4 <USBD_CtlSendStatus>
  return USBD_OK;
 800835c:	4628      	mov	r0, r5
 800835e:	e7eb      	b.n	8008338 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008360:	1a89      	subs	r1, r1, r2
 8008362:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008366:	428a      	cmp	r2, r1
 8008368:	bf28      	it	cs
 800836a:	460a      	movcs	r2, r1
 800836c:	4619      	mov	r1, r3
 800836e:	f000 fc39 	bl	8008be4 <USBD_CtlContinueRx>
  return USBD_OK;
 8008372:	4628      	mov	r0, r5
 8008374:	e7e0      	b.n	8008338 <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev);
 8008376:	4798      	blx	r3
 8008378:	e7ed      	b.n	8008356 <USBD_LL_DataOutStage+0x32>
  else if ((pdev->pClass->DataOut != NULL) &&
 800837a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	b12b      	cbz	r3, 800838e <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008382:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008386:	2a03      	cmp	r2, #3
 8008388:	d103      	bne.n	8008392 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800838a:	4798      	blx	r3
    if (ret != USBD_OK)
 800838c:	e7d4      	b.n	8008338 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 800838e:	2003      	movs	r0, #3
 8008390:	e7d2      	b.n	8008338 <USBD_LL_DataOutStage+0x14>
 8008392:	2003      	movs	r0, #3
 8008394:	e7d0      	b.n	8008338 <USBD_LL_DataOutStage+0x14>

08008396 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008396:	b538      	push	{r3, r4, r5, lr}
 8008398:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800839a:	460d      	mov	r5, r1
 800839c:	2900      	cmp	r1, #0
 800839e:	d148      	bne.n	8008432 <USBD_LL_DataInStage+0x9c>
 80083a0:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083a2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80083a6:	2a02      	cmp	r2, #2
 80083a8:	d005      	beq.n	80083b6 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80083aa:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d03a      	beq.n	8008428 <USBD_LL_DataInStage+0x92>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80083b2:	4628      	mov	r0, r5
}
 80083b4:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80083b6:	69c2      	ldr	r2, [r0, #28]
 80083b8:	6a01      	ldr	r1, [r0, #32]
 80083ba:	428a      	cmp	r2, r1
 80083bc:	d811      	bhi.n	80083e2 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 80083be:	428a      	cmp	r2, r1
 80083c0:	d01b      	beq.n	80083fa <USBD_LL_DataInStage+0x64>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083c2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	b11b      	cbz	r3, 80083d2 <USBD_LL_DataInStage+0x3c>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ca:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083ce:	2a03      	cmp	r2, #3
 80083d0:	d027      	beq.n	8008422 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d2:	2180      	movs	r1, #128	; 0x80
 80083d4:	4620      	mov	r0, r4
 80083d6:	f002 fb51 	bl	800aa7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fc15 	bl	8008c0a <USBD_CtlReceiveStatus>
 80083e0:	e7e3      	b.n	80083aa <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80083e2:	1a52      	subs	r2, r2, r1
 80083e4:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083e6:	4619      	mov	r1, r3
 80083e8:	f000 fbe5 	bl	8008bb6 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ec:	2300      	movs	r3, #0
 80083ee:	461a      	mov	r2, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	4620      	mov	r0, r4
 80083f4:	f002 fb95 	bl	800ab22 <USBD_LL_PrepareReceive>
 80083f8:	e7d7      	b.n	80083aa <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80083fa:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80083fc:	4299      	cmp	r1, r3
 80083fe:	d8e0      	bhi.n	80083c2 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8008400:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008404:	4293      	cmp	r3, r2
 8008406:	d2dc      	bcs.n	80083c2 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008408:	2200      	movs	r2, #0
 800840a:	4611      	mov	r1, r2
 800840c:	f000 fbd3 	bl	8008bb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008410:	2100      	movs	r1, #0
 8008412:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008416:	460b      	mov	r3, r1
 8008418:	460a      	mov	r2, r1
 800841a:	4620      	mov	r0, r4
 800841c:	f002 fb81 	bl	800ab22 <USBD_LL_PrepareReceive>
 8008420:	e7c3      	b.n	80083aa <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 8008422:	4620      	mov	r0, r4
 8008424:	4798      	blx	r3
 8008426:	e7d4      	b.n	80083d2 <USBD_LL_DataInStage+0x3c>
      pdev->dev_test_mode = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800842e:	4628      	mov	r0, r5
 8008430:	e7c0      	b.n	80083b4 <USBD_LL_DataInStage+0x1e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8008432:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	b12b      	cbz	r3, 8008446 <USBD_LL_DataInStage+0xb0>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800843e:	2a03      	cmp	r2, #3
 8008440:	d103      	bne.n	800844a <USBD_LL_DataInStage+0xb4>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008442:	4798      	blx	r3
    if (ret != USBD_OK)
 8008444:	e7b6      	b.n	80083b4 <USBD_LL_DataInStage+0x1e>
    return USBD_FAIL;
 8008446:	2003      	movs	r0, #3
 8008448:	e7b4      	b.n	80083b4 <USBD_LL_DataInStage+0x1e>
 800844a:	2003      	movs	r0, #3
 800844c:	e7b2      	b.n	80083b4 <USBD_LL_DataInStage+0x1e>

0800844e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800844e:	b570      	push	{r4, r5, r6, lr}
 8008450:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008452:	2301      	movs	r3, #1
 8008454:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008458:	2300      	movs	r3, #0
 800845a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800845e:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8008460:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008464:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008468:	b123      	cbz	r3, 8008474 <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800846a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2100      	movs	r1, #0
 8008472:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008474:	2340      	movs	r3, #64	; 0x40
 8008476:	2200      	movs	r2, #0
 8008478:	4611      	mov	r1, r2
 800847a:	4620      	mov	r0, r4
 800847c:	f002 fadd 	bl	800aa3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008480:	2601      	movs	r6, #1
 8008482:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008486:	2540      	movs	r5, #64	; 0x40
 8008488:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800848c:	462b      	mov	r3, r5
 800848e:	2200      	movs	r2, #0
 8008490:	2180      	movs	r1, #128	; 0x80
 8008492:	4620      	mov	r0, r4
 8008494:	f002 fad1 	bl	800aa3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008498:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800849a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800849c:	2000      	movs	r0, #0
 800849e:	bd70      	pop	{r4, r5, r6, pc}

080084a0 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80084a0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80084a2:	2000      	movs	r0, #0
 80084a4:	4770      	bx	lr

080084a6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80084a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80084aa:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084ae:	2304      	movs	r3, #4
 80084b0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80084b4:	2000      	movs	r0, #0
 80084b6:	4770      	bx	lr

080084b8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d001      	beq.n	80084c4 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80084c0:	2000      	movs	r0, #0
 80084c2:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80084c4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80084c8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80084cc:	e7f8      	b.n	80084c0 <USBD_LL_Resume+0x8>

080084ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084ce:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d001      	beq.n	80084dc <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80084d8:	2000      	movs	r0, #0
 80084da:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80084dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0f8      	beq.n	80084d8 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80084e6:	4798      	blx	r3
 80084e8:	e7f6      	b.n	80084d8 <USBD_LL_SOF+0xa>

080084ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084ea:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80084ec:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	b11a      	cbz	r2, 80084fa <USBD_GetLen+0x10>
  {
    len++;
 80084f2:	3001      	adds	r0, #1
 80084f4:	b2c0      	uxtb	r0, r0
    pbuff++;
 80084f6:	3301      	adds	r3, #1
 80084f8:	e7f9      	b.n	80084ee <USBD_GetLen+0x4>
  }

  return len;
}
 80084fa:	4770      	bx	lr

080084fc <USBD_SetFeature>:
{
 80084fc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084fe:	884b      	ldrh	r3, [r1, #2]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d000      	beq.n	8008506 <USBD_SetFeature+0xa>
}
 8008504:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8008506:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800850a:	f000 fb73 	bl	8008bf4 <USBD_CtlSendStatus>
}
 800850e:	e7f9      	b.n	8008504 <USBD_SetFeature+0x8>

08008510 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8008510:	780b      	ldrb	r3, [r1, #0]
 8008512:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8008514:	784b      	ldrb	r3, [r1, #1]
 8008516:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8008518:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800851a:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800851c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8008520:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8008522:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8008524:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008526:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800852a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800852c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800852e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8008534:	80c3      	strh	r3, [r0, #6]
}
 8008536:	4770      	bx	lr

08008538 <USBD_CtlError>:
{
 8008538:	b510      	push	{r4, lr}
 800853a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800853c:	2180      	movs	r1, #128	; 0x80
 800853e:	f002 fa9d 	bl	800aa7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008542:	2100      	movs	r1, #0
 8008544:	4620      	mov	r0, r4
 8008546:	f002 fa99 	bl	800aa7c <USBD_LL_StallEP>
}
 800854a:	bd10      	pop	{r4, pc}

0800854c <USBD_GetDescriptor>:
{
 800854c:	b530      	push	{r4, r5, lr}
 800854e:	b083      	sub	sp, #12
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800855a:	884a      	ldrh	r2, [r1, #2]
 800855c:	0a13      	lsrs	r3, r2, #8
 800855e:	3b01      	subs	r3, #1
 8008560:	2b0e      	cmp	r3, #14
 8008562:	f200 80bc 	bhi.w	80086de <USBD_GetDescriptor+0x192>
 8008566:	e8df f003 	tbb	[pc, r3]
 800856a:	3015      	.short	0x3015
 800856c:	9ebaba44 	.word	0x9ebaba44
 8008570:	bababaab 	.word	0xbababaab
 8008574:	babababa 	.word	0xbabababa
 8008578:	08          	.byte	0x08
 8008579:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800857a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	b123      	cbz	r3, 800858c <USBD_GetDescriptor+0x40>
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008582:	f10d 0106 	add.w	r1, sp, #6
 8008586:	7c00      	ldrb	r0, [r0, #16]
 8008588:	4798      	blx	r3
  if (err != 0U)
 800858a:	e00a      	b.n	80085a2 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 800858c:	4629      	mov	r1, r5
 800858e:	f7ff ffd3 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 8008592:	e018      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008594:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f10d 0106 	add.w	r1, sp, #6
 800859e:	7c00      	ldrb	r0, [r0, #16]
 80085a0:	4798      	blx	r3
    if (req->wLength != 0U)
 80085a2:	88ea      	ldrh	r2, [r5, #6]
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	f000 80a3 	beq.w	80086f0 <USBD_GetDescriptor+0x1a4>
      if (len != 0U)
 80085aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 8099 	beq.w	80086e6 <USBD_GetDescriptor+0x19a>
        len = MIN(len, req->wLength);
 80085b4:	429a      	cmp	r2, r3
 80085b6:	bf28      	it	cs
 80085b8:	461a      	movcs	r2, r3
 80085ba:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80085be:	4601      	mov	r1, r0
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 faeb 	bl	8008b9c <USBD_CtlSendData>
}
 80085c6:	b003      	add	sp, #12
 80085c8:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ca:	7c03      	ldrb	r3, [r0, #16]
 80085cc:	b943      	cbnz	r3, 80085e0 <USBD_GetDescriptor+0x94>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80085d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d4:	f10d 0006 	add.w	r0, sp, #6
 80085d8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085da:	2302      	movs	r3, #2
 80085dc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80085de:	e7e0      	b.n	80085a2 <USBD_GetDescriptor+0x56>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	f10d 0006 	add.w	r0, sp, #6
 80085ea:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ec:	2302      	movs	r3, #2
 80085ee:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80085f0:	e7d7      	b.n	80085a2 <USBD_GetDescriptor+0x56>
    switch ((uint8_t)(req->wValue))
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	2a05      	cmp	r2, #5
 80085f6:	d852      	bhi.n	800869e <USBD_GetDescriptor+0x152>
 80085f8:	e8df f002 	tbb	[pc, r2]
 80085fc:	2a1d1003 	.word	0x2a1d1003
 8008600:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008602:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	b123      	cbz	r3, 8008614 <USBD_GetDescriptor+0xc8>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800860a:	f10d 0106 	add.w	r1, sp, #6
 800860e:	7c00      	ldrb	r0, [r0, #16]
 8008610:	4798      	blx	r3
  if (err != 0U)
 8008612:	e7c6      	b.n	80085a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8008614:	4629      	mov	r1, r5
 8008616:	f7ff ff8f 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 800861a:	e7d4      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800861c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	b123      	cbz	r3, 800862e <USBD_GetDescriptor+0xe2>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008624:	f10d 0106 	add.w	r1, sp, #6
 8008628:	7c00      	ldrb	r0, [r0, #16]
 800862a:	4798      	blx	r3
  if (err != 0U)
 800862c:	e7b9      	b.n	80085a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800862e:	4629      	mov	r1, r5
 8008630:	f7ff ff82 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 8008634:	e7c7      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008636:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	b123      	cbz	r3, 8008648 <USBD_GetDescriptor+0xfc>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800863e:	f10d 0106 	add.w	r1, sp, #6
 8008642:	7c00      	ldrb	r0, [r0, #16]
 8008644:	4798      	blx	r3
  if (err != 0U)
 8008646:	e7ac      	b.n	80085a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8008648:	4629      	mov	r1, r5
 800864a:	f7ff ff75 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 800864e:	e7ba      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008650:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	b123      	cbz	r3, 8008662 <USBD_GetDescriptor+0x116>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008658:	f10d 0106 	add.w	r1, sp, #6
 800865c:	7c00      	ldrb	r0, [r0, #16]
 800865e:	4798      	blx	r3
  if (err != 0U)
 8008660:	e79f      	b.n	80085a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8008662:	4629      	mov	r1, r5
 8008664:	f7ff ff68 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 8008668:	e7ad      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800866a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	b123      	cbz	r3, 800867c <USBD_GetDescriptor+0x130>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008672:	f10d 0106 	add.w	r1, sp, #6
 8008676:	7c00      	ldrb	r0, [r0, #16]
 8008678:	4798      	blx	r3
  if (err != 0U)
 800867a:	e792      	b.n	80085a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800867c:	4629      	mov	r1, r5
 800867e:	f7ff ff5b 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 8008682:	e7a0      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008684:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	b123      	cbz	r3, 8008696 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800868c:	f10d 0106 	add.w	r1, sp, #6
 8008690:	7c00      	ldrb	r0, [r0, #16]
 8008692:	4798      	blx	r3
  if (err != 0U)
 8008694:	e785      	b.n	80085a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8008696:	4629      	mov	r1, r5
 8008698:	f7ff ff4e 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 800869c:	e793      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800869e:	4629      	mov	r1, r5
 80086a0:	f7ff ff4a 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 80086a4:	e78f      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086a6:	7c03      	ldrb	r3, [r0, #16]
 80086a8:	b933      	cbnz	r3, 80086b8 <USBD_GetDescriptor+0x16c>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	f10d 0006 	add.w	r0, sp, #6
 80086b4:	4798      	blx	r3
  if (err != 0U)
 80086b6:	e774      	b.n	80085a2 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7ff ff3d 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 80086be:	e782      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c0:	7c03      	ldrb	r3, [r0, #16]
 80086c2:	b943      	cbnz	r3, 80086d6 <USBD_GetDescriptor+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80086c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ca:	f10d 0006 	add.w	r0, sp, #6
 80086ce:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086d0:	2307      	movs	r3, #7
 80086d2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80086d4:	e765      	b.n	80085a2 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 80086d6:	4629      	mov	r1, r5
 80086d8:	f7ff ff2e 	bl	8008538 <USBD_CtlError>
  if (err != 0U)
 80086dc:	e773      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
    USBD_CtlError(pdev, req);
 80086de:	4629      	mov	r1, r5
 80086e0:	f7ff ff2a 	bl	8008538 <USBD_CtlError>
    return;
 80086e4:	e76f      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
        USBD_CtlError(pdev, req);
 80086e6:	4629      	mov	r1, r5
 80086e8:	4620      	mov	r0, r4
 80086ea:	f7ff ff25 	bl	8008538 <USBD_CtlError>
 80086ee:	e76a      	b.n	80085c6 <USBD_GetDescriptor+0x7a>
      (void)USBD_CtlSendStatus(pdev);
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 fa7f 	bl	8008bf4 <USBD_CtlSendStatus>
 80086f6:	e766      	b.n	80085c6 <USBD_GetDescriptor+0x7a>

080086f8 <USBD_SetAddress>:
{
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086fc:	888b      	ldrh	r3, [r1, #4]
 80086fe:	b9f3      	cbnz	r3, 800873e <USBD_SetAddress+0x46>
 8008700:	88cb      	ldrh	r3, [r1, #6]
 8008702:	b9e3      	cbnz	r3, 800873e <USBD_SetAddress+0x46>
 8008704:	884b      	ldrh	r3, [r1, #2]
 8008706:	2b7f      	cmp	r3, #127	; 0x7f
 8008708:	d819      	bhi.n	800873e <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800870a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008712:	2b03      	cmp	r3, #3
 8008714:	d00c      	beq.n	8008730 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8008716:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800871a:	4629      	mov	r1, r5
 800871c:	f002 f9e3 	bl	800aae6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fa67 	bl	8008bf4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008726:	b135      	cbz	r5, 8008736 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008728:	2302      	movs	r3, #2
 800872a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800872e:	e009      	b.n	8008744 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8008730:	f7ff ff02 	bl	8008538 <USBD_CtlError>
 8008734:	e006      	b.n	8008744 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008736:	2301      	movs	r3, #1
 8008738:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800873c:	e002      	b.n	8008744 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800873e:	4620      	mov	r0, r4
 8008740:	f7ff fefa 	bl	8008538 <USBD_CtlError>
}
 8008744:	bd38      	pop	{r3, r4, r5, pc}
	...

08008748 <USBD_SetConfig>:
{
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4604      	mov	r4, r0
 800874c:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800874e:	788d      	ldrb	r5, [r1, #2]
 8008750:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <USBD_SetConfig+0xc0>)
 8008752:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008754:	2d01      	cmp	r5, #1
 8008756:	d80f      	bhi.n	8008778 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8008758:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800875c:	2b02      	cmp	r3, #2
 800875e:	d00f      	beq.n	8008780 <USBD_SetConfig+0x38>
 8008760:	2b03      	cmp	r3, #3
 8008762:	d023      	beq.n	80087ac <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 8008764:	f7ff fee8 	bl	8008538 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008768:	4b27      	ldr	r3, [pc, #156]	; (8008808 <USBD_SetConfig+0xc0>)
 800876a:	7819      	ldrb	r1, [r3, #0]
 800876c:	4620      	mov	r0, r4
 800876e:	f7ff fda5 	bl	80082bc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008772:	2503      	movs	r5, #3
}
 8008774:	4628      	mov	r0, r5
 8008776:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8008778:	f7ff fede 	bl	8008538 <USBD_CtlError>
    return USBD_FAIL;
 800877c:	2503      	movs	r5, #3
 800877e:	e7f9      	b.n	8008774 <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 8008780:	b18d      	cbz	r5, 80087a6 <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 8008782:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008784:	4629      	mov	r1, r5
 8008786:	f7ff fd90 	bl	80082aa <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800878a:	4605      	mov	r5, r0
 800878c:	b120      	cbz	r0, 8008798 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 800878e:	4631      	mov	r1, r6
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff fed1 	bl	8008538 <USBD_CtlError>
 8008796:	e7ed      	b.n	8008774 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fa2b 	bl	8008bf4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800879e:	2303      	movs	r3, #3
 80087a0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80087a4:	e7e6      	b.n	8008774 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 80087a6:	f000 fa25 	bl	8008bf4 <USBD_CtlSendStatus>
 80087aa:	e7e3      	b.n	8008774 <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 80087ac:	b1cd      	cbz	r5, 80087e2 <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 80087ae:	6841      	ldr	r1, [r0, #4]
 80087b0:	428d      	cmp	r5, r1
 80087b2:	d025      	beq.n	8008800 <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087b4:	b2c9      	uxtb	r1, r1
 80087b6:	f7ff fd81 	bl	80082bc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80087ba:	4b13      	ldr	r3, [pc, #76]	; (8008808 <USBD_SetConfig+0xc0>)
 80087bc:	7819      	ldrb	r1, [r3, #0]
 80087be:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7ff fd72 	bl	80082aa <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80087c6:	4605      	mov	r5, r0
 80087c8:	b1b0      	cbz	r0, 80087f8 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 80087ca:	4631      	mov	r1, r6
 80087cc:	4620      	mov	r0, r4
 80087ce:	f7ff feb3 	bl	8008538 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087d2:	7921      	ldrb	r1, [r4, #4]
 80087d4:	4620      	mov	r0, r4
 80087d6:	f7ff fd71 	bl	80082bc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087da:	2302      	movs	r3, #2
 80087dc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80087e0:	e7c8      	b.n	8008774 <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80087e2:	2302      	movs	r3, #2
 80087e4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80087e8:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087ea:	4629      	mov	r1, r5
 80087ec:	f7ff fd66 	bl	80082bc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 f9ff 	bl	8008bf4 <USBD_CtlSendStatus>
 80087f6:	e7bd      	b.n	8008774 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 f9fb 	bl	8008bf4 <USBD_CtlSendStatus>
 80087fe:	e7b9      	b.n	8008774 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 8008800:	f000 f9f8 	bl	8008bf4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008804:	2500      	movs	r5, #0
 8008806:	e7b5      	b.n	8008774 <USBD_SetConfig+0x2c>
 8008808:	20000fa0 	.word	0x20000fa0

0800880c <USBD_GetConfig>:
{
 800880c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800880e:	88cb      	ldrh	r3, [r1, #6]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d10a      	bne.n	800882a <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8008814:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008818:	2b02      	cmp	r3, #2
 800881a:	d909      	bls.n	8008830 <USBD_GetConfig+0x24>
 800881c:	2b03      	cmp	r3, #3
 800881e:	d109      	bne.n	8008834 <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008820:	2201      	movs	r2, #1
 8008822:	1d01      	adds	r1, r0, #4
 8008824:	f000 f9ba 	bl	8008b9c <USBD_CtlSendData>
      break;
 8008828:	e001      	b.n	800882e <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 800882a:	f7ff fe85 	bl	8008538 <USBD_CtlError>
}
 800882e:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8008830:	b25b      	sxtb	r3, r3
 8008832:	b913      	cbnz	r3, 800883a <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 8008834:	f7ff fe80 	bl	8008538 <USBD_CtlError>
}
 8008838:	e7f9      	b.n	800882e <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 800883a:	4601      	mov	r1, r0
 800883c:	2300      	movs	r3, #0
 800883e:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008842:	2201      	movs	r2, #1
 8008844:	f000 f9aa 	bl	8008b9c <USBD_CtlSendData>
      break;
 8008848:	e7f1      	b.n	800882e <USBD_GetConfig+0x22>

0800884a <USBD_GetStatus>:
{
 800884a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800884c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008850:	3b01      	subs	r3, #1
 8008852:	2b02      	cmp	r3, #2
 8008854:	d812      	bhi.n	800887c <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8008856:	88cb      	ldrh	r3, [r1, #6]
 8008858:	2b02      	cmp	r3, #2
 800885a:	d10c      	bne.n	8008876 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800885c:	2301      	movs	r3, #1
 800885e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8008860:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008864:	b10b      	cbz	r3, 800886a <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008866:	2303      	movs	r3, #3
 8008868:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800886a:	2202      	movs	r2, #2
 800886c:	f100 010c 	add.w	r1, r0, #12
 8008870:	f000 f994 	bl	8008b9c <USBD_CtlSendData>
}
 8008874:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8008876:	f7ff fe5f 	bl	8008538 <USBD_CtlError>
      break;
 800887a:	e7fb      	b.n	8008874 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800887c:	f7ff fe5c 	bl	8008538 <USBD_CtlError>
}
 8008880:	e7f8      	b.n	8008874 <USBD_GetStatus+0x2a>

08008882 <USBD_ClrFeature>:
{
 8008882:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8008884:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008888:	3b01      	subs	r3, #1
 800888a:	2b02      	cmp	r3, #2
 800888c:	d809      	bhi.n	80088a2 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800888e:	884b      	ldrh	r3, [r1, #2]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d000      	beq.n	8008896 <USBD_ClrFeature+0x14>
}
 8008894:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800889c:	f000 f9aa 	bl	8008bf4 <USBD_CtlSendStatus>
 80088a0:	e7f8      	b.n	8008894 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80088a2:	f7ff fe49 	bl	8008538 <USBD_CtlError>
}
 80088a6:	e7f5      	b.n	8008894 <USBD_ClrFeature+0x12>

080088a8 <USBD_StdDevReq>:
{
 80088a8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088aa:	780c      	ldrb	r4, [r1, #0]
 80088ac:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80088b0:	2c20      	cmp	r4, #32
 80088b2:	d006      	beq.n	80088c2 <USBD_StdDevReq+0x1a>
 80088b4:	2c40      	cmp	r4, #64	; 0x40
 80088b6:	d004      	beq.n	80088c2 <USBD_StdDevReq+0x1a>
 80088b8:	b154      	cbz	r4, 80088d0 <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 80088ba:	f7ff fe3d 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80088be:	2400      	movs	r4, #0
    break;
 80088c0:	e004      	b.n	80088cc <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4798      	blx	r3
 80088ca:	4604      	mov	r4, r0
}
 80088cc:	4620      	mov	r0, r4
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80088d0:	784d      	ldrb	r5, [r1, #1]
 80088d2:	2d09      	cmp	r5, #9
 80088d4:	d81d      	bhi.n	8008912 <USBD_StdDevReq+0x6a>
 80088d6:	e8df f005 	tbb	[pc, r5]
 80088da:	1912      	.short	0x1912
 80088dc:	081c161c 	.word	0x081c161c
 80088e0:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 80088e4:	f7ff fe32 	bl	800854c <USBD_GetDescriptor>
      break;
 80088e8:	e7f0      	b.n	80088cc <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 80088ea:	f7ff ff05 	bl	80086f8 <USBD_SetAddress>
      break;
 80088ee:	e7ed      	b.n	80088cc <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 80088f0:	f7ff ff2a 	bl	8008748 <USBD_SetConfig>
 80088f4:	4604      	mov	r4, r0
      break;
 80088f6:	e7e9      	b.n	80088cc <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 80088f8:	f7ff ff88 	bl	800880c <USBD_GetConfig>
      break;
 80088fc:	e7e6      	b.n	80088cc <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 80088fe:	f7ff ffa4 	bl	800884a <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	462c      	mov	r4, r5
      break;
 8008904:	e7e2      	b.n	80088cc <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 8008906:	f7ff fdf9 	bl	80084fc <USBD_SetFeature>
      break;
 800890a:	e7df      	b.n	80088cc <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 800890c:	f7ff ffb9 	bl	8008882 <USBD_ClrFeature>
      break;
 8008910:	e7dc      	b.n	80088cc <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8008912:	f7ff fe11 	bl	8008538 <USBD_CtlError>
      break;
 8008916:	e7d9      	b.n	80088cc <USBD_StdDevReq+0x24>

08008918 <USBD_StdItfReq>:
{
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4605      	mov	r5, r0
 800891c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800891e:	780b      	ldrb	r3, [r1, #0]
 8008920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008924:	2b20      	cmp	r3, #32
 8008926:	d007      	beq.n	8008938 <USBD_StdItfReq+0x20>
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	d005      	beq.n	8008938 <USBD_StdItfReq+0x20>
 800892c:	b123      	cbz	r3, 8008938 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 800892e:	f7ff fe03 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008932:	2600      	movs	r6, #0
}
 8008934:	4630      	mov	r0, r6
 8008936:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8008938:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800893c:	3b01      	subs	r3, #1
 800893e:	2b02      	cmp	r3, #2
 8008940:	d818      	bhi.n	8008974 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008942:	7923      	ldrb	r3, [r4, #4]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d80f      	bhi.n	8008968 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008948:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	4621      	mov	r1, r4
 8008950:	4628      	mov	r0, r5
 8008952:	4798      	blx	r3
 8008954:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008956:	88e3      	ldrh	r3, [r4, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1eb      	bne.n	8008934 <USBD_StdItfReq+0x1c>
 800895c:	2800      	cmp	r0, #0
 800895e:	d1e9      	bne.n	8008934 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f947 	bl	8008bf4 <USBD_CtlSendStatus>
 8008966:	e7e5      	b.n	8008934 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8008968:	4621      	mov	r1, r4
 800896a:	4628      	mov	r0, r5
 800896c:	f7ff fde4 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008970:	2600      	movs	r6, #0
 8008972:	e7df      	b.n	8008934 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8008974:	4621      	mov	r1, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f7ff fdde 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800897c:	2600      	movs	r6, #0
      break;
 800897e:	e7d9      	b.n	8008934 <USBD_StdItfReq+0x1c>

08008980 <USBD_StdEPReq>:
{
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	4606      	mov	r6, r0
 8008984:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8008986:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008988:	780c      	ldrb	r4, [r1, #0]
 800898a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800898e:	2c20      	cmp	r4, #32
 8008990:	d008      	beq.n	80089a4 <USBD_StdEPReq+0x24>
 8008992:	b2d9      	uxtb	r1, r3
 8008994:	2c40      	cmp	r4, #64	; 0x40
 8008996:	d005      	beq.n	80089a4 <USBD_StdEPReq+0x24>
 8008998:	b16c      	cbz	r4, 80089b6 <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 800899a:	4629      	mov	r1, r5
 800899c:	f7ff fdcc 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80089a0:	2400      	movs	r4, #0
    break;
 80089a2:	e006      	b.n	80089b2 <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089a4:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	4629      	mov	r1, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	4798      	blx	r3
 80089b0:	4604      	mov	r4, r0
}
 80089b2:	4620      	mov	r0, r4
 80089b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 80089b6:	786f      	ldrb	r7, [r5, #1]
 80089b8:	2f01      	cmp	r7, #1
 80089ba:	d02e      	beq.n	8008a1a <USBD_StdEPReq+0x9a>
 80089bc:	2f03      	cmp	r7, #3
 80089be:	d005      	beq.n	80089cc <USBD_StdEPReq+0x4c>
 80089c0:	2f00      	cmp	r7, #0
 80089c2:	d057      	beq.n	8008a74 <USBD_StdEPReq+0xf4>
      USBD_CtlError(pdev, req);
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7ff fdb7 	bl	8008538 <USBD_CtlError>
      break;
 80089ca:	e7f2      	b.n	80089b2 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80089cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d005      	beq.n	80089e0 <USBD_StdEPReq+0x60>
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d012      	beq.n	80089fe <USBD_StdEPReq+0x7e>
        USBD_CtlError(pdev, req);
 80089d8:	4629      	mov	r1, r5
 80089da:	f7ff fdad 	bl	8008538 <USBD_CtlError>
        break;
 80089de:	e7e8      	b.n	80089b2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089e0:	b109      	cbz	r1, 80089e6 <USBD_StdEPReq+0x66>
 80089e2:	2980      	cmp	r1, #128	; 0x80
 80089e4:	d104      	bne.n	80089f0 <USBD_StdEPReq+0x70>
          USBD_CtlError(pdev, req);
 80089e6:	4629      	mov	r1, r5
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff fda5 	bl	8008538 <USBD_CtlError>
 80089ee:	e7e0      	b.n	80089b2 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80089f0:	f002 f844 	bl	800aa7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089f4:	2180      	movs	r1, #128	; 0x80
 80089f6:	4630      	mov	r0, r6
 80089f8:	f002 f840 	bl	800aa7c <USBD_LL_StallEP>
 80089fc:	e7d9      	b.n	80089b2 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089fe:	886b      	ldrh	r3, [r5, #2]
 8008a00:	b923      	cbnz	r3, 8008a0c <USBD_StdEPReq+0x8c>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a02:	b119      	cbz	r1, 8008a0c <USBD_StdEPReq+0x8c>
 8008a04:	2980      	cmp	r1, #128	; 0x80
 8008a06:	d001      	beq.n	8008a0c <USBD_StdEPReq+0x8c>
 8008a08:	88eb      	ldrh	r3, [r5, #6]
 8008a0a:	b11b      	cbz	r3, 8008a14 <USBD_StdEPReq+0x94>
        (void)USBD_CtlSendStatus(pdev);
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f000 f8f1 	bl	8008bf4 <USBD_CtlSendStatus>
        break;
 8008a12:	e7ce      	b.n	80089b2 <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a14:	f002 f832 	bl	800aa7c <USBD_LL_StallEP>
 8008a18:	e7f8      	b.n	8008a0c <USBD_StdEPReq+0x8c>
      switch (pdev->dev_state)
 8008a1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d005      	beq.n	8008a2e <USBD_StdEPReq+0xae>
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d012      	beq.n	8008a4c <USBD_StdEPReq+0xcc>
        USBD_CtlError(pdev, req);
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7ff fd86 	bl	8008538 <USBD_CtlError>
        break;
 8008a2c:	e7c1      	b.n	80089b2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a2e:	b109      	cbz	r1, 8008a34 <USBD_StdEPReq+0xb4>
 8008a30:	2980      	cmp	r1, #128	; 0x80
 8008a32:	d104      	bne.n	8008a3e <USBD_StdEPReq+0xbe>
          USBD_CtlError(pdev, req);
 8008a34:	4629      	mov	r1, r5
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff fd7e 	bl	8008538 <USBD_CtlError>
 8008a3c:	e7b9      	b.n	80089b2 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a3e:	f002 f81d 	bl	800aa7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a42:	2180      	movs	r1, #128	; 0x80
 8008a44:	4630      	mov	r0, r6
 8008a46:	f002 f819 	bl	800aa7c <USBD_LL_StallEP>
 8008a4a:	e7b2      	b.n	80089b2 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a4c:	886b      	ldrh	r3, [r5, #2]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1af      	bne.n	80089b2 <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a52:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8008a56:	d10a      	bne.n	8008a6e <USBD_StdEPReq+0xee>
          (void)USBD_CtlSendStatus(pdev);
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f000 f8cb 	bl	8008bf4 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a5e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	4629      	mov	r1, r5
 8008a66:	4630      	mov	r0, r6
 8008a68:	4798      	blx	r3
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	e7a1      	b.n	80089b2 <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a6e:	f002 f814 	bl	800aa9a <USBD_LL_ClearStallEP>
 8008a72:	e7f1      	b.n	8008a58 <USBD_StdEPReq+0xd8>
      switch (pdev->dev_state)
 8008a74:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008a78:	2a02      	cmp	r2, #2
 8008a7a:	d006      	beq.n	8008a8a <USBD_StdEPReq+0x10a>
 8008a7c:	2a03      	cmp	r2, #3
 8008a7e:	d029      	beq.n	8008ad4 <USBD_StdEPReq+0x154>
        USBD_CtlError(pdev, req);
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7ff fd59 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008a86:	463c      	mov	r4, r7
        break;
 8008a88:	e793      	b.n	80089b2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a8a:	b109      	cbz	r1, 8008a90 <USBD_StdEPReq+0x110>
 8008a8c:	2980      	cmp	r1, #128	; 0x80
 8008a8e:	d113      	bne.n	8008ab8 <USBD_StdEPReq+0x138>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a94:	d115      	bne.n	8008ac2 <USBD_StdEPReq+0x142>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a96:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008a9e:	0089      	lsls	r1, r1, #2
 8008aa0:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8008aa4:	4431      	add	r1, r6
 8008aa6:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008aac:	2202      	movs	r2, #2
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f000 f874 	bl	8008b9c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008ab4:	463c      	mov	r4, r7
        break;
 8008ab6:	e77c      	b.n	80089b2 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7ff fd3d 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008abe:	463c      	mov	r4, r7
          break;
 8008ac0:	e777      	b.n	80089b2 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8008ac6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008aca:	0089      	lsls	r1, r1, #2
 8008acc:	3110      	adds	r1, #16
 8008ace:	4431      	add	r1, r6
 8008ad0:	3104      	adds	r1, #4
 8008ad2:	e7e9      	b.n	8008aa8 <USBD_StdEPReq+0x128>
        if ((ep_addr & 0x80U) == 0x80U)
 8008ad4:	b25b      	sxtb	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	db1f      	blt.n	8008b1a <USBD_StdEPReq+0x19a>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ada:	f001 020f 	and.w	r2, r1, #15
 8008ade:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008ae2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ae6:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8008aea:	b322      	cbz	r2, 8008b36 <USBD_StdEPReq+0x1b6>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db27      	blt.n	8008b40 <USBD_StdEPReq+0x1c0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008af0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008af4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008af8:	009c      	lsls	r4, r3, #2
 8008afa:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008afe:	4434      	add	r4, r6
 8008b00:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b02:	b109      	cbz	r1, 8008b08 <USBD_StdEPReq+0x188>
 8008b04:	2980      	cmp	r1, #128	; 0x80
 8008b06:	d124      	bne.n	8008b52 <USBD_StdEPReq+0x1d2>
            pep->status = 0x0000U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4630      	mov	r0, r6
 8008b12:	f000 f843 	bl	8008b9c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b16:	463c      	mov	r4, r7
          break;
 8008b18:	e74b      	b.n	80089b2 <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b1a:	f001 020f 	and.w	r2, r1, #15
 8008b1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008b22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008b26:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008b28:	2a00      	cmp	r2, #0
 8008b2a:	d1df      	bne.n	8008aec <USBD_StdEPReq+0x16c>
            USBD_CtlError(pdev, req);
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7ff fd03 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b32:	463c      	mov	r4, r7
            break;
 8008b34:	e73d      	b.n	80089b2 <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 8008b36:	4629      	mov	r1, r5
 8008b38:	f7ff fcfe 	bl	8008538 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3c:	463c      	mov	r4, r7
            break;
 8008b3e:	e738      	b.n	80089b2 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b40:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8008b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b48:	009c      	lsls	r4, r3, #2
 8008b4a:	3410      	adds	r4, #16
 8008b4c:	4434      	add	r4, r6
 8008b4e:	3404      	adds	r4, #4
 8008b50:	e7d7      	b.n	8008b02 <USBD_StdEPReq+0x182>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b52:	4630      	mov	r0, r6
 8008b54:	f001 ffb0 	bl	800aab8 <USBD_LL_IsStallEP>
 8008b58:	b110      	cbz	r0, 8008b60 <USBD_StdEPReq+0x1e0>
            pep->status = 0x0001U;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	e7d5      	b.n	8008b0c <USBD_StdEPReq+0x18c>
            pep->status = 0x0000U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	e7d2      	b.n	8008b0c <USBD_StdEPReq+0x18c>

08008b66 <USBD_GetString>:
  if (desc == NULL)
 8008b66:	b1c0      	cbz	r0, 8008b9a <USBD_GetString+0x34>
{
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b70:	f7ff fcbb 	bl	80084ea <USBD_GetLen>
 8008b74:	3001      	adds	r0, #1
 8008b76:	0040      	lsls	r0, r0, #1
 8008b78:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8008b7a:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	706b      	strb	r3, [r5, #1]
  idx++;
 8008b80:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8008b82:	7822      	ldrb	r2, [r4, #0]
 8008b84:	b142      	cbz	r2, 8008b98 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 8008b86:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8008b88:	3401      	adds	r4, #1
    idx++;
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8008b8e:	2100      	movs	r1, #0
 8008b90:	54a9      	strb	r1, [r5, r2]
    idx++;
 8008b92:	3302      	adds	r3, #2
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	e7f4      	b.n	8008b82 <USBD_GetString+0x1c>
}
 8008b98:	bd70      	pop	{r4, r5, r6, pc}
 8008b9a:	4770      	bx	lr

08008b9c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ba6:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8008ba8:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008baa:	460a      	mov	r2, r1
 8008bac:	2100      	movs	r1, #0
 8008bae:	f001 ffa9 	bl	800ab04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	bd10      	pop	{r4, pc}

08008bb6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bb6:	b508      	push	{r3, lr}
 8008bb8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bba:	460a      	mov	r2, r1
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f001 ffa1 	bl	800ab04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	bd08      	pop	{r3, pc}

08008bc6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bc6:	b510      	push	{r4, lr}
 8008bc8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bca:	2203      	movs	r2, #3
 8008bcc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008bd0:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008bd4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bd8:	460a      	mov	r2, r1
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f001 ffa1 	bl	800ab22 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008be0:	2000      	movs	r0, #0
 8008be2:	bd10      	pop	{r4, pc}

08008be4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008be4:	b508      	push	{r3, lr}
 8008be6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008be8:	460a      	mov	r2, r1
 8008bea:	2100      	movs	r1, #0
 8008bec:	f001 ff99 	bl	800ab22 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	bd08      	pop	{r3, pc}

08008bf4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bf4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bf6:	2304      	movs	r3, #4
 8008bf8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4619      	mov	r1, r3
 8008c02:	f001 ff7f 	bl	800ab04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008c06:	2000      	movs	r0, #0
 8008c08:	bd08      	pop	{r3, pc}

08008c0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c0a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c0c:	2305      	movs	r3, #5
 8008c0e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c12:	2300      	movs	r3, #0
 8008c14:	461a      	mov	r2, r3
 8008c16:	4619      	mov	r1, r3
 8008c18:	f001 ff83 	bl	800ab22 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	bd08      	pop	{r3, pc}

08008c20 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008c20:	2884      	cmp	r0, #132	; 0x84
 8008c22:	d001      	beq.n	8008c28 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008c24:	3003      	adds	r0, #3
 8008c26:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008c28:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008c2a:	4770      	bx	lr

08008c2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008c2c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008c2e:	f000 feb7 	bl	80099a0 <vTaskStartScheduler>
  
  return osOK;
}
 8008c32:	2000      	movs	r0, #0
 8008c34:	bd08      	pop	{r3, pc}

08008c36 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008c36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008c40:	6945      	ldr	r5, [r0, #20]
 8008c42:	b1bd      	cbz	r5, 8008c74 <osThreadCreate+0x3e>
 8008c44:	6986      	ldr	r6, [r0, #24]
 8008c46:	b1ae      	cbz	r6, 8008c74 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c48:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008c4c:	f8d0 9000 	ldr.w	r9, [r0]
 8008c50:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008c54:	f7ff ffe4 	bl	8008c20 <makeFreeRtosPriority>
 8008c58:	9602      	str	r6, [sp, #8]
 8008c5a:	9501      	str	r5, [sp, #4]
 8008c5c:	9000      	str	r0, [sp, #0]
 8008c5e:	463b      	mov	r3, r7
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	4649      	mov	r1, r9
 8008c64:	4640      	mov	r0, r8
 8008c66:	f000 fe2d 	bl	80098c4 <xTaskCreateStatic>
 8008c6a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008c6c:	9805      	ldr	r0, [sp, #20]
}
 8008c6e:	b007      	add	sp, #28
 8008c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c74:	6865      	ldr	r5, [r4, #4]
 8008c76:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c78:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c7c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8008c80:	f7ff ffce 	bl	8008c20 <makeFreeRtosPriority>
 8008c84:	ab05      	add	r3, sp, #20
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	9000      	str	r0, [sp, #0]
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	fa1f f288 	uxth.w	r2, r8
 8008c90:	4631      	mov	r1, r6
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 fe50 	bl	8009938 <xTaskCreate>
 8008c98:	2801      	cmp	r0, #1
 8008c9a:	d0e7      	beq.n	8008c6c <osThreadCreate+0x36>
      return NULL;
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e7e6      	b.n	8008c6e <osThreadCreate+0x38>

08008ca0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008ca0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ca2:	b900      	cbnz	r0, 8008ca6 <osDelay+0x6>
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f000 ffc1 	bl	8009c2c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008caa:	2000      	movs	r0, #0
 8008cac:	bd08      	pop	{r3, pc}

08008cae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008cb2:	6844      	ldr	r4, [r0, #4]
 8008cb4:	b17c      	cbz	r4, 8008cd6 <osSemaphoreCreate+0x28>
    if (count == 1) {
 8008cb6:	2901      	cmp	r1, #1
 8008cb8:	d003      	beq.n	8008cc2 <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008cba:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	b002      	add	sp, #8
 8008cc0:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4611      	mov	r1, r2
 8008ccc:	2001      	movs	r0, #1
 8008cce:	f000 f965 	bl	8008f9c <xQueueGenericCreateStatic>
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	e7f2      	b.n	8008cbc <osSemaphoreCreate+0xe>
    if (count == 1) {
 8008cd6:	2901      	cmp	r1, #1
 8008cd8:	d1f0      	bne.n	8008cbc <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8008cda:	2203      	movs	r2, #3
 8008cdc:	2100      	movs	r1, #0
 8008cde:	2001      	movs	r0, #1
 8008ce0:	f000 f9a6 	bl	8009030 <xQueueGenericCreate>
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d0e8      	beq.n	8008cbc <osSemaphoreCreate+0xe>
 8008cea:	2300      	movs	r3, #0
 8008cec:	461a      	mov	r2, r3
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f000 f9c6 	bl	8009080 <xQueueGenericSend>
      return sema;
 8008cf4:	e7e2      	b.n	8008cbc <osSemaphoreCreate+0xe>

08008cf6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008cf6:	b500      	push	{lr}
 8008cf8:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008cfa:	6882      	ldr	r2, [r0, #8]
 8008cfc:	b142      	cbz	r2, 8008d10 <osMessageCreate+0x1a>
 8008cfe:	68c3      	ldr	r3, [r0, #12]
 8008d00:	b133      	cbz	r3, 8008d10 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008d02:	2100      	movs	r1, #0
 8008d04:	9100      	str	r1, [sp, #0]
 8008d06:	6841      	ldr	r1, [r0, #4]
 8008d08:	6800      	ldr	r0, [r0, #0]
 8008d0a:	f000 f947 	bl	8008f9c <xQueueGenericCreateStatic>
 8008d0e:	e004      	b.n	8008d1a <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008d10:	2200      	movs	r2, #0
 8008d12:	6841      	ldr	r1, [r0, #4]
 8008d14:	6800      	ldr	r0, [r0, #0]
 8008d16:	f000 f98b 	bl	8009030 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008d1a:	b003      	add	sp, #12
 8008d1c:	f85d fb04 	ldr.w	pc, [sp], #4

08008d20 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d20:	f100 0308 	add.w	r3, r0, #8
 8008d24:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d2a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d2c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d2e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d34:	4770      	bx	lr

08008d36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d3a:	4770      	bx	lr

08008d3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d3c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d3e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d40:	689a      	ldr	r2, [r3, #8]
 8008d42:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d44:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d46:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d48:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008d4a:	6803      	ldr	r3, [r0, #0]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	6003      	str	r3, [r0, #0]
}
 8008d50:	4770      	bx	lr

08008d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d52:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d54:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d56:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008d5a:	d011      	beq.n	8008d80 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d5c:	f100 0308 	add.w	r3, r0, #8
 8008d60:	461c      	mov	r4, r3
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	42aa      	cmp	r2, r5
 8008d68:	d9fa      	bls.n	8008d60 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d6a:	6863      	ldr	r3, [r4, #4]
 8008d6c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d6e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d70:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d72:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d74:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008d76:	6803      	ldr	r3, [r0, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	6003      	str	r3, [r0, #0]
}
 8008d7c:	bc30      	pop	{r4, r5}
 8008d7e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d80:	6904      	ldr	r4, [r0, #16]
 8008d82:	e7f2      	b.n	8008d6a <vListInsert+0x18>

08008d84 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d84:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d86:	6841      	ldr	r1, [r0, #4]
 8008d88:	6882      	ldr	r2, [r0, #8]
 8008d8a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d8c:	6841      	ldr	r1, [r0, #4]
 8008d8e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	4282      	cmp	r2, r0
 8008d94:	d006      	beq.n	8008da4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d96:	2200      	movs	r2, #0
 8008d98:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	3a01      	subs	r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008da0:	6818      	ldr	r0, [r3, #0]
}
 8008da2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008da4:	6882      	ldr	r2, [r0, #8]
 8008da6:	605a      	str	r2, [r3, #4]
 8008da8:	e7f5      	b.n	8008d96 <uxListRemove+0x12>

08008daa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008daa:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008dac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008dae:	b118      	cbz	r0, 8008db8 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8008db8:	4770      	bx	lr

08008dba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dbe:	f001 f9f9 	bl	800a1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008dc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008dc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d004      	beq.n	8008dd4 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008dca:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008dcc:	f001 fa14 	bl	800a1f8 <vPortExitCritical>

	return xReturn;
}
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008dd4:	2401      	movs	r4, #1
 8008dd6:	e7f9      	b.n	8008dcc <prvIsQueueFull+0x12>

08008dd8 <prvIsQueueEmpty>:
{
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008ddc:	f001 f9ea 	bl	800a1b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008de2:	b923      	cbnz	r3, 8008dee <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008de4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008de6:	f001 fa07 	bl	800a1f8 <vPortExitCritical>
}
 8008dea:	4620      	mov	r0, r4
 8008dec:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8008dee:	2400      	movs	r4, #0
 8008df0:	e7f9      	b.n	8008de6 <prvIsQueueEmpty+0xe>

08008df2 <prvCopyDataToQueue>:
{
 8008df2:	b570      	push	{r4, r5, r6, lr}
 8008df4:	4604      	mov	r4, r0
 8008df6:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008df8:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dfa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008dfc:	b95a      	cbnz	r2, 8008e16 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dfe:	6803      	ldr	r3, [r0, #0]
 8008e00:	b11b      	cbz	r3, 8008e0a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008e02:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e04:	3601      	adds	r6, #1
 8008e06:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008e08:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e0a:	6880      	ldr	r0, [r0, #8]
 8008e0c:	f001 f89e 	bl	8009f4c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60a3      	str	r3, [r4, #8]
 8008e14:	e7f6      	b.n	8008e04 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008e16:	b96d      	cbnz	r5, 8008e34 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e18:	6840      	ldr	r0, [r0, #4]
 8008e1a:	f001 fef5 	bl	800ac08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e20:	6863      	ldr	r3, [r4, #4]
 8008e22:	4413      	add	r3, r2
 8008e24:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e26:	68a2      	ldr	r2, [r4, #8]
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d319      	bcc.n	8008e60 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008e30:	4628      	mov	r0, r5
 8008e32:	e7e7      	b.n	8008e04 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e34:	68c0      	ldr	r0, [r0, #12]
 8008e36:	f001 fee7 	bl	800ac08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e3c:	4251      	negs	r1, r2
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	1a9b      	subs	r3, r3, r2
 8008e42:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d202      	bcs.n	8008e50 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	440b      	add	r3, r1
 8008e4e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008e50:	2d02      	cmp	r5, #2
 8008e52:	d001      	beq.n	8008e58 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008e54:	2000      	movs	r0, #0
 8008e56:	e7d5      	b.n	8008e04 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e58:	b126      	cbz	r6, 8008e64 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008e5a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e7d1      	b.n	8008e04 <prvCopyDataToQueue+0x12>
 8008e60:	4628      	mov	r0, r5
 8008e62:	e7cf      	b.n	8008e04 <prvCopyDataToQueue+0x12>
 8008e64:	2000      	movs	r0, #0
 8008e66:	e7cd      	b.n	8008e04 <prvCopyDataToQueue+0x12>

08008e68 <prvCopyDataFromQueue>:
{
 8008e68:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008e6c:	b16a      	cbz	r2, 8008e8a <prvCopyDataFromQueue+0x22>
{
 8008e6e:	b510      	push	{r4, lr}
 8008e70:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e72:	68d9      	ldr	r1, [r3, #12]
 8008e74:	4411      	add	r1, r2
 8008e76:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e78:	689c      	ldr	r4, [r3, #8]
 8008e7a:	42a1      	cmp	r1, r4
 8008e7c:	d301      	bcc.n	8008e82 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e7e:	6819      	ldr	r1, [r3, #0]
 8008e80:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e82:	68d9      	ldr	r1, [r3, #12]
 8008e84:	f001 fec0 	bl	800ac08 <memcpy>
}
 8008e88:	bd10      	pop	{r4, pc}
 8008e8a:	4770      	bx	lr

08008e8c <prvUnlockQueue>:
{
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008e90:	f001 f990 	bl	800a1b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008e94:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008e98:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e9a:	e003      	b.n	8008ea4 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8008e9c:	f000 ffe4 	bl	8009e68 <vTaskMissedYield>
			--cTxLock;
 8008ea0:	3c01      	subs	r4, #1
 8008ea2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ea4:	2c00      	cmp	r4, #0
 8008ea6:	dd08      	ble.n	8008eba <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008eaa:	b133      	cbz	r3, 8008eba <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008eb0:	f000 ff46 	bl	8009d40 <xTaskRemoveFromEventList>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d0f3      	beq.n	8008ea0 <prvUnlockQueue+0x14>
 8008eb8:	e7f0      	b.n	8008e9c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008eba:	23ff      	movs	r3, #255	; 0xff
 8008ebc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008ec0:	f001 f99a 	bl	800a1f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008ec4:	f001 f976 	bl	800a1b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008ec8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008ecc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ece:	e003      	b.n	8008ed8 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8008ed0:	f000 ffca 	bl	8009e68 <vTaskMissedYield>
				--cRxLock;
 8008ed4:	3c01      	subs	r4, #1
 8008ed6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ed8:	2c00      	cmp	r4, #0
 8008eda:	dd08      	ble.n	8008eee <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008edc:	692b      	ldr	r3, [r5, #16]
 8008ede:	b133      	cbz	r3, 8008eee <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee0:	f105 0010 	add.w	r0, r5, #16
 8008ee4:	f000 ff2c 	bl	8009d40 <xTaskRemoveFromEventList>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d0f3      	beq.n	8008ed4 <prvUnlockQueue+0x48>
 8008eec:	e7f0      	b.n	8008ed0 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008eee:	23ff      	movs	r3, #255	; 0xff
 8008ef0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008ef4:	f001 f980 	bl	800a1f8 <vPortExitCritical>
}
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
	...

08008efc <xQueueGenericReset>:
{
 8008efc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008efe:	b1e0      	cbz	r0, 8008f3a <xQueueGenericReset+0x3e>
 8008f00:	460d      	mov	r5, r1
 8008f02:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008f04:	f001 f956 	bl	800a1b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f08:	6821      	ldr	r1, [r4, #0]
 8008f0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f0e:	fb03 1002 	mla	r0, r3, r2, r1
 8008f12:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f14:	2000      	movs	r0, #0
 8008f16:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f18:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f1a:	3a01      	subs	r2, #1
 8008f1c:	fb02 1303 	mla	r3, r2, r3, r1
 8008f20:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f22:	23ff      	movs	r3, #255	; 0xff
 8008f24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008f2c:	b9ed      	cbnz	r5, 8008f6a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	b963      	cbnz	r3, 8008f4c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008f32:	f001 f961 	bl	800a1f8 <vPortExitCritical>
}
 8008f36:	2001      	movs	r0, #1
 8008f38:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008f4a:	e7fe      	b.n	8008f4a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f4c:	f104 0010 	add.w	r0, r4, #16
 8008f50:	f000 fef6 	bl	8009d40 <xTaskRemoveFromEventList>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d0ec      	beq.n	8008f32 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008f58:	4b08      	ldr	r3, [pc, #32]	; (8008f7c <xQueueGenericReset+0x80>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	e7e3      	b.n	8008f32 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f6a:	f104 0010 	add.w	r0, r4, #16
 8008f6e:	f7ff fed7 	bl	8008d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f76:	f7ff fed3 	bl	8008d20 <vListInitialise>
 8008f7a:	e7da      	b.n	8008f32 <xQueueGenericReset+0x36>
 8008f7c:	e000ed04 	.word	0xe000ed04

08008f80 <prvInitialiseNewQueue>:
{
 8008f80:	b510      	push	{r4, lr}
 8008f82:	4603      	mov	r3, r0
 8008f84:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f86:	460c      	mov	r4, r1
 8008f88:	b931      	cbnz	r1, 8008f98 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f8a:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008f8c:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f8e:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f90:	2101      	movs	r1, #1
 8008f92:	f7ff ffb3 	bl	8008efc <xQueueGenericReset>
}
 8008f96:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f98:	6002      	str	r2, [r0, #0]
 8008f9a:	e7f7      	b.n	8008f8c <prvInitialiseNewQueue+0xc>

08008f9c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f9c:	b940      	cbnz	r0, 8008fb0 <xQueueGenericCreateStatic+0x14>
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	e7fe      	b.n	8008fae <xQueueGenericCreateStatic+0x12>
	{
 8008fb0:	b530      	push	{r4, r5, lr}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	461c      	mov	r4, r3
 8008fb6:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8008fb8:	b153      	cbz	r3, 8008fd0 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fba:	b192      	cbz	r2, 8008fe2 <xQueueGenericCreateStatic+0x46>
 8008fbc:	b989      	cbnz	r1, 8008fe2 <xQueueGenericCreateStatic+0x46>
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	e7fe      	b.n	8008fce <xQueueGenericCreateStatic+0x32>
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8008fe0:	e7fe      	b.n	8008fe0 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008fe2:	b16a      	cbz	r2, 8009000 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fe4:	2348      	movs	r3, #72	; 0x48
 8008fe6:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	2b48      	cmp	r3, #72	; 0x48
 8008fec:	d013      	beq.n	8009016 <xQueueGenericCreateStatic+0x7a>
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	e7fe      	b.n	8008ffe <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009000:	2900      	cmp	r1, #0
 8009002:	d0ef      	beq.n	8008fe4 <xQueueGenericCreateStatic+0x48>
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	e7fe      	b.n	8009014 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009016:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009018:	2301      	movs	r3, #1
 800901a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800901e:	9400      	str	r4, [sp, #0]
 8009020:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009024:	4628      	mov	r0, r5
 8009026:	f7ff ffab 	bl	8008f80 <prvInitialiseNewQueue>
	}
 800902a:	4620      	mov	r0, r4
 800902c:	b005      	add	sp, #20
 800902e:	bd30      	pop	{r4, r5, pc}

08009030 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009030:	b940      	cbnz	r0, 8009044 <xQueueGenericCreate+0x14>
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	e7fe      	b.n	8009042 <xQueueGenericCreate+0x12>
	{
 8009044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009046:	b083      	sub	sp, #12
 8009048:	460c      	mov	r4, r1
 800904a:	4616      	mov	r6, r2
 800904c:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800904e:	b1a1      	cbz	r1, 800907a <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009050:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009054:	3048      	adds	r0, #72	; 0x48
 8009056:	f001 fa65 	bl	800a524 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800905a:	4605      	mov	r5, r0
 800905c:	b150      	cbz	r0, 8009074 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800905e:	2300      	movs	r3, #0
 8009060:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009064:	9000      	str	r0, [sp, #0]
 8009066:	4633      	mov	r3, r6
 8009068:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800906c:	4621      	mov	r1, r4
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ff86 	bl	8008f80 <prvInitialiseNewQueue>
	}
 8009074:	4628      	mov	r0, r5
 8009076:	b003      	add	sp, #12
 8009078:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 800907a:	4608      	mov	r0, r1
 800907c:	e7ea      	b.n	8009054 <xQueueGenericCreate+0x24>
	...

08009080 <xQueueGenericSend>:
{
 8009080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009082:	b085      	sub	sp, #20
 8009084:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009086:	b188      	cbz	r0, 80090ac <xQueueGenericSend+0x2c>
 8009088:	460e      	mov	r6, r1
 800908a:	461d      	mov	r5, r3
 800908c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800908e:	b1b1      	cbz	r1, 80090be <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009090:	2d02      	cmp	r5, #2
 8009092:	d120      	bne.n	80090d6 <xQueueGenericSend+0x56>
 8009094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009096:	2b01      	cmp	r3, #1
 8009098:	d01d      	beq.n	80090d6 <xQueueGenericSend+0x56>
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	e7fe      	b.n	80090aa <xQueueGenericSend+0x2a>
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80090bc:	e7fe      	b.n	80090bc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0e5      	beq.n	8009090 <xQueueGenericSend+0x10>
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	e7fe      	b.n	80090d4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090d6:	f000 fecd 	bl	8009e74 <xTaskGetSchedulerState>
 80090da:	4607      	mov	r7, r0
 80090dc:	b958      	cbnz	r0, 80090f6 <xQueueGenericSend+0x76>
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d044      	beq.n	800916e <xQueueGenericSend+0xee>
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	e7fe      	b.n	80090f4 <xQueueGenericSend+0x74>
 80090f6:	2700      	movs	r7, #0
 80090f8:	e039      	b.n	800916e <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090fa:	462a      	mov	r2, r5
 80090fc:	4631      	mov	r1, r6
 80090fe:	4620      	mov	r0, r4
 8009100:	f7ff fe77 	bl	8008df2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009104:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009106:	b96a      	cbnz	r2, 8009124 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8009108:	b138      	cbz	r0, 800911a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800910a:	4b3c      	ldr	r3, [pc, #240]	; (80091fc <xQueueGenericSend+0x17c>)
 800910c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800911a:	f001 f86d 	bl	800a1f8 <vPortExitCritical>
				return pdPASS;
 800911e:	2001      	movs	r0, #1
}
 8009120:	b005      	add	sp, #20
 8009122:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009124:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009128:	f000 fe0a 	bl	8009d40 <xTaskRemoveFromEventList>
 800912c:	2800      	cmp	r0, #0
 800912e:	d0f4      	beq.n	800911a <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8009130:	4b32      	ldr	r3, [pc, #200]	; (80091fc <xQueueGenericSend+0x17c>)
 8009132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	e7eb      	b.n	800911a <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8009142:	f001 f859 	bl	800a1f8 <vPortExitCritical>
					return errQUEUE_FULL;
 8009146:	2000      	movs	r0, #0
 8009148:	e7ea      	b.n	8009120 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800914a:	a802      	add	r0, sp, #8
 800914c:	f000 fe3e 	bl	8009dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009150:	2701      	movs	r7, #1
 8009152:	e019      	b.n	8009188 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8009154:	2300      	movs	r3, #0
 8009156:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800915a:	e021      	b.n	80091a0 <xQueueGenericSend+0x120>
 800915c:	2300      	movs	r3, #0
 800915e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009162:	e023      	b.n	80091ac <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 8009164:	4620      	mov	r0, r4
 8009166:	f7ff fe91 	bl	8008e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800916a:	f000 fce3 	bl	8009b34 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800916e:	f001 f821 	bl	800a1b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009172:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009174:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009176:	429a      	cmp	r2, r3
 8009178:	d3bf      	bcc.n	80090fa <xQueueGenericSend+0x7a>
 800917a:	2d02      	cmp	r5, #2
 800917c:	d0bd      	beq.n	80090fa <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0de      	beq.n	8009142 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 8009184:	2f00      	cmp	r7, #0
 8009186:	d0e0      	beq.n	800914a <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 8009188:	f001 f836 	bl	800a1f8 <vPortExitCritical>
		vTaskSuspendAll();
 800918c:	f000 fc3e 	bl	8009a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009190:	f001 f810 	bl	800a1b4 <vPortEnterCritical>
 8009194:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009198:	b25b      	sxtb	r3, r3
 800919a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800919e:	d0d9      	beq.n	8009154 <xQueueGenericSend+0xd4>
 80091a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80091a4:	b25b      	sxtb	r3, r3
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091aa:	d0d7      	beq.n	800915c <xQueueGenericSend+0xdc>
 80091ac:	f001 f824 	bl	800a1f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091b0:	a901      	add	r1, sp, #4
 80091b2:	a802      	add	r0, sp, #8
 80091b4:	f000 fe16 	bl	8009de4 <xTaskCheckForTimeOut>
 80091b8:	b9c8      	cbnz	r0, 80091ee <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091ba:	4620      	mov	r0, r4
 80091bc:	f7ff fdfd 	bl	8008dba <prvIsQueueFull>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d0cf      	beq.n	8009164 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091c4:	9901      	ldr	r1, [sp, #4]
 80091c6:	f104 0010 	add.w	r0, r4, #16
 80091ca:	f000 fda1 	bl	8009d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7ff fe5c 	bl	8008e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091d4:	f000 fcae 	bl	8009b34 <xTaskResumeAll>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d1c8      	bne.n	800916e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 80091dc:	4b07      	ldr	r3, [pc, #28]	; (80091fc <xQueueGenericSend+0x17c>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	e7bf      	b.n	800916e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 80091ee:	4620      	mov	r0, r4
 80091f0:	f7ff fe4c 	bl	8008e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091f4:	f000 fc9e 	bl	8009b34 <xTaskResumeAll>
			return errQUEUE_FULL;
 80091f8:	2000      	movs	r0, #0
 80091fa:	e791      	b.n	8009120 <xQueueGenericSend+0xa0>
 80091fc:	e000ed04 	.word	0xe000ed04

08009200 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8009200:	b168      	cbz	r0, 800921e <xQueueGiveFromISR+0x1e>
{
 8009202:	b570      	push	{r4, r5, r6, lr}
 8009204:	460e      	mov	r6, r1
 8009206:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009208:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800920a:	b18b      	cbz	r3, 8009230 <xQueueGiveFromISR+0x30>
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	e7fe      	b.n	800921c <xQueueGiveFromISR+0x1c>
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800922e:	e7fe      	b.n	800922e <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009230:	6803      	ldr	r3, [r0, #0]
 8009232:	b1eb      	cbz	r3, 8009270 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009234:	f001 f8e8 	bl	800a408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009238:	f3ef 8511 	mrs	r5, BASEPRI
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800924c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800924e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009250:	4293      	cmp	r3, r2
 8009252:	d926      	bls.n	80092a2 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009254:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009258:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800925a:	3201      	adds	r2, #1
 800925c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009262:	d011      	beq.n	8009288 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009264:	3301      	adds	r3, #1
 8009266:	b25b      	sxtb	r3, r3
 8009268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800926c:	2001      	movs	r0, #1
 800926e:	e019      	b.n	80092a4 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009270:	6883      	ldr	r3, [r0, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0de      	beq.n	8009234 <xQueueGiveFromISR+0x34>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	e7fe      	b.n	8009286 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928a:	b90b      	cbnz	r3, 8009290 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800928c:	2001      	movs	r0, #1
 800928e:	e009      	b.n	80092a4 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009290:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009294:	f000 fd54 	bl	8009d40 <xTaskRemoveFromEventList>
 8009298:	b138      	cbz	r0, 80092aa <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800929a:	b146      	cbz	r6, 80092ae <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800929c:	2001      	movs	r0, #1
 800929e:	6030      	str	r0, [r6, #0]
 80092a0:	e000      	b.n	80092a4 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 80092a2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092a4:	f385 8811 	msr	BASEPRI, r5
}
 80092a8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 80092aa:	2001      	movs	r0, #1
 80092ac:	e7fa      	b.n	80092a4 <xQueueGiveFromISR+0xa4>
 80092ae:	2001      	movs	r0, #1
 80092b0:	e7f8      	b.n	80092a4 <xQueueGiveFromISR+0xa4>
	...

080092b4 <xQueueReceive>:
{
 80092b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b6:	b085      	sub	sp, #20
 80092b8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80092ba:	b190      	cbz	r0, 80092e2 <xQueueReceive+0x2e>
 80092bc:	460e      	mov	r6, r1
 80092be:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092c0:	b1c1      	cbz	r1, 80092f4 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092c2:	f000 fdd7 	bl	8009e74 <xTaskGetSchedulerState>
 80092c6:	4607      	mov	r7, r0
 80092c8:	bb00      	cbnz	r0, 800930c <xQueueReceive+0x58>
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d05c      	beq.n	800938a <xQueueReceive+0xd6>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	e7fe      	b.n	80092e0 <xQueueReceive+0x2c>
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80092f2:	e7fe      	b.n	80092f2 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0e3      	beq.n	80092c2 <xQueueReceive+0xe>
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	e7fe      	b.n	800930a <xQueueReceive+0x56>
 800930c:	2700      	movs	r7, #0
 800930e:	e03c      	b.n	800938a <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009310:	4631      	mov	r1, r6
 8009312:	4620      	mov	r0, r4
 8009314:	f7ff fda8 	bl	8008e68 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009318:	3d01      	subs	r5, #1
 800931a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	b923      	cbnz	r3, 800932a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009320:	f000 ff6a 	bl	800a1f8 <vPortExitCritical>
				return pdPASS;
 8009324:	2001      	movs	r0, #1
}
 8009326:	b005      	add	sp, #20
 8009328:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800932a:	f104 0010 	add.w	r0, r4, #16
 800932e:	f000 fd07 	bl	8009d40 <xTaskRemoveFromEventList>
 8009332:	2800      	cmp	r0, #0
 8009334:	d0f4      	beq.n	8009320 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8009336:	4b35      	ldr	r3, [pc, #212]	; (800940c <xQueueReceive+0x158>)
 8009338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	e7eb      	b.n	8009320 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009348:	f000 ff56 	bl	800a1f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800934c:	2000      	movs	r0, #0
 800934e:	e7ea      	b.n	8009326 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009350:	a802      	add	r0, sp, #8
 8009352:	f000 fd3b 	bl	8009dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009356:	2701      	movs	r7, #1
 8009358:	e021      	b.n	800939e <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 800935a:	2300      	movs	r3, #0
 800935c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009360:	e029      	b.n	80093b6 <xQueueReceive+0x102>
 8009362:	2300      	movs	r3, #0
 8009364:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009368:	e02b      	b.n	80093c2 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff fd8e 	bl	8008e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009370:	f000 fbe0 	bl	8009b34 <xTaskResumeAll>
 8009374:	e009      	b.n	800938a <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8009376:	4620      	mov	r0, r4
 8009378:	f7ff fd88 	bl	8008e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800937c:	f000 fbda 	bl	8009b34 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009380:	4620      	mov	r0, r4
 8009382:	f7ff fd29 	bl	8008dd8 <prvIsQueueEmpty>
 8009386:	2800      	cmp	r0, #0
 8009388:	d13d      	bne.n	8009406 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 800938a:	f000 ff13 	bl	800a1b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800938e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009390:	2d00      	cmp	r5, #0
 8009392:	d1bd      	bne.n	8009310 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0d6      	beq.n	8009348 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 800939a:	2f00      	cmp	r7, #0
 800939c:	d0d8      	beq.n	8009350 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 800939e:	f000 ff2b 	bl	800a1f8 <vPortExitCritical>
		vTaskSuspendAll();
 80093a2:	f000 fb33 	bl	8009a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093a6:	f000 ff05 	bl	800a1b4 <vPortEnterCritical>
 80093aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80093ae:	b25b      	sxtb	r3, r3
 80093b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b4:	d0d1      	beq.n	800935a <xQueueReceive+0xa6>
 80093b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80093ba:	b25b      	sxtb	r3, r3
 80093bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093c0:	d0cf      	beq.n	8009362 <xQueueReceive+0xae>
 80093c2:	f000 ff19 	bl	800a1f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093c6:	a901      	add	r1, sp, #4
 80093c8:	a802      	add	r0, sp, #8
 80093ca:	f000 fd0b 	bl	8009de4 <xTaskCheckForTimeOut>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d1d1      	bne.n	8009376 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093d2:	4620      	mov	r0, r4
 80093d4:	f7ff fd00 	bl	8008dd8 <prvIsQueueEmpty>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d0c6      	beq.n	800936a <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093dc:	9901      	ldr	r1, [sp, #4]
 80093de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093e2:	f000 fc95 	bl	8009d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7ff fd50 	bl	8008e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093ec:	f000 fba2 	bl	8009b34 <xTaskResumeAll>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d1ca      	bne.n	800938a <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <xQueueReceive+0x158>)
 80093f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	e7c1      	b.n	800938a <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 8009406:	2000      	movs	r0, #0
 8009408:	e78d      	b.n	8009326 <xQueueReceive+0x72>
 800940a:	bf00      	nop
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <xQueueSemaphoreTake>:
{
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009416:	b158      	cbz	r0, 8009430 <xQueueSemaphoreTake+0x20>
 8009418:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800941a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800941c:	b18b      	cbz	r3, 8009442 <xQueueSemaphoreTake+0x32>
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	e7fe      	b.n	800942e <xQueueSemaphoreTake+0x1e>
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009440:	e7fe      	b.n	8009440 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009442:	f000 fd17 	bl	8009e74 <xTaskGetSchedulerState>
 8009446:	4606      	mov	r6, r0
 8009448:	b950      	cbnz	r0, 8009460 <xQueueSemaphoreTake+0x50>
 800944a:	9b01      	ldr	r3, [sp, #4]
 800944c:	b15b      	cbz	r3, 8009466 <xQueueSemaphoreTake+0x56>
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	e7fe      	b.n	800945e <xQueueSemaphoreTake+0x4e>
 8009460:	2500      	movs	r5, #0
 8009462:	462e      	mov	r6, r5
 8009464:	e053      	b.n	800950e <xQueueSemaphoreTake+0xfe>
 8009466:	4605      	mov	r5, r0
 8009468:	e051      	b.n	800950e <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800946a:	3b01      	subs	r3, #1
 800946c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	b13b      	cbz	r3, 8009482 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	b94b      	cbnz	r3, 800948a <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8009476:	f000 febf 	bl	800a1f8 <vPortExitCritical>
				return pdPASS;
 800947a:	2501      	movs	r5, #1
}
 800947c:	4628      	mov	r0, r5
 800947e:	b004      	add	sp, #16
 8009480:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009482:	f000 fe1f 	bl	800a0c4 <pvTaskIncrementMutexHeldCount>
 8009486:	60a0      	str	r0, [r4, #8]
 8009488:	e7f3      	b.n	8009472 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800948a:	f104 0010 	add.w	r0, r4, #16
 800948e:	f000 fc57 	bl	8009d40 <xTaskRemoveFromEventList>
 8009492:	2800      	cmp	r0, #0
 8009494:	d0ef      	beq.n	8009476 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8009496:	4b46      	ldr	r3, [pc, #280]	; (80095b0 <xQueueSemaphoreTake+0x1a0>)
 8009498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	e7e6      	b.n	8009476 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80094a8:	b145      	cbz	r5, 80094bc <xQueueSemaphoreTake+0xac>
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	e7fe      	b.n	80094ba <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 80094bc:	f000 fe9c 	bl	800a1f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80094c0:	e7dc      	b.n	800947c <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094c2:	a802      	add	r0, sp, #8
 80094c4:	f000 fc82 	bl	8009dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094c8:	2601      	movs	r6, #1
 80094ca:	e02a      	b.n	8009522 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 80094cc:	2300      	movs	r3, #0
 80094ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80094d2:	e032      	b.n	800953a <xQueueSemaphoreTake+0x12a>
 80094d4:	2300      	movs	r3, #0
 80094d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094da:	e034      	b.n	8009546 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 80094dc:	f000 fe6a 	bl	800a1b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094e0:	68a0      	ldr	r0, [r4, #8]
 80094e2:	f000 fcd7 	bl	8009e94 <xTaskPriorityInherit>
 80094e6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80094e8:	f000 fe86 	bl	800a1f8 <vPortExitCritical>
 80094ec:	e03b      	b.n	8009566 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff fccc 	bl	8008e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094f4:	f000 fb1e 	bl	8009b34 <xTaskResumeAll>
 80094f8:	e009      	b.n	800950e <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 80094fa:	4620      	mov	r0, r4
 80094fc:	f7ff fcc6 	bl	8008e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009500:	f000 fb18 	bl	8009b34 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009504:	4620      	mov	r0, r4
 8009506:	f7ff fc67 	bl	8008dd8 <prvIsQueueEmpty>
 800950a:	2800      	cmp	r0, #0
 800950c:	d140      	bne.n	8009590 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 800950e:	f000 fe51 	bl	800a1b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1a8      	bne.n	800946a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009518:	9b01      	ldr	r3, [sp, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0c4      	beq.n	80094a8 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800951e:	2e00      	cmp	r6, #0
 8009520:	d0cf      	beq.n	80094c2 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 8009522:	f000 fe69 	bl	800a1f8 <vPortExitCritical>
		vTaskSuspendAll();
 8009526:	f000 fa71 	bl	8009a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800952a:	f000 fe43 	bl	800a1b4 <vPortEnterCritical>
 800952e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009532:	b25b      	sxtb	r3, r3
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009538:	d0c8      	beq.n	80094cc <xQueueSemaphoreTake+0xbc>
 800953a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800953e:	b25b      	sxtb	r3, r3
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009544:	d0c6      	beq.n	80094d4 <xQueueSemaphoreTake+0xc4>
 8009546:	f000 fe57 	bl	800a1f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800954a:	a901      	add	r1, sp, #4
 800954c:	a802      	add	r0, sp, #8
 800954e:	f000 fc49 	bl	8009de4 <xTaskCheckForTimeOut>
 8009552:	2800      	cmp	r0, #0
 8009554:	d1d1      	bne.n	80094fa <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009556:	4620      	mov	r0, r4
 8009558:	f7ff fc3e 	bl	8008dd8 <prvIsQueueEmpty>
 800955c:	2800      	cmp	r0, #0
 800955e:	d0c6      	beq.n	80094ee <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0ba      	beq.n	80094dc <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009566:	9901      	ldr	r1, [sp, #4]
 8009568:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800956c:	f000 fbd0 	bl	8009d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009570:	4620      	mov	r0, r4
 8009572:	f7ff fc8b 	bl	8008e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009576:	f000 fadd 	bl	8009b34 <xTaskResumeAll>
 800957a:	2800      	cmp	r0, #0
 800957c:	d1c7      	bne.n	800950e <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 800957e:	4b0c      	ldr	r3, [pc, #48]	; (80095b0 <xQueueSemaphoreTake+0x1a0>)
 8009580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	e7be      	b.n	800950e <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8009590:	b90d      	cbnz	r5, 8009596 <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 8009592:	2500      	movs	r5, #0
 8009594:	e772      	b.n	800947c <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8009596:	f000 fe0d 	bl	800a1b4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff fc05 	bl	8008daa <prvGetDisinheritPriorityAfterTimeout>
 80095a0:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80095a2:	68a0      	ldr	r0, [r4, #8]
 80095a4:	f000 fd2c 	bl	800a000 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80095a8:	f000 fe26 	bl	800a1f8 <vPortExitCritical>
 80095ac:	e7f1      	b.n	8009592 <xQueueSemaphoreTake+0x182>
 80095ae:	bf00      	nop
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095b4:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <prvResetNextTaskUnblockTime+0x24>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	b923      	cbnz	r3, 80095c6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095bc:	4b07      	ldr	r3, [pc, #28]	; (80095dc <prvResetNextTaskUnblockTime+0x28>)
 80095be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c6:	4b04      	ldr	r3, [pc, #16]	; (80095d8 <prvResetNextTaskUnblockTime+0x24>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	4b02      	ldr	r3, [pc, #8]	; (80095dc <prvResetNextTaskUnblockTime+0x28>)
 80095d2:	601a      	str	r2, [r3, #0]
	}
}
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	20000fa8 	.word	0x20000fa8
 80095dc:	2000107c 	.word	0x2000107c

080095e0 <prvInitialiseNewTask>:
{
 80095e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e4:	4680      	mov	r8, r0
 80095e6:	4699      	mov	r9, r3
 80095e8:	9e08      	ldr	r6, [sp, #32]
 80095ea:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80095ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095f0:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80095f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80095f6:	3a01      	subs	r2, #1
 80095f8:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095fc:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009600:	b389      	cbz	r1, 8009666 <prvInitialiseNewTask+0x86>
 8009602:	460d      	mov	r5, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009604:	2200      	movs	r2, #0
 8009606:	2a0f      	cmp	r2, #15
 8009608:	d807      	bhi.n	800961a <prvInitialiseNewTask+0x3a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800960a:	5ca9      	ldrb	r1, [r5, r2]
 800960c:	18a3      	adds	r3, r4, r2
 800960e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009612:	5cab      	ldrb	r3, [r5, r2]
 8009614:	b10b      	cbz	r3, 800961a <prvInitialiseNewTask+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009616:	3201      	adds	r2, #1
 8009618:	e7f5      	b.n	8009606 <prvInitialiseNewTask+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800961a:	2300      	movs	r3, #0
 800961c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009620:	2e06      	cmp	r6, #6
 8009622:	d900      	bls.n	8009626 <prvInitialiseNewTask+0x46>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009624:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009626:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009628:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800962a:	2500      	movs	r5, #0
 800962c:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800962e:	1d20      	adds	r0, r4, #4
 8009630:	f7ff fb81 	bl	8008d36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009634:	f104 0018 	add.w	r0, r4, #24
 8009638:	f7ff fb7d 	bl	8008d36 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800963c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800963e:	f1c6 0607 	rsb	r6, r6, #7
 8009642:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009644:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009646:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009648:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800964c:	464a      	mov	r2, r9
 800964e:	4641      	mov	r1, r8
 8009650:	4638      	mov	r0, r7
 8009652:	f000 fd83 	bl	800a15c <pxPortInitialiseStack>
 8009656:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009658:	f1ba 0f00 	cmp.w	sl, #0
 800965c:	d001      	beq.n	8009662 <prvInitialiseNewTask+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800965e:	f8ca 4000 	str.w	r4, [sl]
}
 8009662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009666:	2300      	movs	r3, #0
 8009668:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800966c:	e7d8      	b.n	8009620 <prvInitialiseNewTask+0x40>
	...

08009670 <prvInitialiseTaskLists>:
{
 8009670:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009672:	2400      	movs	r4, #0
 8009674:	e007      	b.n	8009686 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009676:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800967a:	0093      	lsls	r3, r2, #2
 800967c:	480e      	ldr	r0, [pc, #56]	; (80096b8 <prvInitialiseTaskLists+0x48>)
 800967e:	4418      	add	r0, r3
 8009680:	f7ff fb4e 	bl	8008d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009684:	3401      	adds	r4, #1
 8009686:	2c06      	cmp	r4, #6
 8009688:	d9f5      	bls.n	8009676 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800968a:	4d0c      	ldr	r5, [pc, #48]	; (80096bc <prvInitialiseTaskLists+0x4c>)
 800968c:	4628      	mov	r0, r5
 800968e:	f7ff fb47 	bl	8008d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009692:	4c0b      	ldr	r4, [pc, #44]	; (80096c0 <prvInitialiseTaskLists+0x50>)
 8009694:	4620      	mov	r0, r4
 8009696:	f7ff fb43 	bl	8008d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800969a:	480a      	ldr	r0, [pc, #40]	; (80096c4 <prvInitialiseTaskLists+0x54>)
 800969c:	f7ff fb40 	bl	8008d20 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80096a0:	4809      	ldr	r0, [pc, #36]	; (80096c8 <prvInitialiseTaskLists+0x58>)
 80096a2:	f7ff fb3d 	bl	8008d20 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80096a6:	4809      	ldr	r0, [pc, #36]	; (80096cc <prvInitialiseTaskLists+0x5c>)
 80096a8:	f7ff fb3a 	bl	8008d20 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80096ac:	4b08      	ldr	r3, [pc, #32]	; (80096d0 <prvInitialiseTaskLists+0x60>)
 80096ae:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096b0:	4b08      	ldr	r3, [pc, #32]	; (80096d4 <prvInitialiseTaskLists+0x64>)
 80096b2:	601c      	str	r4, [r3, #0]
}
 80096b4:	bd38      	pop	{r3, r4, r5, pc}
 80096b6:	bf00      	nop
 80096b8:	20000fb0 	.word	0x20000fb0
 80096bc:	20001054 	.word	0x20001054
 80096c0:	20001068 	.word	0x20001068
 80096c4:	20001084 	.word	0x20001084
 80096c8:	200010b0 	.word	0x200010b0
 80096cc:	2000109c 	.word	0x2000109c
 80096d0:	20000fa8 	.word	0x20000fa8
 80096d4:	20000fac 	.word	0x20000fac

080096d8 <prvAddNewTaskToReadyList>:
{
 80096d8:	b510      	push	{r4, lr}
 80096da:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80096dc:	f000 fd6a 	bl	800a1b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80096e0:	4a20      	ldr	r2, [pc, #128]	; (8009764 <prvAddNewTaskToReadyList+0x8c>)
 80096e2:	6813      	ldr	r3, [r2, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096e8:	4b1f      	ldr	r3, [pc, #124]	; (8009768 <prvAddNewTaskToReadyList+0x90>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	b15b      	cbz	r3, 8009706 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80096ee:	4b1f      	ldr	r3, [pc, #124]	; (800976c <prvAddNewTaskToReadyList+0x94>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	b96b      	cbnz	r3, 8009710 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096f4:	4b1c      	ldr	r3, [pc, #112]	; (8009768 <prvAddNewTaskToReadyList+0x90>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d807      	bhi.n	8009710 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009700:	4b19      	ldr	r3, [pc, #100]	; (8009768 <prvAddNewTaskToReadyList+0x90>)
 8009702:	601c      	str	r4, [r3, #0]
 8009704:	e004      	b.n	8009710 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009706:	4b18      	ldr	r3, [pc, #96]	; (8009768 <prvAddNewTaskToReadyList+0x90>)
 8009708:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800970a:	6813      	ldr	r3, [r2, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d026      	beq.n	800975e <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8009710:	4a17      	ldr	r2, [pc, #92]	; (8009770 <prvAddNewTaskToReadyList+0x98>)
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	3301      	adds	r3, #1
 8009716:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009718:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800971a:	2301      	movs	r3, #1
 800971c:	4083      	lsls	r3, r0
 800971e:	4a15      	ldr	r2, [pc, #84]	; (8009774 <prvAddNewTaskToReadyList+0x9c>)
 8009720:	6811      	ldr	r1, [r2, #0]
 8009722:	430b      	orrs	r3, r1
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800972a:	1d21      	adds	r1, r4, #4
 800972c:	4b12      	ldr	r3, [pc, #72]	; (8009778 <prvAddNewTaskToReadyList+0xa0>)
 800972e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009732:	f7ff fb03 	bl	8008d3c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009736:	f000 fd5f 	bl	800a1f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800973a:	4b0c      	ldr	r3, [pc, #48]	; (800976c <prvAddNewTaskToReadyList+0x94>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	b16b      	cbz	r3, 800975c <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009740:	4b09      	ldr	r3, [pc, #36]	; (8009768 <prvAddNewTaskToReadyList+0x90>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009748:	429a      	cmp	r2, r3
 800974a:	d207      	bcs.n	800975c <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 800974c:	4b0b      	ldr	r3, [pc, #44]	; (800977c <prvAddNewTaskToReadyList+0xa4>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	f3bf 8f6f 	isb	sy
}
 800975c:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800975e:	f7ff ff87 	bl	8009670 <prvInitialiseTaskLists>
 8009762:	e7d5      	b.n	8009710 <prvAddNewTaskToReadyList+0x38>
 8009764:	2000103c 	.word	0x2000103c
 8009768:	20000fa4 	.word	0x20000fa4
 800976c:	20001098 	.word	0x20001098
 8009770:	2000104c 	.word	0x2000104c
 8009774:	20001050 	.word	0x20001050
 8009778:	20000fb0 	.word	0x20000fb0
 800977c:	e000ed04 	.word	0xe000ed04

08009780 <prvDeleteTCB>:
	{
 8009780:	b510      	push	{r4, lr}
 8009782:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009784:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8009788:	b163      	cbz	r3, 80097a4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800978a:	2b01      	cmp	r3, #1
 800978c:	d011      	beq.n	80097b2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800978e:	2b02      	cmp	r3, #2
 8009790:	d00e      	beq.n	80097b0 <prvDeleteTCB+0x30>
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	e7fe      	b.n	80097a2 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80097a4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80097a6:	f000 ff35 	bl	800a614 <vPortFree>
				vPortFree( pxTCB );
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 ff32 	bl	800a614 <vPortFree>
	}
 80097b0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80097b2:	f000 ff2f 	bl	800a614 <vPortFree>
 80097b6:	e7fb      	b.n	80097b0 <prvDeleteTCB+0x30>

080097b8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <prvCheckTasksWaitingTermination+0x40>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	b1d3      	cbz	r3, 80097f4 <prvCheckTasksWaitingTermination+0x3c>
{
 80097be:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80097c0:	f000 fcf8 	bl	800a1b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c4:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <prvCheckTasksWaitingTermination+0x44>)
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097ca:	1d20      	adds	r0, r4, #4
 80097cc:	f7ff fada 	bl	8008d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097d0:	4a0b      	ldr	r2, [pc, #44]	; (8009800 <prvCheckTasksWaitingTermination+0x48>)
 80097d2:	6813      	ldr	r3, [r2, #0]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097d8:	4a07      	ldr	r2, [pc, #28]	; (80097f8 <prvCheckTasksWaitingTermination+0x40>)
 80097da:	6813      	ldr	r3, [r2, #0]
 80097dc:	3b01      	subs	r3, #1
 80097de:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80097e0:	f000 fd0a 	bl	800a1f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80097e4:	4620      	mov	r0, r4
 80097e6:	f7ff ffcb 	bl	8009780 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ea:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <prvCheckTasksWaitingTermination+0x40>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e6      	bne.n	80097c0 <prvCheckTasksWaitingTermination+0x8>
}
 80097f2:	bd10      	pop	{r4, pc}
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	20001040 	.word	0x20001040
 80097fc:	200010b0 	.word	0x200010b0
 8009800:	2000103c 	.word	0x2000103c

08009804 <prvIdleTask>:
{
 8009804:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009806:	f7ff ffd7 	bl	80097b8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <prvIdleTask+0x20>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d9f9      	bls.n	8009806 <prvIdleTask+0x2>
				taskYIELD();
 8009812:	4b05      	ldr	r3, [pc, #20]	; (8009828 <prvIdleTask+0x24>)
 8009814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	e7f0      	b.n	8009806 <prvIdleTask+0x2>
 8009824:	20000fb0 	.word	0x20000fb0
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800982c:	b570      	push	{r4, r5, r6, lr}
 800982e:	4604      	mov	r4, r0
 8009830:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009832:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8009834:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009836:	4b1d      	ldr	r3, [pc, #116]	; (80098ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	3004      	adds	r0, #4
 800983c:	f7ff faa2 	bl	8008d84 <uxListRemove>
 8009840:	b950      	cbnz	r0, 8009858 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009842:	4b1a      	ldr	r3, [pc, #104]	; (80098ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	2301      	movs	r3, #1
 800984a:	fa03 f202 	lsl.w	r2, r3, r2
 800984e:	4918      	ldr	r1, [pc, #96]	; (80098b0 <prvAddCurrentTaskToDelayedList+0x84>)
 8009850:	680b      	ldr	r3, [r1, #0]
 8009852:	ea23 0302 	bic.w	r3, r3, r2
 8009856:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009858:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800985c:	d00d      	beq.n	800987a <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800985e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009860:	4b12      	ldr	r3, [pc, #72]	; (80098ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009866:	42a6      	cmp	r6, r4
 8009868:	d910      	bls.n	800988c <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800986a:	4b12      	ldr	r3, [pc, #72]	; (80098b4 <prvAddCurrentTaskToDelayedList+0x88>)
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009870:	6819      	ldr	r1, [r3, #0]
 8009872:	3104      	adds	r1, #4
 8009874:	f7ff fa6d 	bl	8008d52 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009878:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800987a:	2d00      	cmp	r5, #0
 800987c:	d0ef      	beq.n	800985e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800987e:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009880:	6819      	ldr	r1, [r3, #0]
 8009882:	3104      	adds	r1, #4
 8009884:	480c      	ldr	r0, [pc, #48]	; (80098b8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8009886:	f7ff fa59 	bl	8008d3c <vListInsertEnd>
 800988a:	e7f5      	b.n	8009878 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800988c:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <prvAddCurrentTaskToDelayedList+0x90>)
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	3104      	adds	r1, #4
 8009896:	f7ff fa5c 	bl	8008d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800989a:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	42a3      	cmp	r3, r4
 80098a0:	d9ea      	bls.n	8009878 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 80098a2:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <prvAddCurrentTaskToDelayedList+0x94>)
 80098a4:	601c      	str	r4, [r3, #0]
}
 80098a6:	e7e7      	b.n	8009878 <prvAddCurrentTaskToDelayedList+0x4c>
 80098a8:	200010c4 	.word	0x200010c4
 80098ac:	20000fa4 	.word	0x20000fa4
 80098b0:	20001050 	.word	0x20001050
 80098b4:	20000fac 	.word	0x20000fac
 80098b8:	2000109c 	.word	0x2000109c
 80098bc:	20000fa8 	.word	0x20000fa8
 80098c0:	2000107c 	.word	0x2000107c

080098c4 <xTaskCreateStatic>:
	{
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80098ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80098cc:	b175      	cbz	r5, 80098ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80098ce:	b1b4      	cbz	r4, 80098fe <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80098d0:	2654      	movs	r6, #84	; 0x54
 80098d2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098d4:	9e04      	ldr	r6, [sp, #16]
 80098d6:	2e54      	cmp	r6, #84	; 0x54
 80098d8:	d01a      	beq.n	8009910 <xTaskCreateStatic+0x4c>
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	e7fe      	b.n	80098ea <xTaskCreateStatic+0x26>
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80098fc:	e7fe      	b.n	80098fc <xTaskCreateStatic+0x38>
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800990e:	e7fe      	b.n	800990e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009910:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009912:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009914:	2502      	movs	r5, #2
 8009916:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800991a:	2500      	movs	r5, #0
 800991c:	9503      	str	r5, [sp, #12]
 800991e:	9402      	str	r4, [sp, #8]
 8009920:	ad05      	add	r5, sp, #20
 8009922:	9501      	str	r5, [sp, #4]
 8009924:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009926:	9500      	str	r5, [sp, #0]
 8009928:	f7ff fe5a 	bl	80095e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff fed3 	bl	80096d8 <prvAddNewTaskToReadyList>
	}
 8009932:	9805      	ldr	r0, [sp, #20]
 8009934:	b006      	add	sp, #24
 8009936:	bd70      	pop	{r4, r5, r6, pc}

08009938 <xTaskCreate>:
	{
 8009938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800993c:	b085      	sub	sp, #20
 800993e:	4607      	mov	r7, r0
 8009940:	4688      	mov	r8, r1
 8009942:	4614      	mov	r4, r2
 8009944:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009946:	0090      	lsls	r0, r2, #2
 8009948:	f000 fdec 	bl	800a524 <pvPortMalloc>
			if( pxStack != NULL )
 800994c:	b300      	cbz	r0, 8009990 <xTaskCreate+0x58>
 800994e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009950:	2054      	movs	r0, #84	; 0x54
 8009952:	f000 fde7 	bl	800a524 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009956:	4605      	mov	r5, r0
 8009958:	b1b0      	cbz	r0, 8009988 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800995a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800995e:	b1e5      	cbz	r5, 800999a <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009960:	2300      	movs	r3, #0
 8009962:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009966:	9303      	str	r3, [sp, #12]
 8009968:	9502      	str	r5, [sp, #8]
 800996a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	4633      	mov	r3, r6
 8009974:	4622      	mov	r2, r4
 8009976:	4641      	mov	r1, r8
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff fe31 	bl	80095e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800997e:	4628      	mov	r0, r5
 8009980:	f7ff feaa 	bl	80096d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009984:	2001      	movs	r0, #1
 8009986:	e005      	b.n	8009994 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8009988:	4648      	mov	r0, r9
 800998a:	f000 fe43 	bl	800a614 <vPortFree>
 800998e:	e7e6      	b.n	800995e <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8009994:	b005      	add	sp, #20
 8009996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800999a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800999e:	e7f9      	b.n	8009994 <xTaskCreate+0x5c>

080099a0 <vTaskStartScheduler>:
{
 80099a0:	b510      	push	{r4, lr}
 80099a2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099a4:	2400      	movs	r4, #0
 80099a6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099a8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099aa:	aa07      	add	r2, sp, #28
 80099ac:	a906      	add	r1, sp, #24
 80099ae:	a805      	add	r0, sp, #20
 80099b0:	f7f8 fc20 	bl	80021f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	9302      	str	r3, [sp, #8]
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	9400      	str	r4, [sp, #0]
 80099be:	4623      	mov	r3, r4
 80099c0:	9a07      	ldr	r2, [sp, #28]
 80099c2:	490d      	ldr	r1, [pc, #52]	; (80099f8 <vTaskStartScheduler+0x58>)
 80099c4:	480d      	ldr	r0, [pc, #52]	; (80099fc <vTaskStartScheduler+0x5c>)
 80099c6:	f7ff ff7d 	bl	80098c4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80099ca:	b190      	cbz	r0, 80099f2 <vTaskStartScheduler+0x52>
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80099dc:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <vTaskStartScheduler+0x60>)
 80099de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099e4:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <vTaskStartScheduler+0x64>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099ea:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <vTaskStartScheduler+0x68>)
 80099ec:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80099ee:	f000 fc83 	bl	800a2f8 <xPortStartScheduler>
}
 80099f2:	b008      	add	sp, #32
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	bf00      	nop
 80099f8:	0800af40 	.word	0x0800af40
 80099fc:	08009805 	.word	0x08009805
 8009a00:	2000107c 	.word	0x2000107c
 8009a04:	20001098 	.word	0x20001098
 8009a08:	200010c4 	.word	0x200010c4

08009a0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009a0c:	4a02      	ldr	r2, [pc, #8]	; (8009a18 <vTaskSuspendAll+0xc>)
 8009a0e:	6813      	ldr	r3, [r2, #0]
 8009a10:	3301      	adds	r3, #1
 8009a12:	6013      	str	r3, [r2, #0]
}
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20001048 	.word	0x20001048

08009a1c <xTaskIncrementTick>:
{
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1e:	4b3a      	ldr	r3, [pc, #232]	; (8009b08 <xTaskIncrementTick+0xec>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d164      	bne.n	8009af0 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a26:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <xTaskIncrementTick+0xf0>)
 8009a28:	681d      	ldr	r5, [r3, #0]
 8009a2a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009a2c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a2e:	b9c5      	cbnz	r5, 8009a62 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009a30:	4b37      	ldr	r3, [pc, #220]	; (8009b10 <xTaskIncrementTick+0xf4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	b143      	cbz	r3, 8009a4a <xTaskIncrementTick+0x2e>
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	e7fe      	b.n	8009a48 <xTaskIncrementTick+0x2c>
 8009a4a:	4a31      	ldr	r2, [pc, #196]	; (8009b10 <xTaskIncrementTick+0xf4>)
 8009a4c:	6811      	ldr	r1, [r2, #0]
 8009a4e:	4b31      	ldr	r3, [pc, #196]	; (8009b14 <xTaskIncrementTick+0xf8>)
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	6010      	str	r0, [r2, #0]
 8009a54:	6019      	str	r1, [r3, #0]
 8009a56:	4a30      	ldr	r2, [pc, #192]	; (8009b18 <xTaskIncrementTick+0xfc>)
 8009a58:	6813      	ldr	r3, [r2, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	f7ff fda9 	bl	80095b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a62:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <xTaskIncrementTick+0x100>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	42ab      	cmp	r3, r5
 8009a68:	d938      	bls.n	8009adc <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009a6a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a6c:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <xTaskIncrementTick+0x104>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a76:	009a      	lsls	r2, r3, #2
 8009a78:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <xTaskIncrementTick+0x108>)
 8009a7a:	589b      	ldr	r3, [r3, r2]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d93c      	bls.n	8009afa <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009a80:	2401      	movs	r4, #1
 8009a82:	e03a      	b.n	8009afa <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009a84:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a86:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <xTaskIncrementTick+0xf4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	b343      	cbz	r3, 8009ae0 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a8e:	4b20      	ldr	r3, [pc, #128]	; (8009b10 <xTaskIncrementTick+0xf4>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a96:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8009a98:	429d      	cmp	r5, r3
 8009a9a:	d326      	bcc.n	8009aea <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a9c:	1d37      	adds	r7, r6, #4
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f7ff f970 	bl	8008d84 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009aa4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009aa6:	b11b      	cbz	r3, 8009ab0 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aa8:	f106 0018 	add.w	r0, r6, #24
 8009aac:	f7ff f96a 	bl	8008d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ab0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	409a      	lsls	r2, r3
 8009ab6:	491c      	ldr	r1, [pc, #112]	; (8009b28 <xTaskIncrementTick+0x10c>)
 8009ab8:	6808      	ldr	r0, [r1, #0]
 8009aba:	4302      	orrs	r2, r0
 8009abc:	600a      	str	r2, [r1, #0]
 8009abe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ac2:	009a      	lsls	r2, r3, #2
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	4817      	ldr	r0, [pc, #92]	; (8009b24 <xTaskIncrementTick+0x108>)
 8009ac8:	4410      	add	r0, r2
 8009aca:	f7ff f937 	bl	8008d3c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ace:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009ad0:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <xTaskIncrementTick+0x104>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d2d4      	bcs.n	8009a84 <xTaskIncrementTick+0x68>
 8009ada:	e7d4      	b.n	8009a86 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009adc:	2400      	movs	r4, #0
 8009ade:	e7d2      	b.n	8009a86 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae0:	4b0e      	ldr	r3, [pc, #56]	; (8009b1c <xTaskIncrementTick+0x100>)
 8009ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ae6:	601a      	str	r2, [r3, #0]
					break;
 8009ae8:	e7c0      	b.n	8009a6c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009aea:	4a0c      	ldr	r2, [pc, #48]	; (8009b1c <xTaskIncrementTick+0x100>)
 8009aec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009aee:	e7bd      	b.n	8009a6c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009af0:	4a0e      	ldr	r2, [pc, #56]	; (8009b2c <xTaskIncrementTick+0x110>)
 8009af2:	6813      	ldr	r3, [r2, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009af8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8009afa:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <xTaskIncrementTick+0x114>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009b00:	2401      	movs	r4, #1
}
 8009b02:	4620      	mov	r0, r4
 8009b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20001048 	.word	0x20001048
 8009b0c:	200010c4 	.word	0x200010c4
 8009b10:	20000fa8 	.word	0x20000fa8
 8009b14:	20000fac 	.word	0x20000fac
 8009b18:	20001080 	.word	0x20001080
 8009b1c:	2000107c 	.word	0x2000107c
 8009b20:	20000fa4 	.word	0x20000fa4
 8009b24:	20000fb0 	.word	0x20000fb0
 8009b28:	20001050 	.word	0x20001050
 8009b2c:	20001044 	.word	0x20001044
 8009b30:	200010c8 	.word	0x200010c8

08009b34 <xTaskResumeAll>:
{
 8009b34:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009b36:	4b34      	ldr	r3, [pc, #208]	; (8009c08 <xTaskResumeAll+0xd4>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	b943      	cbnz	r3, 8009b4e <xTaskResumeAll+0x1a>
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	e7fe      	b.n	8009b4c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009b4e:	f000 fb31 	bl	800a1b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009b52:	4b2d      	ldr	r3, [pc, #180]	; (8009c08 <xTaskResumeAll+0xd4>)
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	3a01      	subs	r2, #1
 8009b58:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d14d      	bne.n	8009bfc <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b60:	4b2a      	ldr	r3, [pc, #168]	; (8009c0c <xTaskResumeAll+0xd8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	b90b      	cbnz	r3, 8009b6a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009b66:	2400      	movs	r4, #0
 8009b68:	e049      	b.n	8009bfe <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 8009b6a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b6c:	4b28      	ldr	r3, [pc, #160]	; (8009c10 <xTaskResumeAll+0xdc>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	b31b      	cbz	r3, 8009bba <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b72:	4b27      	ldr	r3, [pc, #156]	; (8009c10 <xTaskResumeAll+0xdc>)
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b78:	f104 0018 	add.w	r0, r4, #24
 8009b7c:	f7ff f902 	bl	8008d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b80:	1d25      	adds	r5, r4, #4
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7ff f8fe 	bl	8008d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	4083      	lsls	r3, r0
 8009b8e:	4a21      	ldr	r2, [pc, #132]	; (8009c14 <xTaskResumeAll+0xe0>)
 8009b90:	6811      	ldr	r1, [r2, #0]
 8009b92:	430b      	orrs	r3, r1
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <xTaskResumeAll+0xe4>)
 8009b9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ba2:	f7ff f8cb 	bl	8008d3c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ba8:	4b1c      	ldr	r3, [pc, #112]	; (8009c1c <xTaskResumeAll+0xe8>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3dc      	bcc.n	8009b6c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009bb2:	4b1b      	ldr	r3, [pc, #108]	; (8009c20 <xTaskResumeAll+0xec>)
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	e7d8      	b.n	8009b6c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009bba:	b10c      	cbz	r4, 8009bc0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009bbc:	f7ff fcfa 	bl	80095b4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009bc0:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <xTaskResumeAll+0xf0>)
 8009bc2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009bc4:	b974      	cbnz	r4, 8009be4 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8009bc6:	4b16      	ldr	r3, [pc, #88]	; (8009c20 <xTaskResumeAll+0xec>)
 8009bc8:	681c      	ldr	r4, [r3, #0]
 8009bca:	b1c4      	cbz	r4, 8009bfe <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8009bcc:	4b16      	ldr	r3, [pc, #88]	; (8009c28 <xTaskResumeAll+0xf4>)
 8009bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009bdc:	2401      	movs	r4, #1
 8009bde:	e00e      	b.n	8009bfe <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009be0:	3c01      	subs	r4, #1
 8009be2:	d007      	beq.n	8009bf4 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8009be4:	f7ff ff1a 	bl	8009a1c <xTaskIncrementTick>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d0f9      	beq.n	8009be0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8009bec:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <xTaskResumeAll+0xec>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	e7f5      	b.n	8009be0 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
 8009bf4:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <xTaskResumeAll+0xf0>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	e7e4      	b.n	8009bc6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009bfc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009bfe:	f000 fafb 	bl	800a1f8 <vPortExitCritical>
}
 8009c02:	4620      	mov	r0, r4
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	20001048 	.word	0x20001048
 8009c0c:	2000103c 	.word	0x2000103c
 8009c10:	20001084 	.word	0x20001084
 8009c14:	20001050 	.word	0x20001050
 8009c18:	20000fb0 	.word	0x20000fb0
 8009c1c:	20000fa4 	.word	0x20000fa4
 8009c20:	200010c8 	.word	0x200010c8
 8009c24:	20001044 	.word	0x20001044
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <vTaskDelay>:
	{
 8009c2c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c2e:	b1a8      	cbz	r0, 8009c5c <vTaskDelay+0x30>
 8009c30:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009c32:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <vTaskDelay+0x44>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	b143      	cbz	r3, 8009c4a <vTaskDelay+0x1e>
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	e7fe      	b.n	8009c48 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009c4a:	f7ff fedf 	bl	8009a0c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4620      	mov	r0, r4
 8009c52:	f7ff fdeb 	bl	800982c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009c56:	f7ff ff6d 	bl	8009b34 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009c5a:	b938      	cbnz	r0, 8009c6c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009c5c:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <vTaskDelay+0x48>)
 8009c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	f3bf 8f6f 	isb	sy
	}
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	bf00      	nop
 8009c70:	20001048 	.word	0x20001048
 8009c74:	e000ed04 	.word	0xe000ed04

08009c78 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c78:	4b20      	ldr	r3, [pc, #128]	; (8009cfc <vTaskSwitchContext+0x84>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	b11b      	cbz	r3, 8009c86 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009c7e:	4b20      	ldr	r3, [pc, #128]	; (8009d00 <vTaskSwitchContext+0x88>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009c86:	4b1e      	ldr	r3, [pc, #120]	; (8009d00 <vTaskSwitchContext+0x88>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c8c:	4b1d      	ldr	r3, [pc, #116]	; (8009d04 <vTaskSwitchContext+0x8c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c90:	fab3 f383 	clz	r3, r3
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f1c3 031f 	rsb	r3, r3, #31
 8009c9a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009c9e:	008a      	lsls	r2, r1, #2
 8009ca0:	4919      	ldr	r1, [pc, #100]	; (8009d08 <vTaskSwitchContext+0x90>)
 8009ca2:	588a      	ldr	r2, [r1, r2]
 8009ca4:	b942      	cbnz	r2, 8009cb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	e7fe      	b.n	8009cb6 <vTaskSwitchContext+0x3e>
{
 8009cb8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cba:	4913      	ldr	r1, [pc, #76]	; (8009d08 <vTaskSwitchContext+0x90>)
 8009cbc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009cc0:	0082      	lsls	r2, r0, #2
 8009cc2:	440a      	add	r2, r1
 8009cc4:	6850      	ldr	r0, [r2, #4]
 8009cc6:	6840      	ldr	r0, [r0, #4]
 8009cc8:	6050      	str	r0, [r2, #4]
 8009cca:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8009cce:	00a2      	lsls	r2, r4, #2
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	3208      	adds	r2, #8
 8009cd4:	4411      	add	r1, r2
 8009cd6:	4288      	cmp	r0, r1
 8009cd8:	d00b      	beq.n	8009cf2 <vTaskSwitchContext+0x7a>
 8009cda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009cde:	009a      	lsls	r2, r3, #2
 8009ce0:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <vTaskSwitchContext+0x90>)
 8009ce2:	4413      	add	r3, r2
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	4b08      	ldr	r3, [pc, #32]	; (8009d0c <vTaskSwitchContext+0x94>)
 8009cea:	601a      	str	r2, [r3, #0]
}
 8009cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cf0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf2:	6840      	ldr	r0, [r0, #4]
 8009cf4:	4a04      	ldr	r2, [pc, #16]	; (8009d08 <vTaskSwitchContext+0x90>)
 8009cf6:	4422      	add	r2, r4
 8009cf8:	6050      	str	r0, [r2, #4]
 8009cfa:	e7ee      	b.n	8009cda <vTaskSwitchContext+0x62>
 8009cfc:	20001048 	.word	0x20001048
 8009d00:	200010c8 	.word	0x200010c8
 8009d04:	20001050 	.word	0x20001050
 8009d08:	20000fb0 	.word	0x20000fb0
 8009d0c:	20000fa4 	.word	0x20000fa4

08009d10 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009d10:	b158      	cbz	r0, 8009d2a <vTaskPlaceOnEventList+0x1a>
{
 8009d12:	b510      	push	{r4, lr}
 8009d14:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d16:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <vTaskPlaceOnEventList+0x2c>)
 8009d18:	6819      	ldr	r1, [r3, #0]
 8009d1a:	3118      	adds	r1, #24
 8009d1c:	f7ff f819 	bl	8008d52 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d20:	2101      	movs	r1, #1
 8009d22:	4620      	mov	r0, r4
 8009d24:	f7ff fd82 	bl	800982c <prvAddCurrentTaskToDelayedList>
}
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009d3a:	e7fe      	b.n	8009d3a <vTaskPlaceOnEventList+0x2a>
 8009d3c:	20000fa4 	.word	0x20000fa4

08009d40 <xTaskRemoveFromEventList>:
{
 8009d40:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d42:	68c3      	ldr	r3, [r0, #12]
 8009d44:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009d46:	b324      	cbz	r4, 8009d92 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d48:	f104 0518 	add.w	r5, r4, #24
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f7ff f819 	bl	8008d84 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d52:	4b18      	ldr	r3, [pc, #96]	; (8009db4 <xTaskRemoveFromEventList+0x74>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	bb2b      	cbnz	r3, 8009da4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d58:	1d25      	adds	r5, r4, #4
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f7ff f812 	bl	8008d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009d62:	2301      	movs	r3, #1
 8009d64:	4083      	lsls	r3, r0
 8009d66:	4a14      	ldr	r2, [pc, #80]	; (8009db8 <xTaskRemoveFromEventList+0x78>)
 8009d68:	6811      	ldr	r1, [r2, #0]
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009d72:	4629      	mov	r1, r5
 8009d74:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <xTaskRemoveFromEventList+0x7c>)
 8009d76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d7a:	f7fe ffdf 	bl	8008d3c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <xTaskRemoveFromEventList+0x80>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d911      	bls.n	8009dae <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	4b0d      	ldr	r3, [pc, #52]	; (8009dc4 <xTaskRemoveFromEventList+0x84>)
 8009d8e:	6018      	str	r0, [r3, #0]
 8009d90:	e00e      	b.n	8009db0 <xTaskRemoveFromEventList+0x70>
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009da2:	e7fe      	b.n	8009da2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009da4:	4629      	mov	r1, r5
 8009da6:	4808      	ldr	r0, [pc, #32]	; (8009dc8 <xTaskRemoveFromEventList+0x88>)
 8009da8:	f7fe ffc8 	bl	8008d3c <vListInsertEnd>
 8009dac:	e7e7      	b.n	8009d7e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8009dae:	2000      	movs	r0, #0
}
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
 8009db2:	bf00      	nop
 8009db4:	20001048 	.word	0x20001048
 8009db8:	20001050 	.word	0x20001050
 8009dbc:	20000fb0 	.word	0x20000fb0
 8009dc0:	20000fa4 	.word	0x20000fa4
 8009dc4:	200010c8 	.word	0x200010c8
 8009dc8:	20001084 	.word	0x20001084

08009dcc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009dcc:	4b03      	ldr	r3, [pc, #12]	; (8009ddc <vTaskInternalSetTimeOutState+0x10>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009dd2:	4b03      	ldr	r3, [pc, #12]	; (8009de0 <vTaskInternalSetTimeOutState+0x14>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6043      	str	r3, [r0, #4]
}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20001080 	.word	0x20001080
 8009de0:	200010c4 	.word	0x200010c4

08009de4 <xTaskCheckForTimeOut>:
{
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009de6:	b1c8      	cbz	r0, 8009e1c <xTaskCheckForTimeOut+0x38>
 8009de8:	460c      	mov	r4, r1
 8009dea:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009dec:	b1f9      	cbz	r1, 8009e2e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8009dee:	f000 f9e1 	bl	800a1b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009df2:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <xTaskCheckForTimeOut+0x7c>)
 8009df4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009df6:	686b      	ldr	r3, [r5, #4]
 8009df8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009dfa:	6822      	ldr	r2, [r4, #0]
 8009dfc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009e00:	d026      	beq.n	8009e50 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e02:	682f      	ldr	r7, [r5, #0]
 8009e04:	4e17      	ldr	r6, [pc, #92]	; (8009e64 <xTaskCheckForTimeOut+0x80>)
 8009e06:	6836      	ldr	r6, [r6, #0]
 8009e08:	42b7      	cmp	r7, r6
 8009e0a:	d001      	beq.n	8009e10 <xTaskCheckForTimeOut+0x2c>
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	d924      	bls.n	8009e5a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e10:	4282      	cmp	r2, r0
 8009e12:	d815      	bhi.n	8009e40 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009e18:	2401      	movs	r4, #1
 8009e1a:	e01a      	b.n	8009e52 <xTaskCheckForTimeOut+0x6e>
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009e2c:	e7fe      	b.n	8009e2c <xTaskCheckForTimeOut+0x48>
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009e3e:	e7fe      	b.n	8009e3e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8009e40:	1a5b      	subs	r3, r3, r1
 8009e42:	4413      	add	r3, r2
 8009e44:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e46:	4628      	mov	r0, r5
 8009e48:	f7ff ffc0 	bl	8009dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e4c:	2400      	movs	r4, #0
 8009e4e:	e000      	b.n	8009e52 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8009e50:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009e52:	f000 f9d1 	bl	800a1f8 <vPortExitCritical>
}
 8009e56:	4620      	mov	r0, r4
 8009e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8009e5a:	2401      	movs	r4, #1
 8009e5c:	e7f9      	b.n	8009e52 <xTaskCheckForTimeOut+0x6e>
 8009e5e:	bf00      	nop
 8009e60:	200010c4 	.word	0x200010c4
 8009e64:	20001080 	.word	0x20001080

08009e68 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009e68:	4b01      	ldr	r3, [pc, #4]	; (8009e70 <vTaskMissedYield+0x8>)
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	601a      	str	r2, [r3, #0]
}
 8009e6e:	4770      	bx	lr
 8009e70:	200010c8 	.word	0x200010c8

08009e74 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <xTaskGetSchedulerState+0x18>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	b133      	cbz	r3, 8009e88 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <xTaskGetSchedulerState+0x1c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	b10b      	cbz	r3, 8009e84 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e80:	2000      	movs	r0, #0
	}
 8009e82:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009e84:	2002      	movs	r0, #2
 8009e86:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e88:	2001      	movs	r0, #1
 8009e8a:	4770      	bx	lr
 8009e8c:	20001098 	.word	0x20001098
 8009e90:	20001048 	.word	0x20001048

08009e94 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d04f      	beq.n	8009f38 <xTaskPriorityInherit+0xa4>
	{
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009e9e:	4a28      	ldr	r2, [pc, #160]	; (8009f40 <xTaskPriorityInherit+0xac>)
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d23f      	bcs.n	8009f28 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ea8:	6982      	ldr	r2, [r0, #24]
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	db05      	blt.n	8009eba <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eae:	4a24      	ldr	r2, [pc, #144]	; (8009f40 <xTaskPriorityInherit+0xac>)
 8009eb0:	6812      	ldr	r2, [r2, #0]
 8009eb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009eb4:	f1c2 0207 	rsb	r2, r2, #7
 8009eb8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009eba:	6961      	ldr	r1, [r4, #20]
 8009ebc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ec0:	4a20      	ldr	r2, [pc, #128]	; (8009f44 <xTaskPriorityInherit+0xb0>)
 8009ec2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ec6:	4299      	cmp	r1, r3
 8009ec8:	d005      	beq.n	8009ed6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009eca:	4b1d      	ldr	r3, [pc, #116]	; (8009f40 <xTaskPriorityInherit+0xac>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8009ed2:	2001      	movs	r0, #1
	}
 8009ed4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ed6:	1d25      	adds	r5, r4, #4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7fe ff53 	bl	8008d84 <uxListRemove>
 8009ede:	b970      	cbnz	r0, 8009efe <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009ee0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ee2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4916      	ldr	r1, [pc, #88]	; (8009f44 <xTaskPriorityInherit+0xb0>)
 8009eea:	58cb      	ldr	r3, [r1, r3]
 8009eec:	b93b      	cbnz	r3, 8009efe <xTaskPriorityInherit+0x6a>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	fa03 f202 	lsl.w	r2, r3, r2
 8009ef4:	4914      	ldr	r1, [pc, #80]	; (8009f48 <xTaskPriorityInherit+0xb4>)
 8009ef6:	680b      	ldr	r3, [r1, #0]
 8009ef8:	ea23 0302 	bic.w	r3, r3, r2
 8009efc:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009efe:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <xTaskPriorityInherit+0xac>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009f04:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f06:	2401      	movs	r4, #1
 8009f08:	fa04 f300 	lsl.w	r3, r4, r0
 8009f0c:	4a0e      	ldr	r2, [pc, #56]	; (8009f48 <xTaskPriorityInherit+0xb4>)
 8009f0e:	6811      	ldr	r1, [r2, #0]
 8009f10:	430b      	orrs	r3, r1
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <xTaskPriorityInherit+0xb0>)
 8009f1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f20:	f7fe ff0c 	bl	8008d3c <vListInsertEnd>
				xReturn = pdTRUE;
 8009f24:	4620      	mov	r0, r4
 8009f26:	e7d5      	b.n	8009ed4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <xTaskPriorityInherit+0xac>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d303      	bcc.n	8009f3c <xTaskPriorityInherit+0xa8>
	BaseType_t xReturn = pdFALSE;
 8009f34:	2000      	movs	r0, #0
 8009f36:	e7cd      	b.n	8009ed4 <xTaskPriorityInherit+0x40>
 8009f38:	2000      	movs	r0, #0
	}
 8009f3a:	4770      	bx	lr
					xReturn = pdTRUE;
 8009f3c:	2001      	movs	r0, #1
		return xReturn;
 8009f3e:	e7c9      	b.n	8009ed4 <xTaskPriorityInherit+0x40>
 8009f40:	20000fa4 	.word	0x20000fa4
 8009f44:	20000fb0 	.word	0x20000fb0
 8009f48:	20001050 	.word	0x20001050

08009f4c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d04c      	beq.n	8009fea <xTaskPriorityDisinherit+0x9e>
	{
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009f54:	4b27      	ldr	r3, [pc, #156]	; (8009ff4 <xTaskPriorityDisinherit+0xa8>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4283      	cmp	r3, r0
 8009f5a:	d008      	beq.n	8009f6e <xTaskPriorityDisinherit+0x22>
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	e7fe      	b.n	8009f6c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f6e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009f70:	b943      	cbnz	r3, 8009f84 <xTaskPriorityDisinherit+0x38>
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	e7fe      	b.n	8009f82 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009f84:	3b01      	subs	r3, #1
 8009f86:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f88:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009f8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f8c:	4291      	cmp	r1, r2
 8009f8e:	d02e      	beq.n	8009fee <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f90:	b10b      	cbz	r3, 8009f96 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8009f92:	2000      	movs	r0, #0
	}
 8009f94:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f96:	1d05      	adds	r5, r0, #4
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f7fe fef3 	bl	8008d84 <uxListRemove>
 8009f9e:	b970      	cbnz	r0, 8009fbe <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009fa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009fa2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4913      	ldr	r1, [pc, #76]	; (8009ff8 <xTaskPriorityDisinherit+0xac>)
 8009faa:	58cb      	ldr	r3, [r1, r3]
 8009fac:	b93b      	cbnz	r3, 8009fbe <xTaskPriorityDisinherit+0x72>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	fa03 f202 	lsl.w	r2, r3, r2
 8009fb4:	4911      	ldr	r1, [pc, #68]	; (8009ffc <xTaskPriorityDisinherit+0xb0>)
 8009fb6:	680b      	ldr	r3, [r1, #0]
 8009fb8:	ea23 0302 	bic.w	r3, r3, r2
 8009fbc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fbe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009fc0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc2:	f1c0 0307 	rsb	r3, r0, #7
 8009fc6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fc8:	2401      	movs	r4, #1
 8009fca:	fa04 f300 	lsl.w	r3, r4, r0
 8009fce:	4a0b      	ldr	r2, [pc, #44]	; (8009ffc <xTaskPriorityDisinherit+0xb0>)
 8009fd0:	6811      	ldr	r1, [r2, #0]
 8009fd2:	430b      	orrs	r3, r1
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009fda:	4629      	mov	r1, r5
 8009fdc:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <xTaskPriorityDisinherit+0xac>)
 8009fde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fe2:	f7fe feab 	bl	8008d3c <vListInsertEnd>
					xReturn = pdTRUE;
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	e7d4      	b.n	8009f94 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8009fea:	2000      	movs	r0, #0
	}
 8009fec:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009fee:	2000      	movs	r0, #0
 8009ff0:	e7d0      	b.n	8009f94 <xTaskPriorityDisinherit+0x48>
 8009ff2:	bf00      	nop
 8009ff4:	20000fa4 	.word	0x20000fa4
 8009ff8:	20000fb0 	.word	0x20000fb0
 8009ffc:	20001050 	.word	0x20001050

0800a000 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800a000:	2800      	cmp	r0, #0
 800a002:	d057      	beq.n	800a0b4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
	{
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	460a      	mov	r2, r1
 800a008:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800a00a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a00c:	b941      	cbnz	r1, 800a020 <vTaskPriorityDisinheritAfterTimeout+0x20>
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	e7fe      	b.n	800a01e <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a020:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a022:	4293      	cmp	r3, r2
 800a024:	d200      	bcs.n	800a028 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a026:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a028:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d001      	beq.n	800a032 <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a02e:	2901      	cmp	r1, #1
 800a030:	d000      	beq.n	800a034 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 800a032:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800a034:	4920      	ldr	r1, [pc, #128]	; (800a0b8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a036:	6809      	ldr	r1, [r1, #0]
 800a038:	42a1      	cmp	r1, r4
 800a03a:	d032      	beq.n	800a0a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					pxTCB->uxPriority = uxPriorityToUse;
 800a03c:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a03e:	69a1      	ldr	r1, [r4, #24]
 800a040:	2900      	cmp	r1, #0
 800a042:	db02      	blt.n	800a04a <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a044:	f1c3 0307 	rsb	r3, r3, #7
 800a048:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a04a:	6961      	ldr	r1, [r4, #20]
 800a04c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a050:	4b1a      	ldr	r3, [pc, #104]	; (800a0bc <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a052:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a056:	4291      	cmp	r1, r2
 800a058:	d1eb      	bne.n	800a032 <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a05a:	1d25      	adds	r5, r4, #4
 800a05c:	4628      	mov	r0, r5
 800a05e:	f7fe fe91 	bl	8008d84 <uxListRemove>
 800a062:	b970      	cbnz	r0, 800a082 <vTaskPriorityDisinheritAfterTimeout+0x82>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a064:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a066:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4913      	ldr	r1, [pc, #76]	; (800a0bc <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a06e:	58cb      	ldr	r3, [r1, r3]
 800a070:	b93b      	cbnz	r3, 800a082 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800a072:	2301      	movs	r3, #1
 800a074:	fa03 f202 	lsl.w	r2, r3, r2
 800a078:	4911      	ldr	r1, [pc, #68]	; (800a0c0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800a07a:	680b      	ldr	r3, [r1, #0]
 800a07c:	ea23 0302 	bic.w	r3, r3, r2
 800a080:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800a082:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a084:	2301      	movs	r3, #1
 800a086:	4083      	lsls	r3, r0
 800a088:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800a08a:	6811      	ldr	r1, [r2, #0]
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a094:	4629      	mov	r1, r5
 800a096:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a098:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a09c:	f7fe fe4e 	bl	8008d3c <vListInsertEnd>
	}
 800a0a0:	e7c7      	b.n	800a032 <vTaskPriorityDisinheritAfterTimeout+0x32>
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800a0b2:	e7fe      	b.n	800a0b2 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20000fa4 	.word	0x20000fa4
 800a0bc:	20000fb0 	.word	0x20000fb0
 800a0c0:	20001050 	.word	0x20001050

0800a0c4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a0c4:	4b05      	ldr	r3, [pc, #20]	; (800a0dc <pvTaskIncrementMutexHeldCount+0x18>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	b123      	cbz	r3, 800a0d4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0ca:	4b04      	ldr	r3, [pc, #16]	; (800a0dc <pvTaskIncrementMutexHeldCount+0x18>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 800a0d4:	4b01      	ldr	r3, [pc, #4]	; (800a0dc <pvTaskIncrementMutexHeldCount+0x18>)
 800a0d6:	6818      	ldr	r0, [r3, #0]
	}
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20000fa4 	.word	0x20000fa4

0800a0e0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0e6:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <prvTaskExitError+0x3c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ee:	d008      	beq.n	800a102 <prvTaskExitError+0x22>
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	e7fe      	b.n	800a100 <prvTaskExitError+0x20>
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0fc      	beq.n	800a112 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a118:	b002      	add	sp, #8
 800a11a:	4770      	bx	lr
 800a11c:	2000011c 	.word	0x2000011c

0800a120 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a120:	4808      	ldr	r0, [pc, #32]	; (800a144 <prvPortStartFirstTask+0x24>)
 800a122:	6800      	ldr	r0, [r0, #0]
 800a124:	6800      	ldr	r0, [r0, #0]
 800a126:	f380 8808 	msr	MSP, r0
 800a12a:	f04f 0000 	mov.w	r0, #0
 800a12e:	f380 8814 	msr	CONTROL, r0
 800a132:	b662      	cpsie	i
 800a134:	b661      	cpsie	f
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	df00      	svc	0
 800a140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a142:	0000      	.short	0x0000
 800a144:	e000ed08 	.word	0xe000ed08

0800a148 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a148:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a158 <vPortEnableVFP+0x10>
 800a14c:	6801      	ldr	r1, [r0, #0]
 800a14e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a152:	6001      	str	r1, [r0, #0]
 800a154:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a156:	0000      	.short	0x0000
 800a158:	e000ed88 	.word	0xe000ed88

0800a15c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a15c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a160:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a164:	f021 0101 	bic.w	r1, r1, #1
 800a168:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <pxPortInitialiseStack+0x28>)
 800a16e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a172:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a176:	f06f 0302 	mvn.w	r3, #2
 800a17a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a17e:	3844      	subs	r0, #68	; 0x44
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	0800a0e1 	.word	0x0800a0e1
	...

0800a190 <SVC_Handler>:
	__asm volatile (
 800a190:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <pxCurrentTCBConst2>)
 800a192:	6819      	ldr	r1, [r3, #0]
 800a194:	6808      	ldr	r0, [r1, #0]
 800a196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	f380 8809 	msr	PSP, r0
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f380 8811 	msr	BASEPRI, r0
 800a1aa:	4770      	bx	lr
 800a1ac:	f3af 8000 	nop.w

0800a1b0 <pxCurrentTCBConst2>:
 800a1b0:	20000fa4 	.word	0x20000fa4

0800a1b4 <vPortEnterCritical>:
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a1c4:	4a0a      	ldr	r2, [pc, #40]	; (800a1f0 <vPortEnterCritical+0x3c>)
 800a1c6:	6813      	ldr	r3, [r2, #0]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d000      	beq.n	800a1d2 <vPortEnterCritical+0x1e>
}
 800a1d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1d2:	4b08      	ldr	r3, [pc, #32]	; (800a1f4 <vPortEnterCritical+0x40>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1da:	d0f9      	beq.n	800a1d0 <vPortEnterCritical+0x1c>
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	e7fe      	b.n	800a1ec <vPortEnterCritical+0x38>
 800a1ee:	bf00      	nop
 800a1f0:	2000011c 	.word	0x2000011c
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a1f8:	4b09      	ldr	r3, [pc, #36]	; (800a220 <vPortExitCritical+0x28>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	b943      	cbnz	r3, 800a210 <vPortExitCritical+0x18>
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	e7fe      	b.n	800a20e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a210:	3b01      	subs	r3, #1
 800a212:	4a03      	ldr	r2, [pc, #12]	; (800a220 <vPortExitCritical+0x28>)
 800a214:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a216:	b90b      	cbnz	r3, 800a21c <vPortExitCritical+0x24>
	__asm volatile
 800a218:	f383 8811 	msr	BASEPRI, r3
}
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	2000011c 	.word	0x2000011c
	...

0800a230 <PendSV_Handler>:
	__asm volatile
 800a230:	f3ef 8009 	mrs	r0, PSP
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	4b15      	ldr	r3, [pc, #84]	; (800a290 <pxCurrentTCBConst>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	f01e 0f10 	tst.w	lr, #16
 800a240:	bf08      	it	eq
 800a242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24a:	6010      	str	r0, [r2, #0]
 800a24c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a250:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a254:	f380 8811 	msr	BASEPRI, r0
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f7ff fd0a 	bl	8009c78 <vTaskSwitchContext>
 800a264:	f04f 0000 	mov.w	r0, #0
 800a268:	f380 8811 	msr	BASEPRI, r0
 800a26c:	bc09      	pop	{r0, r3}
 800a26e:	6819      	ldr	r1, [r3, #0]
 800a270:	6808      	ldr	r0, [r1, #0]
 800a272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a276:	f01e 0f10 	tst.w	lr, #16
 800a27a:	bf08      	it	eq
 800a27c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a280:	f380 8809 	msr	PSP, r0
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	f3af 8000 	nop.w

0800a290 <pxCurrentTCBConst>:
 800a290:	20000fa4 	.word	0x20000fa4

0800a294 <SysTick_Handler>:
{
 800a294:	b508      	push	{r3, lr}
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a2a6:	f7ff fbb9 	bl	8009a1c <xTaskIncrementTick>
 800a2aa:	b118      	cbz	r0, 800a2b4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <SysTick_Handler+0x28>)
 800a2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f383 8811 	msr	BASEPRI, r3
}
 800a2ba:	bd08      	pop	{r3, pc}
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2c0:	4a08      	ldr	r2, [pc, #32]	; (800a2e4 <vPortSetupTimerInterrupt+0x24>)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2c6:	4908      	ldr	r1, [pc, #32]	; (800a2e8 <vPortSetupTimerInterrupt+0x28>)
 800a2c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2ca:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <vPortSetupTimerInterrupt+0x2c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4908      	ldr	r1, [pc, #32]	; (800a2f0 <vPortSetupTimerInterrupt+0x30>)
 800a2d0:	fba1 1303 	umull	r1, r3, r1, r3
 800a2d4:	099b      	lsrs	r3, r3, #6
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	4906      	ldr	r1, [pc, #24]	; (800a2f4 <vPortSetupTimerInterrupt+0x34>)
 800a2da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2dc:	2307      	movs	r3, #7
 800a2de:	6013      	str	r3, [r2, #0]
}
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	e000e010 	.word	0xe000e010
 800a2e8:	e000e018 	.word	0xe000e018
 800a2ec:	20000000 	.word	0x20000000
 800a2f0:	10624dd3 	.word	0x10624dd3
 800a2f4:	e000e014 	.word	0xe000e014

0800a2f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2f8:	4b3a      	ldr	r3, [pc, #232]	; (800a3e4 <xPortStartScheduler+0xec>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	4b3a      	ldr	r3, [pc, #232]	; (800a3e8 <xPortStartScheduler+0xf0>)
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d029      	beq.n	800a356 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a302:	4b38      	ldr	r3, [pc, #224]	; (800a3e4 <xPortStartScheduler+0xec>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	4b39      	ldr	r3, [pc, #228]	; (800a3ec <xPortStartScheduler+0xf4>)
 800a308:	429a      	cmp	r2, r3
 800a30a:	d02d      	beq.n	800a368 <xPortStartScheduler+0x70>
{
 800a30c:	b510      	push	{r4, lr}
 800a30e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a310:	4b37      	ldr	r3, [pc, #220]	; (800a3f0 <xPortStartScheduler+0xf8>)
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a318:	22ff      	movs	r2, #255	; 0xff
 800a31a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a324:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a328:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a32c:	4a31      	ldr	r2, [pc, #196]	; (800a3f4 <xPortStartScheduler+0xfc>)
 800a32e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a330:	4b31      	ldr	r3, [pc, #196]	; (800a3f8 <xPortStartScheduler+0x100>)
 800a332:	2207      	movs	r2, #7
 800a334:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a336:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a33a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a33e:	d01c      	beq.n	800a37a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800a340:	4a2d      	ldr	r2, [pc, #180]	; (800a3f8 <xPortStartScheduler+0x100>)
 800a342:	6813      	ldr	r3, [r2, #0]
 800a344:	3b01      	subs	r3, #1
 800a346:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a348:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f88d 3003 	strb.w	r3, [sp, #3]
 800a354:	e7ef      	b.n	800a336 <xPortStartScheduler+0x3e>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a366:	e7fe      	b.n	800a366 <xPortStartScheduler+0x6e>
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a378:	e7fe      	b.n	800a378 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a37a:	4b1f      	ldr	r3, [pc, #124]	; (800a3f8 <xPortStartScheduler+0x100>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d008      	beq.n	800a394 <xPortStartScheduler+0x9c>
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	e7fe      	b.n	800a392 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a394:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a39a:	4a17      	ldr	r2, [pc, #92]	; (800a3f8 <xPortStartScheduler+0x100>)
 800a39c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a39e:	9b01      	ldr	r3, [sp, #4]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4a13      	ldr	r2, [pc, #76]	; (800a3f0 <xPortStartScheduler+0xf8>)
 800a3a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3a6:	4b15      	ldr	r3, [pc, #84]	; (800a3fc <xPortStartScheduler+0x104>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a3ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800a3b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800a3b8:	f7ff ff82 	bl	800a2c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a3bc:	2400      	movs	r4, #0
 800a3be:	4b10      	ldr	r3, [pc, #64]	; (800a400 <xPortStartScheduler+0x108>)
 800a3c0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800a3c2:	f7ff fec1 	bl	800a148 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3c6:	4a0f      	ldr	r2, [pc, #60]	; (800a404 <xPortStartScheduler+0x10c>)
 800a3c8:	6813      	ldr	r3, [r2, #0]
 800a3ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800a3d0:	f7ff fea6 	bl	800a120 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a3d4:	f7ff fc50 	bl	8009c78 <vTaskSwitchContext>
	prvTaskExitError();
 800a3d8:	f7ff fe82 	bl	800a0e0 <prvTaskExitError>
}
 800a3dc:	4620      	mov	r0, r4
 800a3de:	b002      	add	sp, #8
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	bf00      	nop
 800a3e4:	e000ed00 	.word	0xe000ed00
 800a3e8:	410fc271 	.word	0x410fc271
 800a3ec:	410fc270 	.word	0x410fc270
 800a3f0:	e000e400 	.word	0xe000e400
 800a3f4:	200010cc 	.word	0x200010cc
 800a3f8:	200010d0 	.word	0x200010d0
 800a3fc:	e000ed20 	.word	0xe000ed20
 800a400:	2000011c 	.word	0x2000011c
 800a404:	e000ef34 	.word	0xe000ef34

0800a408 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a408:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a40c:	2b0f      	cmp	r3, #15
 800a40e:	d90f      	bls.n	800a430 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a410:	4a10      	ldr	r2, [pc, #64]	; (800a454 <vPortValidateInterruptPriority+0x4c>)
 800a412:	5c9b      	ldrb	r3, [r3, r2]
 800a414:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a416:	4a10      	ldr	r2, [pc, #64]	; (800a458 <vPortValidateInterruptPriority+0x50>)
 800a418:	7812      	ldrb	r2, [r2, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d908      	bls.n	800a430 <vPortValidateInterruptPriority+0x28>
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	e7fe      	b.n	800a42e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a430:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <vPortValidateInterruptPriority+0x54>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a438:	4a09      	ldr	r2, [pc, #36]	; (800a460 <vPortValidateInterruptPriority+0x58>)
 800a43a:	6812      	ldr	r2, [r2, #0]
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d908      	bls.n	800a452 <vPortValidateInterruptPriority+0x4a>
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	e7fe      	b.n	800a450 <vPortValidateInterruptPriority+0x48>
	}
 800a452:	4770      	bx	lr
 800a454:	e000e3f0 	.word	0xe000e3f0
 800a458:	200010cc 	.word	0x200010cc
 800a45c:	e000ed0c 	.word	0xe000ed0c
 800a460:	200010d0 	.word	0x200010d0

0800a464 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a464:	4a13      	ldr	r2, [pc, #76]	; (800a4b4 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a466:	f012 0f07 	tst.w	r2, #7
 800a46a:	d01f      	beq.n	800a4ac <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a46c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a46e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a472:	f5c1 531c 	rsb	r3, r1, #9984	; 0x2700
 800a476:	3310      	adds	r3, #16
 800a478:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a47a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a47c:	480e      	ldr	r0, [pc, #56]	; (800a4b8 <prvHeapInit+0x54>)
 800a47e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a480:	2100      	movs	r1, #0
 800a482:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a484:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a486:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a488:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a48c:	480b      	ldr	r0, [pc, #44]	; (800a4bc <prvHeapInit+0x58>)
 800a48e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a490:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a492:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a494:	1a99      	subs	r1, r3, r2
 800a496:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a498:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a49a:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <prvHeapInit+0x5c>)
 800a49c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <prvHeapInit+0x60>)
 800a4a0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <prvHeapInit+0x64>)
 800a4a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4a8:	601a      	str	r2, [r3, #0]
}
 800a4aa:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4ac:	f242 7310 	movw	r3, #10000	; 0x2710
 800a4b0:	e7e4      	b.n	800a47c <prvHeapInit+0x18>
 800a4b2:	bf00      	nop
 800a4b4:	200010d8 	.word	0x200010d8
 800a4b8:	200037f4 	.word	0x200037f4
 800a4bc:	200010d4 	.word	0x200010d4
 800a4c0:	200037f0 	.word	0x200037f0
 800a4c4:	200037ec 	.word	0x200037ec
 800a4c8:	200037e8 	.word	0x200037e8

0800a4cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4cc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <prvInsertBlockIntoFreeList+0x50>)
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4283      	cmp	r3, r0
 800a4d6:	d3fb      	bcc.n	800a4d0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4d8:	6851      	ldr	r1, [r2, #4]
 800a4da:	1854      	adds	r4, r2, r1
 800a4dc:	4284      	cmp	r4, r0
 800a4de:	d00a      	beq.n	800a4f6 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4e0:	6841      	ldr	r1, [r0, #4]
 800a4e2:	1844      	adds	r4, r0, r1
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	d00b      	beq.n	800a500 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4e8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4ea:	4290      	cmp	r0, r2
 800a4ec:	d000      	beq.n	800a4f0 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4ee:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4f4:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4f6:	6840      	ldr	r0, [r0, #4]
 800a4f8:	4401      	add	r1, r0
 800a4fa:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	e7ef      	b.n	800a4e0 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a500:	4c07      	ldr	r4, [pc, #28]	; (800a520 <prvInsertBlockIntoFreeList+0x54>)
 800a502:	6824      	ldr	r4, [r4, #0]
 800a504:	42a3      	cmp	r3, r4
 800a506:	d006      	beq.n	800a516 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	4419      	add	r1, r3
 800a50c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6003      	str	r3, [r0, #0]
 800a514:	e7e9      	b.n	800a4ea <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a516:	6004      	str	r4, [r0, #0]
 800a518:	e7e7      	b.n	800a4ea <prvInsertBlockIntoFreeList+0x1e>
 800a51a:	bf00      	nop
 800a51c:	200037f4 	.word	0x200037f4
 800a520:	200010d4 	.word	0x200010d4

0800a524 <pvPortMalloc>:
{
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a528:	f7ff fa70 	bl	8009a0c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a52c:	4b34      	ldr	r3, [pc, #208]	; (800a600 <pvPortMalloc+0xdc>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	b1a3      	cbz	r3, 800a55c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a532:	4b34      	ldr	r3, [pc, #208]	; (800a604 <pvPortMalloc+0xe0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	421c      	tst	r4, r3
 800a538:	d14a      	bne.n	800a5d0 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 800a53a:	b134      	cbz	r4, 800a54a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800a53c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a53e:	f014 0f07 	tst.w	r4, #7
 800a542:	d002      	beq.n	800a54a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a544:	f024 0407 	bic.w	r4, r4, #7
 800a548:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a54a:	2c00      	cmp	r4, #0
 800a54c:	d042      	beq.n	800a5d4 <pvPortMalloc+0xb0>
 800a54e:	4b2e      	ldr	r3, [pc, #184]	; (800a608 <pvPortMalloc+0xe4>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	42a3      	cmp	r3, r4
 800a554:	d34d      	bcc.n	800a5f2 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800a556:	4b2d      	ldr	r3, [pc, #180]	; (800a60c <pvPortMalloc+0xe8>)
 800a558:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a55a:	e004      	b.n	800a566 <pvPortMalloc+0x42>
			prvHeapInit();
 800a55c:	f7ff ff82 	bl	800a464 <prvHeapInit>
 800a560:	e7e7      	b.n	800a532 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800a562:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800a564:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a566:	686a      	ldr	r2, [r5, #4]
 800a568:	42a2      	cmp	r2, r4
 800a56a:	d202      	bcs.n	800a572 <pvPortMalloc+0x4e>
 800a56c:	682a      	ldr	r2, [r5, #0]
 800a56e:	2a00      	cmp	r2, #0
 800a570:	d1f7      	bne.n	800a562 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800a572:	4a23      	ldr	r2, [pc, #140]	; (800a600 <pvPortMalloc+0xdc>)
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	42aa      	cmp	r2, r5
 800a578:	d03d      	beq.n	800a5f6 <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a57a:	681e      	ldr	r6, [r3, #0]
 800a57c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a57e:	682a      	ldr	r2, [r5, #0]
 800a580:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a582:	686b      	ldr	r3, [r5, #4]
 800a584:	1b1b      	subs	r3, r3, r4
 800a586:	2b10      	cmp	r3, #16
 800a588:	d910      	bls.n	800a5ac <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a58a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a58c:	f010 0f07 	tst.w	r0, #7
 800a590:	d008      	beq.n	800a5a4 <pvPortMalloc+0x80>
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	e7fe      	b.n	800a5a2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5a4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5a6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5a8:	f7ff ff90 	bl	800a4cc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5ac:	686a      	ldr	r2, [r5, #4]
 800a5ae:	4916      	ldr	r1, [pc, #88]	; (800a608 <pvPortMalloc+0xe4>)
 800a5b0:	680b      	ldr	r3, [r1, #0]
 800a5b2:	1a9b      	subs	r3, r3, r2
 800a5b4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5b6:	4916      	ldr	r1, [pc, #88]	; (800a610 <pvPortMalloc+0xec>)
 800a5b8:	6809      	ldr	r1, [r1, #0]
 800a5ba:	428b      	cmp	r3, r1
 800a5bc:	d201      	bcs.n	800a5c2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5be:	4914      	ldr	r1, [pc, #80]	; (800a610 <pvPortMalloc+0xec>)
 800a5c0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5c2:	4b10      	ldr	r3, [pc, #64]	; (800a604 <pvPortMalloc+0xe0>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	e002      	b.n	800a5d6 <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	e000      	b.n	800a5d6 <pvPortMalloc+0xb2>
 800a5d4:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800a5d6:	f7ff faad 	bl	8009b34 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5da:	f016 0f07 	tst.w	r6, #7
 800a5de:	d00c      	beq.n	800a5fa <pvPortMalloc+0xd6>
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	e7fe      	b.n	800a5f0 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800a5f2:	2600      	movs	r6, #0
 800a5f4:	e7ef      	b.n	800a5d6 <pvPortMalloc+0xb2>
 800a5f6:	2600      	movs	r6, #0
 800a5f8:	e7ed      	b.n	800a5d6 <pvPortMalloc+0xb2>
}
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
 800a5fe:	bf00      	nop
 800a600:	200010d4 	.word	0x200010d4
 800a604:	200037e8 	.word	0x200037e8
 800a608:	200037ec 	.word	0x200037ec
 800a60c:	200037f4 	.word	0x200037f4
 800a610:	200037f0 	.word	0x200037f0

0800a614 <vPortFree>:
	if( pv != NULL )
 800a614:	b380      	cbz	r0, 800a678 <vPortFree+0x64>
{
 800a616:	b538      	push	{r3, r4, r5, lr}
 800a618:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a61a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a61e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a622:	4a16      	ldr	r2, [pc, #88]	; (800a67c <vPortFree+0x68>)
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	4213      	tst	r3, r2
 800a628:	d108      	bne.n	800a63c <vPortFree+0x28>
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	e7fe      	b.n	800a63a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a63c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a640:	b141      	cbz	r1, 800a654 <vPortFree+0x40>
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	e7fe      	b.n	800a652 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a654:	ea23 0302 	bic.w	r3, r3, r2
 800a658:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a65c:	f7ff f9d6 	bl	8009a0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a660:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a664:	4a06      	ldr	r2, [pc, #24]	; (800a680 <vPortFree+0x6c>)
 800a666:	6813      	ldr	r3, [r2, #0]
 800a668:	440b      	add	r3, r1
 800a66a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a66c:	4628      	mov	r0, r5
 800a66e:	f7ff ff2d 	bl	800a4cc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800a672:	f7ff fa5f 	bl	8009b34 <xTaskResumeAll>
}
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	200037e8 	.word	0x200037e8
 800a680:	200037ec 	.word	0x200037ec

0800a684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a686:	2200      	movs	r2, #0
 800a688:	490f      	ldr	r1, [pc, #60]	; (800a6c8 <MX_USB_DEVICE_Init+0x44>)
 800a68a:	4810      	ldr	r0, [pc, #64]	; (800a6cc <MX_USB_DEVICE_Init+0x48>)
 800a68c:	f7fd fddb 	bl	8008246 <USBD_Init>
 800a690:	b970      	cbnz	r0, 800a6b0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a692:	490f      	ldr	r1, [pc, #60]	; (800a6d0 <MX_USB_DEVICE_Init+0x4c>)
 800a694:	480d      	ldr	r0, [pc, #52]	; (800a6cc <MX_USB_DEVICE_Init+0x48>)
 800a696:	f7fd fded 	bl	8008274 <USBD_RegisterClass>
 800a69a:	b960      	cbnz	r0, 800a6b6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a69c:	490d      	ldr	r1, [pc, #52]	; (800a6d4 <MX_USB_DEVICE_Init+0x50>)
 800a69e:	480b      	ldr	r0, [pc, #44]	; (800a6cc <MX_USB_DEVICE_Init+0x48>)
 800a6a0:	f7fd fda3 	bl	80081ea <USBD_CDC_RegisterInterface>
 800a6a4:	b950      	cbnz	r0, 800a6bc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6a6:	4809      	ldr	r0, [pc, #36]	; (800a6cc <MX_USB_DEVICE_Init+0x48>)
 800a6a8:	f7fd fdfb 	bl	80082a2 <USBD_Start>
 800a6ac:	b948      	cbnz	r0, 800a6c2 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a6ae:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a6b0:	f7f8 f86e 	bl	8002790 <Error_Handler>
 800a6b4:	e7ed      	b.n	800a692 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800a6b6:	f7f8 f86b 	bl	8002790 <Error_Handler>
 800a6ba:	e7ef      	b.n	800a69c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800a6bc:	f7f8 f868 	bl	8002790 <Error_Handler>
 800a6c0:	e7f1      	b.n	800a6a6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800a6c2:	f7f8 f865 	bl	8002790 <Error_Handler>
}
 800a6c6:	e7f2      	b.n	800a6ae <MX_USB_DEVICE_Init+0x2a>
 800a6c8:	20000134 	.word	0x20000134
 800a6cc:	20003b1c 	.word	0x20003b1c
 800a6d0:	2000000c 	.word	0x2000000c
 800a6d4:	20000120 	.word	0x20000120

0800a6d8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800a6d8:	2000      	movs	r0, #0
 800a6da:	4770      	bx	lr

0800a6dc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800a6dc:	2000      	movs	r0, #0
 800a6de:	4770      	bx	lr

0800a6e0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	4770      	bx	lr

0800a6e4 <CDC_Receive_FS>:
{
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6e8:	4c04      	ldr	r4, [pc, #16]	; (800a6fc <CDC_Receive_FS+0x18>)
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f7fd fd8c 	bl	8008208 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7fd fd8f 	bl	8008214 <USBD_CDC_ReceivePacket>
}
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20003b1c 	.word	0x20003b1c

0800a700 <CDC_Init_FS>:
{
 800a700:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a702:	4c06      	ldr	r4, [pc, #24]	; (800a71c <CDC_Init_FS+0x1c>)
 800a704:	2200      	movs	r2, #0
 800a706:	4906      	ldr	r1, [pc, #24]	; (800a720 <CDC_Init_FS+0x20>)
 800a708:	4620      	mov	r0, r4
 800a70a:	f7fd fd75 	bl	80081f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a70e:	4905      	ldr	r1, [pc, #20]	; (800a724 <CDC_Init_FS+0x24>)
 800a710:	4620      	mov	r0, r4
 800a712:	f7fd fd79 	bl	8008208 <USBD_CDC_SetRxBuffer>
}
 800a716:	2000      	movs	r0, #0
 800a718:	bd10      	pop	{r4, pc}
 800a71a:	bf00      	nop
 800a71c:	20003b1c 	.word	0x20003b1c
 800a720:	200041d4 	.word	0x200041d4
 800a724:	20003dec 	.word	0x20003dec

0800a728 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a728:	2312      	movs	r3, #18
 800a72a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800a72c:	4800      	ldr	r0, [pc, #0]	; (800a730 <USBD_FS_DeviceDescriptor+0x8>)
 800a72e:	4770      	bx	lr
 800a730:	20000160 	.word	0x20000160

0800a734 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a734:	2304      	movs	r3, #4
 800a736:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800a738:	4800      	ldr	r0, [pc, #0]	; (800a73c <USBD_FS_LangIDStrDescriptor+0x8>)
 800a73a:	4770      	bx	lr
 800a73c:	20000174 	.word	0x20000174

0800a740 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a740:	230c      	movs	r3, #12
 800a742:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800a744:	4800      	ldr	r0, [pc, #0]	; (800a748 <USBD_FS_USR_BOSDescriptor+0x8>)
 800a746:	4770      	bx	lr
 800a748:	20000154 	.word	0x20000154

0800a74c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4293      	cmp	r3, r2
 800a750:	d217      	bcs.n	800a782 <IntToUnicode+0x36>
{
 800a752:	b430      	push	{r4, r5}
 800a754:	e00b      	b.n	800a76e <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a756:	3437      	adds	r4, #55	; 0x37
 800a758:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800a75c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800a75e:	005c      	lsls	r4, r3, #1
 800a760:	3401      	adds	r4, #1
 800a762:	2500      	movs	r5, #0
 800a764:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800a766:	3301      	adds	r3, #1
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d207      	bcs.n	800a77e <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 800a76e:	0f04      	lsrs	r4, r0, #28
 800a770:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800a774:	d2ef      	bcs.n	800a756 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800a776:	3430      	adds	r4, #48	; 0x30
 800a778:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800a77c:	e7ee      	b.n	800a75c <IntToUnicode+0x10>
  }
}
 800a77e:	bc30      	pop	{r4, r5}
 800a780:	4770      	bx	lr
 800a782:	4770      	bx	lr

0800a784 <Get_SerialNum>:
{
 800a784:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a786:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <Get_SerialNum+0x2c>)
 800a788:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a78a:	3304      	adds	r3, #4
 800a78c:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a78e:	3304      	adds	r3, #4
 800a790:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800a792:	18c0      	adds	r0, r0, r3
 800a794:	d100      	bne.n	800a798 <Get_SerialNum+0x14>
}
 800a796:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a798:	4d06      	ldr	r5, [pc, #24]	; (800a7b4 <Get_SerialNum+0x30>)
 800a79a:	2208      	movs	r2, #8
 800a79c:	1ca9      	adds	r1, r5, #2
 800a79e:	f7ff ffd5 	bl	800a74c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7a2:	2204      	movs	r2, #4
 800a7a4:	f105 0112 	add.w	r1, r5, #18
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7ff ffcf 	bl	800a74c <IntToUnicode>
}
 800a7ae:	e7f2      	b.n	800a796 <Get_SerialNum+0x12>
 800a7b0:	1fff7590 	.word	0x1fff7590
 800a7b4:	20000178 	.word	0x20000178

0800a7b8 <USBD_FS_SerialStrDescriptor>:
{
 800a7b8:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800a7ba:	231a      	movs	r3, #26
 800a7bc:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800a7be:	f7ff ffe1 	bl	800a784 <Get_SerialNum>
}
 800a7c2:	4801      	ldr	r0, [pc, #4]	; (800a7c8 <USBD_FS_SerialStrDescriptor+0x10>)
 800a7c4:	bd08      	pop	{r3, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20000178 	.word	0x20000178

0800a7cc <USBD_FS_ProductStrDescriptor>:
{
 800a7cc:	b508      	push	{r3, lr}
 800a7ce:	460a      	mov	r2, r1
  if(speed == 0)
 800a7d0:	b928      	cbnz	r0, 800a7de <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7d2:	4905      	ldr	r1, [pc, #20]	; (800a7e8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a7d4:	4805      	ldr	r0, [pc, #20]	; (800a7ec <USBD_FS_ProductStrDescriptor+0x20>)
 800a7d6:	f7fe f9c6 	bl	8008b66 <USBD_GetString>
}
 800a7da:	4803      	ldr	r0, [pc, #12]	; (800a7e8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a7dc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7de:	4902      	ldr	r1, [pc, #8]	; (800a7e8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a7e0:	4802      	ldr	r0, [pc, #8]	; (800a7ec <USBD_FS_ProductStrDescriptor+0x20>)
 800a7e2:	f7fe f9c0 	bl	8008b66 <USBD_GetString>
 800a7e6:	e7f8      	b.n	800a7da <USBD_FS_ProductStrDescriptor+0xe>
 800a7e8:	200045bc 	.word	0x200045bc
 800a7ec:	0800af48 	.word	0x0800af48

0800a7f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7f4:	4c03      	ldr	r4, [pc, #12]	; (800a804 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	4803      	ldr	r0, [pc, #12]	; (800a808 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800a7fa:	f7fe f9b4 	bl	8008b66 <USBD_GetString>
}
 800a7fe:	4620      	mov	r0, r4
 800a800:	bd10      	pop	{r4, pc}
 800a802:	bf00      	nop
 800a804:	200045bc 	.word	0x200045bc
 800a808:	0800af60 	.word	0x0800af60

0800a80c <USBD_FS_ConfigStrDescriptor>:
{
 800a80c:	b508      	push	{r3, lr}
 800a80e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800a810:	b928      	cbnz	r0, 800a81e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a812:	4905      	ldr	r1, [pc, #20]	; (800a828 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a814:	4805      	ldr	r0, [pc, #20]	; (800a82c <USBD_FS_ConfigStrDescriptor+0x20>)
 800a816:	f7fe f9a6 	bl	8008b66 <USBD_GetString>
}
 800a81a:	4803      	ldr	r0, [pc, #12]	; (800a828 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a81c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a81e:	4902      	ldr	r1, [pc, #8]	; (800a828 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a820:	4802      	ldr	r0, [pc, #8]	; (800a82c <USBD_FS_ConfigStrDescriptor+0x20>)
 800a822:	f7fe f9a0 	bl	8008b66 <USBD_GetString>
 800a826:	e7f8      	b.n	800a81a <USBD_FS_ConfigStrDescriptor+0xe>
 800a828:	200045bc 	.word	0x200045bc
 800a82c:	0800af74 	.word	0x0800af74

0800a830 <USBD_FS_InterfaceStrDescriptor>:
{
 800a830:	b508      	push	{r3, lr}
 800a832:	460a      	mov	r2, r1
  if(speed == 0)
 800a834:	b928      	cbnz	r0, 800a842 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a836:	4905      	ldr	r1, [pc, #20]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a838:	4805      	ldr	r0, [pc, #20]	; (800a850 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800a83a:	f7fe f994 	bl	8008b66 <USBD_GetString>
}
 800a83e:	4803      	ldr	r0, [pc, #12]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a840:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a842:	4902      	ldr	r1, [pc, #8]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a844:	4802      	ldr	r0, [pc, #8]	; (800a850 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800a846:	f7fe f98e 	bl	8008b66 <USBD_GetString>
 800a84a:	e7f8      	b.n	800a83e <USBD_FS_InterfaceStrDescriptor+0xe>
 800a84c:	200045bc 	.word	0x200045bc
 800a850:	0800af80 	.word	0x0800af80

0800a854 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a854:	b508      	push	{r3, lr}
  SystemClock_Config();
 800a856:	f7f7 fe72 	bl	800253e <SystemClock_Config>
}
 800a85a:	bd08      	pop	{r3, pc}

0800a85c <HAL_PCD_MspInit>:
{
 800a85c:	b530      	push	{r4, r5, lr}
 800a85e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a860:	2300      	movs	r3, #0
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	9306      	str	r3, [sp, #24]
 800a86a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB)
 800a86c:	6802      	ldr	r2, [r0, #0]
 800a86e:	4b18      	ldr	r3, [pc, #96]	; (800a8d0 <HAL_PCD_MspInit+0x74>)
 800a870:	429a      	cmp	r2, r3
 800a872:	d001      	beq.n	800a878 <HAL_PCD_MspInit+0x1c>
}
 800a874:	b009      	add	sp, #36	; 0x24
 800a876:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a878:	4c16      	ldr	r4, [pc, #88]	; (800a8d4 <HAL_PCD_MspInit+0x78>)
 800a87a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a87c:	f043 0301 	orr.w	r3, r3, #1
 800a880:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a882:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a88c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a890:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a892:	2302      	movs	r3, #2
 800a894:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a896:	2500      	movs	r5, #0
 800a898:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a89a:	2303      	movs	r3, #3
 800a89c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800a89e:	230a      	movs	r3, #10
 800a8a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8a2:	a903      	add	r1, sp, #12
 800a8a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8a8:	f7f9 f8e8 	bl	8003a7c <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 800a8ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8b2:	65a3      	str	r3, [r4, #88]	; 0x58
 800a8b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8ba:	9302      	str	r3, [sp, #8]
 800a8bc:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800a8be:	462a      	mov	r2, r5
 800a8c0:	2105      	movs	r1, #5
 800a8c2:	2043      	movs	r0, #67	; 0x43
 800a8c4:	f7f8 ff3e 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a8c8:	2043      	movs	r0, #67	; 0x43
 800a8ca:	f7f8 ff6f 	bl	80037ac <HAL_NVIC_EnableIRQ>
}
 800a8ce:	e7d1      	b.n	800a874 <HAL_PCD_MspInit+0x18>
 800a8d0:	40006800 	.word	0x40006800
 800a8d4:	40021000 	.word	0x40021000

0800a8d8 <HAL_PCD_SetupStageCallback>:
{
 800a8d8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8da:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800a8de:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a8e2:	f7fd fcf3 	bl	80082cc <USBD_LL_SetupStage>
}
 800a8e6:	bd08      	pop	{r3, pc}

0800a8e8 <HAL_PCD_DataOutStageCallback>:
{
 800a8e8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8ea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a8ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a8f2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800a8f6:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a8fa:	f7fd fd13 	bl	8008324 <USBD_LL_DataOutStage>
}
 800a8fe:	bd08      	pop	{r3, pc}

0800a900 <HAL_PCD_DataInStageCallback>:
{
 800a900:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a902:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a906:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a90a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a90c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a910:	f7fd fd41 	bl	8008396 <USBD_LL_DataInStage>
}
 800a914:	bd08      	pop	{r3, pc}

0800a916 <HAL_PCD_SOFCallback>:
{
 800a916:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a918:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a91c:	f7fd fdd7 	bl	80084ce <USBD_LL_SOF>
}
 800a920:	bd08      	pop	{r3, pc}

0800a922 <HAL_PCD_ResetCallback>:
{
 800a922:	b510      	push	{r4, lr}
 800a924:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a926:	6883      	ldr	r3, [r0, #8]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d109      	bne.n	800a940 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a92c:	2101      	movs	r1, #1
 800a92e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800a932:	f7fd fdb5 	bl	80084a0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a936:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800a93a:	f7fd fd88 	bl	800844e <USBD_LL_Reset>
}
 800a93e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a940:	f7f7 ff26 	bl	8002790 <Error_Handler>
 800a944:	e7f2      	b.n	800a92c <HAL_PCD_ResetCallback+0xa>
	...

0800a948 <HAL_PCD_SuspendCallback>:
{
 800a948:	b510      	push	{r4, lr}
 800a94a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a94c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a950:	f7fd fda9 	bl	80084a6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800a954:	69a3      	ldr	r3, [r4, #24]
 800a956:	b123      	cbz	r3, 800a962 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a958:	4a02      	ldr	r2, [pc, #8]	; (800a964 <HAL_PCD_SuspendCallback+0x1c>)
 800a95a:	6913      	ldr	r3, [r2, #16]
 800a95c:	f043 0306 	orr.w	r3, r3, #6
 800a960:	6113      	str	r3, [r2, #16]
}
 800a962:	bd10      	pop	{r4, pc}
 800a964:	e000ed00 	.word	0xe000ed00

0800a968 <HAL_PCD_ResumeCallback>:
{
 800a968:	b510      	push	{r4, lr}
 800a96a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800a96c:	6983      	ldr	r3, [r0, #24]
 800a96e:	b923      	cbnz	r3, 800a97a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a970:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800a974:	f7fd fda0 	bl	80084b8 <USBD_LL_Resume>
}
 800a978:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a97a:	4a04      	ldr	r2, [pc, #16]	; (800a98c <HAL_PCD_ResumeCallback+0x24>)
 800a97c:	6913      	ldr	r3, [r2, #16]
 800a97e:	f023 0306 	bic.w	r3, r3, #6
 800a982:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a984:	f7ff ff66 	bl	800a854 <SystemClockConfig_Resume>
 800a988:	e7f2      	b.n	800a970 <HAL_PCD_ResumeCallback+0x8>
 800a98a:	bf00      	nop
 800a98c:	e000ed00 	.word	0xe000ed00

0800a990 <USBD_LL_Init>:
{
 800a990:	b510      	push	{r4, lr}
 800a992:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 800a994:	f7fa fcae 	bl	80052f4 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 800a998:	481e      	ldr	r0, [pc, #120]	; (800aa14 <USBD_LL_Init+0x84>)
 800a99a:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800a99e:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800a9a2:	4b1d      	ldr	r3, [pc, #116]	; (800aa18 <USBD_LL_Init+0x88>)
 800a9a4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a9a6:	2308      	movs	r3, #8
 800a9a8:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a9ae:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a9b4:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a9b6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a9b8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a9ba:	f7f9 fdd0 	bl	800455e <HAL_PCD_Init>
 800a9be:	bb30      	cbnz	r0, 800aa0e <USBD_LL_Init+0x7e>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a9c0:	2318      	movs	r3, #24
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800a9ca:	f7fa fc11 	bl	80051f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a9ce:	2358      	movs	r3, #88	; 0x58
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2180      	movs	r1, #128	; 0x80
 800a9d4:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800a9d8:	f7fa fc0a 	bl	80051f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a9dc:	23c0      	movs	r3, #192	; 0xc0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2181      	movs	r1, #129	; 0x81
 800a9e2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800a9e6:	f7fa fc03 	bl	80051f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a9ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800a9f6:	f7fa fbfb 	bl	80051f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a9fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2182      	movs	r1, #130	; 0x82
 800aa02:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800aa06:	f7fa fbf3 	bl	80051f0 <HAL_PCDEx_PMAConfig>
}
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800aa0e:	f7f7 febf 	bl	8002790 <Error_Handler>
 800aa12:	e7d5      	b.n	800a9c0 <USBD_LL_Init+0x30>
 800aa14:	200047bc 	.word	0x200047bc
 800aa18:	40006800 	.word	0x40006800

0800aa1c <USBD_LL_Start>:
{
 800aa1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800aa1e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aa22:	f7f9 fe2a 	bl	800467a <HAL_PCD_Start>
  switch (hal_status) {
 800aa26:	2803      	cmp	r0, #3
 800aa28:	d805      	bhi.n	800aa36 <USBD_LL_Start+0x1a>
 800aa2a:	e8df f000 	tbb	[pc, r0]
 800aa2e:	0403      	.short	0x0403
 800aa30:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800aa32:	2001      	movs	r0, #1
}
 800aa34:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800aa36:	2003      	movs	r0, #3
 800aa38:	e7fc      	b.n	800aa34 <USBD_LL_Start+0x18>

0800aa3a <USBD_LL_OpenEP>:
{
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	4614      	mov	r4, r2
 800aa3e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa40:	4623      	mov	r3, r4
 800aa42:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aa46:	f7fa faa0 	bl	8004f8a <HAL_PCD_EP_Open>
  switch (hal_status) {
 800aa4a:	2803      	cmp	r0, #3
 800aa4c:	d805      	bhi.n	800aa5a <USBD_LL_OpenEP+0x20>
 800aa4e:	e8df f000 	tbb	[pc, r0]
 800aa52:	0403      	.short	0x0403
 800aa54:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800aa56:	2001      	movs	r0, #1
}
 800aa58:	bd10      	pop	{r4, pc}
      usb_status = USBD_FAIL;
 800aa5a:	2003      	movs	r0, #3
 800aa5c:	e7fc      	b.n	800aa58 <USBD_LL_OpenEP+0x1e>

0800aa5e <USBD_LL_CloseEP>:
{
 800aa5e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa60:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aa64:	f7fa facd 	bl	8005002 <HAL_PCD_EP_Close>
  switch (hal_status) {
 800aa68:	2803      	cmp	r0, #3
 800aa6a:	d805      	bhi.n	800aa78 <USBD_LL_CloseEP+0x1a>
 800aa6c:	e8df f000 	tbb	[pc, r0]
 800aa70:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800aa74:	2001      	movs	r0, #1
}
 800aa76:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800aa78:	2003      	movs	r0, #3
 800aa7a:	e7fc      	b.n	800aa76 <USBD_LL_CloseEP+0x18>

0800aa7c <USBD_LL_StallEP>:
{
 800aa7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa7e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aa82:	f7fa fb3e 	bl	8005102 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 800aa86:	2803      	cmp	r0, #3
 800aa88:	d805      	bhi.n	800aa96 <USBD_LL_StallEP+0x1a>
 800aa8a:	e8df f000 	tbb	[pc, r0]
 800aa8e:	0403      	.short	0x0403
 800aa90:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800aa92:	2001      	movs	r0, #1
}
 800aa94:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800aa96:	2003      	movs	r0, #3
 800aa98:	e7fc      	b.n	800aa94 <USBD_LL_StallEP+0x18>

0800aa9a <USBD_LL_ClearStallEP>:
{
 800aa9a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa9c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aaa0:	f7fa fb6b 	bl	800517a <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 800aaa4:	2803      	cmp	r0, #3
 800aaa6:	d805      	bhi.n	800aab4 <USBD_LL_ClearStallEP+0x1a>
 800aaa8:	e8df f000 	tbb	[pc, r0]
 800aaac:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800aab0:	2001      	movs	r0, #1
}
 800aab2:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800aab4:	2003      	movs	r0, #3
 800aab6:	e7fc      	b.n	800aab2 <USBD_LL_ClearStallEP+0x18>

0800aab8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aab8:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800aabc:	f011 0f80 	tst.w	r1, #128	; 0x80
 800aac0:	d108      	bne.n	800aad4 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aac2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800aac6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800aaca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aace:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800aad2:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aad4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800aad8:	3101      	adds	r1, #1
 800aada:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800aade:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aae2:	7888      	ldrb	r0, [r1, #2]
 800aae4:	4770      	bx	lr

0800aae6 <USBD_LL_SetUSBAddress>:
{
 800aae6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aae8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aaec:	f7fa f94b 	bl	8004d86 <HAL_PCD_SetAddress>
  switch (hal_status) {
 800aaf0:	2803      	cmp	r0, #3
 800aaf2:	d805      	bhi.n	800ab00 <USBD_LL_SetUSBAddress+0x1a>
 800aaf4:	e8df f000 	tbb	[pc, r0]
 800aaf8:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800aafc:	2001      	movs	r0, #1
}
 800aafe:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800ab00:	2003      	movs	r0, #3
 800ab02:	e7fc      	b.n	800aafe <USBD_LL_SetUSBAddress+0x18>

0800ab04 <USBD_LL_Transmit>:
{
 800ab04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab06:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab0a:	f7fa fad7 	bl	80050bc <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 800ab0e:	2803      	cmp	r0, #3
 800ab10:	d805      	bhi.n	800ab1e <USBD_LL_Transmit+0x1a>
 800ab12:	e8df f000 	tbb	[pc, r0]
 800ab16:	0403      	.short	0x0403
 800ab18:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800ab1a:	2001      	movs	r0, #1
}
 800ab1c:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800ab1e:	2003      	movs	r0, #3
 800ab20:	e7fc      	b.n	800ab1c <USBD_LL_Transmit+0x18>

0800ab22 <USBD_LL_PrepareReceive>:
{
 800ab22:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab24:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab28:	f7fa fa9d 	bl	8005066 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 800ab2c:	2803      	cmp	r0, #3
 800ab2e:	d805      	bhi.n	800ab3c <USBD_LL_PrepareReceive+0x1a>
 800ab30:	e8df f000 	tbb	[pc, r0]
 800ab34:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 800ab38:	2001      	movs	r0, #1
}
 800ab3a:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800ab3c:	2003      	movs	r0, #3
 800ab3e:	e7fc      	b.n	800ab3a <USBD_LL_PrepareReceive+0x18>

0800ab40 <USBD_LL_GetRxDataSize>:
{
 800ab40:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab42:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab46:	f7fa fab0 	bl	80050aa <HAL_PCD_EP_GetRxCount>
}
 800ab4a:	bd08      	pop	{r3, pc}

0800ab4c <HAL_PCDEx_LPM_Callback>:
{
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	4604      	mov	r4, r0
  switch (msg)
 800ab50:	b111      	cbz	r1, 800ab58 <HAL_PCDEx_LPM_Callback+0xc>
 800ab52:	2901      	cmp	r1, #1
 800ab54:	d00f      	beq.n	800ab76 <HAL_PCDEx_LPM_Callback+0x2a>
}
 800ab56:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800ab58:	6983      	ldr	r3, [r0, #24]
 800ab5a:	b923      	cbnz	r3, 800ab66 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800ab5c:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ab60:	f7fd fcaa 	bl	80084b8 <USBD_LL_Resume>
    break;
 800ab64:	e7f7      	b.n	800ab56 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800ab66:	f7ff fe75 	bl	800a854 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab6a:	4a09      	ldr	r2, [pc, #36]	; (800ab90 <HAL_PCDEx_LPM_Callback+0x44>)
 800ab6c:	6913      	ldr	r3, [r2, #16]
 800ab6e:	f023 0306 	bic.w	r3, r3, #6
 800ab72:	6113      	str	r3, [r2, #16]
 800ab74:	e7f2      	b.n	800ab5c <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800ab76:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ab7a:	f7fd fc94 	bl	80084a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ab7e:	69a3      	ldr	r3, [r4, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0e8      	beq.n	800ab56 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab84:	4a02      	ldr	r2, [pc, #8]	; (800ab90 <HAL_PCDEx_LPM_Callback+0x44>)
 800ab86:	6913      	ldr	r3, [r2, #16]
 800ab88:	f043 0306 	orr.w	r3, r3, #6
 800ab8c:	6113      	str	r3, [r2, #16]
}
 800ab8e:	e7e2      	b.n	800ab56 <HAL_PCDEx_LPM_Callback+0xa>
 800ab90:	e000ed00 	.word	0xe000ed00

0800ab94 <__errno>:
 800ab94:	4b01      	ldr	r3, [pc, #4]	; (800ab9c <__errno+0x8>)
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	20000194 	.word	0x20000194

0800aba0 <__libc_init_array>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4d0d      	ldr	r5, [pc, #52]	; (800abd8 <__libc_init_array+0x38>)
 800aba4:	4c0d      	ldr	r4, [pc, #52]	; (800abdc <__libc_init_array+0x3c>)
 800aba6:	1b64      	subs	r4, r4, r5
 800aba8:	10a4      	asrs	r4, r4, #2
 800abaa:	2600      	movs	r6, #0
 800abac:	42a6      	cmp	r6, r4
 800abae:	d109      	bne.n	800abc4 <__libc_init_array+0x24>
 800abb0:	4d0b      	ldr	r5, [pc, #44]	; (800abe0 <__libc_init_array+0x40>)
 800abb2:	4c0c      	ldr	r4, [pc, #48]	; (800abe4 <__libc_init_array+0x44>)
 800abb4:	f000 f906 	bl	800adc4 <_init>
 800abb8:	1b64      	subs	r4, r4, r5
 800abba:	10a4      	asrs	r4, r4, #2
 800abbc:	2600      	movs	r6, #0
 800abbe:	42a6      	cmp	r6, r4
 800abc0:	d105      	bne.n	800abce <__libc_init_array+0x2e>
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc8:	4798      	blx	r3
 800abca:	3601      	adds	r6, #1
 800abcc:	e7ee      	b.n	800abac <__libc_init_array+0xc>
 800abce:	f855 3b04 	ldr.w	r3, [r5], #4
 800abd2:	4798      	blx	r3
 800abd4:	3601      	adds	r6, #1
 800abd6:	e7f2      	b.n	800abbe <__libc_init_array+0x1e>
 800abd8:	0800af98 	.word	0x0800af98
 800abdc:	0800af98 	.word	0x0800af98
 800abe0:	0800af98 	.word	0x0800af98
 800abe4:	0800af9c 	.word	0x0800af9c

0800abe8 <malloc>:
 800abe8:	4b02      	ldr	r3, [pc, #8]	; (800abf4 <malloc+0xc>)
 800abea:	4601      	mov	r1, r0
 800abec:	6818      	ldr	r0, [r3, #0]
 800abee:	f000 b871 	b.w	800acd4 <_malloc_r>
 800abf2:	bf00      	nop
 800abf4:	20000194 	.word	0x20000194

0800abf8 <free>:
 800abf8:	4b02      	ldr	r3, [pc, #8]	; (800ac04 <free+0xc>)
 800abfa:	4601      	mov	r1, r0
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	f000 b819 	b.w	800ac34 <_free_r>
 800ac02:	bf00      	nop
 800ac04:	20000194 	.word	0x20000194

0800ac08 <memcpy>:
 800ac08:	440a      	add	r2, r1
 800ac0a:	4291      	cmp	r1, r2
 800ac0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac10:	d100      	bne.n	800ac14 <memcpy+0xc>
 800ac12:	4770      	bx	lr
 800ac14:	b510      	push	{r4, lr}
 800ac16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac1e:	4291      	cmp	r1, r2
 800ac20:	d1f9      	bne.n	800ac16 <memcpy+0xe>
 800ac22:	bd10      	pop	{r4, pc}

0800ac24 <memset>:
 800ac24:	4402      	add	r2, r0
 800ac26:	4603      	mov	r3, r0
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d100      	bne.n	800ac2e <memset+0xa>
 800ac2c:	4770      	bx	lr
 800ac2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac32:	e7f9      	b.n	800ac28 <memset+0x4>

0800ac34 <_free_r>:
 800ac34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac36:	2900      	cmp	r1, #0
 800ac38:	d048      	beq.n	800accc <_free_r+0x98>
 800ac3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac3e:	9001      	str	r0, [sp, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f1a1 0404 	sub.w	r4, r1, #4
 800ac46:	bfb8      	it	lt
 800ac48:	18e4      	addlt	r4, r4, r3
 800ac4a:	f000 f8ad 	bl	800ada8 <__malloc_lock>
 800ac4e:	4a20      	ldr	r2, [pc, #128]	; (800acd0 <_free_r+0x9c>)
 800ac50:	9801      	ldr	r0, [sp, #4]
 800ac52:	6813      	ldr	r3, [r2, #0]
 800ac54:	4615      	mov	r5, r2
 800ac56:	b933      	cbnz	r3, 800ac66 <_free_r+0x32>
 800ac58:	6063      	str	r3, [r4, #4]
 800ac5a:	6014      	str	r4, [r2, #0]
 800ac5c:	b003      	add	sp, #12
 800ac5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac62:	f000 b8a7 	b.w	800adb4 <__malloc_unlock>
 800ac66:	42a3      	cmp	r3, r4
 800ac68:	d90b      	bls.n	800ac82 <_free_r+0x4e>
 800ac6a:	6821      	ldr	r1, [r4, #0]
 800ac6c:	1862      	adds	r2, r4, r1
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	bf04      	itt	eq
 800ac72:	681a      	ldreq	r2, [r3, #0]
 800ac74:	685b      	ldreq	r3, [r3, #4]
 800ac76:	6063      	str	r3, [r4, #4]
 800ac78:	bf04      	itt	eq
 800ac7a:	1852      	addeq	r2, r2, r1
 800ac7c:	6022      	streq	r2, [r4, #0]
 800ac7e:	602c      	str	r4, [r5, #0]
 800ac80:	e7ec      	b.n	800ac5c <_free_r+0x28>
 800ac82:	461a      	mov	r2, r3
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	b10b      	cbz	r3, 800ac8c <_free_r+0x58>
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d9fa      	bls.n	800ac82 <_free_r+0x4e>
 800ac8c:	6811      	ldr	r1, [r2, #0]
 800ac8e:	1855      	adds	r5, r2, r1
 800ac90:	42a5      	cmp	r5, r4
 800ac92:	d10b      	bne.n	800acac <_free_r+0x78>
 800ac94:	6824      	ldr	r4, [r4, #0]
 800ac96:	4421      	add	r1, r4
 800ac98:	1854      	adds	r4, r2, r1
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	6011      	str	r1, [r2, #0]
 800ac9e:	d1dd      	bne.n	800ac5c <_free_r+0x28>
 800aca0:	681c      	ldr	r4, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	6053      	str	r3, [r2, #4]
 800aca6:	4421      	add	r1, r4
 800aca8:	6011      	str	r1, [r2, #0]
 800acaa:	e7d7      	b.n	800ac5c <_free_r+0x28>
 800acac:	d902      	bls.n	800acb4 <_free_r+0x80>
 800acae:	230c      	movs	r3, #12
 800acb0:	6003      	str	r3, [r0, #0]
 800acb2:	e7d3      	b.n	800ac5c <_free_r+0x28>
 800acb4:	6825      	ldr	r5, [r4, #0]
 800acb6:	1961      	adds	r1, r4, r5
 800acb8:	428b      	cmp	r3, r1
 800acba:	bf04      	itt	eq
 800acbc:	6819      	ldreq	r1, [r3, #0]
 800acbe:	685b      	ldreq	r3, [r3, #4]
 800acc0:	6063      	str	r3, [r4, #4]
 800acc2:	bf04      	itt	eq
 800acc4:	1949      	addeq	r1, r1, r5
 800acc6:	6021      	streq	r1, [r4, #0]
 800acc8:	6054      	str	r4, [r2, #4]
 800acca:	e7c7      	b.n	800ac5c <_free_r+0x28>
 800accc:	b003      	add	sp, #12
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	200037fc 	.word	0x200037fc

0800acd4 <_malloc_r>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	1ccd      	adds	r5, r1, #3
 800acd8:	f025 0503 	bic.w	r5, r5, #3
 800acdc:	3508      	adds	r5, #8
 800acde:	2d0c      	cmp	r5, #12
 800ace0:	bf38      	it	cc
 800ace2:	250c      	movcc	r5, #12
 800ace4:	2d00      	cmp	r5, #0
 800ace6:	4606      	mov	r6, r0
 800ace8:	db01      	blt.n	800acee <_malloc_r+0x1a>
 800acea:	42a9      	cmp	r1, r5
 800acec:	d903      	bls.n	800acf6 <_malloc_r+0x22>
 800acee:	230c      	movs	r3, #12
 800acf0:	6033      	str	r3, [r6, #0]
 800acf2:	2000      	movs	r0, #0
 800acf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf6:	f000 f857 	bl	800ada8 <__malloc_lock>
 800acfa:	4921      	ldr	r1, [pc, #132]	; (800ad80 <_malloc_r+0xac>)
 800acfc:	680a      	ldr	r2, [r1, #0]
 800acfe:	4614      	mov	r4, r2
 800ad00:	b99c      	cbnz	r4, 800ad2a <_malloc_r+0x56>
 800ad02:	4f20      	ldr	r7, [pc, #128]	; (800ad84 <_malloc_r+0xb0>)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	b923      	cbnz	r3, 800ad12 <_malloc_r+0x3e>
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f000 f83c 	bl	800ad88 <_sbrk_r>
 800ad10:	6038      	str	r0, [r7, #0]
 800ad12:	4629      	mov	r1, r5
 800ad14:	4630      	mov	r0, r6
 800ad16:	f000 f837 	bl	800ad88 <_sbrk_r>
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	d123      	bne.n	800ad66 <_malloc_r+0x92>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6033      	str	r3, [r6, #0]
 800ad22:	4630      	mov	r0, r6
 800ad24:	f000 f846 	bl	800adb4 <__malloc_unlock>
 800ad28:	e7e3      	b.n	800acf2 <_malloc_r+0x1e>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	1b5b      	subs	r3, r3, r5
 800ad2e:	d417      	bmi.n	800ad60 <_malloc_r+0x8c>
 800ad30:	2b0b      	cmp	r3, #11
 800ad32:	d903      	bls.n	800ad3c <_malloc_r+0x68>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	441c      	add	r4, r3
 800ad38:	6025      	str	r5, [r4, #0]
 800ad3a:	e004      	b.n	800ad46 <_malloc_r+0x72>
 800ad3c:	6863      	ldr	r3, [r4, #4]
 800ad3e:	42a2      	cmp	r2, r4
 800ad40:	bf0c      	ite	eq
 800ad42:	600b      	streq	r3, [r1, #0]
 800ad44:	6053      	strne	r3, [r2, #4]
 800ad46:	4630      	mov	r0, r6
 800ad48:	f000 f834 	bl	800adb4 <__malloc_unlock>
 800ad4c:	f104 000b 	add.w	r0, r4, #11
 800ad50:	1d23      	adds	r3, r4, #4
 800ad52:	f020 0007 	bic.w	r0, r0, #7
 800ad56:	1ac2      	subs	r2, r0, r3
 800ad58:	d0cc      	beq.n	800acf4 <_malloc_r+0x20>
 800ad5a:	1a1b      	subs	r3, r3, r0
 800ad5c:	50a3      	str	r3, [r4, r2]
 800ad5e:	e7c9      	b.n	800acf4 <_malloc_r+0x20>
 800ad60:	4622      	mov	r2, r4
 800ad62:	6864      	ldr	r4, [r4, #4]
 800ad64:	e7cc      	b.n	800ad00 <_malloc_r+0x2c>
 800ad66:	1cc4      	adds	r4, r0, #3
 800ad68:	f024 0403 	bic.w	r4, r4, #3
 800ad6c:	42a0      	cmp	r0, r4
 800ad6e:	d0e3      	beq.n	800ad38 <_malloc_r+0x64>
 800ad70:	1a21      	subs	r1, r4, r0
 800ad72:	4630      	mov	r0, r6
 800ad74:	f000 f808 	bl	800ad88 <_sbrk_r>
 800ad78:	3001      	adds	r0, #1
 800ad7a:	d1dd      	bne.n	800ad38 <_malloc_r+0x64>
 800ad7c:	e7cf      	b.n	800ad1e <_malloc_r+0x4a>
 800ad7e:	bf00      	nop
 800ad80:	200037fc 	.word	0x200037fc
 800ad84:	20003800 	.word	0x20003800

0800ad88 <_sbrk_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	; (800ada4 <_sbrk_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f7 fde8 	bl	8002968 <_sbrk>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_sbrk_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_sbrk_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20004ab0 	.word	0x20004ab0

0800ada8 <__malloc_lock>:
 800ada8:	4801      	ldr	r0, [pc, #4]	; (800adb0 <__malloc_lock+0x8>)
 800adaa:	f000 b809 	b.w	800adc0 <__retarget_lock_acquire_recursive>
 800adae:	bf00      	nop
 800adb0:	20004ab8 	.word	0x20004ab8

0800adb4 <__malloc_unlock>:
 800adb4:	4801      	ldr	r0, [pc, #4]	; (800adbc <__malloc_unlock+0x8>)
 800adb6:	f000 b804 	b.w	800adc2 <__retarget_lock_release_recursive>
 800adba:	bf00      	nop
 800adbc:	20004ab8 	.word	0x20004ab8

0800adc0 <__retarget_lock_acquire_recursive>:
 800adc0:	4770      	bx	lr

0800adc2 <__retarget_lock_release_recursive>:
 800adc2:	4770      	bx	lr

0800adc4 <_init>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	bf00      	nop
 800adc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adca:	bc08      	pop	{r3}
 800adcc:	469e      	mov	lr, r3
 800adce:	4770      	bx	lr

0800add0 <_fini>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	bf00      	nop
 800add4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add6:	bc08      	pop	{r3}
 800add8:	469e      	mov	lr, r3
 800adda:	4770      	bx	lr
